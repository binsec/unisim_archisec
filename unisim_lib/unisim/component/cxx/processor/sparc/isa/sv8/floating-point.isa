/*
 *  Copyright (c) 2007-2020,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without 
 *  modification, are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, 
 *     this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific 
 *     prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 *  ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY 
 *  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND 
 *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Yves Lhuillier (yves.lhuillier@cea.fr)
 */

/* Floating-point Operate (FPop) Instructions */

/* Convert Integer to Floating-point Instructions */

op fitos( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b011000100[9]:rs2[5] )

fitos.disasm = {
  sink << "fitos " << DisasmFPR(rs2) << ", " << DisasmFPR(rd);
}

fitos.execute = {
  typedef typename ARCH::F32 F32;
  typedef typename ARCH::S32 S32;
  
  S32 src = cpu.GetS32(rs2);
  cpu.SetF32(rd, F32( src ));
}

op fitod( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b011001000[9]:rs2[5] )

fitod.disasm = {
  sink << "fitod " << DisasmFPR(rs2 & -2) << ", " << DisasmFPR(rd & -2);
}

fitod.execute = {
  typedef typename ARCH::F64 F64;
  typedef typename ARCH::S32 S32;
  
  S32 src = cpu.GetS32(rs2);
  cpu.SetF64(rd & -2, F64( src ));
}

op fitoq( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b011001100[9]:rs2[5] )

fitoq.disasm = {
  sink << "fitoq " << DisasmFPR(rs2 & -4) << ", " << DisasmFPR(rd & -4);
}

/* Convert Floating-point to Integer Instructions */

op fstoi( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b011010001[9]:rs2[5] )

fstoi.disasm = {
  sink << "fstoi " << DisasmFPR(rs2) << ", " << DisasmFPR(rd);
}

fstoi.execute = {
  typedef typename ARCH::F32 F32;
  typedef typename ARCH::S32 S32;

  F32 src = cpu.GetF32(rs2);
  cpu.SetS32( rd, S32( src ) );
}

op fdtoi( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b011010010[9]:rs2[5] )

fdtoi.disasm = {
  sink << "fdtoi " << DisasmFPR(rs2 & -2) << ", " << DisasmFPR(rd & -2);
}

fdtoi.execute = {
  typedef typename ARCH::F64 F64;
  typedef typename ARCH::S32 S32;

  F64 src = cpu.GetF64(rs2 & -2);
  cpu.SetS32( rd, S32( src ) );
}

op fqtoi( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b011010011[9]:rs2[5] )

fqtoi.disasm = {
  sink << "fqtoi " << DisasmFPR(rs2 & -4) << ", " << DisasmFPR(rd & -4);
}

/* Convert Between Floating-point Formats Instructions */

op fstod( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b011001001[9]:rs2[5] )

fstod.disasm = {
  sink << "fstod " << DisasmFPR(rs2) << ", " << DisasmFPR(rd & -2);
}

fstod.execute = {
  typedef typename ARCH::F32 F32;
  typedef typename ARCH::F64 F64;

  F32 src = cpu.GetF32(rs2);
  cpu.SetF64(rd & -2, F64( src ));
}

op fstoq( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b011001101[9]:rs2[5] )

fstoq.disasm = {
  sink << "fstoq " << DisasmFPR(rs2) << ", " << DisasmFPR(rd & -4);
}

op fdtos( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b011000110[9]:rs2[5] )

fdtos.disasm = {
  sink << "fdtos " << DisasmFPR(rs2 & -2) << ", " << DisasmFPR(rd);
}

fdtos.execute = {
  typedef typename ARCH::F32 F32;
  typedef typename ARCH::F64 F64;

  F64 src = cpu.GetF64(rs2 & -2);
  cpu.SetF32(rd, F32( src ));
}

op fdtoq( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b011001110[9]:rs2[5] )

fdtoq.disasm = {
  sink << "fdtoq " << DisasmFPR(rs2 & -2) << ", " << DisasmFPR(rd & -4);
}

op fqtos( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b011000111[9]:rs2[5] )

fqtos.disasm = {
  sink << "fqtos " << DisasmFPR(rs2 & -4) << ", " << DisasmFPR(rd);
}

op fqtod( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b011001011[9]:rs2[5] )

fqtod.disasm = {
  sink << "fqtod " << DisasmFPR(rs2 & -4) << ", " << DisasmFPR(rd & -2);
}

/* Floating-point Move Instructions */

op fmovs( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b000000001[9]:rs2[5] )

fmovs.disasm = {
  sink << "fmovs " << DisasmFPR(rs2) << ", " << DisasmFPR(rd);
}

fmovs.execute = {
  cpu.SetF32(rd, cpu.GetF32(rs2));
}

op fnegs( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b000000101[9]:rs2[5] )

fnegs.disasm = {
  sink << "fnegs " << DisasmFPR(rs2) << ", " << DisasmFPR(rd);
}

fnegs.execute = {
  cpu.SetF32(rd, -cpu.GetF32(rs2));
}

op fabss( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b000001001[9]:rs2[5] )

fabss.disasm = {
  sink << "fabss " << DisasmFPR(rs2) << ", " << DisasmFPR(rd);
}

fabss.execute = {
  typedef typename ARCH::F32 F32;

  cpu.SetF32(rd, cpu.Test(cpu.GetF32(rs2) >= F32(0)) ? cpu.GetF32(rs2) : -cpu.GetF32(rs2));
}

/* Floating-point Square Root Instructions */

op fsqrts( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b000101001[9]:rs2[5] )

fsqrts.disasm = {
  sink << "fsqrts " << DisasmFPR(rs2) << ", " << DisasmFPR(rd);
}

op fsqrtd( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b000101010[9]:rs2[5] )

fsqrtd.disasm = {
  sink << "fsqrtd " << DisasmFPR(rs2 & -2) << ", " << DisasmFPR(rd & -2);
}

op fsqrtq( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b000101011[9]:rs2[5] )

fsqrtq.disasm = {
  sink << "fsqrtq " << DisasmFPR(rs2 & -4) << ", " << DisasmFPR(rd & -4);
}

/* Floating-point Add and Substract Instructions */

op fadds( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b001000001[9]:rs2[5] )

fadds.disasm = {
  sink << "fadds " << DisasmFPR(rs1) << ", " << DisasmFPR(rs2) << ", " << DisasmFPR(rd);
}

fadds.execute = {
  cpu.SetF32(rd, cpu.GetF32(rs1) + cpu.GetF32(rs2));
}

op faddd( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b001000010[9]:rs2[5] )

faddd.disasm = {
  sink << "faddd " << DisasmFPR(rs1 & -2) << ", " << DisasmFPR(rs2 & -2) << ", " << DisasmFPR(rd & -2);
}

faddd.execute = {
  cpu.SetF64(rd & -2, cpu.GetF64(rs1 & -2) + cpu.GetF64(rs2 & -2));
}

op faddq( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b001000011[9]:rs2[5] )

faddq.disasm = {
  sink << "faddq " << DisasmFPR(rs1 & -4) << ", " << DisasmFPR(rs2 & -4) << ", " << DisasmFPR(rd & -4);
}

op fsubs( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b001000101[9]:rs2[5] )

fsubs.disasm = {
  sink << "fsubs " << DisasmFPR(rs1) << ", " << DisasmFPR(rs2) << ", " << DisasmFPR(rd);
}

fsubs.execute = {
  cpu.SetF32(rd, cpu.GetF32(rs1) - cpu.GetF32(rs2));
}

op fsubd( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b001000110[9]:rs2[5] )

fsubd.disasm = {
  sink << "fsubd " << DisasmFPR(rs1 & -2) << ", " << DisasmFPR(rs2 & -2) << ", " << DisasmFPR(rd & -2);
}

fsubd.execute = {
  cpu.SetF64(rd & -2, cpu.GetF64(rs1 & -2) - cpu.GetF64(rs2 & -2));
}

op fsubq( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b001000111[9]:rs2[5] )

fsubq.disasm = {
  sink << "fsubq " << DisasmFPR(rs1 & -4) << ", " << DisasmFPR(rs2 & -4) << ", " << DisasmFPR(rd & -4);
}

/* Floating-point Multiply and Divide Instructions */

op fmuls( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b001001001[9]:rs2[5] )

fmuls.disasm = {
  sink << "fmuls " << DisasmFPR(rs1) << ", " << DisasmFPR(rs2) << ", " << DisasmFPR(rd);
}

fmuls.execute = {
  cpu.SetF32(rd, cpu.GetF32(rs1) * cpu.GetF32(rs2));
}

op fmuld( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b001001010[9]:rs2[5] )

fmuld.disasm = {
  sink << "fmuld " << DisasmFPR(rs1 & -2) << ", " << DisasmFPR(rs2 & -2) << ", " << DisasmFPR(rd & -2);
}

fmuld.execute = {
  cpu.SetF64(rd & -2, cpu.GetF64(rs1 & -2) * cpu.GetF64(rs2 & -2));
}

op fmulq( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b001001011[9]:rs2[5] )

fmulq.disasm = {
  sink << "fmulq " << DisasmFPR(rs1 & -4) << ", " << DisasmFPR(rs2 & -4) << ", " << DisasmFPR(rd & -4);
}

op fsmuld( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b001101001[9]:rs2[5] )

fsmuld.disasm = {
  sink << "fsmuld " << DisasmFPR(rs1) << ", " << DisasmFPR(rs2) << ", " << DisasmFPR(rd & -2);
}

fsmuld.execute = {
  typedef typename ARCH::F32 F32;
  typedef typename ARCH::F64 F64;

  F32 op1 = cpu.GetF32(rs1), op2 = cpu.GetF32(rs2);
  cpu.SetF64(rd & -2, F64( op1 ) * F64( op2 ));
}

op fdmulq( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b001101110[9]:rs2[5] )

fdmulq.disasm = {
  sink << "fdmulq " << DisasmFPR(rs1 & -2) << ", " << DisasmFPR(rs2 & -2) << ", " << DisasmFPR(rd & -4);
}

op fdivs( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b001001101[9]:rs2[5] )

fdivs.disasm = {
  sink << "fdivs " << DisasmFPR(rs1) << ", " << DisasmFPR(rs2) << ", " << DisasmFPR(rd);
}

fdivs.execute = {
  cpu.SetF32(rd, cpu.GetF32(rs1) / cpu.GetF32(rs2));
}

op fdivd( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b001001110[9]:rs2[5] )

fdivd.disasm = {
  sink << "fdivd " << DisasmFPR(rs1 & -2) << ", " << DisasmFPR(rs2 & -2) << ", " << DisasmFPR(rd & -2);
}

fdivd.execute = {
  cpu.SetF64(rd & -2, cpu.GetF64(rs1 & -2) / cpu.GetF64(rs2 & -2));
}

op fdivq( 0b10[2]:rd[5]:0b110100[6]:rs1[5]:0b001001111[9]:rs2[5] )

fdivq.disasm = {
  sink << "fdivq " << DisasmFPR(rs1 & -4) << ", " << DisasmFPR(rs2 & -4) << ", " << DisasmFPR(rd & -4);
}

/* Floating-point Compare Instructions */

op fcmps( 0b10[2]:rd[5]:0b110101[6]:rs1[5]:0b001010001[9]:rs2[5] )

fcmps.disasm = {
  sink << "fcmps " << DisasmFPR(rs1) << ", " << DisasmFPR(rs2);
}

fcmps.execute = {
  typedef typename ARCH::F32 F32;
  typedef typename ARCH::BOOL BOOL;

  F32 a = cpu.GetF32(rs1), b = cpu.GetF32(rs2);
  BOOL le = a <= b, ge = a >= b;
  cpu.SetFCC(not le, not ge);
}

op fcmpd( 0b10[2]:rd[5]:0b110101[6]:rs1[5]:0b001010010[9]:rs2[5] )

fcmpd.disasm = {
  sink << "fcmpd " << DisasmFPR(rs1 & -2) << ", " << DisasmFPR(rs2 & -2);
}

fcmpd.execute = {
  typedef typename ARCH::F64 F64;
  typedef typename ARCH::BOOL BOOL;

  F64 a = cpu.GetF64(rs1), b = cpu.GetF64(rs2);
  BOOL le = a <= b, ge = a >= b;
  cpu.SetFCC(not le, not ge);
}

op fcmpq( 0b10[2]:rd[5]:0b110101[6]:rs1[5]:0b001010011[9]:rs2[5] )

fcmpq.disasm = {
  sink << "fcmpq " << DisasmFPR(rs1 & -4) << ", " << DisasmFPR(rs2 & -4);
}

op fcmpes( 0b10[2]:rd[5]:0b110101[6]:rs1[5]:0b001010101[9]:rs2[5] )

fcmpes.disasm = {
  sink << "fcmpes " << DisasmFPR(rs1) << ", " << DisasmFPR(rs2);
}

fcmpes.execute = {
  typedef typename ARCH::F32 F32;
  typedef typename ARCH::BOOL BOOL;

  F32 a = cpu.GetF32(rs1), b = cpu.GetF32(rs2);
  BOOL le = a <= b, ge = a >= b;

  if (cpu.Test(not le and not ge))
    cpu.Abort( Trap_t::fp_exception );
  
  cpu.SetFCC(not le, not ge);
}

op fcmped( 0b10[2]:rd[5]:0b110101[6]:rs1[5]:0b001010110[9]:rs2[5] )

fcmped.disasm = {
  sink << "fcmped " << DisasmFPR(rs1 & -2) << ", " << DisasmFPR(rs2 & -2);
}

fcmped.execute = {
  typedef typename ARCH::F64 F64;
  typedef typename ARCH::BOOL BOOL;

  F64 a = cpu.GetF64(rs1), b = cpu.GetF64(rs2);
  BOOL le = a <= b, ge = a >= b;

  if (cpu.Test(not le and not ge))
    cpu.Abort( Trap_t::fp_exception );
  
  cpu.SetFCC(not le, not ge);
}

op fcmpeq( 0b10[2]:rd[5]:0b110101[6]:rs1[5]:0b001010111[9]:rs2[5] )

fcmpeq.disasm = {
  sink << "fcmpeq " << DisasmFPR(rs1 & -4) << ", " << DisasmFPR(rs2 & -4);
}
