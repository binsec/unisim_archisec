/*
 *  Copyright (c) 2007-2020,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without 
 *  modification, are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, 
 *     this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific 
 *     prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 *  ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY 
 *  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND 
 *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Yves Lhuillier (yves.lhuillier@cea.fr)
 */

/* Load Integer Instructions */

op ldsb( 0b11[2]:rd[5]:0[1]:a[1]:0b1001[4]:rs1[5]:0[1]:asi[8]:rs2[5] );

ldsb.disasm = {
  sink << "ldsb" << (a ? "a" : "") << " [" << DisasmRRAddress(rs1, rs2) << "]";
  if (a) sink << "" << DisasmHex(asi);
  sink << ", " << DisasmGPR(rd);
};

ldsb.execute = {
  typedef typename ARCH::S8 S8;
  typedef typename ARCH::U32 U32;

  if (a and not cpu.IsSuper())
    cpu.Abort( Trap_t::privileged_instruction );
  
  cpu.SetGPR(rd, U32(cpu.MemRead(S8(), a ? ASI::Code(asi) : cpu.rqasi(), cpu.GetGPR(rs1) + cpu.GetGPR(rs2))));
};

op ldsbi( 0b11[2]:rd[5]:0b001001[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

ldsbi.disasm = {
  sink << "ldsb [" << DisasmRIAddress(rs1, simm13) << "], " << DisasmGPR(rd);
};

ldsbi.execute = {
  typedef typename ARCH::S8 S8;
  typedef typename ARCH::U32 U32;
  
  cpu.SetGPR(rd, U32(cpu.MemRead(S8(), cpu.rqasi(), cpu.GetGPR(rs1) + U32(simm13))));
};

op ldsh ( 0b11[2]:rd[5]:0[1]:a[1]:0b1010[4]:rs1[5]:0[1]:asi[8]:rs2[5] );

ldsh.disasm = {
  sink << "ldsh" << (a ? "a" : "") << " [" << DisasmRRAddress(rs1, rs2) << "]";
  if (a) sink << "" << DisasmHex(asi);
  sink << ", " << DisasmGPR(rd);
};

ldsh.execute = {
  typedef typename ARCH::S16 S16;
  typedef typename ARCH::U32 U32;

  if (a and not cpu.IsSuper())
     cpu.Abort( Trap_t::privileged_instruction );
  cpu.SetGPR(rd, U32(cpu.MemRead(S16(), a ? ASI::Code(asi) : cpu.rqasi(), cpu.GetGPR(rs1) + cpu.GetGPR(rs2))));
};

op ldshi( 0b11[2]:rd[5]:0b001010[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

ldshi.disasm = {
  sink << "ldsh [" << DisasmRIAddress(rs1, simm13) << "], " << DisasmGPR(rd);
};

ldshi.execute = {
  typedef typename ARCH::S16 S16;
  typedef typename ARCH::U32 U32;
  
  cpu.SetGPR(rd, U32(cpu.MemRead(S16(), cpu.rqasi(), cpu.GetGPR(rs1) + U32(simm13))));
};

op ldub ( 0b11[2]:rd[5]:0[1]:a[1]:0b0001[4]:rs1[5]:0[1]:asi[8]:rs2[5] );

ldub.disasm = {
  sink << "ldub" << (a ? "a" : "") << " [" << DisasmRRAddress(rs1, rs2) << "]";
  if (a) sink << "" << DisasmHex(asi);
  sink << ", " << DisasmGPR(rd);
};

ldub.execute = {
  typedef typename ARCH::U8 U8;
  typedef typename ARCH::U32 U32;
  
  if (a and not cpu.IsSuper())
     cpu.Abort( Trap_t::privileged_instruction );
  cpu.SetGPR(rd, U32(cpu.MemRead(U8(), a ? ASI::Code(asi) : cpu.rqasi(), cpu.GetGPR(rs1) + cpu.GetGPR(rs2))));
};

op ldubi( 0b11[2]:rd[5]:0b000001[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

ldubi.disasm = {
  sink << "ldub [" << DisasmRIAddress(rs1, simm13) << "], " << DisasmGPR(rd);
};

ldubi.execute = {
  typedef typename ARCH::U8 U8;
  typedef typename ARCH::U32 U32;
  
  cpu.SetGPR(rd, U32(cpu.MemRead(U8(), cpu.rqasi(), cpu.GetGPR(rs1) + U32(simm13))));
};

op lduh ( 0b11[2]:rd[5]:0[1]:a[1]:0b0010[4]:rs1[5]:0[1]:asi[8]:rs2[5] );

lduh.disasm = {
  sink << "lduh" << (a ? "a" : "") << " [" << DisasmRRAddress(rs1, rs2) << "]";
  if (a) sink << "" << DisasmHex(asi);
  sink << ", " << DisasmGPR(rd);
};

lduh.execute = {
  typedef typename ARCH::U16 U16;
  typedef typename ARCH::U32 U32;

  if (a and not cpu.IsSuper())
     cpu.Abort( Trap_t::privileged_instruction );
  cpu.SetGPR(rd, U32(cpu.MemRead(U16(), a ? ASI::Code(asi) : cpu.rqasi(), cpu.GetGPR(rs1) + cpu.GetGPR(rs2))));
};

op lduhi( 0b11[2]:rd[5]:0b000010[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

lduhi.disasm = {
  sink << "lduh [" << DisasmRIAddress(rs1, simm13) << "], " << DisasmGPR(rd);
};

lduhi.execute = {
  typedef typename ARCH::U16 U16;
  typedef typename ARCH::U32 U32;
  
  cpu.SetGPR(rd, U32(cpu.MemRead(U16(), cpu.rqasi(), cpu.GetGPR(rs1) + U32(simm13))));
};

op ld( 0b11[2]:rd[5]:0[1]:a[1]:0b0000[4]:rs1[5]:0[1]:asi[8]:rs2[5] );

ld.disasm = {
  sink << "ld" << (a ? "a" : "") << " [" << DisasmRRAddress(rs1, rs2) << "]";
  if (a) sink << "" << DisasmHex(asi);
  sink << ", " << DisasmGPR(rd);
};

ld.execute = {
  typedef typename ARCH::U32 U32;
  
  if (a and not cpu.IsSuper())
     cpu.Abort( Trap_t::privileged_instruction );
  cpu.SetGPR(rd, cpu.MemRead(U32(), a ? ASI::Code(asi) : cpu.rqasi(), cpu.GetGPR(rs1) + cpu.GetGPR(rs2)));
};

op ldi( 0b11[2]:rd[5]:0b000000[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

ldi.disasm = {
  sink << "ld [" << DisasmRIAddress(rs1, simm13) << "], " << DisasmGPR(rd);
};

ldi.execute = {
  typedef typename ARCH::U32 U32;
  
  cpu.SetGPR(rd, cpu.MemRead(U32(), cpu.rqasi(), cpu.GetGPR(rs1) + U32(simm13)));
};

op ldd ( 0b11[2]:rd[5]:0[1]:a[1]:0b0011[4]:rs1[5]:0[1]:asi[8]:rs2[5] );

ldd.disasm = {
  sink << "ldd" << (a ? "a" : "") << " [" << DisasmRRAddress(rs1, rs2) << "]";
  if (a) sink << "" << DisasmHex(asi);
  sink << ", " << DisasmGPR(rd & -2);
};

ldd.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  
  if (a and not cpu.IsSuper())
     cpu.Abort( Trap_t::privileged_instruction );
  U64 value = cpu.MemRead(U64(), a ? ASI::Code(asi) : cpu.rqasi(), cpu.GetGPR(rs1) + cpu.GetGPR(rs2));
  cpu.SetGPR((rd & -2) | 0, U32(value >> 32));
  cpu.SetGPR((rd & -2) | 1, U32(value >> 0));
};

op lddi( 0b11[2]:rd[5]:0b000011[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

lddi.disasm = {
  sink << "ldd [" << DisasmRIAddress(rs1, simm13) << "], " << DisasmGPR(rd & -2);
};

lddi.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  
  U64 value = cpu.MemRead(U64(), cpu.rqasi(), cpu.GetGPR(rs1) + U32(simm13));
  cpu.SetGPR((rd & -2) | 0, U32(value >> 32));
  cpu.SetGPR((rd & -2) | 1, U32(value >> 0));
};

/* Load Floating-point Instructions */

op ldf( 0b11[2]:rd[5]:0b100000[6]:rs1[5]:0b0[1]:?[8]:rs2[5] );

ldf.disasm = {
  sink << "ld [" << DisasmRRAddress(rs1, rs2) << "], " << DisasmFPR(rd);
};

ldf.execute = {
  typedef typename ARCH::F32 F32;

  cpu.SetF32(rd, cpu.FMemRead(F32(), cpu.rqasi(), cpu.GetGPR(rs1) + cpu.GetGPR(rs2)));
};

op ldfi( 0b11[2]:rd[5]:0b100000[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

ldfi.disasm = {
  sink << "ld [" << DisasmRIAddress(rs1, simm13) << "], " << DisasmFPR(rd);
};

ldfi.execute = {
  typedef typename ARCH::F32 F32;
  typedef typename ARCH::U32 U32;
                
  cpu.SetF32(rd, cpu.FMemRead(F32(), cpu.rqasi(), cpu.GetGPR(rs1) + U32(simm13)));
};

op lddf( 0b11[2]:rd[5]:0b100011[6]:rs1[5]:0b0[1]:?[8]:rs2[5] );

lddf.disasm = {
  sink << "ldd [" << DisasmRRAddress(rs1, rs2) << "], " << DisasmFPR(rd & -2);
};

lddf.execute = {
  typedef typename ARCH::F64 F64;

  cpu.SetF64(rd & -2, cpu.FMemRead(F64(), cpu.rqasi(), cpu.GetGPR(rs1) + cpu.GetGPR(rs2)));
};

op lddfi( 0b11[2]:rd[5]:0b100011[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

lddfi.disasm = {
  sink << "ldd [" << DisasmRIAddress(rs1, simm13) << "], " << DisasmFPR(rd & -2);
};

lddfi.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::F64 F64;
                
  cpu.SetF64(rd & -2, cpu.FMemRead(F64(), cpu.rqasi(), cpu.GetGPR(rs1) + U32(simm13)));
};

op ldfsr( 0b11[2]:rd[5]:0b100001[6]:rs1[5]:0b0[1]:?[8]:rs2[5] );

ldfsr.disasm = {
  sink << "ld [" << DisasmRRAddress(rs1, rs2) << "], %fsr";
};

ldfsr.execute = {
  typedef typename ARCH::U32 U32;

  cpu.SetFSR( cpu.MemRead(U32(), cpu.rqasi(), cpu.GetGPR(rs1) + cpu.GetGPR(rs2)) );
};

op ldfsri( 0b11[2]:rd[5]:0b100001[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

ldfsri.disasm = {
  sink << "ldd [" << DisasmRIAddress(rs1, simm13) << "], %fsr";
};

ldfsri.execute = {
  typedef typename ARCH::U32 U32;
                
  cpu.SetFSR( cpu.MemRead(U32(), cpu.rqasi(), cpu.GetGPR(rs1) + U32(simm13)) );
};

/* Load Coprocessor Instructions */

op ldc( 0b11[2]:rd[5]:0b110000[6]:rs1[5]:0b0[1]:?[8]:rs2[5] );

ldc.disasm = {
  sink << "ld [" << DisasmRRAddress(rs1, rs2) << "], " << DisasmCPR(rd);
};

op ldci( 0b11[2]:rd[5]:0b110000[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

ldci.disasm = {
  sink << "ld [" << DisasmRIAddress(rs1, simm13) << "], " << DisasmCPR(rd);
};

op lddc( 0b11[2]:rd[5]:0b110011[6]:rs1[5]:0b0[1]:?[8]:rs2[5] );

lddc.disasm = {
  sink << "ldd [" << DisasmRRAddress(rs1, rs2) << "], " << DisasmCPR(rd & -2);
};

op lddci( 0b11[2]:rd[5]:0b110011[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

lddci.disasm = {
  sink << "ldd [" << DisasmRIAddress(rs1, simm13) << "], " << DisasmCPR(rd & -2);
};

op ldcsr( 0b11[2]:rd[5]:0b110001[6]:rs1[5]:0b0[1]:?[8]:rs2[5] );

ldcsr.disasm = {
  sink << "ld [" << DisasmRRAddress(rs1, rs2) << "], %csr";
};

op ldcsri( 0b11[2]:rd[5]:0b110001[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

ldcsri.disasm = {
  sink << "ldd [" << DisasmRIAddress(rs1, simm13) << "], %csr";
};

/* Store Integer Instructions */

op stb( 0b11[2]:rd[5]:0[1]:a[1]:0b0101[4]:rs1[5]:0[1]:asi[8]:rs2[5] );

stb.disasm = {
  sink << "stb" << (a ? "a" : "") << " " << DisasmGPR(rd) << ", [" << DisasmRRAddress(rs1, rs2) << "]";
  if (a) sink << "" << DisasmHex(asi);
};

stb.execute = {
  typedef typename ARCH::U8 U8;

  if (a and not cpu.IsSuper())
     cpu.Abort( Trap_t::privileged_instruction );
  cpu.MemWrite( a ? ASI::Code(asi) : cpu.rqasi(), cpu.GetGPR(rs1) + cpu.GetGPR(rs2), U8(cpu.GetGPR(rd)) );
};

op stbi( 0b11[2]:rd[5]:0b000101[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

stbi.disasm = {
  sink << "stb " << DisasmGPR(rd) << ", [" << DisasmRIAddress(rs1, simm13) << "]";
};

stbi.execute = {
  typedef typename ARCH::U8 U8;
  typedef typename ARCH::U32 U32;

  cpu.MemWrite( cpu.rqasi(), cpu.GetGPR(rs1) + U32(simm13), U8(cpu.GetGPR(rd)) );
};

op sth ( 0b11[2]:rd[5]:0[1]:a[1]:0b0110[4]:rs1[5]:0[1]:asi[8]:rs2[5] );

sth.disasm = {
  sink << "sth" << (a ? "a" : "") << " " << DisasmGPR(rd) << ", [" << DisasmRRAddress(rs1, rs2) << "]";
  if (a) sink << "" << DisasmHex(asi);
};

sth.execute = {
  typedef typename ARCH::U16 U16;

  if (a and not cpu.IsSuper())
     cpu.Abort( Trap_t::privileged_instruction );
  cpu.MemWrite( a ? ASI::Code(asi) : cpu.rqasi(), cpu.GetGPR(rs1) + cpu.GetGPR(rs2), U16(cpu.GetGPR(rd)) );
};

op sthi( 0b11[2]:rd[5]:0b000110[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

sthi.disasm = {
  sink << "sth " << DisasmGPR(rd) << ", [" << DisasmRIAddress(rs1, simm13) << "]";
};

sthi.execute = {
  typedef typename ARCH::U16 U16;
  typedef typename ARCH::U32 U32;

  cpu.MemWrite( cpu.rqasi(), cpu.GetGPR(rs1) + U32(simm13), U16(cpu.GetGPR(rd)) );
};

op st( 0b11[2]:rd[5]:0[1]:a[1]:0b0100[4]:rs1[5]:0[1]:asi[8]:rs2[5] );

st.disasm = {
  sink << "st" << (a ? "a" : "") << " " << DisasmGPR(rd) << ", [" << DisasmRRAddress(rs1, rs2) << "]";
  if (a) sink << "" << DisasmHex(asi);
};

st.execute = {
  if (a and not cpu.IsSuper())
     cpu.Abort( Trap_t::privileged_instruction );
  cpu.MemWrite( a ? ASI::Code(asi) : cpu.rqasi(), cpu.GetGPR(rs1) + cpu.GetGPR(rs2), cpu.GetGPR(rd) );
};

op sti( 0b11[2]:rd[5]:0b000100[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

sti.disasm = {
  sink << "st " << DisasmGPR(rd) << ", [" << DisasmRIAddress(rs1, simm13) << "]";
};

sti.execute = {
  typedef typename ARCH::U32 U32;
  
  cpu.MemWrite( cpu.rqasi(), cpu.GetGPR(rs1) + U32(simm13), cpu.GetGPR(rd) );
};

op std( 0b11[2]:rd[5]:0[1]:a[1]:0b0111[4]:rs1[5]:0b0[1]:asi[8]:rs2[5] );

std.disasm = {
  sink << "std" << (a ? "a" : "") << " " << DisasmGPR(rd & -2) << ", [" << DisasmRRAddress(rs1, rs2) << "]";
  if (a) sink << "" << DisasmHex(asi);
};

std.execute = {
  typedef typename ARCH::U64 U64;
  
  if (a and not cpu.IsSuper())
     cpu.Abort( Trap_t::privileged_instruction );
  cpu.MemWrite( a ? ASI::Code(asi) : cpu.rqasi(), cpu.GetGPR(rs1) + cpu.GetGPR(rs2),
                    U64(cpu.GetGPR((rd & -2) | 0)) << 32 | U64(cpu.GetGPR((rd & -2) | 1)) << 0 );
};

op stdi( 0b11[2]:rd[5]:0b000111[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

stdi.disasm = {
  sink << "std " << DisasmGPR(rd & -2) << ", [" << DisasmRIAddress(rs1, simm13) << "]";
};

stdi.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  
  cpu.MemWrite( cpu.rqasi(), cpu.GetGPR(rs1) + U32(simm13),
                    U64(cpu.GetGPR((rd & -2) | 0)) << 32 | U64(cpu.GetGPR((rd & -2) | 1)) << 0 );
};

/* Store Floating-point Instructions */

op stf( 0b11[2]:rd[5]:0b100100[6]:rs1[5]:0b0[1]:?[8]:rs2[5] );

stf.disasm = {
  sink << "st " << DisasmFPR(rd) << ", [" << DisasmRRAddress(rs1, rs2) << "]";
};

stf.execute = {
  cpu.FMemWrite( cpu.rqasi(), cpu.GetGPR(rs1) + cpu.GetGPR(rs2), cpu.GetF32(rd) );
};

op stfi( 0b11[2]:rd[5]:0b100100[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

stfi.disasm = {
  sink << "st " << DisasmFPR(rd) << ", [" << DisasmRIAddress(rs1, simm13) << "]";
};

stfi.execute = {
  typedef typename ARCH::U32 U32;

  cpu.FMemWrite( cpu.rqasi(), cpu.GetGPR(rs1) + U32(simm13), cpu.GetF32(rd) );
};

op stdf( 0b11[2]:rd[5]:0b100111[6]:rs1[5]:0b0[1]:?[8]:rs2[5] );

stdf.disasm = {
  sink << "std " << DisasmFPR(rd & -2) << ", [" << DisasmRRAddress(rs1, rs2) << "]";
};

stdf.execute = {
  cpu.FMemWrite( cpu.rqasi(), cpu.GetGPR(rs1) + cpu.GetGPR(rs2), cpu.GetF64(rd) );
};

op stdfi( 0b11[2]:rd[5]:0b100111[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

stdfi.disasm = {
  sink << "std " << DisasmFPR(rd & -2) << ", [" << DisasmRIAddress(rs1, simm13) << "]";
};

stdfi.execute = {
  typedef typename ARCH::U32 U32;

  cpu.FMemWrite( cpu.rqasi(), cpu.GetGPR(rs1) + U32(simm13), cpu.GetF64(rd) );
};

op stfsr( 0b11[2]:rd[5]:0b100101[6]:rs1[5]:0b0[1]:?[8]:rs2[5] );

stfsr.disasm = {
  sink << "st %fsr, [" << DisasmRRAddress(rs1, rs2) << "]";
};

stfsr.execute = {
  cpu.MemWrite( cpu.rqasi(), cpu.GetGPR(rs1) + cpu.GetGPR(rs2), cpu.GetFSR() );
};

op stfsri( 0b11[2]:rd[5]:0b100101[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

stfsri.disasm = {
  sink << "st %fsr, [" << DisasmRIAddress(rs1, simm13) << "]";
};

stfsri.execute = {
  typedef typename ARCH::U32 U32;

  cpu.MemWrite( cpu.rqasi(), cpu.GetGPR(rs1) + U32(simm13), cpu.GetFSR() );
};

op stdfq( 0b11[2]:rd[5]:0b100110[6]:rs1[5]:0b0[1]:?[8]:rs2[5] );

stdfq.disasm = {
  sink << "st %fq, [" << DisasmRRAddress(rs1, rs2) << "]";
};

op stdfqi( 0b11[2]:rd[5]:0b100110[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

stdfqi.disasm = {
  sink << "st %fq, [" << DisasmRIAddress(rs1, simm13) << "]";
};

/* Store Coprocessor Instructions */

op stc( 0b11[2]:rd[5]:0b110100[6]:rs1[5]:0b0[1]:?[8]:rs2[5] );

stc.disasm = {
  sink << "st " << DisasmCPR(rd) << ", [" << DisasmRRAddress(rs1, rs2) << "]";
};

op stci( 0b11[2]:rd[5]:0b110100[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

stci.disasm = {
  sink << "st " << DisasmCPR(rd) << ", [" << DisasmRIAddress(rs1, simm13) << "]";
};

op stdc( 0b11[2]:rd[5]:0b110111[6]:rs1[5]:0b0[1]:?[8]:rs2[5] );

stdc.disasm = {
  sink << "std " << DisasmCPR(rd & -2) << ", [" << DisasmRRAddress(rs1, rs2) << "]";
};

op stdci( 0b11[2]:rd[5]:0b110111[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

stdci.disasm = {
  sink << "std " << DisasmCPR(rd & -2) << ", [" << DisasmRIAddress(rs1, simm13) << "]";
};

op stcsr( 0b11[2]:rd[5]:0b110101[6]:rs1[5]:0b0[1]:?[8]:rs2[5] );

stcsr.disasm = {
  sink << "st %csr, [" << DisasmRRAddress(rs1, rs2) << "]";
};

op stcsri( 0b11[2]:rd[5]:0b110101[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

stcsri.disasm = {
  sink << "st %csr, [" << DisasmRIAddress(rs1, simm13) << "]";
};

op stdcq( 0b11[2]:rd[5]:0b110110[6]:rs1[5]:0b0[1]:?[8]:rs2[5] );

stdcq.disasm = {
  sink << "st %cq, [" << DisasmRRAddress(rs1, rs2) << "]";
};

op stdcqi( 0b11[2]:rd[5]:0b110110[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

stdcqi.disasm = {
  sink << "st %cq, [" << DisasmRIAddress(rs1, simm13) << "]";
};

/* Atomic Load-Store Unsigned Byte Instructions */

op ldstub ( 0b11[2]:rd[5]:0[1]:a[1]:0b1101[4]:rs1[5]:0[1]:asi[8]:rs2[5] );

ldstub.disasm = {
  sink << "ldstub" << (a ? "a" : "") << " [" << DisasmRRAddress(rs1, rs2) << "]";
  if (a) sink << "" << DisasmHex(asi);
  sink << ", " << DisasmGPR(rd);
};

ldstub.execute = {
  typedef typename ARCH::U8 U8;
  typedef typename ARCH::U32 U32;

  if (a and not cpu.IsSuper())
     cpu.Abort( Trap_t::privileged_instruction );
  U32 address = cpu.GetGPR(rs1) + cpu.GetGPR(rs2);
  U8 res = cpu.MemRead(U8(), a ? ASI::Code(asi) : cpu.rqasi(), address );
  cpu.MemWrite( cpu.rqasi(), address, U8(0xff) );
  
  cpu.SetGPR(rd, U32(res));
};

op ldstubi( 0b11[2]:rd[5]:0b001101[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

ldstubi.disasm = {
  sink << "ldstub [" << DisasmRIAddress(rs1, simm13) << "], " << DisasmGPR(rd);
};

ldstubi.execute = {
  typedef typename ARCH::U8 U8;
  typedef typename ARCH::U32 U32;

  U32 address = cpu.GetGPR(rs1) + U32(simm13);
  U8 res = cpu.MemRead(U8(), cpu.rqasi(), address );
  cpu.MemWrite( cpu.rqasi(), address, U8(0xff) );
  
  cpu.SetGPR(rd, U32(res));
};

/* SWAP Register with Memory Instruction */

op swap ( 0b11[2]:rd[5]:0[1]:a[1]:0b1111[4]:rs1[5]:0[1]:asi[8]:rs2[5] );

swap.disasm = {
  sink << "swap" << (a ? "a" : "") << " [" << DisasmRRAddress(rs1, rs2) << "]";
  if (a) sink << "" << DisasmHex(asi);
  sink << ", " << DisasmGPR(rd);
};

swap.execute = {
  typedef typename ARCH::U32 U32;

  if (a and not cpu.IsSuper())
     cpu.Abort( Trap_t::privileged_instruction );
  U32 address = cpu.GetGPR(rs1) + cpu.GetGPR(rs2);
  ASI wasi = a ? ASI::Code(asi) : cpu.rqasi();
  U32 res = cpu.MemRead(U32(), wasi, address );
  cpu.MemWrite( wasi, address, cpu.GetGPR(rd) );
  cpu.SetGPR(rd, res);
};

op swapi( 0b11[2]:rd[5]:0b001111[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

swapi.disasm = {
  sink << "swap [" << DisasmRIAddress(rs1, simm13) << "], " << DisasmGPR(rd);
};

swapi.execute = {
  typedef typename ARCH::U32 U32;

  U32 address = cpu.GetGPR(rs1) + U32(simm13);
  U32 res = cpu.MemRead(U32(), cpu.rqasi(), address );
  cpu.MemWrite( cpu.rqasi(), address, cpu.GetGPR(rd) );
  cpu.SetGPR(rd, res);
};

/* Flush Instruction Memory */

op flush( 0b10[2]:?[5]:0b111011[6]:rs1[5]:0b0[1]:?[8]:rs2[5] );

flush.disasm = {
  sink << "flush " << DisasmRRAddress(rs1, rs2);
};

op flushi( 0b10[2]:?[5]:0b111011[6]:rs1[5]:0b1[1]:sext<32> simm13[13] );

flushi.disasm = {
  sink << "flush " << DisasmRIAddress(rs1, simm13);
};

