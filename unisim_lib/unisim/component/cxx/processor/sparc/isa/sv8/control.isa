/*
 *  Copyright (c) 2007-2020,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without 
 *  modification, are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, 
 *     this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific 
 *     prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 *  ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY 
 *  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND 
 *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Yves Lhuillier (yves.lhuillier@cea.fr)
 */

/* SAVE and RESTORE Instructions */

op save( 0b10[2]:rd[5]:0b111100[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

save.disasm = {
  sink << "save " << DisasmGPR(rs1) << ", " << DisasmGPR(rs2) << ", " << DisasmGPR(rd);
}

save.execute = {
  typedef typename ARCH::U32 U32;

  if (cpu.InvalidWindow( -1 ))
    cpu.Abort( Trap_t::window_overflow );

  U32 result = cpu.GetGPR(rs1) + cpu.GetGPR(rs2);
  cpu.RotateWindow( -1 );
  cpu.SetGPR(rd, result);
}

op savei( 0b10[2]:rd[5]:0b111100[6]:rs1[5]:0b1[1]:sext<32> simm13[13] )

savei.disasm = {
  sink << "save " << DisasmRIAddress(rs1, simm13) << ", " << DisasmGPR(rd);
}

savei.execute = {
  typedef typename ARCH::U32 U32;

  if (cpu.InvalidWindow( -1 ))
    cpu.Abort( Trap_t::window_overflow );
  
  U32 result = cpu.GetGPR(rs1) + U32(simm13);
  cpu.RotateWindow( -1 );
  cpu.SetGPR(rd, result);
}

op restore( 0b10[2]:rd[5]:0b111101[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

restore.disasm = {
  sink << "restore " << DisasmGPR(rs1) << ", " << DisasmGPR(rs2) << ", " << DisasmGPR(rd);
}

restore.execute = {
  typedef typename ARCH::U32 U32;

  if (cpu.InvalidWindow( +1 ))
    cpu.Abort( Trap_t::window_underflow );
  
  U32 result = cpu.GetGPR(rs1) + cpu.GetGPR(rs2);
  cpu.RotateWindow( +1 );
  cpu.SetGPR(rd, result);
}

op restorei( 0b10[2]:rd[5]:0b111101[6]:rs1[5]:0b1[1]:sext<32> simm13[13] )

restorei.disasm = {
  sink << "restore " << DisasmGPR(rs1) << ", " << DisasmHex(simm13,"-") << ", " << DisasmGPR(rd);
}

restorei.execute = {
  typedef typename ARCH::U32 U32;

  if (cpu.InvalidWindow( +1 ))
    cpu.Abort( Trap_t::window_underflow );
  
  U32 result = cpu.GetGPR(rs1) + U32(simm13);
  cpu.RotateWindow( +1 );
  cpu.SetGPR(rd, result);
}

/* Branch on Integer Condition Codes Instructions */

op ba( 0b00[2]:annul[1]:0b1000[4]:0b010[3]:shl<2> sext disp22[22] )

ba.disasm = {
  sink << "ba" << (annul ? ",a " : " ") << "" << DisasmHex(pc + disp22);
};

ba.execute = {
  cpu.DelayBranch(cpu.GetPC() + typename ARCH::U32(disp22), ARCH::B_JMP);
  cpu.SetAnnul(annul);
};

op bc( 0b00[2]:annul[1]:cond[4]:0b010[3]:shl<2> sext<32> disp22[22] );

bc.disasm = {
  sink << "b" << DisasmCondition(cond) << (annul ? ",a " : " ") << "" << DisasmHex(this->GetAddr() + disp22);
};

bc.execute = {
  if (cpu.TestCondition(cond))
    cpu.DelayBranch(cpu.GetPC() + typename ARCH::U32(disp22), ARCH::B_JMP);
  else
    cpu.SetAnnul(annul);
};

/* Branch on Floating-point Condition Codes Instructions */

op fba( 0b00[2]:annul[1]:0b1000[4]:0b110[3]:shl<2> sext<32> disp22[22] );

fba.disasm = {
  sink << "fba" << (annul ? ",a" : "") << " " << "" << DisasmHex(pc + disp22);
};

fba.execute = {
  cpu.DelayBranch(cpu.GetPC() + typename ARCH::U32(disp22), ARCH::B_JMP);
  cpu.SetAnnul(annul);
};
  
op fbc(   0b00[2]:annul[1]:cond[4]:0b110[3]:shl<2> sext<32> disp22[22] );

fbc.disasm = {
  sink << "fb" << DisasmFCondition(cond) << (annul ? ",a " : " ") << "" << DisasmHex(pc + disp22);
};

fbc.execute = {
  if (cpu.TestFCondition(cond))
    cpu.DelayBranch(cpu.GetPC() + typename ARCH::U32(disp22), ARCH::B_JMP);
  else
    cpu.SetAnnul(annul);
}

/* Branch on Coprocessor Condition Codes Instructions */

op cba( 0b00[2]:annul[1]:0b1000[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cba.disasm = {
  sink << "cba" << (annul ? ",a" : "") << " " << "" << DisasmHex(pc + disp22);
}

op cbn( 0b00[2]:annul[1]:0b0000[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cbn.disasm = {
  sink << "cbn" << (annul ? ",a" : "") << " " << "" << DisasmHex(pc + disp22);
}

op cb3( 0b00[2]:annul[1]:0b0111[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb3.disasm = {
  sink << "cb3" << (annul ? ",a" : "") << " " << "" << DisasmHex(pc + disp22);
}

op cb2( 0b00[2]:annul[1]:0b0110[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb2.disasm = {
  sink << "cb2" << (annul ? ",a" : "") << " " << "" << DisasmHex(pc + disp22);
}

op cb23( 0b00[2]:annul[1]:0b0101[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb23.disasm = {
  sink << "cb23" << (annul ? ",a" : "") << " " << "" << DisasmHex(pc + disp22);
}

op cb1( 0b00[2]:annul[1]:0b0100[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb1.disasm = {
  sink << "cb1" << (annul ? ",a" : "") << " " << "" << DisasmHex(pc + disp22);
}

op cb13( 0b00[2]:annul[1]:0b0011[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb13.disasm = {
  sink << "cb13" << (annul ? ",a" : "") << " " << "" << DisasmHex(pc + disp22);
}

op cb12( 0b00[2]:annul[1]:0b0010[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb12.disasm = {
  sink << "cb12" << (annul ? ",a" : "") << " " << "" << DisasmHex(pc + disp22);
}

op cb123( 0b00[2]:annul[1]:0b0001[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb123.disasm = {
  sink << "cb123" << (annul ? ",a" : "") << " " << "" << DisasmHex(pc + disp22);
}

op cb0( 0b00[2]:annul[1]:0b1001[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb0.disasm = {
  sink << "cb0" << (annul ? ",a" : "") << " " << "" << DisasmHex(pc + disp22);
}

op cb03( 0b00[2]:annul[1]:0b1010[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb03.disasm = {
  sink << "cb03" << (annul ? ",a" : "") << " " << "" << DisasmHex(pc + disp22);
}

op cb02( 0b00[2]:annul[1]:0b1011[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb02.disasm = {
  sink << "cb02" << (annul ? ",a" : "") << " " << "" << DisasmHex(pc + disp22);
}

op cb023( 0b00[2]:annul[1]:0b1100[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb023.disasm = {
  sink << "cb023" << (annul ? ",a" : "") << " " << "" << DisasmHex(pc + disp22);
}

op cb01( 0b00[2]:annul[1]:0b1101[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb01.disasm = {
  sink << "cb01" << (annul ? ",a" : "") << " " << "" << DisasmHex(pc + disp22);
}

op cb013( 0b00[2]:annul[1]:0b1110[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb013.disasm = {
  sink << "cb013" << (annul ? ",a" : "") << " " << "" << DisasmHex(pc + disp22);
}

op cb012( 0b00[2]:annul[1]:0b1111[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb012.disasm = {
  sink << "cb012" << (annul ? ",a" : "") << " " << "" << DisasmHex(pc + disp22);
}

/* Call and Link Instructions */

op call( 0b01[2]:shl<2> disp30[30] );

call.disasm = {
  sink << "call " << "" << DisasmHex(disp30);
};

call.execute = {
  typedef typename ARCH::U32 U32;

  cpu.DelayBranch( cpu.GetPC() + U32(disp30), ARCH::B_CALL );
  cpu.SetGPR(15, cpu.GetPC());
}

/* Jump and Link Instructions */

op jmpl( 0b10[2]:rd[5]:0b111000[6]:rs1[5]:0b0[1]:asi[8]:rs2[5] )

jmpl.disasm = {
  sink << "jmpl " << DisasmGPR(rs1) << " + " << DisasmGPR(rs2) << ", " << DisasmGPR(rd);
}

jmpl.execute = {
  cpu.DelayBranch( cpu.GetGPR(rs1) + cpu.GetGPR(rs2), rd == 15 ? ARCH::B_CALL : ARCH::B_JMP );
  
  cpu.SetGPR(rd, cpu.GetPC());
}

op jmpli( 0b10[2]:rd[5]:0b111000[6]:rs1[5]:0b1[1]:sext<32> simm13[13] )

jmpli.disasm = {
  sink << "jmpl " << DisasmRIAddress(rs1, simm13) << ", " << DisasmGPR(rd);
}

jmpli.execute = {
  typedef typename ARCH::U32 U32;

  cpu.DelayBranch(cpu.GetGPR(rs1) + U32(simm13), rd == 15 ? ARCH::B_CALL : ARCH::B_JMP);
  cpu.SetGPR(rd, cpu.GetPC());
}

/* Return from Trap Instructions */

op rett( 0b10[2]:?[5]:0b111001[6]:rs1[5]:0b0[1]:asi[8]:rs2[5] )

rett.disasm = {
  sink << "rett " << DisasmGPR(rs1) << " + " << DisasmGPR(rs2);
}

rett.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::BOOL BOOL;

  if (not cpu.IsSuper())
    cpu.Abort( Trap_t::privileged_instruction );
  
  if (cpu.Test(cpu.GetET()))
    cpu.Abort( Trap_t::illegal_instruction );
  
  if (cpu.InvalidWindow( +1 ))
    {
      cpu.StopFetch();
      cpu.Abort( Trap_t::window_underflow );
    }
  
  U32 address = cpu.GetGPR(rs1) + cpu.GetGPR(rs2);
  if (cpu.Test(address & U32(0x3)))
    {
      cpu.StopFetch();
      cpu.Abort( Trap_t::mem_address_not_aligned );
    }
  
  cpu.SetET( BOOL(true) );
  cpu.DelayBranch( address, ARCH::B_JMP );
  cpu.RotateWindow( +1 );
  cpu.SetS( cpu.GetPS() );
}

op retti( 0b10[2]:?[5]:0b111001[6]:rs1[5]:0b1[1]:sext<32> simm13[13] )

retti.disasm = {
  sink << "rett " << DisasmRIAddress(rs1, simm13);
}

retti.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::BOOL BOOL;

  if (not cpu.IsSuper())
    cpu.Abort( Trap_t::privileged_instruction );
  
  if (cpu.Test(cpu.GetET()))
    cpu.Abort( Trap_t::illegal_instruction );
  
  if (cpu.InvalidWindow( +1 ))
    {
      cpu.StopFetch();
      cpu.Abort( Trap_t::window_underflow );
    }
  
  U32 address = cpu.GetGPR(rs1) + U32(simm13);
  if (cpu.Test(address & U32(0x3)))
    {
      cpu.StopFetch();
      cpu.Abort( Trap_t::mem_address_not_aligned );
    }
  
  cpu.SetET( BOOL(true) );
  cpu.DelayBranch( address, ARCH::B_JMP );
  cpu.RotateWindow( +1 );
  cpu.SetS( cpu.GetPS() );
}

/* Trap on Integer Condition Codes Instructions */

op ta( 0b10[2]:?[1]:0b1000[4]:0b111010[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

ta.disasm = {
  sink << "ta " << DisasmGPR(rs1) << " + " << DisasmGPR(rs2);
}

ta.execute = {
  cpu.SWTrap( cpu.GetGPR(rs1) + cpu.GetGPR(rs2) );
}

op tai( 0b10[2]:?[1]:0b1000[4]:0b111010[6]:rs1[5]:0b1[1]:?[6]:imm7[7] )

tai.disasm = {
  sink << "ta " << DisasmGPR(rs1) << " + " << "" << DisasmHex(imm7);
}

tai.execute = {
  typedef typename ARCH::U32 U32;

  cpu.SWTrap( cpu.GetGPR(rs1) + U32(imm7) );
};

op tc( 0b10[2]:?[1]:cond[4]:0b111010[6]:rs1[5]:0b0[1]:?[8]:rs2[5] );

tc.disasm = {
  sink << "t" << DisasmCondition(cond) << " " << DisasmGPR(rs1) << " + " << DisasmGPR(rs2);
};

tc.execute = {
  if (cpu.TestCondition(cond))
    cpu.SWTrap( cpu.GetGPR(rs1) + cpu.GetGPR(rs2) );
};

op tci( 0b10[2]:?[1]:cond[4]:0b111010[6]:rs1[5]:0b1[1]:?[6]:imm7[7] )

tci.disasm = {
  sink << "t" << DisasmCondition(cond) << " " << DisasmGPR(rs1) << " + " << "" << DisasmHex(imm7);
}

tci.execute = {
  typedef typename ARCH::U32 U32;

  if (cpu.TestCondition(cond))
    cpu.SWTrap( cpu.GetGPR(rs1) + U32(imm7) );
}

