#include "unisim/component/cxx/processor/arm/dba/arm64/arm64.hh"

#include <unisim/component/cxx/processor/arm/isa/arm64/decode.hh>
#include <unisim/component/cxx/processor/arm/isa/arm64/disasm.hh>
#include <unisim/util/arithmetic/arithmetic.hh>
#include <iostream>

using unisim::util::arithmetic::RotateRight;
using unisim::util::arithmetic::BitScanReverse;

#include <unisim/component/cxx/processor/arm/isa/arm64/execute.hh>
#include <unisim/component/cxx/processor/arm/isa/execute.hh>

using namespace unisim::component::cxx::processor::arm::isa;
using namespace unisim::component::cxx::processor::arm::isa::arm64;
namespace unisim { namespace component { namespace cxx { namespace processor { namespace arm { namespace dba { namespace arm64 {
template <	typename	ARCH>
Operation<	ARCH>::Operation(CodeType _code, uint64_t _addr, const char *_name)
: name(_name)
, addr(_addr)
, encoding(_code)
{
}

template <	typename	ARCH>
Operation<	ARCH>::~Operation()
{
}

template <	typename	ARCH>
void Operation<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "; Unknown AARCH64 instruction";
}}
template <	typename	ARCH>
void Operation<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.UndefinedInstruction(this);
}}
template <	typename	ARCH>
struct OpMsr : public Operation<	ARCH>
{
	OpMsr(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t op2;
	uint8_t crm;
	uint8_t crn;
	uint8_t op1;
	uint8_t op0;
	typename ARCH::SysReg const* sysreg; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvms_bro : public Operation<	ARCH>
{
	OpStvms_bro(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t rm;
	uint8_t q;
	Vms vms;   Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvms_hro : public Operation<	ARCH>
{
	OpStvms_hro(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t rm;
	uint8_t q;
	Vms vms;   Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvms_sro : public Operation<	ARCH>
{
	OpStvms_sro(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t rm;
	uint8_t q;
	Vms vms;   Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvms_dro : public Operation<	ARCH>
{
	OpStvms_dro(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t rm;
	uint8_t q;
	Vms vms;   Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvms_bro : public Operation<	ARCH>
{
	OpLdvms_bro(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t rm;
	uint8_t q;
	Vms vms;   Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvms_hro : public Operation<	ARCH>
{
	OpLdvms_hro(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t rm;
	uint8_t q;
	Vms vms;   Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvms_sro : public Operation<	ARCH>
{
	OpLdvms_sro(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t rm;
	uint8_t q;
	Vms vms;   Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvms_dro : public Operation<	ARCH>
{
	OpLdvms_dro(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t rm;
	uint8_t q;
	Vms vms;   Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvsl_bro : public Operation<	ARCH>
{
	OpStvsl_bro(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t index0;
	uint8_t regs1;
	uint8_t rm;
	uint8_t regs0;
	uint8_t index1;
	Reject reject;   unsigned index;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvsl_hro : public Operation<	ARCH>
{
	OpStvsl_hro(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t index0;
	uint8_t regs1;
	uint8_t rm;
	uint8_t regs0;
	uint8_t index1;
	Reject reject;   unsigned index;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvsl_sro : public Operation<	ARCH>
{
	OpStvsl_sro(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t index0;
	uint8_t regs1;
	uint8_t rm;
	uint8_t regs0;
	uint8_t index1;
	Reject reject;   unsigned index;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvsl_dro : public Operation<	ARCH>
{
	OpStvsl_dro(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t regs1;
	uint8_t rm;
	uint8_t regs0;
	uint8_t index;
	Reject reject;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvsl_bro : public Operation<	ARCH>
{
	OpLdvsl_bro(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t index0;
	uint8_t regs1;
	uint8_t rm;
	uint8_t regs0;
	uint8_t index1;
	Reject reject;   unsigned index;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvsl_hro : public Operation<	ARCH>
{
	OpLdvsl_hro(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t index0;
	uint8_t regs1;
	uint8_t rm;
	uint8_t regs0;
	uint8_t index1;
	Reject reject;   unsigned index;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvsl_sro : public Operation<	ARCH>
{
	OpLdvsl_sro(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t index0;
	uint8_t regs1;
	uint8_t rm;
	uint8_t regs0;
	uint8_t index1;
	Reject reject;   unsigned index;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvsl_dro : public Operation<	ARCH>
{
	OpLdvsl_dro(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t regs1;
	uint8_t rm;
	uint8_t regs0;
	uint8_t index;
	Reject reject;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvr_bro : public Operation<	ARCH>
{
	OpLdvr_bro(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t regs1;
	uint8_t rm;
	uint8_t regs0;
	uint8_t q;
	Reject reject;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvr_hro : public Operation<	ARCH>
{
	OpLdvr_hro(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t regs1;
	uint8_t rm;
	uint8_t regs0;
	uint8_t q;
	Reject reject;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvr_sro : public Operation<	ARCH>
{
	OpLdvr_sro(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t regs1;
	uint8_t rm;
	uint8_t regs0;
	uint8_t q;
	Reject reject;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvr_dro : public Operation<	ARCH>
{
	OpLdvr_dro(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t regs1;
	uint8_t rm;
	uint8_t regs0;
	uint8_t q;
	Reject reject;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdc_www : public Operation<	ARCH>
{
	OpAdc_www(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdc_xxx : public Operation<	ARCH>
{
	OpAdc_xxx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdcs_www : public Operation<	ARCH>
{
	OpAdcs_www(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdcs_xxx : public Operation<	ARCH>
{
	OpAdcs_xxx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_wsxtb : public Operation<	ARCH>
{
	OpAdd_wsxtb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_wsxth : public Operation<	ARCH>
{
	OpAdd_wsxth(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_wsxtw : public Operation<	ARCH>
{
	OpAdd_wsxtw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_wsxtx : public Operation<	ARCH>
{
	OpAdd_wsxtx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_wuxtb : public Operation<	ARCH>
{
	OpAdd_wuxtb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_wuxth : public Operation<	ARCH>
{
	OpAdd_wuxth(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_wuxtw : public Operation<	ARCH>
{
	OpAdd_wuxtw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_wuxtx : public Operation<	ARCH>
{
	OpAdd_wuxtx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_xsxtb : public Operation<	ARCH>
{
	OpAdd_xsxtb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_xsxth : public Operation<	ARCH>
{
	OpAdd_xsxth(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_xsxtw : public Operation<	ARCH>
{
	OpAdd_xsxtw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_xsxtx : public Operation<	ARCH>
{
	OpAdd_xsxtx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_xuxtb : public Operation<	ARCH>
{
	OpAdd_xuxtb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_xuxth : public Operation<	ARCH>
{
	OpAdd_xuxth(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_xuxtw : public Operation<	ARCH>
{
	OpAdd_xuxtw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_xuxtx : public Operation<	ARCH>
{
	OpAdd_xuxtx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_wi : public Operation<	ARCH>
{
	OpAdd_wi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint16_t imm0;
	uint8_t shl12;
	uint32_t imm;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_xi : public Operation<	ARCH>
{
	OpAdd_xi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint16_t imm0;
	uint8_t shl12;
	uint32_t imm;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_wlsl : public Operation<	ARCH>
{
	OpAdd_wlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_wlsr : public Operation<	ARCH>
{
	OpAdd_wlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_wasr : public Operation<	ARCH>
{
	OpAdd_wasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_xlsl : public Operation<	ARCH>
{
	OpAdd_xlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_xlsr : public Operation<	ARCH>
{
	OpAdd_xlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_xasr : public Operation<	ARCH>
{
	OpAdd_xasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_wsxtb : public Operation<	ARCH>
{
	OpAdds_wsxtb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_wsxth : public Operation<	ARCH>
{
	OpAdds_wsxth(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_wsxtw : public Operation<	ARCH>
{
	OpAdds_wsxtw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_wsxtx : public Operation<	ARCH>
{
	OpAdds_wsxtx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_wuxtb : public Operation<	ARCH>
{
	OpAdds_wuxtb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_wuxth : public Operation<	ARCH>
{
	OpAdds_wuxth(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_wuxtw : public Operation<	ARCH>
{
	OpAdds_wuxtw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_wuxtx : public Operation<	ARCH>
{
	OpAdds_wuxtx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_xsxtb : public Operation<	ARCH>
{
	OpAdds_xsxtb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_xsxth : public Operation<	ARCH>
{
	OpAdds_xsxth(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_xsxtw : public Operation<	ARCH>
{
	OpAdds_xsxtw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_xsxtx : public Operation<	ARCH>
{
	OpAdds_xsxtx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_xuxtb : public Operation<	ARCH>
{
	OpAdds_xuxtb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_xuxth : public Operation<	ARCH>
{
	OpAdds_xuxth(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_xuxtw : public Operation<	ARCH>
{
	OpAdds_xuxtw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_xuxtx : public Operation<	ARCH>
{
	OpAdds_xuxtx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_wi : public Operation<	ARCH>
{
	OpAdds_wi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint16_t imm0;
	uint8_t shl12;
	uint32_t imm;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_xi : public Operation<	ARCH>
{
	OpAdds_xi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint16_t imm0;
	uint8_t shl12;
	uint32_t imm;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_wlsl : public Operation<	ARCH>
{
	OpAdds_wlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_wlsr : public Operation<	ARCH>
{
	OpAdds_wlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_wasr : public Operation<	ARCH>
{
	OpAdds_wasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_xlsl : public Operation<	ARCH>
{
	OpAdds_xlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_xlsr : public Operation<	ARCH>
{
	OpAdds_xlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdds_xasr : public Operation<	ARCH>
{
	OpAdds_xasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdr : public Operation<	ARCH>
{
	OpAdr(CodeType code, uint64_t addr);
	uint8_t rd;
	int32_t imm1;
	uint8_t imm0;
	int32_t imm;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdrp : public Operation<	ARCH>
{
	OpAdrp(CodeType code, uint64_t addr);
	uint8_t rd;
	int32_t imm1;
	uint8_t imm0;
	int32_t imm;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAnd_wi : public Operation<	ARCH>
{
	OpAnd_wi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imms;
	uint8_t immr;
	uint32_t imm;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAnd_xi : public Operation<	ARCH>
{
	OpAnd_xi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imms;
	uint8_t immr;
	uint8_t n;
	uint64_t imm;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAnd_wlsl : public Operation<	ARCH>
{
	OpAnd_wlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAnd_wlsr : public Operation<	ARCH>
{
	OpAnd_wlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAnd_wasr : public Operation<	ARCH>
{
	OpAnd_wasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAnd_wror : public Operation<	ARCH>
{
	OpAnd_wror(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAnd_xlsl : public Operation<	ARCH>
{
	OpAnd_xlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAnd_xlsr : public Operation<	ARCH>
{
	OpAnd_xlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAnd_xasr : public Operation<	ARCH>
{
	OpAnd_xasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAnd_xror : public Operation<	ARCH>
{
	OpAnd_xror(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAnds_wi : public Operation<	ARCH>
{
	OpAnds_wi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imms;
	uint8_t immr;
	uint32_t imm;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAnds_xi : public Operation<	ARCH>
{
	OpAnds_xi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imms;
	uint8_t immr;
	uint8_t n;
	uint64_t imm;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAnds_wlsl : public Operation<	ARCH>
{
	OpAnds_wlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAnds_wlsr : public Operation<	ARCH>
{
	OpAnds_wlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAnds_wasr : public Operation<	ARCH>
{
	OpAnds_wasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAnds_wror : public Operation<	ARCH>
{
	OpAnds_wror(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAnds_xlsl : public Operation<	ARCH>
{
	OpAnds_xlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAnds_xlsr : public Operation<	ARCH>
{
	OpAnds_xlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAnds_xasr : public Operation<	ARCH>
{
	OpAnds_xasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAnds_xror : public Operation<	ARCH>
{
	OpAnds_xror(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAsr_www : public Operation<	ARCH>
{
	OpAsr_www(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAsr_xxx : public Operation<	ARCH>
{
	OpAsr_xxx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpB : public Operation<	ARCH>
{
	OpB(CodeType code, uint64_t addr);
	int32_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpB_cond : public Operation<	ARCH>
{
	OpB_cond(CodeType code, uint64_t addr);
	uint8_t cond;
	int32_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBfm_w : public Operation<	ARCH>
{
	OpBfm_w(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imms;
	uint8_t immr;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBfm_x : public Operation<	ARCH>
{
	OpBfm_x(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imms;
	uint8_t immr;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBic_wlsl : public Operation<	ARCH>
{
	OpBic_wlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBic_wlsr : public Operation<	ARCH>
{
	OpBic_wlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBic_wasr : public Operation<	ARCH>
{
	OpBic_wasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBic_wror : public Operation<	ARCH>
{
	OpBic_wror(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBic_xlsl : public Operation<	ARCH>
{
	OpBic_xlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBic_xlsr : public Operation<	ARCH>
{
	OpBic_xlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBic_xasr : public Operation<	ARCH>
{
	OpBic_xasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBic_xror : public Operation<	ARCH>
{
	OpBic_xror(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBics_wlsl : public Operation<	ARCH>
{
	OpBics_wlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBics_wlsr : public Operation<	ARCH>
{
	OpBics_wlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBics_wasr : public Operation<	ARCH>
{
	OpBics_wasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBics_wror : public Operation<	ARCH>
{
	OpBics_wror(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBics_xlsl : public Operation<	ARCH>
{
	OpBics_xlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBics_xlsr : public Operation<	ARCH>
{
	OpBics_xlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBics_xasr : public Operation<	ARCH>
{
	OpBics_xasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBics_xror : public Operation<	ARCH>
{
	OpBics_xror(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBl : public Operation<	ARCH>
{
	OpBl(CodeType code, uint64_t addr);
	int32_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBlr : public Operation<	ARCH>
{
	OpBlr(CodeType code, uint64_t addr);
	uint8_t rn;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBr : public Operation<	ARCH>
{
	OpBr(CodeType code, uint64_t addr);
	uint8_t rn;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBrk : public Operation<	ARCH>
{
	OpBrk(CodeType code, uint64_t addr);
	uint16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCbnz_wlit : public Operation<	ARCH>
{
	OpCbnz_wlit(CodeType code, uint64_t addr);
	uint8_t rt;
	int32_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCbnz_xlit : public Operation<	ARCH>
{
	OpCbnz_xlit(CodeType code, uint64_t addr);
	uint8_t rt;
	int32_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCbz_wlit : public Operation<	ARCH>
{
	OpCbz_wlit(CodeType code, uint64_t addr);
	uint8_t rt;
	int32_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCbz_xlit : public Operation<	ARCH>
{
	OpCbz_xlit(CodeType code, uint64_t addr);
	uint8_t rt;
	int32_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCcmn_wi : public Operation<	ARCH>
{
	OpCcmn_wi(CodeType code, uint64_t addr);
	uint8_t v;
	uint8_t c;
	uint8_t z;
	uint8_t n;
	uint8_t rn;
	uint8_t cond;
	uint8_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCcmn_xi : public Operation<	ARCH>
{
	OpCcmn_xi(CodeType code, uint64_t addr);
	uint8_t v;
	uint8_t c;
	uint8_t z;
	uint8_t n;
	uint8_t rn;
	uint8_t cond;
	uint8_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCcmn_w : public Operation<	ARCH>
{
	OpCcmn_w(CodeType code, uint64_t addr);
	uint8_t v;
	uint8_t c;
	uint8_t z;
	uint8_t n;
	uint8_t rn;
	uint8_t cond;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCcmn_x : public Operation<	ARCH>
{
	OpCcmn_x(CodeType code, uint64_t addr);
	uint8_t v;
	uint8_t c;
	uint8_t z;
	uint8_t n;
	uint8_t rn;
	uint8_t cond;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCcmp_wi : public Operation<	ARCH>
{
	OpCcmp_wi(CodeType code, uint64_t addr);
	uint8_t v;
	uint8_t c;
	uint8_t z;
	uint8_t n;
	uint8_t rn;
	uint8_t cond;
	uint8_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCcmp_xi : public Operation<	ARCH>
{
	OpCcmp_xi(CodeType code, uint64_t addr);
	uint8_t v;
	uint8_t c;
	uint8_t z;
	uint8_t n;
	uint8_t rn;
	uint8_t cond;
	uint8_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCcmp_w : public Operation<	ARCH>
{
	OpCcmp_w(CodeType code, uint64_t addr);
	uint8_t v;
	uint8_t c;
	uint8_t z;
	uint8_t n;
	uint8_t rn;
	uint8_t cond;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCcmp_x : public Operation<	ARCH>
{
	OpCcmp_x(CodeType code, uint64_t addr);
	uint8_t v;
	uint8_t c;
	uint8_t z;
	uint8_t n;
	uint8_t rn;
	uint8_t cond;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpClrex : public Operation<	ARCH>
{
	OpClrex(CodeType code, uint64_t addr);
	uint8_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCls_w : public Operation<	ARCH>
{
	OpCls_w(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCls_x : public Operation<	ARCH>
{
	OpCls_x(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpClz_w : public Operation<	ARCH>
{
	OpClz_w(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpClz_x : public Operation<	ARCH>
{
	OpClz_x(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCsel_w : public Operation<	ARCH>
{
	OpCsel_w(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t cond;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCsel_x : public Operation<	ARCH>
{
	OpCsel_x(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t cond;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCsinc_w : public Operation<	ARCH>
{
	OpCsinc_w(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t cond;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCsinc_x : public Operation<	ARCH>
{
	OpCsinc_x(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t cond;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCsinv_w : public Operation<	ARCH>
{
	OpCsinv_w(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t cond;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCsinv_x : public Operation<	ARCH>
{
	OpCsinv_x(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t cond;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCsneg_w : public Operation<	ARCH>
{
	OpCsneg_w(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t cond;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCsneg_x : public Operation<	ARCH>
{
	OpCsneg_x(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t cond;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpDcps1 : public Operation<	ARCH>
{
	OpDcps1(CodeType code, uint64_t addr);
	uint16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpDcps2 : public Operation<	ARCH>
{
	OpDcps2(CodeType code, uint64_t addr);
	uint16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpDcps3 : public Operation<	ARCH>
{
	OpDcps3(CodeType code, uint64_t addr);
	uint16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpDrps : public Operation<	ARCH>
{
	OpDrps(CodeType code, uint64_t addr);
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpEon_wlsl : public Operation<	ARCH>
{
	OpEon_wlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpEon_wlsr : public Operation<	ARCH>
{
	OpEon_wlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpEon_wasr : public Operation<	ARCH>
{
	OpEon_wasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpEon_wror : public Operation<	ARCH>
{
	OpEon_wror(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpEon_xlsl : public Operation<	ARCH>
{
	OpEon_xlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpEon_xlsr : public Operation<	ARCH>
{
	OpEon_xlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpEon_xasr : public Operation<	ARCH>
{
	OpEon_xasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpEon_xror : public Operation<	ARCH>
{
	OpEon_xror(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpEor_wi : public Operation<	ARCH>
{
	OpEor_wi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imms;
	uint8_t immr;
	uint32_t imm;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpEor_xi : public Operation<	ARCH>
{
	OpEor_xi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imms;
	uint8_t immr;
	uint8_t n;
	uint64_t imm;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpEor_wlsl : public Operation<	ARCH>
{
	OpEor_wlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpEor_wlsr : public Operation<	ARCH>
{
	OpEor_wlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpEor_wasr : public Operation<	ARCH>
{
	OpEor_wasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpEor_wror : public Operation<	ARCH>
{
	OpEor_wror(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpEor_xlsl : public Operation<	ARCH>
{
	OpEor_xlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpEor_xlsr : public Operation<	ARCH>
{
	OpEor_xlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpEor_xasr : public Operation<	ARCH>
{
	OpEor_xasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpEor_xror : public Operation<	ARCH>
{
	OpEor_xror(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpEret : public Operation<	ARCH>
{
	OpEret(CodeType code, uint64_t addr);
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpExtr_w : public Operation<	ARCH>
{
	OpExtr_w(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imms;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpExtr_x : public Operation<	ARCH>
{
	OpExtr_x(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imms;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpHlt : public Operation<	ARCH>
{
	OpHlt(CodeType code, uint64_t addr);
	uint16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpHvc : public Operation<	ARCH>
{
	OpHvc(CodeType code, uint64_t addr);
	uint16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdar_w : public Operation<	ARCH>
{
	OpLdar_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdar_x : public Operation<	ARCH>
{
	OpLdar_x(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdarb_w : public Operation<	ARCH>
{
	OpLdarb_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdarh_w : public Operation<	ARCH>
{
	OpLdarh_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdaxp_w : public Operation<	ARCH>
{
	OpLdaxp_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdaxp_x : public Operation<	ARCH>
{
	OpLdaxp_x(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdaxr_w : public Operation<	ARCH>
{
	OpLdaxr_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdaxr_x : public Operation<	ARCH>
{
	OpLdaxr_x(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdaxrb_w : public Operation<	ARCH>
{
	OpLdaxrb_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdaxrh_w : public Operation<	ARCH>
{
	OpLdaxrh_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdp_w : public Operation<	ARCH>
{
	OpLdp_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	int16_t imm;
	uint8_t am;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdp_x : public Operation<	ARCH>
{
	OpLdp_x(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	int16_t imm;
	uint8_t am;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdpsw_xxi : public Operation<	ARCH>
{
	OpLdpsw_xxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	int16_t imm;
	uint8_t am;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_wxi : public Operation<	ARCH>
{
	OpLdr_wxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t am;
	int16_t imm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_wuo : public Operation<	ARCH>
{
	OpLdr_wuo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_xxi : public Operation<	ARCH>
{
	OpLdr_xxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t am;
	int16_t imm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_xuo : public Operation<	ARCH>
{
	OpLdr_xuo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_wlit : public Operation<	ARCH>
{
	OpLdr_wlit(CodeType code, uint64_t addr);
	uint8_t rt;
	int32_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_xlit : public Operation<	ARCH>
{
	OpLdr_xlit(CodeType code, uint64_t addr);
	uint8_t rt;
	int32_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_wxwu : public Operation<	ARCH>
{
	OpLdr_wxwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_wxxu : public Operation<	ARCH>
{
	OpLdr_wxxu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	char const* format;   uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_wxws : public Operation<	ARCH>
{
	OpLdr_wxws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_wxxs : public Operation<	ARCH>
{
	OpLdr_wxxs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_xxwu : public Operation<	ARCH>
{
	OpLdr_xxwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_xxxu : public Operation<	ARCH>
{
	OpLdr_xxxu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	char const* format;   uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_xxws : public Operation<	ARCH>
{
	OpLdr_xxws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_xxxs : public Operation<	ARCH>
{
	OpLdr_xxxs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrb_wxi : public Operation<	ARCH>
{
	OpLdrb_wxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t am;
	int16_t imm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrb_wuo : public Operation<	ARCH>
{
	OpLdrb_wuo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrb_wxwu : public Operation<	ARCH>
{
	OpLdrb_wxwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrb_wxxu : public Operation<	ARCH>
{
	OpLdrb_wxxu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	char const* format;   uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrb_wxws : public Operation<	ARCH>
{
	OpLdrb_wxws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrb_wxxs : public Operation<	ARCH>
{
	OpLdrb_wxxs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrh_wxi : public Operation<	ARCH>
{
	OpLdrh_wxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t am;
	int16_t imm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrh_wuo : public Operation<	ARCH>
{
	OpLdrh_wuo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrh_wxwu : public Operation<	ARCH>
{
	OpLdrh_wxwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrh_wxxu : public Operation<	ARCH>
{
	OpLdrh_wxxu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	char const* format;   uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrh_wxws : public Operation<	ARCH>
{
	OpLdrh_wxws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrh_wxxs : public Operation<	ARCH>
{
	OpLdrh_wxxs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsb_wxi : public Operation<	ARCH>
{
	OpLdrsb_wxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t am;
	int16_t imm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsb_wuo : public Operation<	ARCH>
{
	OpLdrsb_wuo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsb_xxi : public Operation<	ARCH>
{
	OpLdrsb_xxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t am;
	int16_t imm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsb_xuo : public Operation<	ARCH>
{
	OpLdrsb_xuo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsb_wxwu : public Operation<	ARCH>
{
	OpLdrsb_wxwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsb_wxxu : public Operation<	ARCH>
{
	OpLdrsb_wxxu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	char const* format;   uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsb_wxws : public Operation<	ARCH>
{
	OpLdrsb_wxws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsb_wxxs : public Operation<	ARCH>
{
	OpLdrsb_wxxs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsb_xxwu : public Operation<	ARCH>
{
	OpLdrsb_xxwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsb_xxxu : public Operation<	ARCH>
{
	OpLdrsb_xxxu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	char const* format;   uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsb_xxws : public Operation<	ARCH>
{
	OpLdrsb_xxws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsb_xxxs : public Operation<	ARCH>
{
	OpLdrsb_xxxs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsh_wxi : public Operation<	ARCH>
{
	OpLdrsh_wxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t am;
	int16_t imm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsh_wuo : public Operation<	ARCH>
{
	OpLdrsh_wuo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsh_xxi : public Operation<	ARCH>
{
	OpLdrsh_xxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t am;
	int16_t imm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsh_xuo : public Operation<	ARCH>
{
	OpLdrsh_xuo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsh_wxwu : public Operation<	ARCH>
{
	OpLdrsh_wxwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsh_wxxu : public Operation<	ARCH>
{
	OpLdrsh_wxxu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	char const* format;   uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsh_wxws : public Operation<	ARCH>
{
	OpLdrsh_wxws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsh_wxxs : public Operation<	ARCH>
{
	OpLdrsh_wxxs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsh_xxwu : public Operation<	ARCH>
{
	OpLdrsh_xxwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsh_xxxu : public Operation<	ARCH>
{
	OpLdrsh_xxxu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	char const* format;   uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsh_xxws : public Operation<	ARCH>
{
	OpLdrsh_xxws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsh_xxxs : public Operation<	ARCH>
{
	OpLdrsh_xxxs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsw_xlit : public Operation<	ARCH>
{
	OpLdrsw_xlit(CodeType code, uint64_t addr);
	uint8_t rt;
	int32_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsw_xxi : public Operation<	ARCH>
{
	OpLdrsw_xxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t am;
	int16_t imm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsw_xuo : public Operation<	ARCH>
{
	OpLdrsw_xuo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsw_xxwu : public Operation<	ARCH>
{
	OpLdrsw_xxwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsw_xxxu : public Operation<	ARCH>
{
	OpLdrsw_xxxu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	char const* format;   uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsw_xxws : public Operation<	ARCH>
{
	OpLdrsw_xxws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdrsw_xxxs : public Operation<	ARCH>
{
	OpLdrsw_xxxs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdtr_wbo : public Operation<	ARCH>
{
	OpLdtr_wbo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	int16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdtr_xbo : public Operation<	ARCH>
{
	OpLdtr_xbo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	int16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdtrb_wbo : public Operation<	ARCH>
{
	OpLdtrb_wbo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	int16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdtrh_wbo : public Operation<	ARCH>
{
	OpLdtrh_wbo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	int16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdtrsb_wbo : public Operation<	ARCH>
{
	OpLdtrsb_wbo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	int16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdtrsb_xbo : public Operation<	ARCH>
{
	OpLdtrsb_xbo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	int16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdtrsh_wbo : public Operation<	ARCH>
{
	OpLdtrsh_wbo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	int16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdtrsh_xbo : public Operation<	ARCH>
{
	OpLdtrsh_xbo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	int16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdtrsw_xbo : public Operation<	ARCH>
{
	OpLdtrsw_xbo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	int16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdxp_w : public Operation<	ARCH>
{
	OpLdxp_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdxp_x : public Operation<	ARCH>
{
	OpLdxp_x(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdxr_w : public Operation<	ARCH>
{
	OpLdxr_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdxr_x : public Operation<	ARCH>
{
	OpLdxr_x(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdxrb_w : public Operation<	ARCH>
{
	OpLdxrb_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdxrh_w : public Operation<	ARCH>
{
	OpLdxrh_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLsl_www : public Operation<	ARCH>
{
	OpLsl_www(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLsl_xxx : public Operation<	ARCH>
{
	OpLsl_xxx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLsr_www : public Operation<	ARCH>
{
	OpLsr_www(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLsr_xxx : public Operation<	ARCH>
{
	OpLsr_xxx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMadd_w : public Operation<	ARCH>
{
	OpMadd_w(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t ra;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMadd_x : public Operation<	ARCH>
{
	OpMadd_x(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t ra;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMov_wi : public Operation<	ARCH>
{
	OpMov_wi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint16_t imm0;
	uint8_t shift;
	int8_t n;
	uint32_t imm;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMov_xi : public Operation<	ARCH>
{
	OpMov_xi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint16_t imm0;
	uint8_t shift;
	int8_t n;
	uint64_t imm;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMovk_w : public Operation<	ARCH>
{
	OpMovk_w(CodeType code, uint64_t addr);
	uint8_t rd;
	uint16_t imm;
	uint8_t shift;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMovk_x : public Operation<	ARCH>
{
	OpMovk_x(CodeType code, uint64_t addr);
	uint8_t rd;
	uint16_t imm;
	uint8_t shift;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMrs : public Operation<	ARCH>
{
	OpMrs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t op2;
	uint8_t crm;
	uint8_t crn;
	uint8_t op1;
	uint8_t op0;
	typename ARCH::SysReg const* sysreg; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMsub_w : public Operation<	ARCH>
{
	OpMsub_w(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t ra;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMsub_x : public Operation<	ARCH>
{
	OpMsub_x(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t ra;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpNop : public Operation<	ARCH>
{
	OpNop(CodeType code, uint64_t addr);
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpOrn_wlsl : public Operation<	ARCH>
{
	OpOrn_wlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpOrn_wlsr : public Operation<	ARCH>
{
	OpOrn_wlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpOrn_wasr : public Operation<	ARCH>
{
	OpOrn_wasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpOrn_wror : public Operation<	ARCH>
{
	OpOrn_wror(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpOrn_xlsl : public Operation<	ARCH>
{
	OpOrn_xlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpOrn_xlsr : public Operation<	ARCH>
{
	OpOrn_xlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpOrn_xasr : public Operation<	ARCH>
{
	OpOrn_xasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpOrn_xror : public Operation<	ARCH>
{
	OpOrn_xror(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpOrr_wi : public Operation<	ARCH>
{
	OpOrr_wi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imms;
	uint8_t immr;
	uint32_t imm;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpOrr_xi : public Operation<	ARCH>
{
	OpOrr_xi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imms;
	uint8_t immr;
	uint8_t n;
	uint64_t imm;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpOrr_wlsl : public Operation<	ARCH>
{
	OpOrr_wlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpOrr_xlsl : public Operation<	ARCH>
{
	OpOrr_xlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpOrr_wlsr : public Operation<	ARCH>
{
	OpOrr_wlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpOrr_xlsr : public Operation<	ARCH>
{
	OpOrr_xlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpOrr_wasr : public Operation<	ARCH>
{
	OpOrr_wasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpOrr_xasr : public Operation<	ARCH>
{
	OpOrr_xasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpOrr_wror : public Operation<	ARCH>
{
	OpOrr_wror(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpOrr_xror : public Operation<	ARCH>
{
	OpOrr_xror(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpPrfm_lit : public Operation<	ARCH>
{
	OpPrfm_lit(CodeType code, uint64_t addr);
	uint8_t rt;
	int32_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpPrfm_xi : public Operation<	ARCH>
{
	OpPrfm_xi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpPrfm_xws : public Operation<	ARCH>
{
	OpPrfm_xws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpPrfm_xwu : public Operation<	ARCH>
{
	OpPrfm_xwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpPrfm_xx : public Operation<	ARCH>
{
	OpPrfm_xx(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t opt;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpPrfum : public Operation<	ARCH>
{
	OpPrfum(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	int16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRbit_w : public Operation<	ARCH>
{
	OpRbit_w(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRbit_x : public Operation<	ARCH>
{
	OpRbit_x(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRet : public Operation<	ARCH>
{
	OpRet(CodeType code, uint64_t addr);
	uint8_t rn;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRev_w : public Operation<	ARCH>
{
	OpRev_w(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRev_x : public Operation<	ARCH>
{
	OpRev_x(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRev16_w : public Operation<	ARCH>
{
	OpRev16_w(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRev16_x : public Operation<	ARCH>
{
	OpRev16_x(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRev32_x : public Operation<	ARCH>
{
	OpRev32_x(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRor_www : public Operation<	ARCH>
{
	OpRor_www(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRor_xxx : public Operation<	ARCH>
{
	OpRor_xxx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSbc_www : public Operation<	ARCH>
{
	OpSbc_www(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSbc_xxx : public Operation<	ARCH>
{
	OpSbc_xxx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSbcs_www : public Operation<	ARCH>
{
	OpSbcs_www(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSbcs_xxx : public Operation<	ARCH>
{
	OpSbcs_xxx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSbfm_w : public Operation<	ARCH>
{
	OpSbfm_w(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imms;
	uint8_t immr;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSbfm_x : public Operation<	ARCH>
{
	OpSbfm_x(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imms;
	uint8_t immr;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSdiv_www : public Operation<	ARCH>
{
	OpSdiv_www(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSdiv_xxx : public Operation<	ARCH>
{
	OpSdiv_xxx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmaddl_xw : public Operation<	ARCH>
{
	OpSmaddl_xw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t ra;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmc : public Operation<	ARCH>
{
	OpSmc(CodeType code, uint64_t addr);
	uint16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpSmsubl_xw : public Operation<	ARCH>
{
	OpSmsubl_xw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t ra;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmulh : public Operation<	ARCH>
{
	OpSmulh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t ra;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStlr_w : public Operation<	ARCH>
{
	OpStlr_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStlr_x : public Operation<	ARCH>
{
	OpStlr_x(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStlrb_w : public Operation<	ARCH>
{
	OpStlrb_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStlrh_w : public Operation<	ARCH>
{
	OpStlrh_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStlxp_w : public Operation<	ARCH>
{
	OpStlxp_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStlxp_x : public Operation<	ARCH>
{
	OpStlxp_x(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStlxr_w : public Operation<	ARCH>
{
	OpStlxr_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStlxr_x : public Operation<	ARCH>
{
	OpStlxr_x(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStlxrb_w : public Operation<	ARCH>
{
	OpStlxrb_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStlxrh_w : public Operation<	ARCH>
{
	OpStlxrh_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStp_w : public Operation<	ARCH>
{
	OpStp_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	int16_t imm;
	uint8_t am;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStp_x : public Operation<	ARCH>
{
	OpStp_x(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	int16_t imm;
	uint8_t am;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_wxi : public Operation<	ARCH>
{
	OpStr_wxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t am;
	int16_t imm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_wuo : public Operation<	ARCH>
{
	OpStr_wuo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_xxi : public Operation<	ARCH>
{
	OpStr_xxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t am;
	int16_t imm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_xuo : public Operation<	ARCH>
{
	OpStr_xuo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_wxwu : public Operation<	ARCH>
{
	OpStr_wxwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_wxxu : public Operation<	ARCH>
{
	OpStr_wxxu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	char const* format;   uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_wxws : public Operation<	ARCH>
{
	OpStr_wxws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_wxxs : public Operation<	ARCH>
{
	OpStr_wxxs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_xxwu : public Operation<	ARCH>
{
	OpStr_xxwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_xxxu : public Operation<	ARCH>
{
	OpStr_xxxu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	char const* format;   uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_xxws : public Operation<	ARCH>
{
	OpStr_xxws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_xxxs : public Operation<	ARCH>
{
	OpStr_xxxs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStrb_wxi : public Operation<	ARCH>
{
	OpStrb_wxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t am;
	int16_t imm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStrb_wuo : public Operation<	ARCH>
{
	OpStrb_wuo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStrb_wxwu : public Operation<	ARCH>
{
	OpStrb_wxwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStrb_wxxu : public Operation<	ARCH>
{
	OpStrb_wxxu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	char const* format;   uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStrb_wxws : public Operation<	ARCH>
{
	OpStrb_wxws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStrb_wxxs : public Operation<	ARCH>
{
	OpStrb_wxxs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStrh_wxi : public Operation<	ARCH>
{
	OpStrh_wxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t am;
	int16_t imm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStrh_wuo : public Operation<	ARCH>
{
	OpStrh_wuo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStrh_wxwu : public Operation<	ARCH>
{
	OpStrh_wxwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStrh_wxxu : public Operation<	ARCH>
{
	OpStrh_wxxu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	char const* format;   uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStrh_wxws : public Operation<	ARCH>
{
	OpStrh_wxws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStrh_wxxs : public Operation<	ARCH>
{
	OpStrh_wxxs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSttr_wbo : public Operation<	ARCH>
{
	OpSttr_wbo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	int16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSttr_xbo : public Operation<	ARCH>
{
	OpSttr_xbo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	int16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSttrb_wbo : public Operation<	ARCH>
{
	OpSttrb_wbo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	int16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSttrh_wbo : public Operation<	ARCH>
{
	OpSttrh_wbo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	int16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStxp_w : public Operation<	ARCH>
{
	OpStxp_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStxp_x : public Operation<	ARCH>
{
	OpStxp_x(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStxr_w : public Operation<	ARCH>
{
	OpStxr_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStxr_x : public Operation<	ARCH>
{
	OpStxr_x(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStxrb_w : public Operation<	ARCH>
{
	OpStxrb_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStxrh_w : public Operation<	ARCH>
{
	OpStxrh_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	uint8_t rs;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_wsxtb : public Operation<	ARCH>
{
	OpSub_wsxtb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_wsxth : public Operation<	ARCH>
{
	OpSub_wsxth(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_wsxtw : public Operation<	ARCH>
{
	OpSub_wsxtw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_wsxtx : public Operation<	ARCH>
{
	OpSub_wsxtx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_wuxtb : public Operation<	ARCH>
{
	OpSub_wuxtb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_wuxth : public Operation<	ARCH>
{
	OpSub_wuxth(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_wuxtw : public Operation<	ARCH>
{
	OpSub_wuxtw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_wuxtx : public Operation<	ARCH>
{
	OpSub_wuxtx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_xsxtb : public Operation<	ARCH>
{
	OpSub_xsxtb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_xsxth : public Operation<	ARCH>
{
	OpSub_xsxth(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_xsxtw : public Operation<	ARCH>
{
	OpSub_xsxtw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_xsxtx : public Operation<	ARCH>
{
	OpSub_xsxtx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_xuxtb : public Operation<	ARCH>
{
	OpSub_xuxtb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_xuxth : public Operation<	ARCH>
{
	OpSub_xuxth(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_xuxtw : public Operation<	ARCH>
{
	OpSub_xuxtw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_xuxtx : public Operation<	ARCH>
{
	OpSub_xuxtx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_wi : public Operation<	ARCH>
{
	OpSub_wi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint16_t imm0;
	uint8_t shl12;
	uint32_t imm;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_xi : public Operation<	ARCH>
{
	OpSub_xi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint16_t imm0;
	uint8_t shl12;
	uint32_t imm;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_wlsl : public Operation<	ARCH>
{
	OpSub_wlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_wlsr : public Operation<	ARCH>
{
	OpSub_wlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_wasr : public Operation<	ARCH>
{
	OpSub_wasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_xlsl : public Operation<	ARCH>
{
	OpSub_xlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_xlsr : public Operation<	ARCH>
{
	OpSub_xlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_xasr : public Operation<	ARCH>
{
	OpSub_xasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_wuxtb : public Operation<	ARCH>
{
	OpSubs_wuxtb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_wuxth : public Operation<	ARCH>
{
	OpSubs_wuxth(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_wuxtw : public Operation<	ARCH>
{
	OpSubs_wuxtw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_wuxtx : public Operation<	ARCH>
{
	OpSubs_wuxtx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_wsxtb : public Operation<	ARCH>
{
	OpSubs_wsxtb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_wsxth : public Operation<	ARCH>
{
	OpSubs_wsxth(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_wsxtw : public Operation<	ARCH>
{
	OpSubs_wsxtw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_wsxtx : public Operation<	ARCH>
{
	OpSubs_wsxtx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_xuxtb : public Operation<	ARCH>
{
	OpSubs_xuxtb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_xuxth : public Operation<	ARCH>
{
	OpSubs_xuxth(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_xuxtw : public Operation<	ARCH>
{
	OpSubs_xuxtw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_xuxtx : public Operation<	ARCH>
{
	OpSubs_xuxtx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_xsxtb : public Operation<	ARCH>
{
	OpSubs_xsxtb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_xsxth : public Operation<	ARCH>
{
	OpSubs_xsxth(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_xsxtw : public Operation<	ARCH>
{
	OpSubs_xsxtw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_xsxtx : public Operation<	ARCH>
{
	OpSubs_xsxtx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	Reject reject;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_wi : public Operation<	ARCH>
{
	OpSubs_wi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint16_t imm0;
	uint8_t shl12;
	uint32_t imm;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_xi : public Operation<	ARCH>
{
	OpSubs_xi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint16_t imm0;
	uint8_t shl12;
	uint32_t imm;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_wlsl : public Operation<	ARCH>
{
	OpSubs_wlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_wlsr : public Operation<	ARCH>
{
	OpSubs_wlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_wasr : public Operation<	ARCH>
{
	OpSubs_wasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_xlsl : public Operation<	ARCH>
{
	OpSubs_xlsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_xlsr : public Operation<	ARCH>
{
	OpSubs_xlsr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubs_xasr : public Operation<	ARCH>
{
	OpSubs_xasr(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSvc : public Operation<	ARCH>
{
	OpSvc(CodeType code, uint64_t addr);
	uint16_t imm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpTb : public Operation<	ARCH>
{
	OpTb(CodeType code, uint64_t addr);
	uint8_t rt;
	int16_t imm;
	uint8_t pos0;
	uint8_t bitval;
	uint8_t pos1;
	unsigned pos;   char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUbfm_w : public Operation<	ARCH>
{
	OpUbfm_w(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imms;
	uint8_t immr;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUbfm_x : public Operation<	ARCH>
{
	OpUbfm_x(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imms;
	uint8_t immr;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUdiv_www : public Operation<	ARCH>
{
	OpUdiv_www(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUdiv_xxx : public Operation<	ARCH>
{
	OpUdiv_xxx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmaddl_xw : public Operation<	ARCH>
{
	OpUmaddl_xw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t ra;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmsubl_xw : public Operation<	ARCH>
{
	OpUmsubl_xw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t ra;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmulh : public Operation<	ARCH>
{
	OpUmulh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t ra;
	uint8_t rm;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCrc32b : public Operation<	ARCH>
{
	OpCrc32b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCrc32h : public Operation<	ARCH>
{
	OpCrc32h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCrc32w : public Operation<	ARCH>
{
	OpCrc32w(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCrc32x : public Operation<	ARCH>
{
	OpCrc32x(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCrc32cb : public Operation<	ARCH>
{
	OpCrc32cb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCrc32ch : public Operation<	ARCH>
{
	OpCrc32ch(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCrc32cw : public Operation<	ARCH>
{
	OpCrc32cw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCrc32cx : public Operation<	ARCH>
{
	OpCrc32cx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCas_w : public Operation<	ARCH>
{
	OpCas_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t l;
	uint8_t rs;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCas_x : public Operation<	ARCH>
{
	OpCas_x(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t l;
	uint8_t rs;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCasb_w : public Operation<	ARCH>
{
	OpCasb_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t l;
	uint8_t rs;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCash_w : public Operation<	ARCH>
{
	OpCash_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t l;
	uint8_t rs;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCasp_w : public Operation<	ARCH>
{
	OpCasp_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t l;
	uint8_t rs;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCasp_x : public Operation<	ARCH>
{
	OpCasp_x(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t l;
	uint8_t rs;
	uint8_t a;
	char const* format; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSwp_w : public Operation<	ARCH>
{
	OpSwp_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t l;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSwp_x : public Operation<	ARCH>
{
	OpSwp_x(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t l;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSwpb_w : public Operation<	ARCH>
{
	OpSwpb_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t l;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSwph_w : public Operation<	ARCH>
{
	OpSwph_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t l;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstadd_w : public Operation<	ARCH>
{
	OpLdstadd_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstadd_x : public Operation<	ARCH>
{
	OpLdstadd_x(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstaddb_w : public Operation<	ARCH>
{
	OpLdstaddb_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstaddh_w : public Operation<	ARCH>
{
	OpLdstaddh_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstclr_w : public Operation<	ARCH>
{
	OpLdstclr_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstclr_x : public Operation<	ARCH>
{
	OpLdstclr_x(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstclrb_w : public Operation<	ARCH>
{
	OpLdstclrb_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstclrh_w : public Operation<	ARCH>
{
	OpLdstclrh_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdsteor_w : public Operation<	ARCH>
{
	OpLdsteor_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdsteor_x : public Operation<	ARCH>
{
	OpLdsteor_x(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdsteorb_w : public Operation<	ARCH>
{
	OpLdsteorb_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdsteorh_w : public Operation<	ARCH>
{
	OpLdsteorh_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstset_w : public Operation<	ARCH>
{
	OpLdstset_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstset_x : public Operation<	ARCH>
{
	OpLdstset_x(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstsetb_w : public Operation<	ARCH>
{
	OpLdstsetb_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstseth_w : public Operation<	ARCH>
{
	OpLdstseth_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstsmax_w : public Operation<	ARCH>
{
	OpLdstsmax_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstsmax_x : public Operation<	ARCH>
{
	OpLdstsmax_x(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstsmaxb_w : public Operation<	ARCH>
{
	OpLdstsmaxb_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstsmaxh_w : public Operation<	ARCH>
{
	OpLdstsmaxh_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstsmin_w : public Operation<	ARCH>
{
	OpLdstsmin_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstsmin_x : public Operation<	ARCH>
{
	OpLdstsmin_x(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstsminb_w : public Operation<	ARCH>
{
	OpLdstsminb_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstsminh_w : public Operation<	ARCH>
{
	OpLdstsminh_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstumax_w : public Operation<	ARCH>
{
	OpLdstumax_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstumax_x : public Operation<	ARCH>
{
	OpLdstumax_x(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstumaxb_w : public Operation<	ARCH>
{
	OpLdstumaxb_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstumaxh_w : public Operation<	ARCH>
{
	OpLdstumaxh_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstumin_w : public Operation<	ARCH>
{
	OpLdstumin_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstumin_x : public Operation<	ARCH>
{
	OpLdstumin_x(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstuminb_w : public Operation<	ARCH>
{
	OpLdstuminb_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdstuminh_w : public Operation<	ARCH>
{
	OpLdstuminh_w(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rs;
	uint8_t r;
	uint8_t a;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBti : public Operation<	ARCH>
{
	OpBti(CodeType code, uint64_t addr);
	uint8_t tt;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAbs_dd : public Operation<	ARCH>
{
	OpAbs_dd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAbs_vbb : public Operation<	ARCH>
{
	OpAbs_vbb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAbs_vhh : public Operation<	ARCH>
{
	OpAbs_vhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAbs_vss : public Operation<	ARCH>
{
	OpAbs_vss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAbs_v2d2d : public Operation<	ARCH>
{
	OpAbs_v2d2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_d : public Operation<	ARCH>
{
	OpAdd_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_vb : public Operation<	ARCH>
{
	OpAdd_vb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_vh : public Operation<	ARCH>
{
	OpAdd_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_vs : public Operation<	ARCH>
{
	OpAdd_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAdd_v2d : public Operation<	ARCH>
{
	OpAdd_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAddhn2_v16bv8hv8h : public Operation<	ARCH>
{
	OpAddhn2_v16bv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAddhn2_v4sv2dv2d : public Operation<	ARCH>
{
	OpAddhn2_v4sv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAddhn2_v8hv4sv4s : public Operation<	ARCH>
{
	OpAddhn2_v8hv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAddhn_v2sv2dv2d : public Operation<	ARCH>
{
	OpAddhn_v2sv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAddhn_v4hv4sv4s : public Operation<	ARCH>
{
	OpAddhn_v4hv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAddhn_v8bv8hv8h : public Operation<	ARCH>
{
	OpAddhn_v8bv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAddp_d : public Operation<	ARCH>
{
	OpAddp_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAddp_vb : public Operation<	ARCH>
{
	OpAddp_vb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAddp_vh : public Operation<	ARCH>
{
	OpAddp_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAddp_vs : public Operation<	ARCH>
{
	OpAddp_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAddp_v2d : public Operation<	ARCH>
{
	OpAddp_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAddv_bvb : public Operation<	ARCH>
{
	OpAddv_bvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAddv_hvh : public Operation<	ARCH>
{
	OpAddv_hvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAddv_sv4s : public Operation<	ARCH>
{
	OpAddv_sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAesd_v16b16b : public Operation<	ARCH>
{
	OpAesd_v16b16b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpAese_v16b16b : public Operation<	ARCH>
{
	OpAese_v16b16b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpAesimc_v16b16b : public Operation<	ARCH>
{
	OpAesimc_v16b16b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpAesmc_v16b16b : public Operation<	ARCH>
{
	OpAesmc_v16b16b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpCmeq_d_reg : public Operation<	ARCH>
{
	OpCmeq_d_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmeq_vb_reg : public Operation<	ARCH>
{
	OpCmeq_vb_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmeq_vh_reg : public Operation<	ARCH>
{
	OpCmeq_vh_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmeq_vs_reg : public Operation<	ARCH>
{
	OpCmeq_vs_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmeq_v2d_reg : public Operation<	ARCH>
{
	OpCmeq_v2d_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmeq_d_zero : public Operation<	ARCH>
{
	OpCmeq_d_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmeq_vb_zero : public Operation<	ARCH>
{
	OpCmeq_vb_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmeq_vh_zero : public Operation<	ARCH>
{
	OpCmeq_vh_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmeq_vs_zero : public Operation<	ARCH>
{
	OpCmeq_vs_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmeq_v2d_zero : public Operation<	ARCH>
{
	OpCmeq_v2d_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmge_d_reg : public Operation<	ARCH>
{
	OpCmge_d_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmge_vb_reg : public Operation<	ARCH>
{
	OpCmge_vb_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmge_vh_reg : public Operation<	ARCH>
{
	OpCmge_vh_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmge_vs_reg : public Operation<	ARCH>
{
	OpCmge_vs_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmge_v2d_reg : public Operation<	ARCH>
{
	OpCmge_v2d_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmge_d_zero : public Operation<	ARCH>
{
	OpCmge_d_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmge_vb_zero : public Operation<	ARCH>
{
	OpCmge_vb_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmge_vh_zero : public Operation<	ARCH>
{
	OpCmge_vh_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmge_vs_zero : public Operation<	ARCH>
{
	OpCmge_vs_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmge_v2d_zero : public Operation<	ARCH>
{
	OpCmge_v2d_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmgt_d_reg : public Operation<	ARCH>
{
	OpCmgt_d_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmgt_vb_reg : public Operation<	ARCH>
{
	OpCmgt_vb_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmgt_vh_reg : public Operation<	ARCH>
{
	OpCmgt_vh_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmgt_vs_reg : public Operation<	ARCH>
{
	OpCmgt_vs_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmgt_v2d_reg : public Operation<	ARCH>
{
	OpCmgt_v2d_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmgt_d_zero : public Operation<	ARCH>
{
	OpCmgt_d_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmgt_vb_zero : public Operation<	ARCH>
{
	OpCmgt_vb_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmgt_vh_zero : public Operation<	ARCH>
{
	OpCmgt_vh_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmgt_vs_zero : public Operation<	ARCH>
{
	OpCmgt_vs_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmgt_v2d_zero : public Operation<	ARCH>
{
	OpCmgt_v2d_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmhi_d_reg : public Operation<	ARCH>
{
	OpCmhi_d_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmhi_vb_reg : public Operation<	ARCH>
{
	OpCmhi_vb_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmhi_vh_reg : public Operation<	ARCH>
{
	OpCmhi_vh_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmhi_vs_reg : public Operation<	ARCH>
{
	OpCmhi_vs_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmhi_v2d_reg : public Operation<	ARCH>
{
	OpCmhi_v2d_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmhs_d_reg : public Operation<	ARCH>
{
	OpCmhs_d_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmhs_vb_reg : public Operation<	ARCH>
{
	OpCmhs_vb_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmhs_vh_reg : public Operation<	ARCH>
{
	OpCmhs_vh_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmhs_vs_reg : public Operation<	ARCH>
{
	OpCmhs_vs_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmhs_v2d_reg : public Operation<	ARCH>
{
	OpCmhs_v2d_reg(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmle_d_zero : public Operation<	ARCH>
{
	OpCmle_d_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmle_vb_zero : public Operation<	ARCH>
{
	OpCmle_vb_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmle_vh_zero : public Operation<	ARCH>
{
	OpCmle_vh_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmle_vs_zero : public Operation<	ARCH>
{
	OpCmle_vs_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmle_v2d_zero : public Operation<	ARCH>
{
	OpCmle_v2d_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmlt_d_zero : public Operation<	ARCH>
{
	OpCmlt_d_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmlt_vb_zero : public Operation<	ARCH>
{
	OpCmlt_vb_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmlt_vh_zero : public Operation<	ARCH>
{
	OpCmlt_vh_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmlt_vs_zero : public Operation<	ARCH>
{
	OpCmlt_vs_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmlt_v2d_zero : public Operation<	ARCH>
{
	OpCmlt_v2d_zero(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmtst_ddd : public Operation<	ARCH>
{
	OpCmtst_ddd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmtst_v2dv2dv2d : public Operation<	ARCH>
{
	OpCmtst_v2dv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdp_so : public Operation<	ARCH>
{
	OpLdp_so(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	int16_t imm;
	uint8_t am;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdp_do : public Operation<	ARCH>
{
	OpLdp_do(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	int16_t imm;
	uint8_t am;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdp_qo : public Operation<	ARCH>
{
	OpLdp_qo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	int16_t imm;
	uint8_t am;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_bxi : public Operation<	ARCH>
{
	OpLdr_bxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t am;
	int16_t imm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_buo : public Operation<	ARCH>
{
	OpLdr_buo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_hxi : public Operation<	ARCH>
{
	OpLdr_hxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t am;
	int16_t imm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_huo : public Operation<	ARCH>
{
	OpLdr_huo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_sxi : public Operation<	ARCH>
{
	OpLdr_sxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t am;
	int16_t imm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_suo : public Operation<	ARCH>
{
	OpLdr_suo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_dxi : public Operation<	ARCH>
{
	OpLdr_dxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t am;
	int16_t imm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_duo : public Operation<	ARCH>
{
	OpLdr_duo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_qxi : public Operation<	ARCH>
{
	OpLdr_qxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t am;
	int16_t imm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_quo : public Operation<	ARCH>
{
	OpLdr_quo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_slit : public Operation<	ARCH>
{
	OpLdr_slit(CodeType code, uint64_t addr);
	uint8_t rt;
	int32_t imm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_dlit : public Operation<	ARCH>
{
	OpLdr_dlit(CodeType code, uint64_t addr);
	uint8_t rt;
	int32_t imm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_qlit : public Operation<	ARCH>
{
	OpLdr_qlit(CodeType code, uint64_t addr);
	uint8_t rt;
	int32_t imm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_bxwu : public Operation<	ARCH>
{
	OpLdr_bxwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_bxxu : public Operation<	ARCH>
{
	OpLdr_bxxu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_bxws : public Operation<	ARCH>
{
	OpLdr_bxws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_bxxs : public Operation<	ARCH>
{
	OpLdr_bxxs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_hxwu : public Operation<	ARCH>
{
	OpLdr_hxwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_hxxu : public Operation<	ARCH>
{
	OpLdr_hxxu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_hxws : public Operation<	ARCH>
{
	OpLdr_hxws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_hxxs : public Operation<	ARCH>
{
	OpLdr_hxxs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_sxwu : public Operation<	ARCH>
{
	OpLdr_sxwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_sxxu : public Operation<	ARCH>
{
	OpLdr_sxxu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_sxws : public Operation<	ARCH>
{
	OpLdr_sxws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_sxxs : public Operation<	ARCH>
{
	OpLdr_sxxs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_dxwu : public Operation<	ARCH>
{
	OpLdr_dxwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_dxxu : public Operation<	ARCH>
{
	OpLdr_dxxu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_dxws : public Operation<	ARCH>
{
	OpLdr_dxws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_dxxs : public Operation<	ARCH>
{
	OpLdr_dxxs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_qxwu : public Operation<	ARCH>
{
	OpLdr_qxwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_qxxu : public Operation<	ARCH>
{
	OpLdr_qxxu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_qxws : public Operation<	ARCH>
{
	OpLdr_qxws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdr_qxxs : public Operation<	ARCH>
{
	OpLdr_qxxs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMov_vbii : public Operation<	ARCH>
{
	OpMov_vbii(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index2;
	uint8_t index1;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMov_vhii : public Operation<	ARCH>
{
	OpMov_vhii(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index2;
	uint8_t index1;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMov_vsii : public Operation<	ARCH>
{
	OpMov_vsii(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index2;
	uint8_t index1;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMov_vdii : public Operation<	ARCH>
{
	OpMov_vdii(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index2;
	uint8_t index1;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpIns_vbw : public Operation<	ARCH>
{
	OpIns_vbw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpIns_vhw : public Operation<	ARCH>
{
	OpIns_vhw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpIns_vsw : public Operation<	ARCH>
{
	OpIns_vsw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpIns_vdx : public Operation<	ARCH>
{
	OpIns_vdx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpPmull : public Operation<	ARCH>
{
	OpPmull(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpPmull2 : public Operation<	ARCH>
{
	OpPmull2(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpPmull2_v8hv16bv16b : public Operation<	ARCH>
{
	OpPmull2_v8hv16bv16b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpPmull_v8hv8bv8b : public Operation<	ARCH>
{
	OpPmull_v8hv8bv8b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRaddhn2_v16bv8hv8h : public Operation<	ARCH>
{
	OpRaddhn2_v16bv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRaddhn2_v4sv2dv2d : public Operation<	ARCH>
{
	OpRaddhn2_v4sv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRaddhn2_v8hv4sv4s : public Operation<	ARCH>
{
	OpRaddhn2_v8hv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRaddhn_v2sv2dv2d : public Operation<	ARCH>
{
	OpRaddhn_v2sv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRaddhn_v4hv4sv4s : public Operation<	ARCH>
{
	OpRaddhn_v4hv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRaddhn_v8bv8hv8h : public Operation<	ARCH>
{
	OpRaddhn_v8bv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRshrn2_v16b8hi : public Operation<	ARCH>
{
	OpRshrn2_v16b8hi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift;   uint32_t round; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRshrn2_v4s2di : public Operation<	ARCH>
{
	OpRshrn2_v4s2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift;   uint64_t round; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRshrn2_v8h4si : public Operation<	ARCH>
{
	OpRshrn2_v8h4si(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift;   uint32_t round; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRshrn_v2s2di : public Operation<	ARCH>
{
	OpRshrn_v2s2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift;   uint64_t round; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRshrn_v4h4si : public Operation<	ARCH>
{
	OpRshrn_v4h4si(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift;   uint32_t round; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRshrn_v8b8hi : public Operation<	ARCH>
{
	OpRshrn_v8b8hi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift;   uint16_t round; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRsubhn2_v16bv8hv8h : public Operation<	ARCH>
{
	OpRsubhn2_v16bv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRsubhn2_v4sv2dv2d : public Operation<	ARCH>
{
	OpRsubhn2_v4sv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRsubhn2_v8hv4sv4s : public Operation<	ARCH>
{
	OpRsubhn2_v8hv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRsubhn_v2sv2dv2d : public Operation<	ARCH>
{
	OpRsubhn_v2sv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRsubhn_v4hv4sv4s : public Operation<	ARCH>
{
	OpRsubhn_v4hv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRsubhn_v8bv8hv8h : public Operation<	ARCH>
{
	OpRsubhn_v8bv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSabal2_v2dv4sv4s : public Operation<	ARCH>
{
	OpSabal2_v2dv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSabal2_v4sv8hv8h : public Operation<	ARCH>
{
	OpSabal2_v4sv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSabal2_v8hv16bv16b : public Operation<	ARCH>
{
	OpSabal2_v8hv16bv16b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSabal_v2dv2sv2s : public Operation<	ARCH>
{
	OpSabal_v2dv2sv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSabal_v4sv4hv4h : public Operation<	ARCH>
{
	OpSabal_v4sv4hv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSabal_v8hv8bv8b : public Operation<	ARCH>
{
	OpSabal_v8hv8bv8b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSabdl2_v2dv4sv4s : public Operation<	ARCH>
{
	OpSabdl2_v2dv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSabdl2_v4sv8hv8h : public Operation<	ARCH>
{
	OpSabdl2_v4sv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSabdl2_v8hv16bv16b : public Operation<	ARCH>
{
	OpSabdl2_v8hv16bv16b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSabdl_v2dv2sv2s : public Operation<	ARCH>
{
	OpSabdl_v2dv2sv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSabdl_v4sv4hv4h : public Operation<	ARCH>
{
	OpSabdl_v4sv4hv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSabdl_v8hv8bv8b : public Operation<	ARCH>
{
	OpSabdl_v8hv8bv8b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSaddl2_v2dv4sv4s : public Operation<	ARCH>
{
	OpSaddl2_v2dv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSaddl2_v4sv8hv8h : public Operation<	ARCH>
{
	OpSaddl2_v4sv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSaddl2_v8hv16bv16b : public Operation<	ARCH>
{
	OpSaddl2_v8hv16bv16b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSaddl_v2dv2sv2s : public Operation<	ARCH>
{
	OpSaddl_v2dv2sv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSaddl_v4sv4hv4h : public Operation<	ARCH>
{
	OpSaddl_v4sv4hv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSaddl_v8hv8bv8b : public Operation<	ARCH>
{
	OpSaddl_v8hv8bv8b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSaddlv_dv4s : public Operation<	ARCH>
{
	OpSaddlv_dv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSaddw2_v2dv2dv4s : public Operation<	ARCH>
{
	OpSaddw2_v2dv2dv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSaddw2_v4sv4sv8h : public Operation<	ARCH>
{
	OpSaddw2_v4sv4sv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSaddw2_v8hv8hv16b : public Operation<	ARCH>
{
	OpSaddw2_v8hv8hv16b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSaddw_v2dv2dv2s : public Operation<	ARCH>
{
	OpSaddw_v2dv2dv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSaddw_v4sv4sv4h : public Operation<	ARCH>
{
	OpSaddw_v4sv4sv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSaddw_v8hv8hv8b : public Operation<	ARCH>
{
	OpSaddw_v8hv8hv8b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSha1c : public Operation<	ARCH>
{
	OpSha1c(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpSha1h_ss : public Operation<	ARCH>
{
	OpSha1h_ss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpSha1m : public Operation<	ARCH>
{
	OpSha1m(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpSha1p : public Operation<	ARCH>
{
	OpSha1p(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpSha1su0_v4sv4sv4s : public Operation<	ARCH>
{
	OpSha1su0_v4sv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpSha1su1_v4s4s : public Operation<	ARCH>
{
	OpSha1su1_v4s4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpSha256h : public Operation<	ARCH>
{
	OpSha256h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpSha256h2 : public Operation<	ARCH>
{
	OpSha256h2(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpSha256su0_v4s4s : public Operation<	ARCH>
{
	OpSha256su0_v4s4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpSha256su1_v4sv4sv4s : public Operation<	ARCH>
{
	OpSha256su1_v4sv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpShll_v8h : public Operation<	ARCH>
{
	OpShll_v8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpShll_v4s : public Operation<	ARCH>
{
	OpShll_v4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpShll_v2d : public Operation<	ARCH>
{
	OpShll_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpShrn2_v16b8hi : public Operation<	ARCH>
{
	OpShrn2_v16b8hi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpShrn2_v4s2di : public Operation<	ARCH>
{
	OpShrn2_v4s2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpShrn2_v8h4si : public Operation<	ARCH>
{
	OpShrn2_v8h4si(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpShrn_v2s2di : public Operation<	ARCH>
{
	OpShrn_v2s2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpShrn_v4h4si : public Operation<	ARCH>
{
	OpShrn_v4h4si(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpShrn_v8b8hi : public Operation<	ARCH>
{
	OpShrn_v8b8hi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmaxv_bvb : public Operation<	ARCH>
{
	OpSmaxv_bvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmaxv_hvh : public Operation<	ARCH>
{
	OpSmaxv_hvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmaxv_sv4s : public Operation<	ARCH>
{
	OpSmaxv_sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSminv_bvb : public Operation<	ARCH>
{
	OpSminv_bvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSminv_hvh : public Operation<	ARCH>
{
	OpSminv_hvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSminv_sv4s : public Operation<	ARCH>
{
	OpSminv_sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmaxv_bvb : public Operation<	ARCH>
{
	OpUmaxv_bvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmaxv_hvh : public Operation<	ARCH>
{
	OpUmaxv_hvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmaxv_sv4s : public Operation<	ARCH>
{
	OpUmaxv_sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUminv_bvb : public Operation<	ARCH>
{
	OpUminv_bvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUminv_hvh : public Operation<	ARCH>
{
	OpUminv_hvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUminv_sv4s : public Operation<	ARCH>
{
	OpUminv_sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmlal2_v2dv4sv4s : public Operation<	ARCH>
{
	OpSmlal2_v2dv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmlal2_v2dv4svsi : public Operation<	ARCH>
{
	OpSmlal2_v2dv4svsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmlal2_v4sv8hv8h : public Operation<	ARCH>
{
	OpSmlal2_v4sv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmlal2_v4sv8hvhi : public Operation<	ARCH>
{
	OpSmlal2_v4sv8hvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmlal2_v8hv16bv16b : public Operation<	ARCH>
{
	OpSmlal2_v8hv16bv16b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmlal_v2dv2sv2s : public Operation<	ARCH>
{
	OpSmlal_v2dv2sv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmlal_v2dv2svsi : public Operation<	ARCH>
{
	OpSmlal_v2dv2svsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmlal_v4sv4hv4h : public Operation<	ARCH>
{
	OpSmlal_v4sv4hv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmlal_v4sv4hvhi : public Operation<	ARCH>
{
	OpSmlal_v4sv4hvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmlal_v8hv8bv8b : public Operation<	ARCH>
{
	OpSmlal_v8hv8bv8b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmlsl2_v2dv4sv4s : public Operation<	ARCH>
{
	OpSmlsl2_v2dv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmlsl2_v2dv4svsi : public Operation<	ARCH>
{
	OpSmlsl2_v2dv4svsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmlsl2_v4sv8hv8h : public Operation<	ARCH>
{
	OpSmlsl2_v4sv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmlsl2_v4sv8hvhi : public Operation<	ARCH>
{
	OpSmlsl2_v4sv8hvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmlsl2_v8hv16bv16b : public Operation<	ARCH>
{
	OpSmlsl2_v8hv16bv16b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmlsl_v2dv2sv2s : public Operation<	ARCH>
{
	OpSmlsl_v2dv2sv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmlsl_v2dv2svsi : public Operation<	ARCH>
{
	OpSmlsl_v2dv2svsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmlsl_v4sv4hv4h : public Operation<	ARCH>
{
	OpSmlsl_v4sv4hv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmlsl_v4sv4hvhi : public Operation<	ARCH>
{
	OpSmlsl_v4sv4hvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmlsl_v8hv8bv8b : public Operation<	ARCH>
{
	OpSmlsl_v8hv8bv8b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmov_wvb : public Operation<	ARCH>
{
	OpSmov_wvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmov_wvh : public Operation<	ARCH>
{
	OpSmov_wvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmov_xvb : public Operation<	ARCH>
{
	OpSmov_xvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmov_xvh : public Operation<	ARCH>
{
	OpSmov_xvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmov_xvs : public Operation<	ARCH>
{
	OpSmov_xvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmull2_v2dv4sv4s : public Operation<	ARCH>
{
	OpSmull2_v2dv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmull2_v2dv4svsi : public Operation<	ARCH>
{
	OpSmull2_v2dv4svsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmull2_v4sv8hv8h : public Operation<	ARCH>
{
	OpSmull2_v4sv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmull2_v4sv8hvhi : public Operation<	ARCH>
{
	OpSmull2_v4sv8hvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmull2_v8hv16bv16b : public Operation<	ARCH>
{
	OpSmull2_v8hv16bv16b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmull_v2dv2sv2s : public Operation<	ARCH>
{
	OpSmull_v2dv2sv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmull_v2dv2svsi : public Operation<	ARCH>
{
	OpSmull_v2dv2svsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmull_v4sv4hv4h : public Operation<	ARCH>
{
	OpSmull_v4sv4hv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmull_v4sv4hvhi : public Operation<	ARCH>
{
	OpSmull_v4sv4hvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmull_v8hv8bv8b : public Operation<	ARCH>
{
	OpSmull_v8hv8bv8b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqabs_bb : public Operation<	ARCH>
{
	OpSqabs_bb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqabs_dd : public Operation<	ARCH>
{
	OpSqabs_dd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqabs_hh : public Operation<	ARCH>
{
	OpSqabs_hh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqabs_ss : public Operation<	ARCH>
{
	OpSqabs_ss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqabs_v2d2d : public Operation<	ARCH>
{
	OpSqabs_v2d2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqadd_bbb : public Operation<	ARCH>
{
	OpSqadd_bbb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqadd_ddd : public Operation<	ARCH>
{
	OpSqadd_ddd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqadd_hhh : public Operation<	ARCH>
{
	OpSqadd_hhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqadd_sss : public Operation<	ARCH>
{
	OpSqadd_sss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqadd_v2dv2dv2d : public Operation<	ARCH>
{
	OpSqadd_v2dv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlal2_v2dv4sv4s : public Operation<	ARCH>
{
	OpSqdmlal2_v2dv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlal2_v2dv4svsi : public Operation<	ARCH>
{
	OpSqdmlal2_v2dv4svsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlal2_v4sv8hv8h : public Operation<	ARCH>
{
	OpSqdmlal2_v4sv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlal2_v4sv8hvhi : public Operation<	ARCH>
{
	OpSqdmlal2_v4sv8hvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlal_dss : public Operation<	ARCH>
{
	OpSqdmlal_dss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlal_dsvsi : public Operation<	ARCH>
{
	OpSqdmlal_dsvsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlal_shh : public Operation<	ARCH>
{
	OpSqdmlal_shh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlal_shvhi : public Operation<	ARCH>
{
	OpSqdmlal_shvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlal_v2dv2sv2s : public Operation<	ARCH>
{
	OpSqdmlal_v2dv2sv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlal_v2dv2svsi : public Operation<	ARCH>
{
	OpSqdmlal_v2dv2svsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlal_v4sv4hv4h : public Operation<	ARCH>
{
	OpSqdmlal_v4sv4hv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlal_v4sv4hvhi : public Operation<	ARCH>
{
	OpSqdmlal_v4sv4hvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlsl2_v2dv4sv4s : public Operation<	ARCH>
{
	OpSqdmlsl2_v2dv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlsl2_v2dv4svsi : public Operation<	ARCH>
{
	OpSqdmlsl2_v2dv4svsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlsl2_v4sv8hv8h : public Operation<	ARCH>
{
	OpSqdmlsl2_v4sv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlsl2_v4sv8hvhi : public Operation<	ARCH>
{
	OpSqdmlsl2_v4sv8hvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlsl_dss : public Operation<	ARCH>
{
	OpSqdmlsl_dss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlsl_dsvsi : public Operation<	ARCH>
{
	OpSqdmlsl_dsvsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlsl_shh : public Operation<	ARCH>
{
	OpSqdmlsl_shh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlsl_shvhi : public Operation<	ARCH>
{
	OpSqdmlsl_shvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlsl_v2dv2sv2s : public Operation<	ARCH>
{
	OpSqdmlsl_v2dv2sv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlsl_v2dv2svsi : public Operation<	ARCH>
{
	OpSqdmlsl_v2dv2svsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlsl_v4sv4hv4h : public Operation<	ARCH>
{
	OpSqdmlsl_v4sv4hv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmlsl_v4sv4hvhi : public Operation<	ARCH>
{
	OpSqdmlsl_v4sv4hvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmulh_hhh : public Operation<	ARCH>
{
	OpSqdmulh_hhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmulh_hhvhi : public Operation<	ARCH>
{
	OpSqdmulh_hhvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmulh_sss : public Operation<	ARCH>
{
	OpSqdmulh_sss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmulh_ssvsi : public Operation<	ARCH>
{
	OpSqdmulh_ssvsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmull2_v2dv4sv4s : public Operation<	ARCH>
{
	OpSqdmull2_v2dv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmull2_v2dv4svsi : public Operation<	ARCH>
{
	OpSqdmull2_v2dv4svsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmull2_v4sv8hv8h : public Operation<	ARCH>
{
	OpSqdmull2_v4sv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmull2_v4sv8hvhi : public Operation<	ARCH>
{
	OpSqdmull2_v4sv8hvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmull_dss : public Operation<	ARCH>
{
	OpSqdmull_dss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmull_dsvsi : public Operation<	ARCH>
{
	OpSqdmull_dsvsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmull_shh : public Operation<	ARCH>
{
	OpSqdmull_shh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmull_shvhi : public Operation<	ARCH>
{
	OpSqdmull_shvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmull_v2dv2sv2s : public Operation<	ARCH>
{
	OpSqdmull_v2dv2sv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmull_v2dv2svsi : public Operation<	ARCH>
{
	OpSqdmull_v2dv2svsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmull_v4sv4hv4h : public Operation<	ARCH>
{
	OpSqdmull_v4sv4hv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmull_v4sv4hvhi : public Operation<	ARCH>
{
	OpSqdmull_v4sv4hvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqneg_bb : public Operation<	ARCH>
{
	OpSqneg_bb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqneg_dd : public Operation<	ARCH>
{
	OpSqneg_dd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqneg_hh : public Operation<	ARCH>
{
	OpSqneg_hh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqneg_ss : public Operation<	ARCH>
{
	OpSqneg_ss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqneg_v2dv2d : public Operation<	ARCH>
{
	OpSqneg_v2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrdmulh_hhh : public Operation<	ARCH>
{
	OpSqrdmulh_hhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrdmulh_hhvhi : public Operation<	ARCH>
{
	OpSqrdmulh_hhvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrdmulh_sss : public Operation<	ARCH>
{
	OpSqrdmulh_sss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrdmulh_ssvsi : public Operation<	ARCH>
{
	OpSqrdmulh_ssvsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshl_bbb : public Operation<	ARCH>
{
	OpSqrshl_bbb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshl_ddd : public Operation<	ARCH>
{
	OpSqrshl_ddd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshl_hhh : public Operation<	ARCH>
{
	OpSqrshl_hhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshl_sss : public Operation<	ARCH>
{
	OpSqrshl_sss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshl_v2dv2dv2d : public Operation<	ARCH>
{
	OpSqrshl_v2dv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshrn2_v16b8hi : public Operation<	ARCH>
{
	OpSqrshrn2_v16b8hi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshrn2_v4s2di : public Operation<	ARCH>
{
	OpSqrshrn2_v4s2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshrn2_v8h4si : public Operation<	ARCH>
{
	OpSqrshrn2_v8h4si(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshrn_bhi : public Operation<	ARCH>
{
	OpSqrshrn_bhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshrn_hsi : public Operation<	ARCH>
{
	OpSqrshrn_hsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshrn_sdi : public Operation<	ARCH>
{
	OpSqrshrn_sdi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshrn_v2s2di : public Operation<	ARCH>
{
	OpSqrshrn_v2s2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshrn_v4h4si : public Operation<	ARCH>
{
	OpSqrshrn_v4h4si(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshrn_v8b8hi : public Operation<	ARCH>
{
	OpSqrshrn_v8b8hi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshrun2_v16b8hi : public Operation<	ARCH>
{
	OpSqrshrun2_v16b8hi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshrun2_v4s2di : public Operation<	ARCH>
{
	OpSqrshrun2_v4s2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshrun2_v8h4si : public Operation<	ARCH>
{
	OpSqrshrun2_v8h4si(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshrun_bhi : public Operation<	ARCH>
{
	OpSqrshrun_bhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshrun_hsi : public Operation<	ARCH>
{
	OpSqrshrun_hsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshrun_sdi : public Operation<	ARCH>
{
	OpSqrshrun_sdi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshrun_v2s2di : public Operation<	ARCH>
{
	OpSqrshrun_v2s2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshrun_v4h4si : public Operation<	ARCH>
{
	OpSqrshrun_v4h4si(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshrun_v8b8hi : public Operation<	ARCH>
{
	OpSqrshrun_v8b8hi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshl_bbb : public Operation<	ARCH>
{
	OpSqshl_bbb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshl_bbi : public Operation<	ARCH>
{
	OpSqshl_bbi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t shift;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshl_ddd : public Operation<	ARCH>
{
	OpSqshl_ddd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshl_ddi : public Operation<	ARCH>
{
	OpSqshl_ddi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t shift;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshl_hhh : public Operation<	ARCH>
{
	OpSqshl_hhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshl_hhi : public Operation<	ARCH>
{
	OpSqshl_hhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t shift;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshl_ssi : public Operation<	ARCH>
{
	OpSqshl_ssi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t shift;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshl_sss : public Operation<	ARCH>
{
	OpSqshl_sss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshl_v2d2di : public Operation<	ARCH>
{
	OpSqshl_v2d2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshl_v2dv2dv2d : public Operation<	ARCH>
{
	OpSqshl_v2dv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshlu_bbi : public Operation<	ARCH>
{
	OpSqshlu_bbi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t shift;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshlu_ddi : public Operation<	ARCH>
{
	OpSqshlu_ddi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t shift;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshlu_hhi : public Operation<	ARCH>
{
	OpSqshlu_hhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t shift;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshlu_ssi : public Operation<	ARCH>
{
	OpSqshlu_ssi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t shift;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshlu_v2d2di : public Operation<	ARCH>
{
	OpSqshlu_v2d2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t shift;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshrn2_v16b8hi : public Operation<	ARCH>
{
	OpSqshrn2_v16b8hi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshrn2_v4s2di : public Operation<	ARCH>
{
	OpSqshrn2_v4s2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshrn2_v8h4si : public Operation<	ARCH>
{
	OpSqshrn2_v8h4si(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshrn_bhi : public Operation<	ARCH>
{
	OpSqshrn_bhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshrn_hsi : public Operation<	ARCH>
{
	OpSqshrn_hsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshrn_sdi : public Operation<	ARCH>
{
	OpSqshrn_sdi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshrn_v2s2di : public Operation<	ARCH>
{
	OpSqshrn_v2s2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshrn_v4h4si : public Operation<	ARCH>
{
	OpSqshrn_v4h4si(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshrn_v8b8hi : public Operation<	ARCH>
{
	OpSqshrn_v8b8hi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshrun2_v16b8hi : public Operation<	ARCH>
{
	OpSqshrun2_v16b8hi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshrun2_v4s2di : public Operation<	ARCH>
{
	OpSqshrun2_v4s2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshrun2_v8h4si : public Operation<	ARCH>
{
	OpSqshrun2_v8h4si(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshrun_bhi : public Operation<	ARCH>
{
	OpSqshrun_bhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshrun_hsi : public Operation<	ARCH>
{
	OpSqshrun_hsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshrun_sdi : public Operation<	ARCH>
{
	OpSqshrun_sdi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshrun_v2s2di : public Operation<	ARCH>
{
	OpSqshrun_v2s2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshrun_v4h4si : public Operation<	ARCH>
{
	OpSqshrun_v4h4si(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshrun_v8b8hi : public Operation<	ARCH>
{
	OpSqshrun_v8b8hi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqsub_bbb : public Operation<	ARCH>
{
	OpSqsub_bbb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqsub_ddd : public Operation<	ARCH>
{
	OpSqsub_ddd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqsub_hhh : public Operation<	ARCH>
{
	OpSqsub_hhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqsub_sss : public Operation<	ARCH>
{
	OpSqsub_sss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqsub_v2dv2dv2d : public Operation<	ARCH>
{
	OpSqsub_v2dv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqxtn2_v16b8h : public Operation<	ARCH>
{
	OpSqxtn2_v16b8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqxtn2_v4s2d : public Operation<	ARCH>
{
	OpSqxtn2_v4s2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqxtn2_v8h4s : public Operation<	ARCH>
{
	OpSqxtn2_v8h4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqxtn_bh : public Operation<	ARCH>
{
	OpSqxtn_bh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqxtn_hs : public Operation<	ARCH>
{
	OpSqxtn_hs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqxtn_sd : public Operation<	ARCH>
{
	OpSqxtn_sd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqxtn_v2s2d : public Operation<	ARCH>
{
	OpSqxtn_v2s2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqxtn_v4h4s : public Operation<	ARCH>
{
	OpSqxtn_v4h4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqxtn_v8b8h : public Operation<	ARCH>
{
	OpSqxtn_v8b8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqxtun2_v16b8h : public Operation<	ARCH>
{
	OpSqxtun2_v16b8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqxtun2_v4s2d : public Operation<	ARCH>
{
	OpSqxtun2_v4s2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqxtun2_v8h4s : public Operation<	ARCH>
{
	OpSqxtun2_v8h4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqxtun_bh : public Operation<	ARCH>
{
	OpSqxtun_bh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqxtun_hs : public Operation<	ARCH>
{
	OpSqxtun_hs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqxtun_sd : public Operation<	ARCH>
{
	OpSqxtun_sd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqxtun_v2s2d : public Operation<	ARCH>
{
	OpSqxtun_v2s2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqxtun_v4h4s : public Operation<	ARCH>
{
	OpSqxtun_v4h4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqxtun_v8b8h : public Operation<	ARCH>
{
	OpSqxtun_v8b8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSri_ddi : public Operation<	ARCH>
{
	OpSri_ddi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSri_v2d2di : public Operation<	ARCH>
{
	OpSri_v2d2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSrshl_ddd : public Operation<	ARCH>
{
	OpSrshl_ddd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSrshl_v2dv2dv2d : public Operation<	ARCH>
{
	OpSrshl_v2dv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSrshr_ddi : public Operation<	ARCH>
{
	OpSrshr_ddi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSrsra_ddi : public Operation<	ARCH>
{
	OpSrsra_ddi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSshl_ddd : public Operation<	ARCH>
{
	OpSshl_ddd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSshl_v2dv2dv2d : public Operation<	ARCH>
{
	OpSshl_v2dv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSshll_v8h : public Operation<	ARCH>
{
	OpSshll_v8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSshll_v4s : public Operation<	ARCH>
{
	OpSshll_v4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSshll_v2d : public Operation<	ARCH>
{
	OpSshll_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSshr_ddi : public Operation<	ARCH>
{
	OpSshr_ddi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSsra_ddi : public Operation<	ARCH>
{
	OpSsra_ddi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSsubl2_v2dv4sv4s : public Operation<	ARCH>
{
	OpSsubl2_v2dv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSsubl2_v4sv8hv8h : public Operation<	ARCH>
{
	OpSsubl2_v4sv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSsubl2_v8hv16bv16b : public Operation<	ARCH>
{
	OpSsubl2_v8hv16bv16b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSsubl_v2dv2sv2s : public Operation<	ARCH>
{
	OpSsubl_v2dv2sv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSsubl_v4sv4hv4h : public Operation<	ARCH>
{
	OpSsubl_v4sv4hv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSsubl_v8hv8bv8b : public Operation<	ARCH>
{
	OpSsubl_v8hv8bv8b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSsubw2_v2dv2dv4s : public Operation<	ARCH>
{
	OpSsubw2_v2dv2dv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSsubw2_v4sv4sv8h : public Operation<	ARCH>
{
	OpSsubw2_v4sv4sv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSsubw2_v8hv8hv16b : public Operation<	ARCH>
{
	OpSsubw2_v8hv8hv16b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSsubw_v2dv2dv2s : public Operation<	ARCH>
{
	OpSsubw_v2dv2dv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSsubw_v4sv4sv4h : public Operation<	ARCH>
{
	OpSsubw_v4sv4sv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSsubw_v8hv8hv8b : public Operation<	ARCH>
{
	OpSsubw_v8hv8hv8b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStp_so : public Operation<	ARCH>
{
	OpStp_so(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	int16_t imm;
	uint8_t am;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStp_do : public Operation<	ARCH>
{
	OpStp_do(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	int16_t imm;
	uint8_t am;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStp_qo : public Operation<	ARCH>
{
	OpStp_qo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t rt2;
	int16_t imm;
	uint8_t am;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_bxi : public Operation<	ARCH>
{
	OpStr_bxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t am;
	int16_t imm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_buo : public Operation<	ARCH>
{
	OpStr_buo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_hxi : public Operation<	ARCH>
{
	OpStr_hxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t am;
	int16_t imm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_huo : public Operation<	ARCH>
{
	OpStr_huo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_sxi : public Operation<	ARCH>
{
	OpStr_sxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t am;
	int16_t imm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_suo : public Operation<	ARCH>
{
	OpStr_suo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_dxi : public Operation<	ARCH>
{
	OpStr_dxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t am;
	int16_t imm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_duo : public Operation<	ARCH>
{
	OpStr_duo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_qxi : public Operation<	ARCH>
{
	OpStr_qxi(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t am;
	int16_t imm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_quo : public Operation<	ARCH>
{
	OpStr_quo(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint16_t imm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_bxwu : public Operation<	ARCH>
{
	OpStr_bxwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_bxxu : public Operation<	ARCH>
{
	OpStr_bxxu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_bxws : public Operation<	ARCH>
{
	OpStr_bxws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_bxxs : public Operation<	ARCH>
{
	OpStr_bxxs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_hxwu : public Operation<	ARCH>
{
	OpStr_hxwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_hxxu : public Operation<	ARCH>
{
	OpStr_hxxu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_hxws : public Operation<	ARCH>
{
	OpStr_hxws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_hxxs : public Operation<	ARCH>
{
	OpStr_hxxs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_sxwu : public Operation<	ARCH>
{
	OpStr_sxwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_sxxu : public Operation<	ARCH>
{
	OpStr_sxxu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_sxws : public Operation<	ARCH>
{
	OpStr_sxws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_sxxs : public Operation<	ARCH>
{
	OpStr_sxxs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_dxwu : public Operation<	ARCH>
{
	OpStr_dxwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_dxxu : public Operation<	ARCH>
{
	OpStr_dxxu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_dxws : public Operation<	ARCH>
{
	OpStr_dxws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_dxxs : public Operation<	ARCH>
{
	OpStr_dxxs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_qxwu : public Operation<	ARCH>
{
	OpStr_qxwu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_qxxu : public Operation<	ARCH>
{
	OpStr_qxxu(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_qxws : public Operation<	ARCH>
{
	OpStr_qxws(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStr_qxxs : public Operation<	ARCH>
{
	OpStr_qxxs(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t s;
	uint8_t rm;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_ddd : public Operation<	ARCH>
{
	OpSub_ddd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_v2dv2dv2d : public Operation<	ARCH>
{
	OpSub_v2dv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubhn2_v16bv8hv8h : public Operation<	ARCH>
{
	OpSubhn2_v16bv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubhn2_v4sv2dv2d : public Operation<	ARCH>
{
	OpSubhn2_v4sv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubhn2_v8hv4sv4s : public Operation<	ARCH>
{
	OpSubhn2_v8hv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubhn_v2sv2dv2d : public Operation<	ARCH>
{
	OpSubhn_v2sv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubhn_v4hv4sv4s : public Operation<	ARCH>
{
	OpSubhn_v4hv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSubhn_v8bv8hv8h : public Operation<	ARCH>
{
	OpSubhn_v8bv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSuqadd_bb : public Operation<	ARCH>
{
	OpSuqadd_bb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSuqadd_dd : public Operation<	ARCH>
{
	OpSuqadd_dd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSuqadd_hh : public Operation<	ARCH>
{
	OpSuqadd_hh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSuqadd_ss : public Operation<	ARCH>
{
	OpSuqadd_ss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSuqadd_v2d2d : public Operation<	ARCH>
{
	OpSuqadd_v2d2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUabal2_v2dv4sv4s : public Operation<	ARCH>
{
	OpUabal2_v2dv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUabal2_v4sv8hv8h : public Operation<	ARCH>
{
	OpUabal2_v4sv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUabal2_v8hv16bv16b : public Operation<	ARCH>
{
	OpUabal2_v8hv16bv16b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUabal_v2dv2sv2s : public Operation<	ARCH>
{
	OpUabal_v2dv2sv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUabal_v4sv4hv4h : public Operation<	ARCH>
{
	OpUabal_v4sv4hv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUabal_v8hv8bv8b : public Operation<	ARCH>
{
	OpUabal_v8hv8bv8b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUabdl2_v2dv4sv4s : public Operation<	ARCH>
{
	OpUabdl2_v2dv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUabdl2_v4sv8hv8h : public Operation<	ARCH>
{
	OpUabdl2_v4sv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUabdl2_v8hv16bv16b : public Operation<	ARCH>
{
	OpUabdl2_v8hv16bv16b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUabdl_v2dv2sv2s : public Operation<	ARCH>
{
	OpUabdl_v2dv2sv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUabdl_v4sv4hv4h : public Operation<	ARCH>
{
	OpUabdl_v4sv4hv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUabdl_v8hv8bv8b : public Operation<	ARCH>
{
	OpUabdl_v8hv8bv8b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUaddl2_v2dv4sv4s : public Operation<	ARCH>
{
	OpUaddl2_v2dv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUaddl2_v4sv8hv8h : public Operation<	ARCH>
{
	OpUaddl2_v4sv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUaddl2_v8hv16bv16b : public Operation<	ARCH>
{
	OpUaddl2_v8hv16bv16b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUaddl_v2dv2sv2s : public Operation<	ARCH>
{
	OpUaddl_v2dv2sv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUaddl_v4sv4hv4h : public Operation<	ARCH>
{
	OpUaddl_v4sv4hv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUaddl_v8hv8bv8b : public Operation<	ARCH>
{
	OpUaddl_v8hv8bv8b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUaddlv_dv4s : public Operation<	ARCH>
{
	OpUaddlv_dv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUaddw2_v2dv2dv4s : public Operation<	ARCH>
{
	OpUaddw2_v2dv2dv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUaddw2_v4sv4sv8h : public Operation<	ARCH>
{
	OpUaddw2_v4sv4sv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUaddw2_v8hv8hv16b : public Operation<	ARCH>
{
	OpUaddw2_v8hv8hv16b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUaddw_v2dv2dv2s : public Operation<	ARCH>
{
	OpUaddw_v2dv2dv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUaddw_v4sv4sv4h : public Operation<	ARCH>
{
	OpUaddw_v4sv4sv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUaddw_v8hv8hv8b : public Operation<	ARCH>
{
	OpUaddw_v8hv8hv8b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmlal2_v2dv4sv4s : public Operation<	ARCH>
{
	OpUmlal2_v2dv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmlal2_v2dv4svsi : public Operation<	ARCH>
{
	OpUmlal2_v2dv4svsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmlal2_v4sv8hv8h : public Operation<	ARCH>
{
	OpUmlal2_v4sv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmlal2_v4sv8hvhi : public Operation<	ARCH>
{
	OpUmlal2_v4sv8hvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmlal2_v8hv16bv16b : public Operation<	ARCH>
{
	OpUmlal2_v8hv16bv16b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmlal_v2dv2sv2s : public Operation<	ARCH>
{
	OpUmlal_v2dv2sv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmlal_v2dv2svsi : public Operation<	ARCH>
{
	OpUmlal_v2dv2svsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmlal_v4sv4hv4h : public Operation<	ARCH>
{
	OpUmlal_v4sv4hv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmlal_v4sv4hvhi : public Operation<	ARCH>
{
	OpUmlal_v4sv4hvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmlal_v8hv8bv8b : public Operation<	ARCH>
{
	OpUmlal_v8hv8bv8b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmlsl2_v2dv4sv4s : public Operation<	ARCH>
{
	OpUmlsl2_v2dv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmlsl2_v2dv4svsi : public Operation<	ARCH>
{
	OpUmlsl2_v2dv4svsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmlsl2_v4sv8hv8h : public Operation<	ARCH>
{
	OpUmlsl2_v4sv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmlsl2_v4sv8hvhi : public Operation<	ARCH>
{
	OpUmlsl2_v4sv8hvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmlsl2_v8hv16bv16b : public Operation<	ARCH>
{
	OpUmlsl2_v8hv16bv16b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmlsl_v2dv2sv2s : public Operation<	ARCH>
{
	OpUmlsl_v2dv2sv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmlsl_v2dv2svsi : public Operation<	ARCH>
{
	OpUmlsl_v2dv2svsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmlsl_v4sv4hv4h : public Operation<	ARCH>
{
	OpUmlsl_v4sv4hv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmlsl_v4sv4hvhi : public Operation<	ARCH>
{
	OpUmlsl_v4sv4hvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmlsl_v8hv8bv8b : public Operation<	ARCH>
{
	OpUmlsl_v8hv8bv8b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmov_wvb : public Operation<	ARCH>
{
	OpUmov_wvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmov_wvh : public Operation<	ARCH>
{
	OpUmov_wvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmov_wvs : public Operation<	ARCH>
{
	OpUmov_wvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmov_xvd : public Operation<	ARCH>
{
	OpUmov_xvd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmull2_v2dv4sv4s : public Operation<	ARCH>
{
	OpUmull2_v2dv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmull2_v2dv4svsi : public Operation<	ARCH>
{
	OpUmull2_v2dv4svsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmull2_v4sv8hv8h : public Operation<	ARCH>
{
	OpUmull2_v4sv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmull2_v4sv8hvhi : public Operation<	ARCH>
{
	OpUmull2_v4sv8hvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmull2_v8hv16bv16b : public Operation<	ARCH>
{
	OpUmull2_v8hv16bv16b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmull_v2dv2sv2s : public Operation<	ARCH>
{
	OpUmull_v2dv2sv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmull_v2dv2svsi : public Operation<	ARCH>
{
	OpUmull_v2dv2svsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmull_v4sv4hv4h : public Operation<	ARCH>
{
	OpUmull_v4sv4hv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmull_v4sv4hvhi : public Operation<	ARCH>
{
	OpUmull_v4sv4hvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmull_v8hv8bv8b : public Operation<	ARCH>
{
	OpUmull_v8hv8bv8b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqadd_bbb : public Operation<	ARCH>
{
	OpUqadd_bbb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqadd_ddd : public Operation<	ARCH>
{
	OpUqadd_ddd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqadd_hhh : public Operation<	ARCH>
{
	OpUqadd_hhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqadd_sss : public Operation<	ARCH>
{
	OpUqadd_sss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqadd_v2dv2dv2d : public Operation<	ARCH>
{
	OpUqadd_v2dv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqrshl_bbb : public Operation<	ARCH>
{
	OpUqrshl_bbb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqrshl_ddd : public Operation<	ARCH>
{
	OpUqrshl_ddd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqrshl_hhh : public Operation<	ARCH>
{
	OpUqrshl_hhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqrshl_sss : public Operation<	ARCH>
{
	OpUqrshl_sss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqrshl_v2dv2dv2d : public Operation<	ARCH>
{
	OpUqrshl_v2dv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqrshrn2_v16b8hi : public Operation<	ARCH>
{
	OpUqrshrn2_v16b8hi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqrshrn2_v4s2di : public Operation<	ARCH>
{
	OpUqrshrn2_v4s2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqrshrn2_v8h4si : public Operation<	ARCH>
{
	OpUqrshrn2_v8h4si(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqrshrn_bhi : public Operation<	ARCH>
{
	OpUqrshrn_bhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqrshrn_hsi : public Operation<	ARCH>
{
	OpUqrshrn_hsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqrshrn_sdi : public Operation<	ARCH>
{
	OpUqrshrn_sdi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqrshrn_v2s2di : public Operation<	ARCH>
{
	OpUqrshrn_v2s2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqrshrn_v4h4si : public Operation<	ARCH>
{
	OpUqrshrn_v4h4si(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqrshrn_v8b8hi : public Operation<	ARCH>
{
	OpUqrshrn_v8b8hi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshl_bbb : public Operation<	ARCH>
{
	OpUqshl_bbb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshl_bbi : public Operation<	ARCH>
{
	OpUqshl_bbi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t shift;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshl_ddd : public Operation<	ARCH>
{
	OpUqshl_ddd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshl_ddi : public Operation<	ARCH>
{
	OpUqshl_ddi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t shift;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshl_hhh : public Operation<	ARCH>
{
	OpUqshl_hhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshl_hhi : public Operation<	ARCH>
{
	OpUqshl_hhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t shift;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshl_ssi : public Operation<	ARCH>
{
	OpUqshl_ssi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t shift;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshl_sss : public Operation<	ARCH>
{
	OpUqshl_sss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshl_v2d2di : public Operation<	ARCH>
{
	OpUqshl_v2d2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshl_v2dv2dv2d : public Operation<	ARCH>
{
	OpUqshl_v2dv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshrn2_v16b8hi : public Operation<	ARCH>
{
	OpUqshrn2_v16b8hi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshrn2_v4s2di : public Operation<	ARCH>
{
	OpUqshrn2_v4s2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshrn2_v8h4si : public Operation<	ARCH>
{
	OpUqshrn2_v8h4si(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshrn_bhi : public Operation<	ARCH>
{
	OpUqshrn_bhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshrn_hsi : public Operation<	ARCH>
{
	OpUqshrn_hsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshrn_sdi : public Operation<	ARCH>
{
	OpUqshrn_sdi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshrn_v2s2di : public Operation<	ARCH>
{
	OpUqshrn_v2s2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshrn_v4h4si : public Operation<	ARCH>
{
	OpUqshrn_v4h4si(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshrn_v8b8hi : public Operation<	ARCH>
{
	OpUqshrn_v8b8hi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqsub_bbb : public Operation<	ARCH>
{
	OpUqsub_bbb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqsub_ddd : public Operation<	ARCH>
{
	OpUqsub_ddd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqsub_hhh : public Operation<	ARCH>
{
	OpUqsub_hhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqsub_sss : public Operation<	ARCH>
{
	OpUqsub_sss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqsub_v2dv2dv2d : public Operation<	ARCH>
{
	OpUqsub_v2dv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqxtn2_v16b8h : public Operation<	ARCH>
{
	OpUqxtn2_v16b8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqxtn2_v4s2d : public Operation<	ARCH>
{
	OpUqxtn2_v4s2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqxtn2_v8h4s : public Operation<	ARCH>
{
	OpUqxtn2_v8h4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqxtn_bh : public Operation<	ARCH>
{
	OpUqxtn_bh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqxtn_hs : public Operation<	ARCH>
{
	OpUqxtn_hs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqxtn_sd : public Operation<	ARCH>
{
	OpUqxtn_sd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqxtn_v2s2d : public Operation<	ARCH>
{
	OpUqxtn_v2s2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqxtn_v4h4s : public Operation<	ARCH>
{
	OpUqxtn_v4h4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqxtn_v8b8h : public Operation<	ARCH>
{
	OpUqxtn_v8b8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUrshl_ddd : public Operation<	ARCH>
{
	OpUrshl_ddd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUrshl_v2dv2dv2d : public Operation<	ARCH>
{
	OpUrshl_v2dv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUrshr_ddi : public Operation<	ARCH>
{
	OpUrshr_ddi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUrsra_ddi : public Operation<	ARCH>
{
	OpUrsra_ddi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUshr_ddi : public Operation<	ARCH>
{
	OpUshr_ddi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUsqadd_bb : public Operation<	ARCH>
{
	OpUsqadd_bb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUsqadd_dd : public Operation<	ARCH>
{
	OpUsqadd_dd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUsqadd_hh : public Operation<	ARCH>
{
	OpUsqadd_hh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUsqadd_ss : public Operation<	ARCH>
{
	OpUsqadd_ss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUsqadd_v2d2d : public Operation<	ARCH>
{
	OpUsqadd_v2d2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUsra_ddi : public Operation<	ARCH>
{
	OpUsra_ddi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUsubl2_v2dv4sv4s : public Operation<	ARCH>
{
	OpUsubl2_v2dv4sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUsubl2_v4sv8hv8h : public Operation<	ARCH>
{
	OpUsubl2_v4sv8hv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUsubl2_v8hv16bv16b : public Operation<	ARCH>
{
	OpUsubl2_v8hv16bv16b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUsubl_v2dv2sv2s : public Operation<	ARCH>
{
	OpUsubl_v2dv2sv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUsubl_v4sv4hv4h : public Operation<	ARCH>
{
	OpUsubl_v4sv4hv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUsubl_v8hv8bv8b : public Operation<	ARCH>
{
	OpUsubl_v8hv8bv8b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUsubw2_v2dv2dv4s : public Operation<	ARCH>
{
	OpUsubw2_v2dv2dv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUsubw2_v4sv4sv8h : public Operation<	ARCH>
{
	OpUsubw2_v4sv4sv8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUsubw2_v8hv8hv16b : public Operation<	ARCH>
{
	OpUsubw2_v8hv8hv16b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUsubw_v2dv2dv2s : public Operation<	ARCH>
{
	OpUsubw_v2dv2dv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUsubw_v4sv4sv4h : public Operation<	ARCH>
{
	OpUsubw_v4sv4sv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUsubw_v8hv8hv8b : public Operation<	ARCH>
{
	OpUsubw_v8hv8hv8b(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUzp1_v2dv2dv2d : public Operation<	ARCH>
{
	OpUzp1_v2dv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUzp2_v2dv2dv2d : public Operation<	ARCH>
{
	OpUzp2_v2dv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUzp2_vhvhvh : public Operation<	ARCH>
{
	OpUzp2_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpXtn2_v16b8h : public Operation<	ARCH>
{
	OpXtn2_v16b8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpXtn2_v8h4s : public Operation<	ARCH>
{
	OpXtn2_v8h4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpXtn2_v4s2d : public Operation<	ARCH>
{
	OpXtn2_v4s2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpXtn_v2s2d : public Operation<	ARCH>
{
	OpXtn_v2s2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpXtn_v4h4s : public Operation<	ARCH>
{
	OpXtn_v4h4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpXtn_v8b8h : public Operation<	ARCH>
{
	OpXtn_v8b8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpZip1_v2dv2dv2d : public Operation<	ARCH>
{
	OpZip1_v2dv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpZip2_v2dv2dv2d : public Operation<	ARCH>
{
	OpZip2_v2dv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpOrr_vbvbvb : public Operation<	ARCH>
{
	OpOrr_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpAnd_vbvbvb : public Operation<	ARCH>
{
	OpAnd_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBic_vbvbvb : public Operation<	ARCH>
{
	OpBic_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBic_vhi : public Operation<	ARCH>
{
	OpBic_vhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t imm0;
	uint8_t sh;
	uint8_t imm1;
	uint8_t q;
	uint16_t imm; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBic_vsi : public Operation<	ARCH>
{
	OpBic_vsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t imm0;
	uint8_t sh;
	uint8_t imm1;
	uint8_t q;
	uint32_t imm; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBit : public Operation<	ARCH>
{
	OpBit(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBif : public Operation<	ARCH>
{
	OpBif(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpBsl : public Operation<	ARCH>
{
	OpBsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCls_vbb : public Operation<	ARCH>
{
	OpCls_vbb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCls_vhh : public Operation<	ARCH>
{
	OpCls_vhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCls_vss : public Operation<	ARCH>
{
	OpCls_vss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpClz_vbb : public Operation<	ARCH>
{
	OpClz_vbb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpClz_vhh : public Operation<	ARCH>
{
	OpClz_vhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpClz_vss : public Operation<	ARCH>
{
	OpClz_vss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmtst_vbvbvb : public Operation<	ARCH>
{
	OpCmtst_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmtst_vhvhvh : public Operation<	ARCH>
{
	OpCmtst_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCmtst_vsvsvs : public Operation<	ARCH>
{
	OpCmtst_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpCnt_vbb : public Operation<	ARCH>
{
	OpCnt_vbb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMov_bvb : public Operation<	ARCH>
{
	OpMov_bvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMov_hvh : public Operation<	ARCH>
{
	OpMov_hvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMov_svs : public Operation<	ARCH>
{
	OpMov_svs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMov_dvd : public Operation<	ARCH>
{
	OpMov_dvd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpDup_vbvb : public Operation<	ARCH>
{
	OpDup_vbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpDup_vhvh : public Operation<	ARCH>
{
	OpDup_vhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpDup_vsvs : public Operation<	ARCH>
{
	OpDup_vsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpDup_v2dvd : public Operation<	ARCH>
{
	OpDup_v2dvd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpDup_vb : public Operation<	ARCH>
{
	OpDup_vb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpDup_vh : public Operation<	ARCH>
{
	OpDup_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpDup_vs : public Operation<	ARCH>
{
	OpDup_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpDup_v2d : public Operation<	ARCH>
{
	OpDup_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpEor_vbvbvb : public Operation<	ARCH>
{
	OpEor_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpExt_vb : public Operation<	ARCH>
{
	OpExt_vb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	uint8_t rm;
	uint8_t q;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMla_vbvbvb : public Operation<	ARCH>
{
	OpMla_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMla_vhvhvhi : public Operation<	ARCH>
{
	OpMla_vhvhvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t q;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMla_vhvhvh : public Operation<	ARCH>
{
	OpMla_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMla_vsvsvsi : public Operation<	ARCH>
{
	OpMla_vsvsvsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t q;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMla_vsvsvs : public Operation<	ARCH>
{
	OpMla_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMls_vbvbvb : public Operation<	ARCH>
{
	OpMls_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMls_vhvhvhi : public Operation<	ARCH>
{
	OpMls_vhvhvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t q;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMls_vhvhvh : public Operation<	ARCH>
{
	OpMls_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMls_vsvsvsi : public Operation<	ARCH>
{
	OpMls_vsvsvsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t q;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMls_vsvsvs : public Operation<	ARCH>
{
	OpMls_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMovi_vbi : public Operation<	ARCH>
{
	OpMovi_vbi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t imm0;
	uint8_t imm1;
	uint8_t q;
	uint8_t imm; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMovi_vhi : public Operation<	ARCH>
{
	OpMovi_vhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t imm0;
	uint8_t sh;
	uint8_t imm1;
	uint8_t q;
	uint16_t imm; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMovi_vsi : public Operation<	ARCH>
{
	OpMovi_vsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t imm0;
	uint8_t sh;
	uint8_t imm1;
	uint8_t q;
	uint32_t imm; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMovi_di : public Operation<	ARCH>
{
	OpMovi_di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t h;
	uint8_t g;
	uint8_t f;
	uint8_t e;
	uint8_t d;
	uint8_t c;
	uint8_t b;
	uint8_t a;
	uint64_t imm; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMovi_v2di : public Operation<	ARCH>
{
	OpMovi_v2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t h;
	uint8_t g;
	uint8_t f;
	uint8_t e;
	uint8_t d;
	uint8_t c;
	uint8_t b;
	uint8_t a;
	uint64_t imm; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMovi_vsmsl : public Operation<	ARCH>
{
	OpMovi_vsmsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint32_t imm0;
	uint8_t sh;
	uint32_t imm1;
	uint8_t q;
	uint32_t imm; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMul_vb : public Operation<	ARCH>
{
	OpMul_vb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMul_vh : public Operation<	ARCH>
{
	OpMul_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMul_vs : public Operation<	ARCH>
{
	OpMul_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMul_vhvhvhi : public Operation<	ARCH>
{
	OpMul_vhvhvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t q;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMul_vsvsvsi : public Operation<	ARCH>
{
	OpMul_vsvsvsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t q;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMvn_vb : public Operation<	ARCH>
{
	OpMvn_vb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMvni_vhi : public Operation<	ARCH>
{
	OpMvni_vhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t imm0;
	uint8_t sh;
	uint8_t imm1;
	uint8_t q;
	uint16_t imm; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMvni_vsi : public Operation<	ARCH>
{
	OpMvni_vsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t imm0;
	uint8_t sh;
	uint8_t imm1;
	uint8_t q;
	uint32_t imm; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpMvni_vsmsl : public Operation<	ARCH>
{
	OpMvni_vsmsl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint32_t imm0;
	uint8_t sh;
	uint32_t imm1;
	uint8_t q;
	uint32_t imm; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpNeg_vb : public Operation<	ARCH>
{
	OpNeg_vb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpNeg_vh : public Operation<	ARCH>
{
	OpNeg_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpNeg_vs : public Operation<	ARCH>
{
	OpNeg_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpNeg_v2d : public Operation<	ARCH>
{
	OpNeg_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpNeg_d : public Operation<	ARCH>
{
	OpNeg_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpOrn_vbvbvb : public Operation<	ARCH>
{
	OpOrn_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpOrr_vhi : public Operation<	ARCH>
{
	OpOrr_vhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t imm0;
	uint8_t sh;
	uint8_t imm1;
	uint8_t q;
	uint16_t imm; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpOrr_vsi : public Operation<	ARCH>
{
	OpOrr_vsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t imm0;
	uint8_t sh;
	uint8_t imm1;
	uint8_t q;
	uint32_t imm; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpPmul_vbvbvb : public Operation<	ARCH>
{
	OpPmul_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRbit_vbb : public Operation<	ARCH>
{
	OpRbit_vbb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRev16_vbb : public Operation<	ARCH>
{
	OpRev16_vbb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRev32_vbb : public Operation<	ARCH>
{
	OpRev32_vbb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRev32_vhh : public Operation<	ARCH>
{
	OpRev32_vhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRev64_vbb : public Operation<	ARCH>
{
	OpRev64_vbb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRev64_vhh : public Operation<	ARCH>
{
	OpRev64_vhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpRev64_vss : public Operation<	ARCH>
{
	OpRev64_vss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSaba_vbvbvb : public Operation<	ARCH>
{
	OpSaba_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSaba_vhvhvh : public Operation<	ARCH>
{
	OpSaba_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSaba_vsvsvs : public Operation<	ARCH>
{
	OpSaba_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSabd_vbvbvb : public Operation<	ARCH>
{
	OpSabd_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSabd_vhvhvh : public Operation<	ARCH>
{
	OpSabd_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSabd_vsvsvs : public Operation<	ARCH>
{
	OpSabd_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSadalp_vhb : public Operation<	ARCH>
{
	OpSadalp_vhb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSadalp_vsh : public Operation<	ARCH>
{
	OpSadalp_vsh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSadalp_vds : public Operation<	ARCH>
{
	OpSadalp_vds(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSaddlp_vhb : public Operation<	ARCH>
{
	OpSaddlp_vhb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSaddlp_vsh : public Operation<	ARCH>
{
	OpSaddlp_vsh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSaddlp_vds : public Operation<	ARCH>
{
	OpSaddlp_vds(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSaddlv_hvb : public Operation<	ARCH>
{
	OpSaddlv_hvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSaddlv_svh : public Operation<	ARCH>
{
	OpSaddlv_svh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpShadd_vbvbvb : public Operation<	ARCH>
{
	OpShadd_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpShadd_vhvhvh : public Operation<	ARCH>
{
	OpShadd_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpShadd_vsvsvs : public Operation<	ARCH>
{
	OpShadd_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpShl_ddi : public Operation<	ARCH>
{
	OpShl_ddi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t shift;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpShl_vbbi : public Operation<	ARCH>
{
	OpShl_vbbi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpShl_vhhi : public Operation<	ARCH>
{
	OpShl_vhhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpShl_vssi : public Operation<	ARCH>
{
	OpShl_vssi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpShl_v2d2di : public Operation<	ARCH>
{
	OpShl_v2d2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpShsub_vbvbvb : public Operation<	ARCH>
{
	OpShsub_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpShsub_vhvhvh : public Operation<	ARCH>
{
	OpShsub_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpShsub_vsvsvs : public Operation<	ARCH>
{
	OpShsub_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSli_ddi : public Operation<	ARCH>
{
	OpSli_ddi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t shift;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSli_vbbi : public Operation<	ARCH>
{
	OpSli_vbbi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t shift;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSli_vhhi : public Operation<	ARCH>
{
	OpSli_vhhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t shift;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSli_vssi : public Operation<	ARCH>
{
	OpSli_vssi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t shift;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSli_v2d2di : public Operation<	ARCH>
{
	OpSli_v2d2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t shift;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmax_vbvbvb : public Operation<	ARCH>
{
	OpSmax_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmax_vhvhvh : public Operation<	ARCH>
{
	OpSmax_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmax_vsvsvs : public Operation<	ARCH>
{
	OpSmax_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmaxp_vbvbvb : public Operation<	ARCH>
{
	OpSmaxp_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmaxp_vhvhvh : public Operation<	ARCH>
{
	OpSmaxp_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmaxp_vsvsvs : public Operation<	ARCH>
{
	OpSmaxp_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmin_vbvbvb : public Operation<	ARCH>
{
	OpSmin_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmin_vhvhvh : public Operation<	ARCH>
{
	OpSmin_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSmin_vsvsvs : public Operation<	ARCH>
{
	OpSmin_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSminp_vbvbvb : public Operation<	ARCH>
{
	OpSminp_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSminp_vhvhvh : public Operation<	ARCH>
{
	OpSminp_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void execute( ARCH & cpu ) const;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpSminp_vsvsvs : public Operation<	ARCH>
{
	OpSminp_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqabs_vbb : public Operation<	ARCH>
{
	OpSqabs_vbb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqabs_vhh : public Operation<	ARCH>
{
	OpSqabs_vhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqabs_vss : public Operation<	ARCH>
{
	OpSqabs_vss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqadd_vbvbvb : public Operation<	ARCH>
{
	OpSqadd_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqadd_vhvhvh : public Operation<	ARCH>
{
	OpSqadd_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqadd_vsvsvs : public Operation<	ARCH>
{
	OpSqadd_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmulh_vhvhvhi : public Operation<	ARCH>
{
	OpSqdmulh_vhvhvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t q;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmulh_vhvhvh : public Operation<	ARCH>
{
	OpSqdmulh_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmulh_vsvsvsi : public Operation<	ARCH>
{
	OpSqdmulh_vsvsvsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t q;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqdmulh_vsvsvs : public Operation<	ARCH>
{
	OpSqdmulh_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqneg_vbb : public Operation<	ARCH>
{
	OpSqneg_vbb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqneg_vhh : public Operation<	ARCH>
{
	OpSqneg_vhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqneg_vss : public Operation<	ARCH>
{
	OpSqneg_vss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrdmulh_vhvhvhi : public Operation<	ARCH>
{
	OpSqrdmulh_vhvhvhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t q;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrdmulh_vhvhvh : public Operation<	ARCH>
{
	OpSqrdmulh_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrdmulh_vsvsvsi : public Operation<	ARCH>
{
	OpSqrdmulh_vsvsvsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t q;
	unsigned index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrdmulh_vsvsvs : public Operation<	ARCH>
{
	OpSqrdmulh_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshl_vbvbvb : public Operation<	ARCH>
{
	OpSqrshl_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshl_vhvhvh : public Operation<	ARCH>
{
	OpSqrshl_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqrshl_vsvsvs : public Operation<	ARCH>
{
	OpSqrshl_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshl_vbbi : public Operation<	ARCH>
{
	OpSqshl_vbbi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshl_vbvbvb : public Operation<	ARCH>
{
	OpSqshl_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshl_vhhi : public Operation<	ARCH>
{
	OpSqshl_vhhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshl_vhvhvh : public Operation<	ARCH>
{
	OpSqshl_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshl_vssi : public Operation<	ARCH>
{
	OpSqshl_vssi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshl_vsvsvs : public Operation<	ARCH>
{
	OpSqshl_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshlu_vbbi : public Operation<	ARCH>
{
	OpSqshlu_vbbi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t shift;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshlu_vhhi : public Operation<	ARCH>
{
	OpSqshlu_vhhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t shift;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqshlu_vssi : public Operation<	ARCH>
{
	OpSqshlu_vssi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t shift;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqsub_vbvbvb : public Operation<	ARCH>
{
	OpSqsub_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqsub_vhvhvh : public Operation<	ARCH>
{
	OpSqsub_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSqsub_vsvsvs : public Operation<	ARCH>
{
	OpSqsub_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSrhadd_vbvbvb : public Operation<	ARCH>
{
	OpSrhadd_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSrhadd_vhvhvh : public Operation<	ARCH>
{
	OpSrhadd_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSrhadd_vsvsvs : public Operation<	ARCH>
{
	OpSrhadd_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSri_vbbi : public Operation<	ARCH>
{
	OpSri_vbbi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	uint8_t q;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSri_vhhi : public Operation<	ARCH>
{
	OpSri_vhhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	uint8_t q;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSri_vssi : public Operation<	ARCH>
{
	OpSri_vssi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	uint8_t q;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSrshl_vbvbvb : public Operation<	ARCH>
{
	OpSrshl_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSrshl_vhvhvh : public Operation<	ARCH>
{
	OpSrshl_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSrshl_vsvsvs : public Operation<	ARCH>
{
	OpSrshl_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSshl_vbvbvb : public Operation<	ARCH>
{
	OpSshl_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSshl_vhvhvh : public Operation<	ARCH>
{
	OpSshl_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSshl_vsvsvs : public Operation<	ARCH>
{
	OpSshl_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSshr_vbbi : public Operation<	ARCH>
{
	OpSshr_vbbi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t sm;
	uint8_t lro;
	uint8_t q;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSshr_vhhi : public Operation<	ARCH>
{
	OpSshr_vhhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t sm;
	uint8_t lro;
	uint8_t q;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSshr_vssi : public Operation<	ARCH>
{
	OpSshr_vssi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t sm;
	uint8_t lro;
	uint8_t q;
	unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSshr_v2d2di : public Operation<	ARCH>
{
	OpSshr_v2d2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t sm;
	uint8_t lro;
	uint8_t shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_vbvbvb : public Operation<	ARCH>
{
	OpSub_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_vhvhvh : public Operation<	ARCH>
{
	OpSub_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSub_vsvsvs : public Operation<	ARCH>
{
	OpSub_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSuqadd_vbb : public Operation<	ARCH>
{
	OpSuqadd_vbb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSuqadd_vhh : public Operation<	ARCH>
{
	OpSuqadd_vhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpSuqadd_vss : public Operation<	ARCH>
{
	OpSuqadd_vss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpTbl : public Operation<	ARCH>
{
	OpTbl(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t len;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpTbx : public Operation<	ARCH>
{
	OpTbx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t len;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpTrn_vb : public Operation<	ARCH>
{
	OpTrn_vb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t op;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpTrn_vh : public Operation<	ARCH>
{
	OpTrn_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t op;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpTrn_vs : public Operation<	ARCH>
{
	OpTrn_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t op;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpTrn_v2d : public Operation<	ARCH>
{
	OpTrn_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t op;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUaba_vbvbvb : public Operation<	ARCH>
{
	OpUaba_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUaba_vhvhvh : public Operation<	ARCH>
{
	OpUaba_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUaba_vsvsvs : public Operation<	ARCH>
{
	OpUaba_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUabd_vbvbvb : public Operation<	ARCH>
{
	OpUabd_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUabd_vhvhvh : public Operation<	ARCH>
{
	OpUabd_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUabd_vsvsvs : public Operation<	ARCH>
{
	OpUabd_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUadalp_vhb : public Operation<	ARCH>
{
	OpUadalp_vhb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUadalp_vsh : public Operation<	ARCH>
{
	OpUadalp_vsh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUadalp_vds : public Operation<	ARCH>
{
	OpUadalp_vds(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUaddlp_vhb : public Operation<	ARCH>
{
	OpUaddlp_vhb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUaddlp_vsh : public Operation<	ARCH>
{
	OpUaddlp_vsh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUaddlp_vds : public Operation<	ARCH>
{
	OpUaddlp_vds(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUaddlv_hvb : public Operation<	ARCH>
{
	OpUaddlv_hvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUaddlv_svh : public Operation<	ARCH>
{
	OpUaddlv_svh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUhadd_vbvbvb : public Operation<	ARCH>
{
	OpUhadd_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUhadd_vhvhvh : public Operation<	ARCH>
{
	OpUhadd_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUhadd_vsvsvs : public Operation<	ARCH>
{
	OpUhadd_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUhsub_vbvbvb : public Operation<	ARCH>
{
	OpUhsub_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUhsub_vhvhvh : public Operation<	ARCH>
{
	OpUhsub_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUhsub_vsvsvs : public Operation<	ARCH>
{
	OpUhsub_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmax_vbvbvb : public Operation<	ARCH>
{
	OpUmax_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmax_vhvhvh : public Operation<	ARCH>
{
	OpUmax_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmax_vsvsvs : public Operation<	ARCH>
{
	OpUmax_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmaxp_vbvbvb : public Operation<	ARCH>
{
	OpUmaxp_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmaxp_vhvhvh : public Operation<	ARCH>
{
	OpUmaxp_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmaxp_vsvsvs : public Operation<	ARCH>
{
	OpUmaxp_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmin_vbvbvb : public Operation<	ARCH>
{
	OpUmin_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmin_vhvhvh : public Operation<	ARCH>
{
	OpUmin_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUmin_vsvsvs : public Operation<	ARCH>
{
	OpUmin_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUminp_vbvbvb : public Operation<	ARCH>
{
	OpUminp_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUminp_vhvhvh : public Operation<	ARCH>
{
	OpUminp_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUminp_vsvsvs : public Operation<	ARCH>
{
	OpUminp_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqadd_vbvbvb : public Operation<	ARCH>
{
	OpUqadd_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqadd_vhvhvh : public Operation<	ARCH>
{
	OpUqadd_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqadd_vsvsvs : public Operation<	ARCH>
{
	OpUqadd_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqrshl_vbvbvb : public Operation<	ARCH>
{
	OpUqrshl_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqrshl_vhvhvh : public Operation<	ARCH>
{
	OpUqrshl_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqrshl_vsvsvs : public Operation<	ARCH>
{
	OpUqrshl_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshl_vbbi : public Operation<	ARCH>
{
	OpUqshl_vbbi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshl_vbvbvb : public Operation<	ARCH>
{
	OpUqshl_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshl_vhhi : public Operation<	ARCH>
{
	OpUqshl_vhhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshl_vhvhvh : public Operation<	ARCH>
{
	OpUqshl_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshl_vssi : public Operation<	ARCH>
{
	OpUqshl_vssi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqshl_vsvsvs : public Operation<	ARCH>
{
	OpUqshl_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqsub_vbvbvb : public Operation<	ARCH>
{
	OpUqsub_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqsub_vhvhvh : public Operation<	ARCH>
{
	OpUqsub_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUqsub_vsvsvs : public Operation<	ARCH>
{
	OpUqsub_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUrecpe_vss : public Operation<	ARCH>
{
	OpUrecpe_vss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUrhadd_vbvbvb : public Operation<	ARCH>
{
	OpUrhadd_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUrhadd_vhvhvh : public Operation<	ARCH>
{
	OpUrhadd_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUrhadd_vsvsvs : public Operation<	ARCH>
{
	OpUrhadd_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUrshl_vbvbvb : public Operation<	ARCH>
{
	OpUrshl_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUrshl_vhvhvh : public Operation<	ARCH>
{
	OpUrshl_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUrshl_vsvsvs : public Operation<	ARCH>
{
	OpUrshl_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUrsqrte_vss : public Operation<	ARCH>
{
	OpUrsqrte_vss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUshl_d : public Operation<	ARCH>
{
	OpUshl_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUshl_vb : public Operation<	ARCH>
{
	OpUshl_vb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUshl_vh : public Operation<	ARCH>
{
	OpUshl_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUshl_vs : public Operation<	ARCH>
{
	OpUshl_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUshl_v2d : public Operation<	ARCH>
{
	OpUshl_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUshll_v8h : public Operation<	ARCH>
{
	OpUshll_v8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUshll_v4s : public Operation<	ARCH>
{
	OpUshll_v4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUshll_v2d : public Operation<	ARCH>
{
	OpUshll_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t imm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUshr_vbbi : public Operation<	ARCH>
{
	OpUshr_vbbi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t sm;
	uint8_t lro;
	uint8_t q;
	uint8_t round;   unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUshr_vhhi : public Operation<	ARCH>
{
	OpUshr_vhhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t sm;
	uint8_t lro;
	uint8_t q;
	uint16_t round;   unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUshr_vssi : public Operation<	ARCH>
{
	OpUshr_vssi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t sm;
	uint8_t lro;
	uint8_t q;
	uint32_t round;   unsigned shift; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUshr_v2d2di : public Operation<	ARCH>
{
	OpUshr_v2d2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t sm;
	uint8_t lro;
	uint64_t round;   uint8_t shift0;   uint8_t shift1; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUsqadd_vbb : public Operation<	ARCH>
{
	OpUsqadd_vbb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUsqadd_vhh : public Operation<	ARCH>
{
	OpUsqadd_vhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUsqadd_vss : public Operation<	ARCH>
{
	OpUsqadd_vss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUzp1_vbvbvb : public Operation<	ARCH>
{
	OpUzp1_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUzp1_vhvhvh : public Operation<	ARCH>
{
	OpUzp1_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUzp1_vsvsvs : public Operation<	ARCH>
{
	OpUzp1_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUzp2_vbvbvb : public Operation<	ARCH>
{
	OpUzp2_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpUzp2_vsvsvs : public Operation<	ARCH>
{
	OpUzp2_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpZip1_vbvbvb : public Operation<	ARCH>
{
	OpZip1_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpZip1_vhvhvh : public Operation<	ARCH>
{
	OpZip1_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpZip1_vsvsvs : public Operation<	ARCH>
{
	OpZip1_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpZip2_vbvbvb : public Operation<	ARCH>
{
	OpZip2_vbvbvb(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpZip2_vhvhvh : public Operation<	ARCH>
{
	OpZip2_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpZip2_vsvsvs : public Operation<	ARCH>
{
	OpZip2_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvms_bno : public Operation<	ARCH>
{
	OpStvms_bno(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t q;
	Vms vms; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvms_bio : public Operation<	ARCH>
{
	OpStvms_bio(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t q;
	Vms vms; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvms_hno : public Operation<	ARCH>
{
	OpStvms_hno(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t q;
	Vms vms; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvms_hio : public Operation<	ARCH>
{
	OpStvms_hio(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t q;
	Vms vms; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvms_sno : public Operation<	ARCH>
{
	OpStvms_sno(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t q;
	Vms vms; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvms_sio : public Operation<	ARCH>
{
	OpStvms_sio(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t q;
	Vms vms; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvms_dno : public Operation<	ARCH>
{
	OpStvms_dno(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t q;
	Vms vms;   Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvms_dio : public Operation<	ARCH>
{
	OpStvms_dio(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t q;
	Vms vms;   Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvms_bno : public Operation<	ARCH>
{
	OpLdvms_bno(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t q;
	Vms vms; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvms_bio : public Operation<	ARCH>
{
	OpLdvms_bio(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t q;
	Vms vms; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvms_hno : public Operation<	ARCH>
{
	OpLdvms_hno(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t q;
	Vms vms; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvms_hio : public Operation<	ARCH>
{
	OpLdvms_hio(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t q;
	Vms vms; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvms_sno : public Operation<	ARCH>
{
	OpLdvms_sno(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t q;
	Vms vms; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvms_sio : public Operation<	ARCH>
{
	OpLdvms_sio(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t q;
	Vms vms; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvms_dno : public Operation<	ARCH>
{
	OpLdvms_dno(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t q;
	Vms vms;   Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvms_dio : public Operation<	ARCH>
{
	OpLdvms_dio(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t opcode;
	uint8_t q;
	Vms vms;   Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvsl_bno : public Operation<	ARCH>
{
	OpStvsl_bno(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t index0;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t index1;
	unsigned index;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvsl_bio : public Operation<	ARCH>
{
	OpStvsl_bio(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t index0;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t index1;
	unsigned index;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvsl_hno : public Operation<	ARCH>
{
	OpStvsl_hno(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t index0;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t index1;
	unsigned index;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvsl_hio : public Operation<	ARCH>
{
	OpStvsl_hio(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t index0;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t index1;
	unsigned index;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvsl_sno : public Operation<	ARCH>
{
	OpStvsl_sno(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t index0;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t index1;
	unsigned index;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvsl_sio : public Operation<	ARCH>
{
	OpStvsl_sio(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t index0;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t index1;
	unsigned index;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvsl_dno : public Operation<	ARCH>
{
	OpStvsl_dno(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t index;
	unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpStvsl_dio : public Operation<	ARCH>
{
	OpStvsl_dio(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t index;
	unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvsl_bno : public Operation<	ARCH>
{
	OpLdvsl_bno(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t index0;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t index1;
	unsigned index;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvsl_bio : public Operation<	ARCH>
{
	OpLdvsl_bio(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t index0;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t index1;
	unsigned index;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvsl_hno : public Operation<	ARCH>
{
	OpLdvsl_hno(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t index0;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t index1;
	unsigned index;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvsl_hio : public Operation<	ARCH>
{
	OpLdvsl_hio(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t index0;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t index1;
	unsigned index;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvsl_sno : public Operation<	ARCH>
{
	OpLdvsl_sno(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t index0;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t index1;
	unsigned index;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvsl_sio : public Operation<	ARCH>
{
	OpLdvsl_sio(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t index0;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t index1;
	unsigned index;   unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvsl_dno : public Operation<	ARCH>
{
	OpLdvsl_dno(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t index;
	unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvsl_dio : public Operation<	ARCH>
{
	OpLdvsl_dio(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t index;
	unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvr_bno : public Operation<	ARCH>
{
	OpLdvr_bno(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t q;
	unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvr_bio : public Operation<	ARCH>
{
	OpLdvr_bio(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t q;
	unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvr_hno : public Operation<	ARCH>
{
	OpLdvr_hno(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t q;
	unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvr_hio : public Operation<	ARCH>
{
	OpLdvr_hio(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t q;
	unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvr_sno : public Operation<	ARCH>
{
	OpLdvr_sno(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t q;
	unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvr_sio : public Operation<	ARCH>
{
	OpLdvr_sio(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t q;
	unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvr_dno : public Operation<	ARCH>
{
	OpLdvr_dno(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t q;
	unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpLdvr_dio : public Operation<	ARCH>
{
	OpLdvr_dio(CodeType code, uint64_t addr);
	uint8_t rt;
	uint8_t rn;
	uint8_t regs1;
	uint8_t regs0;
	uint8_t q;
	unsigned regs; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpFabd_h : public Operation<	ARCH>
{
	OpFabd_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFabd_s : public Operation<	ARCH>
{
	OpFabd_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFabd_d : public Operation<	ARCH>
{
	OpFabd_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFabd_vh : public Operation<	ARCH>
{
	OpFabd_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFabd_vs : public Operation<	ARCH>
{
	OpFabd_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFabd_v2d : public Operation<	ARCH>
{
	OpFabd_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFabs_h : public Operation<	ARCH>
{
	OpFabs_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFabs_s : public Operation<	ARCH>
{
	OpFabs_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFabs_d : public Operation<	ARCH>
{
	OpFabs_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFabs_vh : public Operation<	ARCH>
{
	OpFabs_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFabs_vs : public Operation<	ARCH>
{
	OpFabs_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFabs_v2d : public Operation<	ARCH>
{
	OpFabs_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFacge_h : public Operation<	ARCH>
{
	OpFacge_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFacge_s : public Operation<	ARCH>
{
	OpFacge_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFacge_d : public Operation<	ARCH>
{
	OpFacge_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFacge_vh : public Operation<	ARCH>
{
	OpFacge_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFacge_vs : public Operation<	ARCH>
{
	OpFacge_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFacge_v2d : public Operation<	ARCH>
{
	OpFacge_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFacgt_h : public Operation<	ARCH>
{
	OpFacgt_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFacgt_s : public Operation<	ARCH>
{
	OpFacgt_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFacgt_d : public Operation<	ARCH>
{
	OpFacgt_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFacgt_vh : public Operation<	ARCH>
{
	OpFacgt_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFacgt_vs : public Operation<	ARCH>
{
	OpFacgt_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFacgt_v2d : public Operation<	ARCH>
{
	OpFacgt_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFadd_h : public Operation<	ARCH>
{
	OpFadd_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFadd_s : public Operation<	ARCH>
{
	OpFadd_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFadd_d : public Operation<	ARCH>
{
	OpFadd_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFadd_vh : public Operation<	ARCH>
{
	OpFadd_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFadd_vs : public Operation<	ARCH>
{
	OpFadd_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFadd_v2d : public Operation<	ARCH>
{
	OpFadd_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFaddp_h : public Operation<	ARCH>
{
	OpFaddp_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFaddp_s : public Operation<	ARCH>
{
	OpFaddp_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFaddp_d : public Operation<	ARCH>
{
	OpFaddp_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFaddp_vh : public Operation<	ARCH>
{
	OpFaddp_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFaddp_vs : public Operation<	ARCH>
{
	OpFaddp_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFaddp_v2d : public Operation<	ARCH>
{
	OpFaddp_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFccmp_h : public Operation<	ARCH>
{
	OpFccmp_h(CodeType code, uint64_t addr);
	uint8_t v;
	uint8_t c;
	uint8_t z;
	uint8_t n;
	uint8_t rn;
	uint8_t cond;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFccmp_s : public Operation<	ARCH>
{
	OpFccmp_s(CodeType code, uint64_t addr);
	uint8_t v;
	uint8_t c;
	uint8_t z;
	uint8_t n;
	uint8_t rn;
	uint8_t cond;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFccmp_d : public Operation<	ARCH>
{
	OpFccmp_d(CodeType code, uint64_t addr);
	uint8_t v;
	uint8_t c;
	uint8_t z;
	uint8_t n;
	uint8_t rn;
	uint8_t cond;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFccmpe_d : public Operation<	ARCH>
{
	OpFccmpe_d(CodeType code, uint64_t addr);
	uint8_t v;
	uint8_t c;
	uint8_t z;
	uint8_t n;
	uint8_t rn;
	uint8_t cond;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFccmpe_s : public Operation<	ARCH>
{
	OpFccmpe_s(CodeType code, uint64_t addr);
	uint8_t v;
	uint8_t c;
	uint8_t z;
	uint8_t n;
	uint8_t rn;
	uint8_t cond;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFccmpe_h : public Operation<	ARCH>
{
	OpFccmpe_h(CodeType code, uint64_t addr);
	uint8_t v;
	uint8_t c;
	uint8_t z;
	uint8_t n;
	uint8_t rn;
	uint8_t cond;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmeq_h : public Operation<	ARCH>
{
	OpFcmeq_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmeq_s : public Operation<	ARCH>
{
	OpFcmeq_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmeq_d : public Operation<	ARCH>
{
	OpFcmeq_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmeq_vh : public Operation<	ARCH>
{
	OpFcmeq_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmeq_vs : public Operation<	ARCH>
{
	OpFcmeq_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmeq_v2d : public Operation<	ARCH>
{
	OpFcmeq_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmeq_hz : public Operation<	ARCH>
{
	OpFcmeq_hz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmeq_sz : public Operation<	ARCH>
{
	OpFcmeq_sz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmeq_dz : public Operation<	ARCH>
{
	OpFcmeq_dz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmeq_vhz : public Operation<	ARCH>
{
	OpFcmeq_vhz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmeq_vsz : public Operation<	ARCH>
{
	OpFcmeq_vsz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmeq_v2dz : public Operation<	ARCH>
{
	OpFcmeq_v2dz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmge_h : public Operation<	ARCH>
{
	OpFcmge_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmge_s : public Operation<	ARCH>
{
	OpFcmge_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmge_d : public Operation<	ARCH>
{
	OpFcmge_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmge_vh : public Operation<	ARCH>
{
	OpFcmge_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmge_vs : public Operation<	ARCH>
{
	OpFcmge_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmge_v2d : public Operation<	ARCH>
{
	OpFcmge_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmge_hz : public Operation<	ARCH>
{
	OpFcmge_hz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmge_sz : public Operation<	ARCH>
{
	OpFcmge_sz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmge_dz : public Operation<	ARCH>
{
	OpFcmge_dz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmge_vhz : public Operation<	ARCH>
{
	OpFcmge_vhz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmge_vsz : public Operation<	ARCH>
{
	OpFcmge_vsz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmge_v2dz : public Operation<	ARCH>
{
	OpFcmge_v2dz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmgt_h : public Operation<	ARCH>
{
	OpFcmgt_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmgt_s : public Operation<	ARCH>
{
	OpFcmgt_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmgt_d : public Operation<	ARCH>
{
	OpFcmgt_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmgt_vh : public Operation<	ARCH>
{
	OpFcmgt_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmgt_vs : public Operation<	ARCH>
{
	OpFcmgt_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmgt_v2d : public Operation<	ARCH>
{
	OpFcmgt_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmgt_hz : public Operation<	ARCH>
{
	OpFcmgt_hz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmgt_sz : public Operation<	ARCH>
{
	OpFcmgt_sz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmgt_dz : public Operation<	ARCH>
{
	OpFcmgt_dz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmgt_vhz : public Operation<	ARCH>
{
	OpFcmgt_vhz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmgt_vsz : public Operation<	ARCH>
{
	OpFcmgt_vsz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmgt_v2dz : public Operation<	ARCH>
{
	OpFcmgt_v2dz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmle_hz : public Operation<	ARCH>
{
	OpFcmle_hz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmle_sz : public Operation<	ARCH>
{
	OpFcmle_sz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmle_dz : public Operation<	ARCH>
{
	OpFcmle_dz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmle_vhz : public Operation<	ARCH>
{
	OpFcmle_vhz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmle_vsz : public Operation<	ARCH>
{
	OpFcmle_vsz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmle_v2dz : public Operation<	ARCH>
{
	OpFcmle_v2dz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmlt_hz : public Operation<	ARCH>
{
	OpFcmlt_hz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmlt_sz : public Operation<	ARCH>
{
	OpFcmlt_sz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmlt_dz : public Operation<	ARCH>
{
	OpFcmlt_dz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmlt_vhz : public Operation<	ARCH>
{
	OpFcmlt_vhz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmlt_vsz : public Operation<	ARCH>
{
	OpFcmlt_vsz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmlt_v2dz : public Operation<	ARCH>
{
	OpFcmlt_v2dz(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmp_h : public Operation<	ARCH>
{
	OpFcmp_h(CodeType code, uint64_t addr);
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmp_s : public Operation<	ARCH>
{
	OpFcmp_s(CodeType code, uint64_t addr);
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmp_d : public Operation<	ARCH>
{
	OpFcmp_d(CodeType code, uint64_t addr);
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmp_hz : public Operation<	ARCH>
{
	OpFcmp_hz(CodeType code, uint64_t addr);
	uint8_t rn;
	uint8_t rm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmp_sz : public Operation<	ARCH>
{
	OpFcmp_sz(CodeType code, uint64_t addr);
	uint8_t rn;
	uint8_t rm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmp_dz : public Operation<	ARCH>
{
	OpFcmp_dz(CodeType code, uint64_t addr);
	uint8_t rn;
	uint8_t rm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmpe_h : public Operation<	ARCH>
{
	OpFcmpe_h(CodeType code, uint64_t addr);
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmpe_s : public Operation<	ARCH>
{
	OpFcmpe_s(CodeType code, uint64_t addr);
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmpe_d : public Operation<	ARCH>
{
	OpFcmpe_d(CodeType code, uint64_t addr);
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmpe_hz : public Operation<	ARCH>
{
	OpFcmpe_hz(CodeType code, uint64_t addr);
	uint8_t rn;
	uint8_t rm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmpe_sz : public Operation<	ARCH>
{
	OpFcmpe_sz(CodeType code, uint64_t addr);
	uint8_t rn;
	uint8_t rm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcmpe_dz : public Operation<	ARCH>
{
	OpFcmpe_dz(CodeType code, uint64_t addr);
	uint8_t rn;
	uint8_t rm;
	Reject reject; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcsel_h : public Operation<	ARCH>
{
	OpFcsel_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t cond;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcsel_s : public Operation<	ARCH>
{
	OpFcsel_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t cond;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcsel_d : public Operation<	ARCH>
{
	OpFcsel_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t cond;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvt_hs : public Operation<	ARCH>
{
	OpFcvt_hs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvt_hd : public Operation<	ARCH>
{
	OpFcvt_hd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvt_sh : public Operation<	ARCH>
{
	OpFcvt_sh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvt_sd : public Operation<	ARCH>
{
	OpFcvt_sd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvt_dh : public Operation<	ARCH>
{
	OpFcvt_dh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvt_ds : public Operation<	ARCH>
{
	OpFcvt_ds(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtas_hh : public Operation<	ARCH>
{
	OpFcvtas_hh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtas_ss : public Operation<	ARCH>
{
	OpFcvtas_ss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtas_dd : public Operation<	ARCH>
{
	OpFcvtas_dd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtas_wh : public Operation<	ARCH>
{
	OpFcvtas_wh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtas_ws : public Operation<	ARCH>
{
	OpFcvtas_ws(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtas_wd : public Operation<	ARCH>
{
	OpFcvtas_wd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtas_xh : public Operation<	ARCH>
{
	OpFcvtas_xh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtas_xs : public Operation<	ARCH>
{
	OpFcvtas_xs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtas_xd : public Operation<	ARCH>
{
	OpFcvtas_xd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtas_vhh : public Operation<	ARCH>
{
	OpFcvtas_vhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtas_vss : public Operation<	ARCH>
{
	OpFcvtas_vss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtas_v2d2d : public Operation<	ARCH>
{
	OpFcvtas_v2d2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtau_hh : public Operation<	ARCH>
{
	OpFcvtau_hh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtau_ss : public Operation<	ARCH>
{
	OpFcvtau_ss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtau_dd : public Operation<	ARCH>
{
	OpFcvtau_dd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtau_wh : public Operation<	ARCH>
{
	OpFcvtau_wh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtau_ws : public Operation<	ARCH>
{
	OpFcvtau_ws(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtau_wd : public Operation<	ARCH>
{
	OpFcvtau_wd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtau_xh : public Operation<	ARCH>
{
	OpFcvtau_xh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtau_xs : public Operation<	ARCH>
{
	OpFcvtau_xs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtau_xd : public Operation<	ARCH>
{
	OpFcvtau_xd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtau_vhh : public Operation<	ARCH>
{
	OpFcvtau_vhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtau_vss : public Operation<	ARCH>
{
	OpFcvtau_vss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtau_v2d2d : public Operation<	ARCH>
{
	OpFcvtau_v2d2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtl2_v2d4s : public Operation<	ARCH>
{
	OpFcvtl2_v2d4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtl2_v4s8h : public Operation<	ARCH>
{
	OpFcvtl2_v4s8h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtl_v2d2s : public Operation<	ARCH>
{
	OpFcvtl_v2d2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtl_v4s4h : public Operation<	ARCH>
{
	OpFcvtl_v4s4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtms_hh : public Operation<	ARCH>
{
	OpFcvtms_hh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtms_ss : public Operation<	ARCH>
{
	OpFcvtms_ss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtms_dd : public Operation<	ARCH>
{
	OpFcvtms_dd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtms_wh : public Operation<	ARCH>
{
	OpFcvtms_wh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtms_ws : public Operation<	ARCH>
{
	OpFcvtms_ws(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtms_wd : public Operation<	ARCH>
{
	OpFcvtms_wd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtms_xh : public Operation<	ARCH>
{
	OpFcvtms_xh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtms_xs : public Operation<	ARCH>
{
	OpFcvtms_xs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtms_xd : public Operation<	ARCH>
{
	OpFcvtms_xd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtms_vhh : public Operation<	ARCH>
{
	OpFcvtms_vhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtms_vss : public Operation<	ARCH>
{
	OpFcvtms_vss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtms_v2d2d : public Operation<	ARCH>
{
	OpFcvtms_v2d2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtmu_hh : public Operation<	ARCH>
{
	OpFcvtmu_hh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtmu_ss : public Operation<	ARCH>
{
	OpFcvtmu_ss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtmu_dd : public Operation<	ARCH>
{
	OpFcvtmu_dd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtmu_wh : public Operation<	ARCH>
{
	OpFcvtmu_wh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtmu_ws : public Operation<	ARCH>
{
	OpFcvtmu_ws(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtmu_wd : public Operation<	ARCH>
{
	OpFcvtmu_wd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtmu_xh : public Operation<	ARCH>
{
	OpFcvtmu_xh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtmu_xs : public Operation<	ARCH>
{
	OpFcvtmu_xs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtmu_xd : public Operation<	ARCH>
{
	OpFcvtmu_xd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtmu_vhh : public Operation<	ARCH>
{
	OpFcvtmu_vhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtmu_vss : public Operation<	ARCH>
{
	OpFcvtmu_vss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtmu_v2d2d : public Operation<	ARCH>
{
	OpFcvtmu_v2d2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtn2_v4s2d : public Operation<	ARCH>
{
	OpFcvtn2_v4s2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtn2_v8h4s : public Operation<	ARCH>
{
	OpFcvtn2_v8h4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtn_v2s2d : public Operation<	ARCH>
{
	OpFcvtn_v2s2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtn_v4h4s : public Operation<	ARCH>
{
	OpFcvtn_v4h4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtns_hh : public Operation<	ARCH>
{
	OpFcvtns_hh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtns_ss : public Operation<	ARCH>
{
	OpFcvtns_ss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtns_dd : public Operation<	ARCH>
{
	OpFcvtns_dd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtns_wh : public Operation<	ARCH>
{
	OpFcvtns_wh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtns_ws : public Operation<	ARCH>
{
	OpFcvtns_ws(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtns_wd : public Operation<	ARCH>
{
	OpFcvtns_wd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtns_xh : public Operation<	ARCH>
{
	OpFcvtns_xh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtns_xs : public Operation<	ARCH>
{
	OpFcvtns_xs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtns_xd : public Operation<	ARCH>
{
	OpFcvtns_xd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtns_vhh : public Operation<	ARCH>
{
	OpFcvtns_vhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtns_vss : public Operation<	ARCH>
{
	OpFcvtns_vss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtns_v2d2d : public Operation<	ARCH>
{
	OpFcvtns_v2d2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtnu_hh : public Operation<	ARCH>
{
	OpFcvtnu_hh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtnu_ss : public Operation<	ARCH>
{
	OpFcvtnu_ss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtnu_dd : public Operation<	ARCH>
{
	OpFcvtnu_dd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtnu_wh : public Operation<	ARCH>
{
	OpFcvtnu_wh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtnu_ws : public Operation<	ARCH>
{
	OpFcvtnu_ws(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtnu_wd : public Operation<	ARCH>
{
	OpFcvtnu_wd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtnu_xh : public Operation<	ARCH>
{
	OpFcvtnu_xh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtnu_xs : public Operation<	ARCH>
{
	OpFcvtnu_xs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtnu_xd : public Operation<	ARCH>
{
	OpFcvtnu_xd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtnu_vhh : public Operation<	ARCH>
{
	OpFcvtnu_vhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtnu_vss : public Operation<	ARCH>
{
	OpFcvtnu_vss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtnu_v2d2d : public Operation<	ARCH>
{
	OpFcvtnu_v2d2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtps_hh : public Operation<	ARCH>
{
	OpFcvtps_hh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtps_ss : public Operation<	ARCH>
{
	OpFcvtps_ss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtps_dd : public Operation<	ARCH>
{
	OpFcvtps_dd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtps_wh : public Operation<	ARCH>
{
	OpFcvtps_wh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtps_ws : public Operation<	ARCH>
{
	OpFcvtps_ws(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtps_wd : public Operation<	ARCH>
{
	OpFcvtps_wd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtps_xh : public Operation<	ARCH>
{
	OpFcvtps_xh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtps_xs : public Operation<	ARCH>
{
	OpFcvtps_xs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtps_xd : public Operation<	ARCH>
{
	OpFcvtps_xd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtps_vhh : public Operation<	ARCH>
{
	OpFcvtps_vhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtps_vss : public Operation<	ARCH>
{
	OpFcvtps_vss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtps_v2d2d : public Operation<	ARCH>
{
	OpFcvtps_v2d2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtpu_hh : public Operation<	ARCH>
{
	OpFcvtpu_hh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtpu_ss : public Operation<	ARCH>
{
	OpFcvtpu_ss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtpu_dd : public Operation<	ARCH>
{
	OpFcvtpu_dd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtpu_wh : public Operation<	ARCH>
{
	OpFcvtpu_wh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtpu_ws : public Operation<	ARCH>
{
	OpFcvtpu_ws(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtpu_wd : public Operation<	ARCH>
{
	OpFcvtpu_wd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtpu_xh : public Operation<	ARCH>
{
	OpFcvtpu_xh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtpu_xs : public Operation<	ARCH>
{
	OpFcvtpu_xs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtpu_xd : public Operation<	ARCH>
{
	OpFcvtpu_xd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtpu_vhh : public Operation<	ARCH>
{
	OpFcvtpu_vhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtpu_vss : public Operation<	ARCH>
{
	OpFcvtpu_vss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtpu_v2d2d : public Operation<	ARCH>
{
	OpFcvtpu_v2d2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtxn2_v4s2d : public Operation<	ARCH>
{
	OpFcvtxn2_v4s2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtxn_sd : public Operation<	ARCH>
{
	OpFcvtxn_sd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtxn_v2s2d : public Operation<	ARCH>
{
	OpFcvtxn_v2s2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_hh : public Operation<	ARCH>
{
	OpFcvtzs_hh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_ss : public Operation<	ARCH>
{
	OpFcvtzs_ss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_dd : public Operation<	ARCH>
{
	OpFcvtzs_dd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_wh : public Operation<	ARCH>
{
	OpFcvtzs_wh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_ws : public Operation<	ARCH>
{
	OpFcvtzs_ws(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_wd : public Operation<	ARCH>
{
	OpFcvtzs_wd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_xh : public Operation<	ARCH>
{
	OpFcvtzs_xh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_xs : public Operation<	ARCH>
{
	OpFcvtzs_xs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_xd : public Operation<	ARCH>
{
	OpFcvtzs_xd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_vhh : public Operation<	ARCH>
{
	OpFcvtzs_vhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_vss : public Operation<	ARCH>
{
	OpFcvtzs_vss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_v2d2d : public Operation<	ARCH>
{
	OpFcvtzs_v2d2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_whi : public Operation<	ARCH>
{
	OpFcvtzs_whi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_wsi : public Operation<	ARCH>
{
	OpFcvtzs_wsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_wdi : public Operation<	ARCH>
{
	OpFcvtzs_wdi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_xhi : public Operation<	ARCH>
{
	OpFcvtzs_xhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_xsi : public Operation<	ARCH>
{
	OpFcvtzs_xsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_xdi : public Operation<	ARCH>
{
	OpFcvtzs_xdi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_hhi : public Operation<	ARCH>
{
	OpFcvtzs_hhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_ssi : public Operation<	ARCH>
{
	OpFcvtzs_ssi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_ddi : public Operation<	ARCH>
{
	OpFcvtzs_ddi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_vhhi : public Operation<	ARCH>
{
	OpFcvtzs_vhhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	uint8_t q;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_vssi : public Operation<	ARCH>
{
	OpFcvtzs_vssi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	uint8_t q;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzs_v2d2di : public Operation<	ARCH>
{
	OpFcvtzs_v2d2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_hh : public Operation<	ARCH>
{
	OpFcvtzu_hh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_ss : public Operation<	ARCH>
{
	OpFcvtzu_ss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_dd : public Operation<	ARCH>
{
	OpFcvtzu_dd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_wh : public Operation<	ARCH>
{
	OpFcvtzu_wh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_ws : public Operation<	ARCH>
{
	OpFcvtzu_ws(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_wd : public Operation<	ARCH>
{
	OpFcvtzu_wd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_xh : public Operation<	ARCH>
{
	OpFcvtzu_xh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_xs : public Operation<	ARCH>
{
	OpFcvtzu_xs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_xd : public Operation<	ARCH>
{
	OpFcvtzu_xd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_vhh : public Operation<	ARCH>
{
	OpFcvtzu_vhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_vss : public Operation<	ARCH>
{
	OpFcvtzu_vss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_v2d2d : public Operation<	ARCH>
{
	OpFcvtzu_v2d2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_whi : public Operation<	ARCH>
{
	OpFcvtzu_whi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_wsi : public Operation<	ARCH>
{
	OpFcvtzu_wsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_xhi : public Operation<	ARCH>
{
	OpFcvtzu_xhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_xsi : public Operation<	ARCH>
{
	OpFcvtzu_xsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_wdi : public Operation<	ARCH>
{
	OpFcvtzu_wdi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_xdi : public Operation<	ARCH>
{
	OpFcvtzu_xdi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_hhi : public Operation<	ARCH>
{
	OpFcvtzu_hhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_ssi : public Operation<	ARCH>
{
	OpFcvtzu_ssi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_ddi : public Operation<	ARCH>
{
	OpFcvtzu_ddi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_vhhi : public Operation<	ARCH>
{
	OpFcvtzu_vhhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	uint8_t q;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_vssi : public Operation<	ARCH>
{
	OpFcvtzu_vssi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	uint8_t q;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFcvtzu_v2d2di : public Operation<	ARCH>
{
	OpFcvtzu_v2d2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFdiv_h : public Operation<	ARCH>
{
	OpFdiv_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFdiv_s : public Operation<	ARCH>
{
	OpFdiv_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFdiv_d : public Operation<	ARCH>
{
	OpFdiv_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFdiv_vh : public Operation<	ARCH>
{
	OpFdiv_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFdiv_vs : public Operation<	ARCH>
{
	OpFdiv_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFdiv_v2d : public Operation<	ARCH>
{
	OpFdiv_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmadd_h : public Operation<	ARCH>
{
	OpFmadd_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t ra;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmadd_s : public Operation<	ARCH>
{
	OpFmadd_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t ra;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmadd_d : public Operation<	ARCH>
{
	OpFmadd_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t ra;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmax_h : public Operation<	ARCH>
{
	OpFmax_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmax_s : public Operation<	ARCH>
{
	OpFmax_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmax_d : public Operation<	ARCH>
{
	OpFmax_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmax_vh : public Operation<	ARCH>
{
	OpFmax_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmax_vs : public Operation<	ARCH>
{
	OpFmax_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmax_v2d : public Operation<	ARCH>
{
	OpFmax_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxnm_h : public Operation<	ARCH>
{
	OpFmaxnm_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxnm_s : public Operation<	ARCH>
{
	OpFmaxnm_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxnm_d : public Operation<	ARCH>
{
	OpFmaxnm_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxnm_vh : public Operation<	ARCH>
{
	OpFmaxnm_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxnm_vs : public Operation<	ARCH>
{
	OpFmaxnm_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxnm_v2d : public Operation<	ARCH>
{
	OpFmaxnm_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxnmp_dv2d : public Operation<	ARCH>
{
	OpFmaxnmp_dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxnmp_hv2h : public Operation<	ARCH>
{
	OpFmaxnmp_hv2h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxnmp_sv2s : public Operation<	ARCH>
{
	OpFmaxnmp_sv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxnmp_vhvhvh : public Operation<	ARCH>
{
	OpFmaxnmp_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxnmp_vsvsvs : public Operation<	ARCH>
{
	OpFmaxnmp_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxnmp_v2dv2dv2d : public Operation<	ARCH>
{
	OpFmaxnmp_v2dv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxnmv_hv2h : public Operation<	ARCH>
{
	OpFmaxnmv_hv2h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxnmv_hv4h : public Operation<	ARCH>
{
	OpFmaxnmv_hv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxnmv_sv4s : public Operation<	ARCH>
{
	OpFmaxnmv_sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxp_dv2d : public Operation<	ARCH>
{
	OpFmaxp_dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxp_hv2h : public Operation<	ARCH>
{
	OpFmaxp_hv2h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxp_sv2s : public Operation<	ARCH>
{
	OpFmaxp_sv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxp_vhvhvh : public Operation<	ARCH>
{
	OpFmaxp_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxp_vsvsvs : public Operation<	ARCH>
{
	OpFmaxp_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxp_v2dv2dv2d : public Operation<	ARCH>
{
	OpFmaxp_v2dv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxv_hv2h : public Operation<	ARCH>
{
	OpFmaxv_hv2h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxv_hv4h : public Operation<	ARCH>
{
	OpFmaxv_hv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmaxv_sv4s : public Operation<	ARCH>
{
	OpFmaxv_sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmin_h : public Operation<	ARCH>
{
	OpFmin_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmin_s : public Operation<	ARCH>
{
	OpFmin_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmin_d : public Operation<	ARCH>
{
	OpFmin_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmin_vh : public Operation<	ARCH>
{
	OpFmin_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmin_vs : public Operation<	ARCH>
{
	OpFmin_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmin_v2d : public Operation<	ARCH>
{
	OpFmin_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminnm_h : public Operation<	ARCH>
{
	OpFminnm_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminnm_s : public Operation<	ARCH>
{
	OpFminnm_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminnm_d : public Operation<	ARCH>
{
	OpFminnm_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminnm_vh : public Operation<	ARCH>
{
	OpFminnm_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminnm_vs : public Operation<	ARCH>
{
	OpFminnm_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminnm_v2d : public Operation<	ARCH>
{
	OpFminnm_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminnmp_hv2h : public Operation<	ARCH>
{
	OpFminnmp_hv2h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminnmp_sv2s : public Operation<	ARCH>
{
	OpFminnmp_sv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminnmp_dv2d : public Operation<	ARCH>
{
	OpFminnmp_dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminnmp_vhvhvh : public Operation<	ARCH>
{
	OpFminnmp_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminnmp_vsvsvs : public Operation<	ARCH>
{
	OpFminnmp_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminnmp_v2dv2dv2d : public Operation<	ARCH>
{
	OpFminnmp_v2dv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminnmv_hv2h : public Operation<	ARCH>
{
	OpFminnmv_hv2h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminnmv_hv4h : public Operation<	ARCH>
{
	OpFminnmv_hv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminnmv_sv4s : public Operation<	ARCH>
{
	OpFminnmv_sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminp_hv2h : public Operation<	ARCH>
{
	OpFminp_hv2h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminp_sv2s : public Operation<	ARCH>
{
	OpFminp_sv2s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminp_dv2d : public Operation<	ARCH>
{
	OpFminp_dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminp_vhvhvh : public Operation<	ARCH>
{
	OpFminp_vhvhvh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminp_vsvsvs : public Operation<	ARCH>
{
	OpFminp_vsvsvs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminp_v2dv2dv2d : public Operation<	ARCH>
{
	OpFminp_v2dv2dv2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminv_hv2h : public Operation<	ARCH>
{
	OpFminv_hv2h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminv_hv4h : public Operation<	ARCH>
{
	OpFminv_hv4h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFminv_sv4s : public Operation<	ARCH>
{
	OpFminv_sv4s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmla_hi : public Operation<	ARCH>
{
	OpFmla_hi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmla_si : public Operation<	ARCH>
{
	OpFmla_si(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmla_di : public Operation<	ARCH>
{
	OpFmla_di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmla_vhi : public Operation<	ARCH>
{
	OpFmla_vhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t q;
	uint8_t index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmla_vsi : public Operation<	ARCH>
{
	OpFmla_vsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t q;
	uint8_t index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmla_v2di : public Operation<	ARCH>
{
	OpFmla_v2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmla_vh : public Operation<	ARCH>
{
	OpFmla_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmla_vs : public Operation<	ARCH>
{
	OpFmla_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmla_v2d : public Operation<	ARCH>
{
	OpFmla_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmls_hi : public Operation<	ARCH>
{
	OpFmls_hi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmls_si : public Operation<	ARCH>
{
	OpFmls_si(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmls_di : public Operation<	ARCH>
{
	OpFmls_di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmls_vhi : public Operation<	ARCH>
{
	OpFmls_vhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t q;
	uint8_t index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmls_vsi : public Operation<	ARCH>
{
	OpFmls_vsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t q;
	uint8_t index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmls_v2di : public Operation<	ARCH>
{
	OpFmls_v2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmls_vh : public Operation<	ARCH>
{
	OpFmls_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmls_vs : public Operation<	ARCH>
{
	OpFmls_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmls_v2d : public Operation<	ARCH>
{
	OpFmls_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmov_hh : public Operation<	ARCH>
{
	OpFmov_hh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmov_ss : public Operation<	ARCH>
{
	OpFmov_ss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmov_dd : public Operation<	ARCH>
{
	OpFmov_dd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmov_hf : public Operation<	ARCH>
{
	OpFmov_hf(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t fpimm;
	FPImm imm; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmov_sf : public Operation<	ARCH>
{
	OpFmov_sf(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t fpimm;
	FPImm imm; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmov_df : public Operation<	ARCH>
{
	OpFmov_df(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t fpimm;
	FPImm imm; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmov_vhf : public Operation<	ARCH>
{
	OpFmov_vhf(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t imm0;
	uint8_t imm1;
	uint8_t q;
	FPImm imm; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmov_vsf : public Operation<	ARCH>
{
	OpFmov_vsf(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t imm0;
	uint8_t imm1;
	uint8_t q;
	FPImm imm; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmov_v2df : public Operation<	ARCH>
{
	OpFmov_v2df(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t imm0;
	uint8_t imm1;
	FPImm imm; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmov_hw : public Operation<	ARCH>
{
	OpFmov_hw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpFmov_hx : public Operation<	ARCH>
{
	OpFmov_hx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpFmov_wh : public Operation<	ARCH>
{
	OpFmov_wh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpFmov_sw : public Operation<	ARCH>
{
	OpFmov_sw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpFmov_ws : public Operation<	ARCH>
{
	OpFmov_ws(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpFmov_dx : public Operation<	ARCH>
{
	OpFmov_dx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpFmov_dix : public Operation<	ARCH>
{
	OpFmov_dix(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpFmov_xh : public Operation<	ARCH>
{
	OpFmov_xh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpFmov_xd : public Operation<	ARCH>
{
	OpFmov_xd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpFmov_xdi : public Operation<	ARCH>
{
	OpFmov_xdi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
	virtual
	void execute( ARCH & cpu ) const;
private:
};

template <	typename	ARCH>
struct OpFmsub_h : public Operation<	ARCH>
{
	OpFmsub_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t ra;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmsub_s : public Operation<	ARCH>
{
	OpFmsub_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t ra;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmsub_d : public Operation<	ARCH>
{
	OpFmsub_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t ra;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmul_h : public Operation<	ARCH>
{
	OpFmul_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmul_s : public Operation<	ARCH>
{
	OpFmul_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmul_d : public Operation<	ARCH>
{
	OpFmul_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmul_vh : public Operation<	ARCH>
{
	OpFmul_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmul_vs : public Operation<	ARCH>
{
	OpFmul_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmul_v2d : public Operation<	ARCH>
{
	OpFmul_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmul_hi : public Operation<	ARCH>
{
	OpFmul_hi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmul_si : public Operation<	ARCH>
{
	OpFmul_si(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmul_di : public Operation<	ARCH>
{
	OpFmul_di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmul_vhi : public Operation<	ARCH>
{
	OpFmul_vhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t q;
	uint8_t index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmul_vsi : public Operation<	ARCH>
{
	OpFmul_vsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t q;
	uint8_t index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmul_v2di : public Operation<	ARCH>
{
	OpFmul_v2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmulx_h : public Operation<	ARCH>
{
	OpFmulx_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmulx_s : public Operation<	ARCH>
{
	OpFmulx_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmulx_d : public Operation<	ARCH>
{
	OpFmulx_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmulx_vh : public Operation<	ARCH>
{
	OpFmulx_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmulx_vs : public Operation<	ARCH>
{
	OpFmulx_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmulx_v2d : public Operation<	ARCH>
{
	OpFmulx_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmulx_hi : public Operation<	ARCH>
{
	OpFmulx_hi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmulx_si : public Operation<	ARCH>
{
	OpFmulx_si(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmulx_di : public Operation<	ARCH>
{
	OpFmulx_di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmulx_vhi : public Operation<	ARCH>
{
	OpFmulx_vhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t q;
	uint8_t index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmulx_vsi : public Operation<	ARCH>
{
	OpFmulx_vsi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index1;
	uint8_t rm;
	uint8_t index0;
	uint8_t q;
	uint8_t index; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFmulx_v2di : public Operation<	ARCH>
{
	OpFmulx_v2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t index;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFneg_hh : public Operation<	ARCH>
{
	OpFneg_hh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFneg_ss : public Operation<	ARCH>
{
	OpFneg_ss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFneg_dd : public Operation<	ARCH>
{
	OpFneg_dd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFneg_vhh : public Operation<	ARCH>
{
	OpFneg_vhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFneg_vss : public Operation<	ARCH>
{
	OpFneg_vss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFneg_v2d2d : public Operation<	ARCH>
{
	OpFneg_v2d2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFnmadd_h : public Operation<	ARCH>
{
	OpFnmadd_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t ra;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFnmadd_s : public Operation<	ARCH>
{
	OpFnmadd_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t ra;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFnmadd_d : public Operation<	ARCH>
{
	OpFnmadd_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t ra;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFnmsub_h : public Operation<	ARCH>
{
	OpFnmsub_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t ra;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFnmsub_s : public Operation<	ARCH>
{
	OpFnmsub_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t ra;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFnmsub_d : public Operation<	ARCH>
{
	OpFnmsub_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t ra;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFnmul_hhh : public Operation<	ARCH>
{
	OpFnmul_hhh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFnmul_sss : public Operation<	ARCH>
{
	OpFnmul_sss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFnmul_ddd : public Operation<	ARCH>
{
	OpFnmul_ddd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrecpe_s : public Operation<	ARCH>
{
	OpFrecpe_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrecpe_d : public Operation<	ARCH>
{
	OpFrecpe_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrecpe_vs : public Operation<	ARCH>
{
	OpFrecpe_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrecpe_v2d : public Operation<	ARCH>
{
	OpFrecpe_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrecps_s : public Operation<	ARCH>
{
	OpFrecps_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrecps_d : public Operation<	ARCH>
{
	OpFrecps_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrecps_vs : public Operation<	ARCH>
{
	OpFrecps_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrecps_v2d : public Operation<	ARCH>
{
	OpFrecps_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrecpx_dd : public Operation<	ARCH>
{
	OpFrecpx_dd(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrecpx_ss : public Operation<	ARCH>
{
	OpFrecpx_ss(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrinta_h : public Operation<	ARCH>
{
	OpFrinta_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrinta_s : public Operation<	ARCH>
{
	OpFrinta_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrinta_d : public Operation<	ARCH>
{
	OpFrinta_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrinta_vh : public Operation<	ARCH>
{
	OpFrinta_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrinta_vs : public Operation<	ARCH>
{
	OpFrinta_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrinta_v2d : public Operation<	ARCH>
{
	OpFrinta_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrinti_d : public Operation<	ARCH>
{
	OpFrinti_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrinti_h : public Operation<	ARCH>
{
	OpFrinti_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrinti_s : public Operation<	ARCH>
{
	OpFrinti_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrinti_vh : public Operation<	ARCH>
{
	OpFrinti_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrinti_vs : public Operation<	ARCH>
{
	OpFrinti_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrinti_v2d : public Operation<	ARCH>
{
	OpFrinti_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintm_h : public Operation<	ARCH>
{
	OpFrintm_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintm_s : public Operation<	ARCH>
{
	OpFrintm_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintm_d : public Operation<	ARCH>
{
	OpFrintm_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintm_vh : public Operation<	ARCH>
{
	OpFrintm_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintm_vs : public Operation<	ARCH>
{
	OpFrintm_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintm_v2d : public Operation<	ARCH>
{
	OpFrintm_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintn_h : public Operation<	ARCH>
{
	OpFrintn_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintn_s : public Operation<	ARCH>
{
	OpFrintn_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintn_d : public Operation<	ARCH>
{
	OpFrintn_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintn_vh : public Operation<	ARCH>
{
	OpFrintn_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintn_vs : public Operation<	ARCH>
{
	OpFrintn_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintn_v2d : public Operation<	ARCH>
{
	OpFrintn_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintp_h : public Operation<	ARCH>
{
	OpFrintp_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintp_s : public Operation<	ARCH>
{
	OpFrintp_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintp_d : public Operation<	ARCH>
{
	OpFrintp_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintp_vh : public Operation<	ARCH>
{
	OpFrintp_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintp_vs : public Operation<	ARCH>
{
	OpFrintp_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintp_v2d : public Operation<	ARCH>
{
	OpFrintp_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintx_h : public Operation<	ARCH>
{
	OpFrintx_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintx_s : public Operation<	ARCH>
{
	OpFrintx_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintx_d : public Operation<	ARCH>
{
	OpFrintx_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintx_vh : public Operation<	ARCH>
{
	OpFrintx_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintx_vs : public Operation<	ARCH>
{
	OpFrintx_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintx_v2d : public Operation<	ARCH>
{
	OpFrintx_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintz_h : public Operation<	ARCH>
{
	OpFrintz_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintz_s : public Operation<	ARCH>
{
	OpFrintz_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintz_d : public Operation<	ARCH>
{
	OpFrintz_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintz_vh : public Operation<	ARCH>
{
	OpFrintz_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintz_vs : public Operation<	ARCH>
{
	OpFrintz_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrintz_v2d : public Operation<	ARCH>
{
	OpFrintz_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrsqrte_s : public Operation<	ARCH>
{
	OpFrsqrte_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrsqrte_d : public Operation<	ARCH>
{
	OpFrsqrte_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrsqrte_vs : public Operation<	ARCH>
{
	OpFrsqrte_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrsqrte_v2d : public Operation<	ARCH>
{
	OpFrsqrte_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrsqrts_s : public Operation<	ARCH>
{
	OpFrsqrts_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrsqrts_d : public Operation<	ARCH>
{
	OpFrsqrts_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrsqrts_vs : public Operation<	ARCH>
{
	OpFrsqrts_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFrsqrts_v2d : public Operation<	ARCH>
{
	OpFrsqrts_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFsqrt_h : public Operation<	ARCH>
{
	OpFsqrt_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFsqrt_s : public Operation<	ARCH>
{
	OpFsqrt_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFsqrt_d : public Operation<	ARCH>
{
	OpFsqrt_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFsqrt_vh : public Operation<	ARCH>
{
	OpFsqrt_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFsqrt_vs : public Operation<	ARCH>
{
	OpFsqrt_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFsqrt_v2d : public Operation<	ARCH>
{
	OpFsqrt_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFsub_h : public Operation<	ARCH>
{
	OpFsub_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFsub_s : public Operation<	ARCH>
{
	OpFsub_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFsub_d : public Operation<	ARCH>
{
	OpFsub_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFsub_vh : public Operation<	ARCH>
{
	OpFsub_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFsub_vs : public Operation<	ARCH>
{
	OpFsub_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpFsub_v2d : public Operation<	ARCH>
{
	OpFsub_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t rm;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_hw : public Operation<	ARCH>
{
	OpScvtf_hw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_sw : public Operation<	ARCH>
{
	OpScvtf_sw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_hx : public Operation<	ARCH>
{
	OpScvtf_hx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_sx : public Operation<	ARCH>
{
	OpScvtf_sx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_dw : public Operation<	ARCH>
{
	OpScvtf_dw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_dx : public Operation<	ARCH>
{
	OpScvtf_dx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_h : public Operation<	ARCH>
{
	OpScvtf_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_s : public Operation<	ARCH>
{
	OpScvtf_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_d : public Operation<	ARCH>
{
	OpScvtf_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_vh : public Operation<	ARCH>
{
	OpScvtf_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_vs : public Operation<	ARCH>
{
	OpScvtf_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_v2d : public Operation<	ARCH>
{
	OpScvtf_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_hhi : public Operation<	ARCH>
{
	OpScvtf_hhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_ssi : public Operation<	ARCH>
{
	OpScvtf_ssi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_ddi : public Operation<	ARCH>
{
	OpScvtf_ddi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_hwi : public Operation<	ARCH>
{
	OpScvtf_hwi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_swi : public Operation<	ARCH>
{
	OpScvtf_swi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_hxi : public Operation<	ARCH>
{
	OpScvtf_hxi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_sxi : public Operation<	ARCH>
{
	OpScvtf_sxi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_dwi : public Operation<	ARCH>
{
	OpScvtf_dwi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_dxi : public Operation<	ARCH>
{
	OpScvtf_dxi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_vhhi : public Operation<	ARCH>
{
	OpScvtf_vhhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	uint8_t q;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_vssi : public Operation<	ARCH>
{
	OpScvtf_vssi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	uint8_t q;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpScvtf_v2d2di : public Operation<	ARCH>
{
	OpScvtf_v2d2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_hw : public Operation<	ARCH>
{
	OpUcvtf_hw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_sw : public Operation<	ARCH>
{
	OpUcvtf_sw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_hx : public Operation<	ARCH>
{
	OpUcvtf_hx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_sx : public Operation<	ARCH>
{
	OpUcvtf_sx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_dw : public Operation<	ARCH>
{
	OpUcvtf_dw(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_dx : public Operation<	ARCH>
{
	OpUcvtf_dx(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_h : public Operation<	ARCH>
{
	OpUcvtf_h(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_s : public Operation<	ARCH>
{
	OpUcvtf_s(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_d : public Operation<	ARCH>
{
	OpUcvtf_d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_vh : public Operation<	ARCH>
{
	OpUcvtf_vh(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_vs : public Operation<	ARCH>
{
	OpUcvtf_vs(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t q;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_v2d : public Operation<	ARCH>
{
	OpUcvtf_v2d(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_hhi : public Operation<	ARCH>
{
	OpUcvtf_hhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_ssi : public Operation<	ARCH>
{
	OpUcvtf_ssi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_ddi : public Operation<	ARCH>
{
	OpUcvtf_ddi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_hwi : public Operation<	ARCH>
{
	OpUcvtf_hwi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_swi : public Operation<	ARCH>
{
	OpUcvtf_swi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_hxi : public Operation<	ARCH>
{
	OpUcvtf_hxi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_sxi : public Operation<	ARCH>
{
	OpUcvtf_sxi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_dwi : public Operation<	ARCH>
{
	OpUcvtf_dwi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_dxi : public Operation<	ARCH>
{
	OpUcvtf_dxi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t scale;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_vhhi : public Operation<	ARCH>
{
	OpUcvtf_vhhi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	uint8_t q;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_vssi : public Operation<	ARCH>
{
	OpUcvtf_vssi(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	uint8_t q;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
struct OpUcvtf_v2d2di : public Operation<	ARCH>
{
	OpUcvtf_v2d2di(CodeType code, uint64_t addr);
	uint8_t rd;
	uint8_t rn;
	uint8_t lro;
	unsigned fbits; virtual
	void disasm( ARCH & cpu,
	std::ostream& sink ) const;
private:
};

template <	typename	ARCH>
void OpMsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sysreg->DisasmWrite(op0, op1, crn, crm, op2, rt, sink);
}}
template <	typename	ARCH>
void OpMsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.CheckSystemAccess(op1);

		// std::ostringstream sstr;
		// sysreg->DisasmWrite(op0, op1, crn, crm, op2, rt, sstr);
		// cpu.sysregtrace.insert(sstr.str());
		sysreg->Write(op0, op1, crn, crm, op2, rt, cpu, cpu.GetGZR(rt));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMsr(CodeType code, uint64_t addr)
{
	return new OpMsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvms_bro<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>0, 0) << ", [" << DisasmGSXR(rn) << "]" << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpStvms_bro<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>0;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite8(addr + U64(1*idx), cpu.GetVU8((rt+idx/elements)%32, idx%elements));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite8(addr + U64(1*idx), cpu.GetVU8((rt+idx%vms.regs)%32, idx/vms.regs));

		cpu.SetGSR(rn, addr + cpu.GetGZR(rm) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvms_bro(CodeType code, uint64_t addr)
{
	return new OpStvms_bro<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvms_hro<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>1, 1) << ", [" << DisasmGSXR(rn) << "]" << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpStvms_hro<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>1;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite16(addr + U64(2*idx), cpu.GetVU16((rt+idx/elements)%32, idx%elements));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite16(addr + U64(2*idx), cpu.GetVU16((rt+idx%vms.regs)%32, idx/vms.regs));

		cpu.SetGSR(rn, addr + cpu.GetGZR(rm) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvms_hro(CodeType code, uint64_t addr)
{
	return new OpStvms_hro<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvms_sro<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>2, 2) << ", [" << DisasmGSXR(rn) << "]" << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpStvms_sro<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>2;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite32(addr + U64(4*idx), cpu.GetVU32((rt+idx/elements)%32, idx%elements));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite32(addr + U64(4*idx), cpu.GetVU32((rt+idx%vms.regs)%32, idx/vms.regs));

		cpu.SetGSR(rn, addr + cpu.GetGZR(rm) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvms_sro(CodeType code, uint64_t addr)
{
	return new OpStvms_sro<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvms_dro<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>3, 3) << ", [" << DisasmGSXR(rn) << "]" << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpStvms_dro<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>3;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite64(addr + U64(8*idx), cpu.GetVU64((rt+idx/elements)%32, idx%elements));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite64(addr + U64(8*idx), cpu.GetVU64((rt+idx%vms.regs)%32, idx/vms.regs));

		cpu.SetGSR(rn, addr + cpu.GetGZR(rm) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvms_dro(CodeType code, uint64_t addr)
{
	return new OpStvms_dro<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvms_bro<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>0, 0) << ", [" << DisasmGSXR(rn) << "]" << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpLdvms_bro<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>0;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU8((rt+idx/elements)%32, idx%elements, cpu.MemRead8(addr + U64(1*idx)));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU8((rt+idx%vms.regs)%32, idx/vms.regs, cpu.MemRead8(addr + U64(1*idx)));

		if (not q) for (unsigned idx = 0; idx < vms.regs; ++idx) cpu.ClearHighV((rt+idx)%32, 8);

		cpu.SetGSR(rn, addr + cpu.GetGZR(rm) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvms_bro(CodeType code, uint64_t addr)
{
	return new OpLdvms_bro<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvms_hro<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>1, 1) << ", [" << DisasmGSXR(rn) << "]" << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpLdvms_hro<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>1;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU16((rt+idx/elements)%32, idx%elements, cpu.MemRead16(addr + U64(2*idx)));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU16((rt+idx%vms.regs)%32, idx/vms.regs, cpu.MemRead16(addr + U64(2*idx)));

		if (not q) for (unsigned idx = 0; idx < vms.regs; ++idx) cpu.ClearHighV((rt+idx)%32, 8);

		cpu.SetGSR(rn, addr + cpu.GetGZR(rm) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvms_hro(CodeType code, uint64_t addr)
{
	return new OpLdvms_hro<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvms_sro<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>2, 2) << ", [" << DisasmGSXR(rn) << "]" << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpLdvms_sro<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>2;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU32((rt+idx/elements)%32, idx%elements, cpu.MemRead32(addr + U64(4*idx)));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU32((rt+idx%vms.regs)%32, idx/vms.regs, cpu.MemRead32(addr + U64(4*idx)));

		if (not q) for (unsigned idx = 0; idx < vms.regs; ++idx) cpu.ClearHighV((rt+idx)%32, 8);

		cpu.SetGSR(rn, addr + cpu.GetGZR(rm) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvms_sro(CodeType code, uint64_t addr)
{
	return new OpLdvms_sro<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvms_dro<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>3, 3) << ", [" << DisasmGSXR(rn) << "]" << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpLdvms_dro<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>3;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU64((rt+idx/elements)%32, idx%elements, cpu.MemRead64(addr + U64(8*idx)));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU64((rt+idx%vms.regs)%32, idx/vms.regs, cpu.MemRead64(addr + U64(8*idx)));

		if (not q) for (unsigned idx = 0; idx < vms.regs; ++idx) cpu.ClearHighV((rt+idx)%32, 8);

		cpu.SetGSR(rn, addr + cpu.GetGZR(rm) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvms_dro(CodeType code, uint64_t addr)
{
	return new OpLdvms_dro<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvsl_bro<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << regs << '\t' << DisasmBunch(rt, regs, 0, 0) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]" << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpStvsl_bro<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.MemWrite8(addr + U64(1*idx), cpu.GetVU8((rt+idx)%32, index));

		cpu.SetGSR(rn, addr + cpu.GetGZR(rm) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvsl_bro(CodeType code, uint64_t addr)
{
	return new OpStvsl_bro<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvsl_hro<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << regs << '\t' << DisasmBunch(rt, regs, 0, 1) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]" << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpStvsl_hro<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.MemWrite16(addr + U64(2*idx), cpu.GetVU16((rt+idx)%32, index));

		cpu.SetGSR(rn, addr + cpu.GetGZR(rm) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvsl_hro(CodeType code, uint64_t addr)
{
	return new OpStvsl_hro<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvsl_sro<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << regs << '\t' << DisasmBunch(rt, regs, 0, 2) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]" << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpStvsl_sro<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.MemWrite32(addr + U64(4*idx), cpu.GetVU32((rt+idx)%32, index));

		cpu.SetGSR(rn, addr + cpu.GetGZR(rm) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvsl_sro(CodeType code, uint64_t addr)
{
	return new OpStvsl_sro<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvsl_dro<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << regs << '\t' << DisasmBunch(rt, regs, 0, 3) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]" << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpStvsl_dro<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.MemWrite64(addr + U64(8*idx), cpu.GetVU64((rt+idx)%32, index));

		cpu.SetGSR(rn, addr + cpu.GetGZR(rm) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvsl_dro(CodeType code, uint64_t addr)
{
	return new OpStvsl_dro<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvsl_bro<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << '\t' << DisasmBunch(rt, regs, 0, 0) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]" << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpLdvsl_bro<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.SetVU8((rt+idx)%32, index, cpu.MemRead8(addr + U64(1*idx)));

		cpu.SetGSR(rn, addr + cpu.GetGZR(rm) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvsl_bro(CodeType code, uint64_t addr)
{
	return new OpLdvsl_bro<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvsl_hro<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << '\t' << DisasmBunch(rt, regs, 0, 1) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]" << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpLdvsl_hro<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.SetVU16((rt+idx)%32, index, cpu.MemRead16(addr + U64(2*idx)));

		cpu.SetGSR(rn, addr + cpu.GetGZR(rm) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvsl_hro(CodeType code, uint64_t addr)
{
	return new OpLdvsl_hro<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvsl_sro<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << '\t' << DisasmBunch(rt, regs, 0, 2) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]" << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpLdvsl_sro<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.SetVU32((rt+idx)%32, index, cpu.MemRead32(addr + U64(4*idx)));

		cpu.SetGSR(rn, addr + cpu.GetGZR(rm) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvsl_sro(CodeType code, uint64_t addr)
{
	return new OpLdvsl_sro<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvsl_dro<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << '\t' << DisasmBunch(rt, regs, 0, 3) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]" << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpLdvsl_dro<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.SetVU64((rt+idx)%32, index, cpu.MemRead64(addr + U64(8*idx)));

		cpu.SetGSR(rn, addr + cpu.GetGZR(rm) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvsl_dro(CodeType code, uint64_t addr)
{
	return new OpLdvsl_dro<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvr_bro<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << "r\t" << DisasmBunch(rt, regs, 8<<q, 0) << ", [" << DisasmGSXR(rn) << "]" << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpLdvr_bro<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned r = 0; r < regs; ++r)
		{
			typename ARCH::U8 val = cpu.MemRead8(addr + U64(1*r));
			unsigned reg = (rt+r)%32;
			for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
			cpu.SetVU8(reg, idx, val);
			cpu.ClearHighV(reg, 8<<q);
		}

		cpu.SetGSR(rn, addr + cpu.GetGZR(rm) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvr_bro(CodeType code, uint64_t addr)
{
	return new OpLdvr_bro<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvr_hro<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << "r\t" << DisasmBunch(rt, regs, 4<<q, 1) << ", [" << DisasmGSXR(rn) << "]" << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpLdvr_hro<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned r = 0; r < regs; ++r)
		{
			typename ARCH::U16 val = cpu.MemRead16(addr + U64(2*r));
			unsigned reg = (rt+r)%32;
			for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
			cpu.SetVU16(reg, idx, val);
			cpu.ClearHighV(reg, 8<<q);
		}

		cpu.SetGSR(rn, addr + cpu.GetGZR(rm) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvr_hro(CodeType code, uint64_t addr)
{
	return new OpLdvr_hro<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvr_sro<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << "r\t" << DisasmBunch(rt, regs, 2<<q, 2) << ", [" << DisasmGSXR(rn) << "]" << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpLdvr_sro<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned r = 0; r < regs; ++r)
		{
			typename ARCH::U32 val = cpu.MemRead32(addr + U64(4*r));
			unsigned reg = (rt+r)%32;
			for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
			cpu.SetVU32(reg, idx, val);
			cpu.ClearHighV(reg, 8<<q);
		}

		cpu.SetGSR(rn, addr + cpu.GetGZR(rm) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvr_sro(CodeType code, uint64_t addr)
{
	return new OpLdvr_sro<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvr_dro<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << "r\t" << DisasmBunch(rt, regs, 1<<q, 3) << ", [" << DisasmGSXR(rn) << "]" << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpLdvr_dro<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned r = 0; r < regs; ++r)
		{
			typename ARCH::U64 val = cpu.MemRead64(addr + U64(8*r));
			unsigned reg = (rt+r)%32;
			for (unsigned idx = 0, end = 1<<q; idx < end; ++idx)
			cpu.SetVU64(reg, idx, val);
			cpu.ClearHighV(reg, 8<<q);
		}

		cpu.SetGSR(rn, addr + cpu.GetGZR(rm) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvr_dro(CodeType code, uint64_t addr)
{
	return new OpLdvr_dro<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdc_www<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "adc\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
}}
template <	typename	ARCH>
void OpAdc_www<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 + op2 + U32(cpu.GetCarry());
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdc_www(CodeType code, uint64_t addr)
{
	return new OpAdc_www<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdc_xxx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "adc\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpAdc_xxx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 + op2 + U64(cpu.GetCarry());
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdc_xxx(CodeType code, uint64_t addr)
{
	return new OpAdc_xxx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdcs_www<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "adcs\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
}}
template <	typename	ARCH>
void OpAdcs_www<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::BOOL BOOL;

		BOOL carry( cpu.GetCarry() );
		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 + op2 + U32(carry);
		cpu.SetGZR(rd, res);

		BOOL n = S32(res) < S32(0), z = res == U32(0);
		if (cpu.Test(carry))
		cpu.SetNZCV( n, z, op1 >= ~op2, n xor (S32(op1) <  S32(~op2)) );
		else
		cpu.SetNZCV( n, z, op1 >  ~op2, n xor (S32(op1) <= S32(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdcs_www(CodeType code, uint64_t addr)
{
	return new OpAdcs_www<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdcs_xxx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "adcs\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpAdcs_xxx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::BOOL BOOL;

		BOOL carry( cpu.GetCarry() );
		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 + op2 + U64(carry);
		cpu.SetGZR(rd, res);

		BOOL n = S64(res) < S64(0), z = res == U64(0);
		if (cpu.Test(carry))
		cpu.SetNZCV( n, z, op1 >= ~op2, n xor (S64(op1) <  S64(~op2)) );
		else
		cpu.SetNZCV( n, z, op1 >  ~op2, n xor (S64(op1) <= S64(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdcs_xxx(CodeType code, uint64_t addr)
{
	return new OpAdcs_xxx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_wsxtb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdd_wsxtb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( S32(S8(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_wsxtb(CodeType code, uint64_t addr)
{
	return new OpAdd_wsxtb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_wsxth<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdd_wsxth<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( S32(S16(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_wsxth(CodeType code, uint64_t addr)
{
	return new OpAdd_wsxth<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_wsxtw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdd_wsxtw<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( S32(S32(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_wsxtw(CodeType code, uint64_t addr)
{
	return new OpAdd_wsxtw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_wsxtx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtx" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdd_wsxtx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( S32(S64(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_wsxtx(CodeType code, uint64_t addr)
{
	return new OpAdd_wsxtx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_wuxtb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdd_wuxtb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( U32(U8(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_wuxtb(CodeType code, uint64_t addr)
{
	return new OpAdd_wuxtb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_wuxth<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdd_wuxth<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( U32(U16(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_wuxth(CodeType code, uint64_t addr)
{
	return new OpAdd_wuxth<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_wuxtw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdd_wuxtw<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( U32(U32(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_wuxtw(CodeType code, uint64_t addr)
{
	return new OpAdd_wuxtw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_wuxtx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtx" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdd_wuxtx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( U32(U64(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_wuxtx(CodeType code, uint64_t addr)
{
	return new OpAdd_wuxtx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_xsxtb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdd_xsxtb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( S64(S8(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_xsxtb(CodeType code, uint64_t addr)
{
	return new OpAdd_xsxtb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_xsxth<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdd_xsxth<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( S64(S16(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_xsxth(CodeType code, uint64_t addr)
{
	return new OpAdd_xsxth<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_xsxtw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdd_xsxtw<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( S64(S32(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_xsxtw(CodeType code, uint64_t addr)
{
	return new OpAdd_xsxtw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_xsxtx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", sxtx" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdd_xsxtx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( S64(S64(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_xsxtx(CodeType code, uint64_t addr)
{
	return new OpAdd_xsxtx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_xuxtb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdd_xuxtb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( U64(U8(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_xuxtb(CodeType code, uint64_t addr)
{
	return new OpAdd_xuxtb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_xuxth<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdd_xuxth<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( U64(U16(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_xuxth(CodeType code, uint64_t addr)
{
	return new OpAdd_xuxth<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_xuxtw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdd_xuxtw<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( U64(U32(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_xuxtw(CodeType code, uint64_t addr)
{
	return new OpAdd_xuxtw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_xuxtx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", uxtx" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdd_xuxtx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( U64(U64(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_xuxtx(CodeType code, uint64_t addr)
{
	return new OpAdd_xuxtx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_wi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmI(imm,16/*?*/);
}}
template <	typename	ARCH>
void OpAdd_wi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1(cpu.GetGSR(rn)), op2(imm), res = op1 + op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_wi(CodeType code, uint64_t addr)
{
	return new OpAdd_wi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_xi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmI(imm,16/*?*/);
}}
template <	typename	ARCH>
void OpAdd_xi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1(cpu.GetGSR(rn)), op2(imm), res = op1 + op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_xi(CodeType code, uint64_t addr)
{
	return new OpAdd_xi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_wlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpAdd_wlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_wlsl(CodeType code, uint64_t addr)
{
	return new OpAdd_wlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_wlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpAdd_wlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( U32(cpu.GetGZR(rm)) >> imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_wlsr(CodeType code, uint64_t addr)
{
	return new OpAdd_wlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_wasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpAdd_wasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 op1( cpu.GetGZR(rn) ), op2( S32(cpu.GetGZR(rm)) >> imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_wasr(CodeType code, uint64_t addr)
{
	return new OpAdd_wasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_xlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpAdd_xlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_xlsl(CodeType code, uint64_t addr)
{
	return new OpAdd_xlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_xlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpAdd_xlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) >> imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_xlsr(CodeType code, uint64_t addr)
{
	return new OpAdd_xlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_xasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpAdd_xasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGZR(rn) ), op2( S64(cpu.GetGZR(rm)) >> imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_xasr(CodeType code, uint64_t addr)
{
	return new OpAdd_xasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_wsxtb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
		else
		sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdds_wsxtb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( S32(S8(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), res == U32(0), op1 > ~op2, (S32(res) < S32(0)) xor (S32(op1) <= S32(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_wsxtb(CodeType code, uint64_t addr)
{
	return new OpAdds_wsxtb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_wsxth<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
		else
		sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdds_wsxth<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( S32(S16(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), res == U32(0), op1 > ~op2, (S32(res) < S32(0)) xor (S32(op1) <= S32(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_wsxth(CodeType code, uint64_t addr)
{
	return new OpAdds_wsxth<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_wsxtw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
		else
		sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdds_wsxtw<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( S32(S32(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), res == U32(0), op1 > ~op2, (S32(res) < S32(0)) xor (S32(op1) <= S32(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_wsxtw(CodeType code, uint64_t addr)
{
	return new OpAdds_wsxtw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_wsxtx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtx" << DisasmINZ(" ", imm);
		else
		sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtx" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdds_wsxtx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( S32(S64(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), res == U32(0), op1 > ~op2, (S32(res) < S32(0)) xor (S32(op1) <= S32(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_wsxtx(CodeType code, uint64_t addr)
{
	return new OpAdds_wsxtx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_wuxtb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
		else
		sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdds_wuxtb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 op1( cpu.GetGSR(rn) ), op2( U32(U8(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), res == U32(0), op1 > ~op2, (S32(res) < S32(0)) xor (S32(op1) <= S32(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_wuxtb(CodeType code, uint64_t addr)
{
	return new OpAdds_wuxtb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_wuxth<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
		else
		sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdds_wuxth<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 op1( cpu.GetGSR(rn) ), op2( U32(U16(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), res == U32(0), op1 > ~op2, (S32(res) < S32(0)) xor (S32(op1) <= S32(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_wuxth(CodeType code, uint64_t addr)
{
	return new OpAdds_wuxth<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_wuxtw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
		else
		sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdds_wuxtw<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 op1( cpu.GetGSR(rn) ), op2( U32(U32(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), res == U32(0), op1 > ~op2, (S32(res) < S32(0)) xor (S32(op1) <= S32(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_wuxtw(CodeType code, uint64_t addr)
{
	return new OpAdds_wuxtw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_wuxtx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtx" << DisasmINZ(" ", imm);
		else
		sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtx" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdds_wuxtx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 op1( cpu.GetGSR(rn) ), op2( U32(U64(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), res == U32(0), op1 > ~op2, (S32(res) < S32(0)) xor (S32(op1) <= S32(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_wuxtx(CodeType code, uint64_t addr)
{
	return new OpAdds_wuxtx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_xsxtb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
		else
		sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdds_xsxtb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( S64(S8(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), res == U64(0), op1 > ~op2, (S64(res) < S64(0)) xor (S64(op1) <= S64(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_xsxtb(CodeType code, uint64_t addr)
{
	return new OpAdds_xsxtb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_xsxth<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
		else
		sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdds_xsxth<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( S64(S16(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), res == U64(0), op1 > ~op2, (S64(res) < S64(0)) xor (S64(op1) <= S64(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_xsxth(CodeType code, uint64_t addr)
{
	return new OpAdds_xsxth<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_xsxtw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
		else
		sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdds_xsxtw<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( S64(S32(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), res == U64(0), op1 > ~op2, (S64(res) < S64(0)) xor (S64(op1) <= S64(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_xsxtw(CodeType code, uint64_t addr)
{
	return new OpAdds_xsxtw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_xsxtx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", sxtx" << DisasmINZ(" ", imm);
		else
		sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", sxtx" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdds_xsxtx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( S64(S64(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), res == U64(0), op1 > ~op2, (S64(res) < S64(0)) xor (S64(op1) <= S64(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_xsxtx(CodeType code, uint64_t addr)
{
	return new OpAdds_xsxtx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_xuxtb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
		else
		sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdds_xuxtb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGSR(rn) ), op2( U64(U8(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), res == U64(0), op1 > ~op2, (S64(res) < S64(0)) xor (S64(op1) <= S64(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_xuxtb(CodeType code, uint64_t addr)
{
	return new OpAdds_xuxtb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_xuxth<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
		else
		sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdds_xuxth<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGSR(rn) ), op2( U64(U16(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), res == U64(0), op1 > ~op2, (S64(res) < S64(0)) xor (S64(op1) <= S64(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_xuxth(CodeType code, uint64_t addr)
{
	return new OpAdds_xuxth<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_xuxtw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
		else
		sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdds_xuxtw<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGSR(rn) ), op2( U64(U32(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), res == U64(0), op1 > ~op2, (S64(res) < S64(0)) xor (S64(op1) <= S64(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_xuxtw(CodeType code, uint64_t addr)
{
	return new OpAdds_xuxtw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_xuxtx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", uxtx" << DisasmINZ(" ", imm);
		else
		sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", uxtx" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpAdds_xuxtx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGSR(rn) ), op2( U64(U64(cpu.GetGZR(rm))) << imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), res == U64(0), op1 > ~op2, (S64(res) < S64(0)) xor (S64(op1) <= S64(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_xuxtx(CodeType code, uint64_t addr)
{
	return new OpAdds_xuxtx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_wi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGSWR(rn) << ", " << DisasmI(imm,16/*?*/);
		else
		sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmI(imm,16/*?*/);
}}
template <	typename	ARCH>
void OpAdds_wi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;

		U32 op1(cpu.GetGSR(rn)), op2(imm), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), res == U32(0), op1 > ~op2, (S32(res) < S32(0)) xor (S32(op1) <= S32(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_wi(CodeType code, uint64_t addr)
{
	return new OpAdds_wi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_xi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGSXR(rn) << ", " << DisasmI(imm,16/*?*/);
		else
		sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmI(imm,16/*?*/);
}}
template <	typename	ARCH>
void OpAdds_xi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 op1(cpu.GetGSR(rn)), op2(imm), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), res == U64(0), op1 > ~op2, (S64(res) < S64(0)) xor (S64(op1) <= S64(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_xi(CodeType code, uint64_t addr)
{
	return new OpAdds_xi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_wlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
		else
		sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpAdds_wlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), res == U32(0), op1 > ~op2, (S32(res) < S32(0)) xor (S32(op1) <= S32(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_wlsl(CodeType code, uint64_t addr)
{
	return new OpAdds_wlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_wlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
		else
		sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpAdds_wlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 op1( cpu.GetGZR(rn) ), op2( U32(cpu.GetGZR(rm)) >> imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), res == U32(0), op1 > ~op2, (S32(res) < S32(0)) xor (S32(op1) <= S32(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_wlsr(CodeType code, uint64_t addr)
{
	return new OpAdds_wlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_wasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
		else
		sink << "adds\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpAdds_wasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 op1( cpu.GetGZR(rn) ), op2( S32(cpu.GetGZR(rm)) >> imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), res == U32(0), op1 > ~op2, (S32(res) < S32(0)) xor (S32(op1) <= S32(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_wasr(CodeType code, uint64_t addr)
{
	return new OpAdds_wasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_xlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
		else
		sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpAdds_xlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), res == U64(0), op1 > ~op2, (S64(res) < S64(0)) xor (S64(op1) <= S64(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_xlsl(CodeType code, uint64_t addr)
{
	return new OpAdds_xlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_xlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
		else
		sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpAdds_xlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) >> imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), res == U64(0), op1 > ~op2, (S64(res) < S64(0)) xor (S64(op1) <= S64(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_xlsr(CodeType code, uint64_t addr)
{
	return new OpAdds_xlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdds_xasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmn\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
		else
		sink << "adds\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpAdds_xasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGZR(rn) ), op2( S64(cpu.GetGZR(rm)) >> imm ), res = op1 + op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), res == U64(0), op1 > ~op2, (S64(res) < S64(0)) xor (S64(op1) <= S64(~op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdds_xasr(CodeType code, uint64_t addr)
{
	return new OpAdds_xasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "adr\t" << DisasmGZXR(rd) << ", 0x" << std::hex << (this->GetAddr()+imm);
}}
template <	typename	ARCH>
void OpAdr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		cpu.SetGZR(rd, cpu.GetPC() + U64(imm));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdr(CodeType code, uint64_t addr)
{
	return new OpAdr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdrp<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "adrp\t" << DisasmGZXR(rd) << ", 0x" << std::hex << ((this->GetAddr() + (uint64_t(imm)<<12)) & uint64_t(-1<<12));
}}
template <	typename	ARCH>
void OpAdrp<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		cpu.SetGZR(rd, (cpu.GetPC() + (U64(imm)<<12)) & U64(-1<<12));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdrp(CodeType code, uint64_t addr)
{
	return new OpAdrp<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAnd_wi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "and\t" << DisasmGSWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(imm,16);
}}
template <	typename	ARCH>
void OpAnd_wi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1(cpu.GetGZR(rn)), op2(imm), res = op1 & op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAnd_wi(CodeType code, uint64_t addr)
{
	return new OpAnd_wi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAnd_xi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "and\t" << DisasmGSXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(imm,16);
}}
template <	typename	ARCH>
void OpAnd_xi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1(cpu.GetGZR(rn)), op2(imm), res = op1 & op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAnd_xi(CodeType code, uint64_t addr)
{
	return new OpAnd_xi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAnd_wlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "and\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpAnd_wlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 & op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAnd_wlsl(CodeType code, uint64_t addr)
{
	return new OpAnd_wlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAnd_wlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "and\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpAnd_wlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( U32(cpu.GetGZR(rm)) >> imm ), res = op1 & op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAnd_wlsr(CodeType code, uint64_t addr)
{
	return new OpAnd_wlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAnd_wasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "and\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpAnd_wasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 op1( cpu.GetGZR(rn) ), op2( S32(cpu.GetGZR(rm)) >> imm ), res = op1 & op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAnd_wasr(CodeType code, uint64_t addr)
{
	return new OpAnd_wasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAnd_wror<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "and\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", ror " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpAnd_wror<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( RotateRight(U32(cpu.GetGZR(rm)), imm) ), res = op1 & op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAnd_wror(CodeType code, uint64_t addr)
{
	return new OpAnd_wror<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAnd_xlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "and\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpAnd_xlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 & op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAnd_xlsl(CodeType code, uint64_t addr)
{
	return new OpAnd_xlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAnd_xlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "and\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpAnd_xlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) >> imm ), res = op1 & op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAnd_xlsr(CodeType code, uint64_t addr)
{
	return new OpAnd_xlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAnd_xasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "and\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpAnd_xasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGZR(rn) ), op2( S64(cpu.GetGZR(rm)) >> imm ), res = op1 & op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAnd_xasr(CodeType code, uint64_t addr)
{
	return new OpAnd_xasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAnd_xror<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "and\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", ror " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpAnd_xror<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( RotateRight(U64(cpu.GetGZR(rm)), imm) ), res = op1 & op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAnd_xror(CodeType code, uint64_t addr)
{
	return new OpAnd_xror<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAnds_wi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "tst\t" << DisasmGZWR(rn) << ", " << DisasmI(imm,16);
		else
		sink << "ands\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(imm,16);
}}
template <	typename	ARCH>
void OpAnds_wi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::BOOL BOOL;

		U32 op1(cpu.GetGZR(rn)), op2(imm), res = op1 & op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), res == U32(0), BOOL(false), BOOL(false) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAnds_wi(CodeType code, uint64_t addr)
{
	return new OpAnds_wi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAnds_xi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "tst\t" << DisasmGZXR(rn) << ", " << DisasmI(imm,16);
		else
		sink << "ands\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(imm,16);
}}
template <	typename	ARCH>
void OpAnds_xi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::BOOL BOOL;

		U64 op1(cpu.GetGZR(rn)), op2(imm), res = op1 & op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), res == U64(0), BOOL(false), BOOL(false) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAnds_xi(CodeType code, uint64_t addr)
{
	return new OpAnds_xi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAnds_wlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "tst\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
		else
		sink << "ands\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpAnds_wlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::BOOL BOOL;

		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 & op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), res == U32(0), BOOL(false), BOOL(false) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAnds_wlsl(CodeType code, uint64_t addr)
{
	return new OpAnds_wlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAnds_wlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "tst\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
		else
		sink << "ands\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpAnds_wlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::BOOL BOOL;

		U32 op1( cpu.GetGZR(rn) ), op2( U32(cpu.GetGZR(rm)) >> imm ), res = op1 & op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), res == U32(0), BOOL(false), BOOL(false) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAnds_wlsr(CodeType code, uint64_t addr)
{
	return new OpAnds_wlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAnds_wasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "tst\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
		else
		sink << "ands\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpAnds_wasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::BOOL BOOL;

		U32 op1( cpu.GetGZR(rn) ), op2( S32(cpu.GetGZR(rm)) >> imm ), res = op1 & op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), res == U32(0), BOOL(false), BOOL(false) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAnds_wasr(CodeType code, uint64_t addr)
{
	return new OpAnds_wasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAnds_wror<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "tst\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", ror " << DisasmI(imm);
		else
		sink << "ands\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", ror " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpAnds_wror<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::BOOL BOOL;

		U32 op1( cpu.GetGZR(rn) ), op2( RotateRight(U32(cpu.GetGZR(rm)), imm) ), res = op1 & op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), res == U32(0), BOOL(false), BOOL(false) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAnds_wror(CodeType code, uint64_t addr)
{
	return new OpAnds_wror<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAnds_xlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "tst\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
		else
		sink << "ands\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpAnds_xlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::BOOL BOOL;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 & op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), res == U64(0), BOOL(false), BOOL(false) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAnds_xlsl(CodeType code, uint64_t addr)
{
	return new OpAnds_xlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAnds_xlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "tst\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
		else
		sink << "ands\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpAnds_xlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::BOOL BOOL;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) >> imm ), res = op1 & op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), res == U64(0), BOOL(false), BOOL(false) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAnds_xlsr(CodeType code, uint64_t addr)
{
	return new OpAnds_xlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAnds_xasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "tst\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
		else
		sink << "ands\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpAnds_xasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::BOOL BOOL;

		U64 op1( cpu.GetGZR(rn) ), op2( S64(cpu.GetGZR(rm)) >> imm ), res = op1 & op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), res == U64(0), BOOL(false), BOOL(false) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAnds_xasr(CodeType code, uint64_t addr)
{
	return new OpAnds_xasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAnds_xror<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "tst\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", ror " << DisasmI(imm);
		else
		sink << "ands\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", ror " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpAnds_xror<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::BOOL BOOL;

		U64 op1( cpu.GetGZR(rn) ), op2( RotateRight(U64(cpu.GetGZR(rm)), imm) ), res = op1 & op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), res == U64(0), BOOL(false), BOOL(false) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAnds_xror(CodeType code, uint64_t addr)
{
	return new OpAnds_xror<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAsr_www<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "asr\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
}}
template <	typename	ARCH>
void OpAsr_www<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res( S32(op1) >> (op2 & U32(0b11111)) );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAsr_www(CodeType code, uint64_t addr)
{
	return new OpAsr_www<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAsr_xxx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "asr\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpAsr_xxx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res( S64(op1) >> (op2 & U64(0b111111)) );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAsr_xxx(CodeType code, uint64_t addr)
{
	return new OpAsr_xxx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpB<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "b\t0x" << std::hex << (this->GetAddr()+imm);
}}
template <	typename	ARCH>
void OpB<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		cpu.BranchTo( cpu.GetPC() + U64(S64(imm)), ARCH::B_JMP );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpB(CodeType code, uint64_t addr)
{
	return new OpB<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpB_cond<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "b." << DisasmCond(cond) << "\t0x" << std::hex << (this->GetAddr()+imm);
}}
template <	typename	ARCH>
void OpB_cond<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		if (CheckCondition(cpu, cond))
		cpu.BranchTo( cpu.GetPC() + U64(S64(imm)), ARCH::B_JMP );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpB_cond(CodeType code, uint64_t addr)
{
	return new OpB_cond<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBfm_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (imms < immr)
		sink << "bfi\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(-immr&31) << ", " << DisasmI(imms+1);
		else
		sink << "bfxil\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(immr) << ", " << DisasmI(imms+1-immr);
}}
template <	typename	ARCH>
void OpBfm_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		unsigned l = (imms ^ 31), r = (l + immr) & 31;
		uint32_t mask = (uint32_t(int32_t(-1)) << l) >> r;

		U32 src( cpu.GetGZR(rn) ), bf( (src << l) >> r ), dst( cpu.GetGZR(rd) ), res( (dst & U32(~mask)) | bf );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBfm_w(CodeType code, uint64_t addr)
{
	return new OpBfm_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBfm_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (imms < immr)
		sink << "bfi\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(-immr&63) << ", " << DisasmI(imms+1);
		else
		sink << "bfxil\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(immr) << ", " << DisasmI(imms+1-immr);
}}
template <	typename	ARCH>
void OpBfm_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		unsigned l = (imms ^ 63), r = (l + immr) & 63;
		uint64_t mask = (uint64_t(int64_t(-1)) << l) >> r;

		U64 src( cpu.GetGZR(rn) ), bf( (src << l) >> r ), res( (cpu.GetGZR(rd) & U64(~mask)) | bf );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBfm_x(CodeType code, uint64_t addr)
{
	return new OpBfm_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBic_wlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bic\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpBic_wlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 & ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBic_wlsl(CodeType code, uint64_t addr)
{
	return new OpBic_wlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBic_wlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bic\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpBic_wlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( U32(cpu.GetGZR(rm)) >> imm ), res = op1 & ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBic_wlsr(CodeType code, uint64_t addr)
{
	return new OpBic_wlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBic_wasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bic\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpBic_wasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 op1( cpu.GetGZR(rn) ), op2( S32(cpu.GetGZR(rm)) >> imm ), res = op1 & ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBic_wasr(CodeType code, uint64_t addr)
{
	return new OpBic_wasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBic_wror<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bic\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", ror " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpBic_wror<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( RotateRight(U32(cpu.GetGZR(rm)), imm) ), res = op1 & ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBic_wror(CodeType code, uint64_t addr)
{
	return new OpBic_wror<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBic_xlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bic\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpBic_xlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 & ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBic_xlsl(CodeType code, uint64_t addr)
{
	return new OpBic_xlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBic_xlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bic\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpBic_xlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) >> imm ), res = op1 & ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBic_xlsr(CodeType code, uint64_t addr)
{
	return new OpBic_xlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBic_xasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bic\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpBic_xasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGZR(rn) ), op2( S64(cpu.GetGZR(rm)) >> imm ), res = op1 & ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBic_xasr(CodeType code, uint64_t addr)
{
	return new OpBic_xasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBic_xror<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bic\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", ror " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpBic_xror<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( RotateRight(U64(cpu.GetGZR(rm)), imm) ), res = op1 & ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBic_xror(CodeType code, uint64_t addr)
{
	return new OpBic_xror<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBics_wlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bics\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpBics_wlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::BOOL BOOL;

		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 & ~op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), res == U32(0), BOOL(false), BOOL(false) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBics_wlsl(CodeType code, uint64_t addr)
{
	return new OpBics_wlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBics_wlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bics\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpBics_wlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::BOOL BOOL;

		U32 op1( cpu.GetGZR(rn) ), op2( U32(cpu.GetGZR(rm)) >> imm ), res = op1 & ~op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), res == U32(0), BOOL(false), BOOL(false) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBics_wlsr(CodeType code, uint64_t addr)
{
	return new OpBics_wlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBics_wasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bics\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpBics_wasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::BOOL BOOL;

		U32 op1( cpu.GetGZR(rn) ), op2( S32(cpu.GetGZR(rm)) >> imm ), res = op1 & ~op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), res == U32(0), BOOL(false), BOOL(false) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBics_wasr(CodeType code, uint64_t addr)
{
	return new OpBics_wasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBics_wror<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bics\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", ror " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpBics_wror<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::BOOL BOOL;

		U32 op1( cpu.GetGZR(rn) ), op2( RotateRight(U32(cpu.GetGZR(rm)), imm) ), res = op1 & ~op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), res == U32(0), BOOL(false), BOOL(false) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBics_wror(CodeType code, uint64_t addr)
{
	return new OpBics_wror<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBics_xlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bics\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpBics_xlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::BOOL BOOL;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 & ~op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), res == U64(0), BOOL(false), BOOL(false) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBics_xlsl(CodeType code, uint64_t addr)
{
	return new OpBics_xlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBics_xlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bics\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpBics_xlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::BOOL BOOL;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) >> imm ), res = op1 & ~op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), res == U64(0), BOOL(false), BOOL(false) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBics_xlsr(CodeType code, uint64_t addr)
{
	return new OpBics_xlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBics_xasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bics\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpBics_xasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::BOOL BOOL;

		U64 op1( cpu.GetGZR(rn) ), op2( S64(cpu.GetGZR(rm)) >> imm ), res = op1 & ~op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), res == U64(0), BOOL(false), BOOL(false) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBics_xasr(CodeType code, uint64_t addr)
{
	return new OpBics_xasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBics_xror<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bics\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", ror " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpBics_xror<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::BOOL BOOL;

		U64 op1( cpu.GetGZR(rn) ), op2( RotateRight(U64(cpu.GetGZR(rm)), imm) ), res = op1 & ~op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), res == U64(0), BOOL(false), BOOL(false) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBics_xror(CodeType code, uint64_t addr)
{
	return new OpBics_xror<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bl\t0x" << std::hex << (this->GetAddr()+int64_t(imm));
}}
template <	typename	ARCH>
void OpBl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 target_addr( cpu.GetPC() + U64(S64(imm)) );
		U64 return_addr( cpu.GetPC() + U64(4) );
		cpu.SetGZR(30, return_addr);
		cpu.BranchTo( target_addr, ARCH::B_CALL );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBl(CodeType code, uint64_t addr)
{
	return new OpBl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBlr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "blr\t" << DisasmGZXR(rn);
}}
template <	typename	ARCH>
void OpBlr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 target_addr( cpu.GetGZR(rn) );
		U64 return_addr( cpu.GetPC() + U64(4) );
		cpu.SetGZR(30, return_addr);
		cpu.BranchTo( target_addr, ARCH::B_CALL );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBlr(CodeType code, uint64_t addr)
{
	return new OpBlr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "br\t" << DisasmGZXR(rn);
}}
template <	typename	ARCH>
void OpBr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 target_addr( cpu.GetGZR(rn) );
		cpu.BranchTo( target_addr, ARCH::B_JMP );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBr(CodeType code, uint64_t addr)
{
	return new OpBr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBrk<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "brk\t" << DisasmI(imm,16);
}}
template <	typename	ARCH>
void OpBrk<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SoftwareBreakpoint( imm );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBrk(CodeType code, uint64_t addr)
{
	return new OpBrk<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCbnz_wlit<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cbnz\t" << DisasmGZWR(rt) << ", 0x" << std::hex << (this->GetAddr()+imm);
}}
template <	typename	ARCH>
void OpCbnz_wlit<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U32 op1( cpu.GetGZR(rt) );

		if (cpu.Test( op1 != U32(0) ))
		cpu.BranchTo( cpu.GetPC() + U64(S64(imm)), ARCH::B_JMP );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCbnz_wlit(CodeType code, uint64_t addr)
{
	return new OpCbnz_wlit<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCbnz_xlit<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cbnz\t" << DisasmGZXR(rt) << ", 0x" << std::hex << (this->GetAddr()+imm);
}}
template <	typename	ARCH>
void OpCbnz_xlit<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGZR(rt) );

		if (cpu.Test( op1 != U64(0) ))
		cpu.BranchTo( cpu.GetPC() + U64(S64(imm)), ARCH::B_JMP );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCbnz_xlit(CodeType code, uint64_t addr)
{
	return new OpCbnz_xlit<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCbz_wlit<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cbz\t" << DisasmGZWR(rt) << ", 0x" << std::hex << (this->GetAddr()+imm);
}}
template <	typename	ARCH>
void OpCbz_wlit<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U32 op1( cpu.GetGZR(rt) );

		if (cpu.Test( op1 == U32(0) ))
		cpu.BranchTo( cpu.GetPC() + U64(S64(imm)), ARCH::B_JMP );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCbz_wlit(CodeType code, uint64_t addr)
{
	return new OpCbz_wlit<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCbz_xlit<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cbz\t" << DisasmGZXR(rt) << ", 0x" << std::hex << (this->GetAddr()+imm);
}}
template <	typename	ARCH>
void OpCbz_xlit<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGZR(rt) );

		if (cpu.Test( op1 == U64(0) ))
		cpu.BranchTo( cpu.GetPC() + U64(S64(imm)), ARCH::B_JMP );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCbz_xlit(CodeType code, uint64_t addr)
{
	return new OpCbz_xlit<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCcmn_wi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ccmn\t" << DisasmGZWR(rn) << ", " << DisasmI(imm,16) << ", " << DisasmI((n<<3)|(z<<2)|(c<<1)|(v<<0),16) << ", " << DisasmCond(cond);
}}
template <	typename	ARCH>
void OpCcmn_wi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::BOOL BOOL;

		if (CheckCondition(cpu, cond))
		{
			U32 op1( cpu.GetGZR(rn) ), op2( imm ), res = op1 + op2;
			cpu.SetNZCV( S32(res) < S32(0), res == U32(0), op1 > ~op2, (S32(res) < S32(0)) xor (S32(op1) <= S32(~op2)) );
		}
		else
		cpu.SetNZCV( BOOL(n==1), BOOL(z==1), BOOL(c==1), BOOL(v==1) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCcmn_wi(CodeType code, uint64_t addr)
{
	return new OpCcmn_wi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCcmn_xi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ccmn\t" << DisasmGZXR(rn) << ", " << DisasmI(imm,16) << ", " << DisasmI((n<<3)|(z<<2)|(c<<1)|(v<<0),16) << ", " << DisasmCond(cond);
}}
template <	typename	ARCH>
void OpCcmn_xi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::BOOL BOOL;

		if (CheckCondition(cpu, cond))
		{
			U64 op1( cpu.GetGZR(rn) ), op2( imm ), res = op1 + op2;
			cpu.SetNZCV( S64(res) < S64(0), res == U64(0), op1 > ~op2, (S64(res) < S64(0)) xor (S64(op1) <= S64(~op2)) );
		}
		else
		cpu.SetNZCV( BOOL(n==1), BOOL(z==1), BOOL(c==1), BOOL(v==1) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCcmn_xi(CodeType code, uint64_t addr)
{
	return new OpCcmn_xi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCcmn_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ccmn\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmI((n<<3)|(z<<2)|(c<<1)|(v<<0),16) << ", " << DisasmCond(cond);
}}
template <	typename	ARCH>
void OpCcmn_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::BOOL BOOL;

		if (CheckCondition(cpu, cond))
		{
			U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 + op2;
			cpu.SetNZCV( S32(res) < S32(0), res == U32(0), op1 > ~op2, (S32(res) < S32(0)) xor (S32(op1) <= S32(~op2)) );
		}
		else
		cpu.SetNZCV( BOOL(n==1), BOOL(z==1), BOOL(c==1), BOOL(v==1) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCcmn_w(CodeType code, uint64_t addr)
{
	return new OpCcmn_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCcmn_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ccmn\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", " << DisasmI((n<<3)|(z<<2)|(c<<1)|(v<<0),16) << ", " << DisasmCond(cond);
}}
template <	typename	ARCH>
void OpCcmn_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::BOOL BOOL;

		if (CheckCondition(cpu, cond))
		{
			U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 + op2;
			cpu.SetNZCV( S64(res) < S64(0), res == U64(0), op1 > ~op2, (S64(res) < S64(0)) xor (S64(op1) <= S64(~op2)) );
		}
		else
		cpu.SetNZCV( BOOL(n==1), BOOL(z==1), BOOL(c==1), BOOL(v==1) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCcmn_x(CodeType code, uint64_t addr)
{
	return new OpCcmn_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCcmp_wi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ccmp\t" << DisasmGZWR(rn) << ", " << DisasmI(imm,16) << ", " << DisasmI((n<<3)|(z<<2)|(c<<1)|(v<<0),16) << ", " << DisasmCond(cond);
}}
template <	typename	ARCH>
void OpCcmp_wi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::BOOL BOOL;

		if (CheckCondition(cpu, cond))
		{
			U32 op1( cpu.GetGZR(rn) ), op2( imm ), res = op1 - op2;
			cpu.SetNZCV( S32(res) < S32(0), op1 == op2, op1 >= op2, (S32(res) < S32(0)) xor (S32(op1) < S32(op2)) );
		}
		else
		cpu.SetNZCV( BOOL(n==1), BOOL(z==1), BOOL(c==1), BOOL(v==1) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCcmp_wi(CodeType code, uint64_t addr)
{
	return new OpCcmp_wi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCcmp_xi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ccmp\t" << DisasmGZXR(rn) << ", " << DisasmI(imm,16) << ", " << DisasmI((n<<3)|(z<<2)|(c<<1)|(v<<0),16) << ", " << DisasmCond(cond);
}}
template <	typename	ARCH>
void OpCcmp_xi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::BOOL BOOL;

		if (CheckCondition(cpu, cond))
		{
			U64 op1( cpu.GetGZR(rn) ), op2( imm ), res = op1 - op2;
			cpu.SetNZCV( S64(res) < S64(0), op1 == op2, op1 >= op2, (S64(res) < S64(0)) xor (S64(op1) < S64(op2)) );
		}
		else
		cpu.SetNZCV( BOOL(n==1), BOOL(z==1), BOOL(c==1), BOOL(v==1) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCcmp_xi(CodeType code, uint64_t addr)
{
	return new OpCcmp_xi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCcmp_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ccmp\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmI((n<<3)|(z<<2)|(c<<1)|(v<<0),16) << ", " << DisasmCond(cond);
}}
template <	typename	ARCH>
void OpCcmp_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::BOOL BOOL;

		if (CheckCondition(cpu, cond))
		{
			U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 - op2;
			cpu.SetNZCV( S32(res) < S32(0), op1 == op2, op1 >= op2, (S32(res) < S32(0)) xor (S32(op1) < S32(op2)) );
		}
		else
		cpu.SetNZCV( BOOL(n==1), BOOL(z==1), BOOL(c==1), BOOL(v==1) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCcmp_w(CodeType code, uint64_t addr)
{
	return new OpCcmp_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCcmp_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ccmp\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", " << DisasmI((n<<3)|(z<<2)|(c<<1)|(v<<0),16) << ", " << DisasmCond(cond);
}}
template <	typename	ARCH>
void OpCcmp_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::BOOL BOOL;

		if (CheckCondition(cpu, cond))
		{
			U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 - op2;
			cpu.SetNZCV( S64(res) < S64(0), op1 == op2, op1 >= op2, (S64(res) < S64(0)) xor (S64(op1) < S64(op2)) );
		}
		else
		cpu.SetNZCV( BOOL(n==1), BOOL(z==1), BOOL(c==1), BOOL(v==1) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCcmp_x(CodeType code, uint64_t addr)
{
	return new OpCcmp_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpClrex<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "clrex\t" << DisasmI(imm,16);
}}
template <	typename	ARCH>
void OpClrex<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.ClearExclusiveLocal();
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpClrex(CodeType code, uint64_t addr)
{
	return new OpClrex<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCls_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cls\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn);
}}
template <	typename	ARCH>
void OpCls_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 val( cpu.GetGZR(rn) );
		val = val ^ U32(S32(val) >> 1);

		if (cpu.Test( val == U32(0) ))
		val = U32(31);
		else
		val = U32(30) - BitScanReverse( val );

		cpu.SetGZR(rd, val);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCls_w(CodeType code, uint64_t addr)
{
	return new OpCls_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCls_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cls\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn);
}}
template <	typename	ARCH>
void OpCls_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 val( cpu.GetGZR(rn) );
		val = val ^ U64(S64(val) >> 1);

		if (cpu.Test( val == U64(0) ))
		val = U64(63);
		else
		val = U64(62) - BitScanReverse( val );

		cpu.SetGZR(rd, val);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCls_x(CodeType code, uint64_t addr)
{
	return new OpCls_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpClz_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "clz\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn);
}}
template <	typename	ARCH>
void OpClz_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 val( cpu.GetGZR(rn) );
		if (cpu.Test( val == U32(0) ))
		val = U32(32);
		else
		val = U32(31) - BitScanReverse( val );

		cpu.SetGZR(rd, val);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpClz_w(CodeType code, uint64_t addr)
{
	return new OpClz_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpClz_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "clz\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn);
}}
template <	typename	ARCH>
void OpClz_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 val( cpu.GetGZR(rn) );
		if (cpu.Test( val == U64(0) ))
		val = U64(64);
		else
		val = U64(63) - BitScanReverse( val );

		cpu.SetGZR(rd, val);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpClz_x(CodeType code, uint64_t addr)
{
	return new OpClz_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCsel_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "csel\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmCond(cond);
}}
template <	typename	ARCH>
void OpCsel_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 res;
		if (CheckCondition(cpu, cond))
		res = U32(cpu.GetGZR(rn));
		else
		res = U32(cpu.GetGZR(rm));
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCsel_w(CodeType code, uint64_t addr)
{
	return new OpCsel_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCsel_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "csel\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", " << DisasmCond(cond);
}}
template <	typename	ARCH>
void OpCsel_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 res;
		if (CheckCondition(cpu, cond))
		res = cpu.GetGZR(rn);
		else
		res = cpu.GetGZR(rm);
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCsel_x(CodeType code, uint64_t addr)
{
	return new OpCsel_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCsinc_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if ((rn == rm) and (cond < 0b1110))
		if (rn != 31)
		sink << "cinc\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmCond(cond^1);
		else
		sink << "cset\t" << DisasmGZWR(rd) << ", " << DisasmCond(cond^1);
		else
		sink << "csinc\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmCond(cond);
}}
template <	typename	ARCH>
void OpCsinc_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 res;
		if (CheckCondition(cpu, cond))
		res = U32(cpu.GetGZR(rn));
		else
		res = U32(cpu.GetGZR(rm)) + U32(1);
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCsinc_w(CodeType code, uint64_t addr)
{
	return new OpCsinc_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCsinc_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if ((rn == rm) and (cond < 0b1110))
		if (rn != 31)
		sink << "cinc\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmCond(cond^1);
		else
		sink << "cset\t" << DisasmGZXR(rd) << ", " << DisasmCond(cond^1);
		else
		sink << "csinc\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", " << DisasmCond(cond);
}}
template <	typename	ARCH>
void OpCsinc_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 res;
		if (CheckCondition(cpu, cond))
		res = cpu.GetGZR(rn);
		else
		res = cpu.GetGZR(rm) + U64(1);
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCsinc_x(CodeType code, uint64_t addr)
{
	return new OpCsinc_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCsinv_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if ((rn == rm) and (cond < 0b1110))
		if (rn != 31)
		sink << "cinv\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmCond(cond^1);
		else
		sink << "csetm\t" << DisasmGZWR(rd) << ", " << DisasmCond(cond^1);
		else
		sink << "csinv\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmCond(cond);
}}
template <	typename	ARCH>
void OpCsinv_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 res;
		if (CheckCondition(cpu, cond))
		res = U32(cpu.GetGZR(rn));
		else
		res = ~U32(cpu.GetGZR(rm));
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCsinv_w(CodeType code, uint64_t addr)
{
	return new OpCsinv_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCsinv_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if ((rn == rm) and (cond < 0b1110))
		if (rn != 31)
		sink << "cinv\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmCond(cond^1);
		else
		sink << "csetm\t" << DisasmGZXR(rd) << ", " << DisasmCond(cond^1);
		else
		sink << "csinv\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", " << DisasmCond(cond);
}}
template <	typename	ARCH>
void OpCsinv_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 res;
		if (CheckCondition(cpu, cond))
		res = cpu.GetGZR(rn);
		else
		res = ~(cpu.GetGZR(rm));
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCsinv_x(CodeType code, uint64_t addr)
{
	return new OpCsinv_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCsneg_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if ((rn == rm) and (cond < 0b1110))
		sink << "cneg\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmCond(cond^1);
		else
		sink << "csneg\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmCond(cond);
}}
template <	typename	ARCH>
void OpCsneg_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 res;
		if (CheckCondition(cpu, cond))
		res = U32(cpu.GetGZR(rn));
		else
		res = -U32(cpu.GetGZR(rm));
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCsneg_w(CodeType code, uint64_t addr)
{
	return new OpCsneg_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCsneg_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if ((rn == rm) and (cond < 0b1110))
		sink << "cneg\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmCond(cond^1);
		else
		sink << "csneg\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", " << DisasmCond(cond);
}}
template <	typename	ARCH>
void OpCsneg_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 res;
		if (CheckCondition(cpu, cond))
		res = cpu.GetGZR(rn);
		else
		res = -(cpu.GetGZR(rm));
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCsneg_x(CodeType code, uint64_t addr)
{
	return new OpCsneg_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpDcps1<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "dcps1\t" << DisasmI(imm,16);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpDcps1(CodeType code, uint64_t addr)
{
	return new OpDcps1<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpDcps2<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "dcps2\t" << DisasmI(imm,16);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpDcps2(CodeType code, uint64_t addr)
{
	return new OpDcps2<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpDcps3<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "dcps3\t" << DisasmI(imm,16);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpDcps3(CodeType code, uint64_t addr)
{
	return new OpDcps3<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpDrps<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "drps";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpDrps(CodeType code, uint64_t addr)
{
	return new OpDrps<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpEon_wlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "eon\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpEon_wlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 ^ ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpEon_wlsl(CodeType code, uint64_t addr)
{
	return new OpEon_wlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpEon_wlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "eon\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpEon_wlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( U32(cpu.GetGZR(rm)) >> imm ), res = op1 ^ ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpEon_wlsr(CodeType code, uint64_t addr)
{
	return new OpEon_wlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpEon_wasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "eon\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpEon_wasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 op1( cpu.GetGZR(rn) ), op2( S32(cpu.GetGZR(rm)) >> imm ), res = op1 ^ ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpEon_wasr(CodeType code, uint64_t addr)
{
	return new OpEon_wasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpEon_wror<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "eon\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", ror " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpEon_wror<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( RotateRight(U32(cpu.GetGZR(rm)), imm) ), res = op1 ^ ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpEon_wror(CodeType code, uint64_t addr)
{
	return new OpEon_wror<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpEon_xlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "eon\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpEon_xlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 ^ ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpEon_xlsl(CodeType code, uint64_t addr)
{
	return new OpEon_xlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpEon_xlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "eon\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpEon_xlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) >> imm ), res = op1 ^ ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpEon_xlsr(CodeType code, uint64_t addr)
{
	return new OpEon_xlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpEon_xasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "eon\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpEon_xasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGZR(rn) ), op2( S64(cpu.GetGZR(rm)) >> imm ), res = op1 ^ ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpEon_xasr(CodeType code, uint64_t addr)
{
	return new OpEon_xasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpEon_xror<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "eon\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", ror " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpEon_xror<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( RotateRight(U64(cpu.GetGZR(rm)), imm) ), res = op1 ^ ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpEon_xror(CodeType code, uint64_t addr)
{
	return new OpEon_xror<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpEor_wi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "eor\t" << DisasmGSWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(imm,16);
}}
template <	typename	ARCH>
void OpEor_wi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1(cpu.GetGZR(rn)), op2(imm), res = op1 ^ op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpEor_wi(CodeType code, uint64_t addr)
{
	return new OpEor_wi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpEor_xi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "eor\t" << DisasmGSXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(imm,16);
}}
template <	typename	ARCH>
void OpEor_xi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1(cpu.GetGZR(rn)), op2(imm), res = op1 ^ op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpEor_xi(CodeType code, uint64_t addr)
{
	return new OpEor_xi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpEor_wlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "eor\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpEor_wlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 ^ op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpEor_wlsl(CodeType code, uint64_t addr)
{
	return new OpEor_wlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpEor_wlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "eor\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpEor_wlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( U32(cpu.GetGZR(rm)) >> imm ), res = op1 ^ op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpEor_wlsr(CodeType code, uint64_t addr)
{
	return new OpEor_wlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpEor_wasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "eor\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpEor_wasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 op1( cpu.GetGZR(rn) ), op2( S32(cpu.GetGZR(rm)) >> imm ), res = op1 ^ op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpEor_wasr(CodeType code, uint64_t addr)
{
	return new OpEor_wasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpEor_wror<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "eor\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", ror " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpEor_wror<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( RotateRight(U32(cpu.GetGZR(rm)), imm) ), res = op1 ^ op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpEor_wror(CodeType code, uint64_t addr)
{
	return new OpEor_wror<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpEor_xlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "eor\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpEor_xlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 ^ op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpEor_xlsl(CodeType code, uint64_t addr)
{
	return new OpEor_xlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpEor_xlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "eor\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpEor_xlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) >> imm ), res = op1 ^ op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpEor_xlsr(CodeType code, uint64_t addr)
{
	return new OpEor_xlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpEor_xasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "eor\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpEor_xasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGZR(rn) ), op2( S64(cpu.GetGZR(rm)) >> imm ), res = op1 ^ op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpEor_xasr(CodeType code, uint64_t addr)
{
	return new OpEor_xasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpEor_xror<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "eor\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", ror " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpEor_xror<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( RotateRight(U64(cpu.GetGZR(rm)), imm) ), res = op1 ^ op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpEor_xror(CodeType code, uint64_t addr)
{
	return new OpEor_xror<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpEret<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "eret";
}}
template <	typename	ARCH>
void OpEret<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.ExceptionReturn();
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpEret(CodeType code, uint64_t addr)
{
	return new OpEret<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpExtr_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == rm)
		sink << "ror\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(imms);
		else
		sink << "extr\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmI(imms);
}}
template <	typename	ARCH>
void OpExtr_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res( ((op1 << 1) << (imms ^ 31)) | (op2 >> imms) );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpExtr_w(CodeType code, uint64_t addr)
{
	return new OpExtr_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpExtr_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == rm)
		sink << "ror\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(imms);
		else
		sink << "extr\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", " << DisasmI(imms);
}}
template <	typename	ARCH>
void OpExtr_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res( ((op1 << 1) << (imms ^ 63)) | (op2 >> imms) );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpExtr_x(CodeType code, uint64_t addr)
{
	return new OpExtr_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpHlt<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "hlt\t" << DisasmI(imm,16);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpHlt(CodeType code, uint64_t addr)
{
	return new OpHlt<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpHvc<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "hvc\t" << DisasmI(imm,16);
}}
template <	typename	ARCH>
void OpHvc<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.CallHypervisor( imm );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpHvc(CodeType code, uint64_t addr)
{
	return new OpHvc<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdar_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldar\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdar_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		U32 data( cpu.MemRead32(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdar_w(CodeType code, uint64_t addr)
{
	return new OpLdar_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdar_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldar\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdar_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		U64 data( cpu.MemRead64(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdar_x(CodeType code, uint64_t addr)
{
	return new OpLdar_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdarb_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldarb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdarb_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		U8 data( cpu.MemRead8(addr) );
		cpu.SetGZR(rt, typename ARCH::U32(data));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdarb_w(CodeType code, uint64_t addr)
{
	return new OpLdarb_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdarh_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldarh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdarh_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		U16 data( cpu.MemRead16(addr) );
		cpu.SetGZR(rt, typename ARCH::U32(data));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdarh_w(CodeType code, uint64_t addr)
{
	return new OpLdarh_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdaxp_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldaxp\t" << DisasmGZWR(rt) << ", " << DisasmGZWR(rt2) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdaxp_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		cpu.SetExclusiveMonitors( addr, 8 );
		U32 data0( cpu.MemRead32( addr + U64(0) ) ),
		data1( cpu.MemRead32( addr + U64(4) ) );
		cpu.SetGZR(rt,  data0);
		cpu.SetGZR(rt2, data1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdaxp_w(CodeType code, uint64_t addr)
{
	return new OpLdaxp_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdaxp_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldaxp\t" << DisasmGZXR(rt) << ", " << DisasmGZXR(rt2) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdaxp_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		cpu.SetExclusiveMonitors( addr, 16 );
		U64 data0( cpu.MemRead64( addr + U64(0) ) ),
		data1( cpu.MemRead64( addr + U64(8) ) );
		cpu.SetGZR(rt,  data0);
		cpu.SetGZR(rt2, data1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdaxp_x(CodeType code, uint64_t addr)
{
	return new OpLdaxp_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdaxr_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldaxr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdaxr_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr = cpu.GetGSR(rn);
		cpu.SetExclusiveMonitors( addr, 4 );
		cpu.SetGZR(rt, cpu.MemRead32( addr ));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdaxr_w(CodeType code, uint64_t addr)
{
	return new OpLdaxr_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdaxr_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldaxr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdaxr_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr = cpu.GetGSR(rn);
		cpu.SetExclusiveMonitors( addr, 8 );
		cpu.SetGZR(rt, cpu.MemRead64( addr ));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdaxr_x(CodeType code, uint64_t addr)
{
	return new OpLdaxr_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdaxrb_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldaxrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdaxrb_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr = cpu.GetGSR(rn);
		cpu.SetExclusiveMonitors( addr, 1 );
		cpu.SetGZR(rt, U64(cpu.MemRead8( addr )));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdaxrb_w(CodeType code, uint64_t addr)
{
	return new OpLdaxrb_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdaxrh_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldaxrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdaxrh_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr = cpu.GetGSR(rn);
		cpu.SetExclusiveMonitors( addr, 2 );
		cpu.SetGZR(rt, U64(cpu.MemRead16( addr )));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdaxrh_w(CodeType code, uint64_t addr)
{
	return new OpLdaxrh_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdp_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << (am ? "" : "n") << "p\t" << DisasmGZWR(rt) << ", " << DisasmGZWR(rt2) << ", " << DisasmMemoryRI(rn,imm,am);
}}
template <	typename	ARCH>
void OpLdp_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* TODO: catch Non-temporal hint (am == 0) */
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U32 data0( cpu.MemRead32( addr + U64(0) ) ),
		data1( cpu.MemRead32( addr + U64(4) ) );
		cpu.SetGZR(rt,  data0);
		cpu.SetGZR(rt2, data1);
		if (am & 1)
		cpu.SetGSR(rn, oaddr );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdp_w(CodeType code, uint64_t addr)
{
	return new OpLdp_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdp_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << (am ? "" : "n") << "p\t" << DisasmGZXR(rt) << ", " << DisasmGZXR(rt2) << ", " << DisasmMemoryRI(rn,imm,am);
}}
template <	typename	ARCH>
void OpLdp_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* TODO: catch Non-temporal hint (am == 0) */
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U64 data0( cpu.MemRead64( addr + U64(0) ) ),
		data1( cpu.MemRead64( addr + U64(8) ) );
		cpu.SetGZR(rt,  data0);
		cpu.SetGZR(rt2, data1);
		if (am & 1)
		cpu.SetGSR(rn, oaddr );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdp_x(CodeType code, uint64_t addr)
{
	return new OpLdp_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdpsw_xxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldpsw\t" << DisasmGZXR(rt) << ", " << DisasmGZXR(rt2) << ", " << DisasmMemoryRI(rn,imm,am);
}}
template <	typename	ARCH>
void OpLdpsw_xxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		S32 data0( cpu.MemRead32( addr + U64(0) ) ),
		data1( cpu.MemRead32( addr + U64(4) ) );
		cpu.SetGZR(rt,  U64(data0));
		cpu.SetGZR(rt2, U64(data1));
		if (am & 1)
		cpu.SetGSR(rn, oaddr );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdpsw_xxi(CodeType code, uint64_t addr)
{
	return new OpLdpsw_xxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_wxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << (am ? "" : "u") << "r\t" << DisasmGZWR(rt) << ", " << DisasmMemoryRI(rn,imm,am);
}}
template <	typename	ARCH>
void OpLdr_wxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U32 data( cpu.MemRead32(addr) );
		cpu.SetGZR(rt, data);
		if (am & 1)
		cpu.SetGSR(rn, oaddr );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_wxi(CodeType code, uint64_t addr)
{
	return new OpLdr_wxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_wuo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpLdr_wuo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U32 data( cpu.MemRead32(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_wuo(CodeType code, uint64_t addr)
{
	return new OpLdr_wuo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_xxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << (am ? "" : "u") << "r\t" << DisasmGZXR(rt) << ", " << DisasmMemoryRI(rn,imm,am);
}}
template <	typename	ARCH>
void OpLdr_xxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U64 data( cpu.MemRead64(addr) );
		cpu.SetGZR(rt, data);
		if (am & 1)
		cpu.SetGSR(rn, oaddr );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_xxi(CodeType code, uint64_t addr)
{
	return new OpLdr_xxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_xuo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpLdr_xuo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U64 data( cpu.MemRead64(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_xuo(CodeType code, uint64_t addr)
{
	return new OpLdr_xuo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_wlit<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmGZWR(rt) << ", 0x" << std::hex << (this->GetAddr()+imm);
}}
template <	typename	ARCH>
void OpLdr_wlit<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 addr( cpu.GetPC() + U64(S64(imm)) );
		U32 data( cpu.MemRead32(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_wlit(CodeType code, uint64_t addr)
{
	return new OpLdr_wlit<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_xlit<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmGZXR(rt) << ", 0x" << std::hex << (this->GetAddr()+imm);
}}
template <	typename	ARCH>
void OpLdr_xlit<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 addr( cpu.GetPC() + U64(S64(imm)) );
		U64 data( cpu.MemRead64(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_xlit(CodeType code, uint64_t addr)
{
	return new OpLdr_xlit<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_wxwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_wxwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.MemRead32(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_wxwu(CodeType code, uint64_t addr)
{
	return new OpLdr_wxwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_wxxu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_wxxu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.MemRead32(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_wxxu(CodeType code, uint64_t addr)
{
	return new OpLdr_wxxu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_wxws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_wxws<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.MemRead32(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_wxws(CodeType code, uint64_t addr)
{
	return new OpLdr_wxws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_wxxs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_wxxs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.MemRead32(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_wxxs(CodeType code, uint64_t addr)
{
	return new OpLdr_wxxs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_xxwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_xxwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( cpu.MemRead64(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_xxwu(CodeType code, uint64_t addr)
{
	return new OpLdr_xxwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_xxxu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_xxxu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( cpu.MemRead64(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_xxxu(CodeType code, uint64_t addr)
{
	return new OpLdr_xxxu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_xxws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_xxws<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( cpu.MemRead64(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_xxws(CodeType code, uint64_t addr)
{
	return new OpLdr_xxws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_xxxs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_xxxs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( cpu.MemRead64(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_xxxs(CodeType code, uint64_t addr)
{
	return new OpLdr_xxxs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrb_wxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << (am ? "" : "u") << "rb\t" << DisasmGZWR(rt) << ", " << DisasmMemoryRI(rn,imm,am);
}}
template <	typename	ARCH>
void OpLdrb_wxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U8 data( cpu.MemRead8(addr) );
		cpu.SetGZR(rt, typename ARCH::U32(data));
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrb_wxi(CodeType code, uint64_t addr)
{
	return new OpLdrb_wxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrb_wuo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpLdrb_wuo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U8 data( cpu.MemRead8(addr) );
		cpu.SetGZR(rt, typename ARCH::U32(data));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrb_wuo(CodeType code, uint64_t addr)
{
	return new OpLdrb_wuo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrb_wxwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdrb_wxwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.MemRead8(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrb_wxwu(CodeType code, uint64_t addr)
{
	return new OpLdrb_wxwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrb_wxxu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
}}
template <	typename	ARCH>
void OpLdrb_wxxu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.MemRead8(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrb_wxxu(CodeType code, uint64_t addr)
{
	return new OpLdrb_wxxu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrb_wxws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdrb_wxws<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.MemRead8(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrb_wxws(CodeType code, uint64_t addr)
{
	return new OpLdrb_wxws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrb_wxxs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdrb_wxxs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.MemRead8(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrb_wxxs(CodeType code, uint64_t addr)
{
	return new OpLdrb_wxxs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrh_wxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << (am ? "" : "u") << "rh\t" << DisasmGZWR(rt) << ", " << DisasmMemoryRI(rn,imm,am);
}}
template <	typename	ARCH>
void OpLdrh_wxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U16 data( cpu.MemRead16(addr) );
		cpu.SetGZR(rt, typename ARCH::U32(data));
		if (am & 1)
		cpu.SetGSR(rn, oaddr );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrh_wxi(CodeType code, uint64_t addr)
{
	return new OpLdrh_wxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrh_wuo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpLdrh_wuo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U16 data( cpu.MemRead16(addr) );
		cpu.SetGZR(rt, typename ARCH::U32(data));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrh_wuo(CodeType code, uint64_t addr)
{
	return new OpLdrh_wuo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrh_wxwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdrh_wxwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.MemRead16(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrh_wxwu(CodeType code, uint64_t addr)
{
	return new OpLdrh_wxwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrh_wxxu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
}}
template <	typename	ARCH>
void OpLdrh_wxxu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.MemRead16(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrh_wxxu(CodeType code, uint64_t addr)
{
	return new OpLdrh_wxxu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrh_wxws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdrh_wxws<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.MemRead16(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrh_wxws(CodeType code, uint64_t addr)
{
	return new OpLdrh_wxws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrh_wxxs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdrh_wxxs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.MemRead16(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrh_wxxs(CodeType code, uint64_t addr)
{
	return new OpLdrh_wxxs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsb_wxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << (am ? "" : "u") << "rsb\t" << DisasmGZWR(rt) << ", " << DisasmMemoryRI(rn,imm,am);
}}
template <	typename	ARCH>
void OpLdrsb_wxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8  S8;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		S8 data( cpu.MemRead8(addr) );
		cpu.SetGZR(rt, U32(data));
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsb_wxi(CodeType code, uint64_t addr)
{
	return new OpLdrsb_wxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsb_wuo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpLdrsb_wuo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8  S8;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		S8 data( cpu.MemRead8(addr) );
		cpu.SetGZR(rt, U32(S32(data)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsb_wuo(CodeType code, uint64_t addr)
{
	return new OpLdrsb_wuo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsb_xxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << (am ? "" : "u") << "rsb\t" << DisasmGZXR(rt) << ", " << DisasmMemoryRI(rn,imm,am);
}}
template <	typename	ARCH>
void OpLdrsb_xxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8  S8;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		S8 data( cpu.MemRead8(addr) );
		cpu.SetGZR(rt, U64(data));
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsb_xxi(CodeType code, uint64_t addr)
{
	return new OpLdrsb_xxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsb_xuo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsb\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpLdrsb_xuo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8  S8;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		S8 data( cpu.MemRead8(addr) );
		cpu.SetGZR(rt, U64(S64(data)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsb_xuo(CodeType code, uint64_t addr)
{
	return new OpLdrsb_xuo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsb_wxwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdrsb_wxwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( S32(S8(cpu.MemRead8(addr))) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsb_wxwu(CodeType code, uint64_t addr)
{
	return new OpLdrsb_wxwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsb_wxxu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
}}
template <	typename	ARCH>
void OpLdrsb_wxxu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( S32(S8(cpu.MemRead8(addr))) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsb_wxxu(CodeType code, uint64_t addr)
{
	return new OpLdrsb_wxxu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsb_wxws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdrsb_wxws<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( S32(S8(cpu.MemRead8(addr))) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsb_wxws(CodeType code, uint64_t addr)
{
	return new OpLdrsb_wxws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsb_wxxs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdrsb_wxxs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( S32(S8(cpu.MemRead8(addr))) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsb_wxxs(CodeType code, uint64_t addr)
{
	return new OpLdrsb_wxxs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsb_xxwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsb\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdrsb_xxwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( S64(S8(cpu.MemRead8(addr))) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsb_xxwu(CodeType code, uint64_t addr)
{
	return new OpLdrsb_xxwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsb_xxxu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsb\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
}}
template <	typename	ARCH>
void OpLdrsb_xxxu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( S64(S8(cpu.MemRead8(addr))) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsb_xxxu(CodeType code, uint64_t addr)
{
	return new OpLdrsb_xxxu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsb_xxws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsb\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdrsb_xxws<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( S64(S8(cpu.MemRead8(addr))) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsb_xxws(CodeType code, uint64_t addr)
{
	return new OpLdrsb_xxws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsb_xxxs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsb\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdrsb_xxxs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( S64(S8(cpu.MemRead8(addr))) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsb_xxxs(CodeType code, uint64_t addr)
{
	return new OpLdrsb_xxxs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsh_wxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << (am ? "" : "u") << "rsh\t" << DisasmGZWR(rt) << ", " << DisasmMemoryRI(rn,imm,am);
}}
template <	typename	ARCH>
void OpLdrsh_wxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		S16 data( cpu.MemRead16(addr) );
		cpu.SetGZR(rt, U32(data));
		if (am & 1)
		cpu.SetGSR(rn, oaddr );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsh_wxi(CodeType code, uint64_t addr)
{
	return new OpLdrsh_wxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsh_wuo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpLdrsh_wuo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		S16 data( cpu.MemRead16(addr) );
		cpu.SetGZR(rt, U32(S32(data)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsh_wuo(CodeType code, uint64_t addr)
{
	return new OpLdrsh_wuo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsh_xxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << (am ? "" : "u") << "rsh\t" << DisasmGZXR(rt) << ", " << DisasmMemoryRI(rn,imm,am);
}}
template <	typename	ARCH>
void OpLdrsh_xxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		S16 data( cpu.MemRead16(addr) );
		cpu.SetGZR(rt, U64(data));
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsh_xxi(CodeType code, uint64_t addr)
{
	return new OpLdrsh_xxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsh_xuo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsh\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpLdrsh_xuo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		S16 data( cpu.MemRead16(addr) );
		cpu.SetGZR(rt, U64(S64(data)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsh_xuo(CodeType code, uint64_t addr)
{
	return new OpLdrsh_xuo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsh_wxwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdrsh_wxwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( S32(S16(cpu.MemRead16(addr))) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsh_wxwu(CodeType code, uint64_t addr)
{
	return new OpLdrsh_wxwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsh_wxxu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
}}
template <	typename	ARCH>
void OpLdrsh_wxxu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( S32(S16(cpu.MemRead16(addr))) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsh_wxxu(CodeType code, uint64_t addr)
{
	return new OpLdrsh_wxxu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsh_wxws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdrsh_wxws<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( S32(S16(cpu.MemRead16(addr))) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsh_wxws(CodeType code, uint64_t addr)
{
	return new OpLdrsh_wxws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsh_wxxs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdrsh_wxxs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( S32(S16(cpu.MemRead16(addr))) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsh_wxxs(CodeType code, uint64_t addr)
{
	return new OpLdrsh_wxxs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsh_xxwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsh\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdrsh_xxwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( S64(S16(cpu.MemRead16(addr))) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsh_xxwu(CodeType code, uint64_t addr)
{
	return new OpLdrsh_xxwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsh_xxxu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsh\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
}}
template <	typename	ARCH>
void OpLdrsh_xxxu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( S64(S16(cpu.MemRead16(addr))) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsh_xxxu(CodeType code, uint64_t addr)
{
	return new OpLdrsh_xxxu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsh_xxws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsh\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdrsh_xxws<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( S64(S16(cpu.MemRead16(addr))) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsh_xxws(CodeType code, uint64_t addr)
{
	return new OpLdrsh_xxws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsh_xxxs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsh\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdrsh_xxxs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( S64(S16(cpu.MemRead16(addr))) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsh_xxxs(CodeType code, uint64_t addr)
{
	return new OpLdrsh_xxxs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsw_xlit<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsw\t" << DisasmGZXR(rt) << ", 0x" << std::hex << (this->GetAddr()+imm);
}}
template <	typename	ARCH>
void OpLdrsw_xlit<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;

		U64 addr( cpu.GetPC() + U64(S64(imm)) );
		U64 data( S64(S32( cpu.MemRead32(addr))) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsw_xlit(CodeType code, uint64_t addr)
{
	return new OpLdrsw_xlit<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsw_xxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << (am ? "" : "u") << "rsw\t" << DisasmGZXR(rt) << ", " << DisasmMemoryRI(rn,imm,am);
}}
template <	typename	ARCH>
void OpLdrsw_xxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32  S32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		S32 data( cpu.MemRead32(addr) );
		cpu.SetGZR(rt, U64(data));
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsw_xxi(CodeType code, uint64_t addr)
{
	return new OpLdrsw_xxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsw_xuo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsw\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpLdrsw_xuo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32  S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		S32 data( cpu.MemRead32(addr) );
		cpu.SetGZR(rt, U64(S64(data)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsw_xuo(CodeType code, uint64_t addr)
{
	return new OpLdrsw_xuo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsw_xxwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsw\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdrsw_xxwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( S64(S32(cpu.MemRead32(addr))) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsw_xxwu(CodeType code, uint64_t addr)
{
	return new OpLdrsw_xxwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsw_xxxu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsw\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
}}
template <	typename	ARCH>
void OpLdrsw_xxxu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( S64(S32(cpu.MemRead32(addr))) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsw_xxxu(CodeType code, uint64_t addr)
{
	return new OpLdrsw_xxxu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsw_xxws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsw\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdrsw_xxws<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( S64(S32(cpu.MemRead32(addr))) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsw_xxws(CodeType code, uint64_t addr)
{
	return new OpLdrsw_xxws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdrsw_xxxs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldrsw\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdrsw_xxxs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( S64(S32(cpu.MemRead32(addr))) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdrsw_xxxs(CodeType code, uint64_t addr)
{
	return new OpLdrsw_xxxs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdtr_wbo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldtr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpLdtr_wbo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U32 data( cpu.MemReadUnprivileged32(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdtr_wbo(CodeType code, uint64_t addr)
{
	return new OpLdtr_wbo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdtr_xbo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldtr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpLdtr_xbo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U64 data( cpu.MemReadUnprivileged64(addr) );
		cpu.SetGZR(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdtr_xbo(CodeType code, uint64_t addr)
{
	return new OpLdtr_xbo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdtrb_wbo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldtrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpLdtrb_wbo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U8 data( cpu.MemReadUnprivileged8(addr) );
		cpu.SetGZR(rt, typename ARCH::U32(data));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdtrb_wbo(CodeType code, uint64_t addr)
{
	return new OpLdtrb_wbo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdtrh_wbo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldtrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpLdtrh_wbo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U16 data( cpu.MemReadUnprivileged16(addr) );
		cpu.SetGZR(rt, typename ARCH::U32(data));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdtrh_wbo(CodeType code, uint64_t addr)
{
	return new OpLdtrh_wbo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdtrsb_wbo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldtrsb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpLdtrsb_wbo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8  S8;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		S8 data( cpu.MemReadUnprivileged8(addr) );
		cpu.SetGZR(rt, U32(data));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdtrsb_wbo(CodeType code, uint64_t addr)
{
	return new OpLdtrsb_wbo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdtrsb_xbo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldtrsb\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpLdtrsb_xbo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8  S8;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		S8 data( cpu.MemReadUnprivileged8(addr) );
		cpu.SetGZR(rt, U64(data));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdtrsb_xbo(CodeType code, uint64_t addr)
{
	return new OpLdtrsb_xbo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdtrsh_wbo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldtrsh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpLdtrsh_wbo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		S16 data( cpu.MemReadUnprivileged16(addr) );
		cpu.SetGZR(rt, U32(data));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdtrsh_wbo(CodeType code, uint64_t addr)
{
	return new OpLdtrsh_wbo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdtrsh_xbo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldtrsh\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpLdtrsh_xbo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		S16 data( cpu.MemReadUnprivileged16(addr) );
		cpu.SetGZR(rt, U64(data));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdtrsh_xbo(CodeType code, uint64_t addr)
{
	return new OpLdtrsh_xbo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdtrsw_xbo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldtrsw\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpLdtrsw_xbo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32  S32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		S32 data( cpu.MemReadUnprivileged32(addr) );
		cpu.SetGZR(rt, U64(data));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdtrsw_xbo(CodeType code, uint64_t addr)
{
	return new OpLdtrsw_xbo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdxp_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldxp\t" << DisasmGZWR(rt) << ", " << DisasmGZWR(rt2) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdxp_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		cpu.SetExclusiveMonitors( addr, 8 );
		U32 data0( cpu.MemRead32( addr + U64(0) ) ),
		data1( cpu.MemRead32( addr + U64(4) ) );
		cpu.SetGZR(rt,  data0);
		cpu.SetGZR(rt2, data1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdxp_w(CodeType code, uint64_t addr)
{
	return new OpLdxp_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdxp_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldxp\t" << DisasmGZXR(rt) << ", " << DisasmGZXR(rt2) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdxp_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		cpu.SetExclusiveMonitors( addr, 16 );
		U64 data0( cpu.MemRead64( addr + U64(0) ) ),
		data1( cpu.MemRead64( addr + U64(8) ) );
		cpu.SetGZR(rt,  data0);
		cpu.SetGZR(rt2, data1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdxp_x(CodeType code, uint64_t addr)
{
	return new OpLdxp_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdxr_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldxr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdxr_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr = cpu.GetGSR(rn);
		cpu.SetExclusiveMonitors( addr, 4 );
		cpu.SetGZR(rt, cpu.MemRead32( addr ));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdxr_w(CodeType code, uint64_t addr)
{
	return new OpLdxr_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdxr_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldxr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdxr_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr = cpu.GetGSR(rn);
		cpu.SetExclusiveMonitors( addr, 8 );
		cpu.SetGZR(rt, cpu.MemRead64( addr ));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdxr_x(CodeType code, uint64_t addr)
{
	return new OpLdxr_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdxrb_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldxrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdxrb_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr = cpu.GetGSR(rn);
		cpu.SetExclusiveMonitors( addr, 1 );
		cpu.SetGZR(rt, U64(cpu.MemRead8( addr )));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdxrb_w(CodeType code, uint64_t addr)
{
	return new OpLdxrb_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdxrh_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldxrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdxrh_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr = cpu.GetGSR(rn);
		cpu.SetExclusiveMonitors( addr, 2 );
		cpu.SetGZR(rt, U64(cpu.MemRead16( addr )));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdxrh_w(CodeType code, uint64_t addr)
{
	return new OpLdxrh_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLsl_www<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "lsl\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
}}
template <	typename	ARCH>
void OpLsl_www<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res( op1 << (op2 & U32(0b11111)) );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLsl_www(CodeType code, uint64_t addr)
{
	return new OpLsl_www<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLsl_xxx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "lsl\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpLsl_xxx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res( op1 << (op2 & U64(0b111111)) );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLsl_xxx(CodeType code, uint64_t addr)
{
	return new OpLsl_xxx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLsr_www<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "lsr\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
}}
template <	typename	ARCH>
void OpLsr_www<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res( op1 >> (op2 & U32(0b11111)) );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLsr_www(CodeType code, uint64_t addr)
{
	return new OpLsr_www<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLsr_xxx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "lsr\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpLsr_xxx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res( op1 >> (op2 & U64(0b111111)) );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLsr_xxx(CodeType code, uint64_t addr)
{
	return new OpLsr_xxx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMadd_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (ra == 31)
		sink << "mul\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
		else
		sink << "madd\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmGZWR(ra);
}}
template <	typename	ARCH>
void OpMadd_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), acc( cpu.GetGZR(ra) ), res( acc + op1*op2 );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMadd_w(CodeType code, uint64_t addr)
{
	return new OpMadd_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMadd_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (ra == 31)
		sink << "mul\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
		else
		sink << "madd\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", " << DisasmGZXR(ra);
}}
template <	typename	ARCH>
void OpMadd_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res( cpu.GetGZR(ra) + op1*op2 );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMadd_x(CodeType code, uint64_t addr)
{
	return new OpMadd_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMov_wi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mov\t" << DisasmGZWR(rd) << ", " << DisasmI(imm,16);
}}
template <	typename	ARCH>
void OpMov_wi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetGZR(rd, typename ARCH::U64(imm));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMov_wi(CodeType code, uint64_t addr)
{
	return new OpMov_wi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMov_xi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mov\t" << DisasmGZXR(rd) << ", " << DisasmI(imm,16);
}}
template <	typename	ARCH>
void OpMov_xi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetGZR(rd, typename ARCH::U64(imm));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMov_xi(CodeType code, uint64_t addr)
{
	return new OpMov_xi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMovk_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "movk\t" << DisasmGZWR(rd) << ", " << DisasmI(imm,16) << DisasmINZ(", lsl ",shift);
}}
template <	typename	ARCH>
void OpMovk_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 src( cpu.GetGZR(rd) ), mask( ~(uint32_t(0xffff) << shift) ), res( (src & mask) | (U32(imm) << shift) );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMovk_w(CodeType code, uint64_t addr)
{
	return new OpMovk_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMovk_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "movk\t" << DisasmGZXR(rd) << ", " << DisasmI(imm,16) << DisasmINZ(", lsl ",shift);
}}
template <	typename	ARCH>
void OpMovk_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 src( cpu.GetGZR(rd) ), mask( ~(uint64_t(0xffff) << shift) ), res( (src & mask) | (U64(imm) << shift) );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMovk_x(CodeType code, uint64_t addr)
{
	return new OpMovk_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMrs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sysreg->DisasmRead(op0, op1, crn, crm, op2, rt, sink);
}}
template <	typename	ARCH>
void OpMrs<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.CheckSystemAccess(op1);

		// std::ostringstream sstr;
		// sysreg->DisasmRead(op0, op1, crn, crm, op2, rt, sstr);
		// cpu.sysregtrace.insert(sstr.str());
		cpu.SetGZR(rt, sysreg->Read(op0, op1, crn, crm, op2, rt, cpu));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMrs(CodeType code, uint64_t addr)
{
	return new OpMrs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMsub_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (ra == 31)
		sink << "mneg\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
		else
		sink << "msub\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmGZWR(ra);
}}
template <	typename	ARCH>
void OpMsub_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), acc( cpu.GetGZR(ra) ), res( acc - op1*op2 );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMsub_w(CodeType code, uint64_t addr)
{
	return new OpMsub_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMsub_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (ra == 31)
		sink << "mneg\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
		else
		sink << "msub\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", " << DisasmGZXR(ra);
}}
template <	typename	ARCH>
void OpMsub_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res( cpu.GetGZR(ra) - op1*op2 );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMsub_x(CodeType code, uint64_t addr)
{
	return new OpMsub_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpNop<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "nop";
}}
template <	typename	ARCH>
void OpNop<	ARCH>::execute( ARCH & cpu) const
{
	{
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpNop(CodeType code, uint64_t addr)
{
	return new OpNop<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpOrn_wlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "mvn\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
		else
		sink << "orn\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpOrn_wlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 | ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpOrn_wlsl(CodeType code, uint64_t addr)
{
	return new OpOrn_wlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpOrn_wlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "mvn\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
		else
		sink << "orn\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpOrn_wlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( U32(cpu.GetGZR(rm)) >> imm ), res = op1 | ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpOrn_wlsr(CodeType code, uint64_t addr)
{
	return new OpOrn_wlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpOrn_wasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "mvn\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
		else
		sink << "orn\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpOrn_wasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 op1( cpu.GetGZR(rn) ), op2( S32(cpu.GetGZR(rm)) >> imm ), res = op1 | ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpOrn_wasr(CodeType code, uint64_t addr)
{
	return new OpOrn_wasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpOrn_wror<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "mvn\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << ", ror " << DisasmI(imm);
		else
		sink << "orn\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", ror " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpOrn_wror<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( RotateRight(U32(cpu.GetGZR(rm)), imm) ), res = op1 | ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpOrn_wror(CodeType code, uint64_t addr)
{
	return new OpOrn_wror<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpOrn_xlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "mvn\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
		else
		sink << "orn\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpOrn_xlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 | ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpOrn_xlsl(CodeType code, uint64_t addr)
{
	return new OpOrn_xlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpOrn_xlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "mvn\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
		else
		sink << "orn\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpOrn_xlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) >> imm ), res = op1 | ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpOrn_xlsr(CodeType code, uint64_t addr)
{
	return new OpOrn_xlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpOrn_xasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "mvn\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
		else
		sink << "orn\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpOrn_xasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGZR(rn) ), op2( S64(cpu.GetGZR(rm)) >> imm ), res = op1 | ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpOrn_xasr(CodeType code, uint64_t addr)
{
	return new OpOrn_xasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpOrn_xror<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "mvn\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << ", ror " << DisasmI(imm);
		else
		sink << "orn\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", ror " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpOrn_xror<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( RotateRight(U64(cpu.GetGZR(rm)), imm) ), res = op1 | ~op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpOrn_xror(CodeType code, uint64_t addr)
{
	return new OpOrn_xror<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpOrr_wi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "mov\t" << DisasmGSWR(rd) << ", " << DisasmI(imm,16);
		else
		sink << "orr\t" << DisasmGSWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(imm,16);
}}
template <	typename	ARCH>
void OpOrr_wi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1(cpu.GetGZR(rn)), op2(imm), res = op1 | op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpOrr_wi(CodeType code, uint64_t addr)
{
	return new OpOrr_wi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpOrr_xi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "mov\t" << DisasmGSXR(rd) << ", " << DisasmI(imm,16);
		else
		sink << "orr\t" << DisasmGSXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(imm,16);
}}
template <	typename	ARCH>
void OpOrr_xi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1(cpu.GetGZR(rn)), op2(imm), res = op1 | op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpOrr_xi(CodeType code, uint64_t addr)
{
	return new OpOrr_xi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpOrr_wlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "mov\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
		else
		sink << "orr\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpOrr_wlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 | op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpOrr_wlsl(CodeType code, uint64_t addr)
{
	return new OpOrr_wlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpOrr_xlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "mov\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
		else
		sink << "orr\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpOrr_xlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 | op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpOrr_xlsl(CodeType code, uint64_t addr)
{
	return new OpOrr_xlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpOrr_wlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "mov\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
		else
		sink << "orr\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpOrr_wlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( U32(cpu.GetGZR(rm)) >> imm ), res = op1 | op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpOrr_wlsr(CodeType code, uint64_t addr)
{
	return new OpOrr_wlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpOrr_xlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "mov\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
		else
		sink << "orr\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpOrr_xlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) >> imm ), res = op1 | op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpOrr_xlsr(CodeType code, uint64_t addr)
{
	return new OpOrr_xlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpOrr_wasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "mov\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
		else
		sink << "orr\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpOrr_wasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 op1( cpu.GetGZR(rn) ), op2( S32(cpu.GetGZR(rm)) >> imm ), res = op1 | op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpOrr_wasr(CodeType code, uint64_t addr)
{
	return new OpOrr_wasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpOrr_xasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "mov\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
		else
		sink << "orr\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpOrr_xasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGZR(rn) ), op2( S64(cpu.GetGZR(rm)) >> imm ), res = op1 | op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpOrr_xasr(CodeType code, uint64_t addr)
{
	return new OpOrr_xasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpOrr_wror<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "mov\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << ", ror " << DisasmI(imm);
		else
		sink << "orr\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", ror " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpOrr_wror<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( RotateRight(U32(cpu.GetGZR(rm)), imm) ), res = op1 | op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpOrr_wror(CodeType code, uint64_t addr)
{
	return new OpOrr_wror<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpOrr_xror<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "mov\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << ", ror " << DisasmI(imm);
		else
		sink << "orr\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", ror " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpOrr_xror<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( RotateRight(U64(cpu.GetGZR(rm)), imm) ), res = op1 | op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpOrr_xror(CodeType code, uint64_t addr)
{
	return new OpOrr_xror<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpPrfm_lit<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "prfm\t" << DisasmI(rt,16) << ", 0x" << std::hex << (this->GetAddr()+imm);
}}
template <	typename	ARCH>
void OpPrfm_lit<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		cpu.PrefetchMemory( rt, cpu.GetPC() + U64(S64(imm)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpPrfm_lit(CodeType code, uint64_t addr)
{
	return new OpPrfm_lit<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpPrfm_xi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "prfm\t" << DisasmI(rt,16) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpPrfm_xi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		cpu.PrefetchMemory( rt, cpu.GetGSR(rn) + U64(imm) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpPrfm_xi(CodeType code, uint64_t addr)
{
	return new OpPrfm_xi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpPrfm_xws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "prfm\t" << DisasmI(rt,16) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpPrfm_xws<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		cpu.PrefetchMemory( rt, cpu.GetGSR(rn) + U64(S64(S32(cpu.GetGZR(rm))) << shift));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpPrfm_xws(CodeType code, uint64_t addr)
{
	return new OpPrfm_xws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpPrfm_xwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "prfm\t" << DisasmI(rt,16) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpPrfm_xwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		cpu.PrefetchMemory( rt, cpu.GetGSR(rn) + (U64(U32(cpu.GetGZR(rm))) << shift) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpPrfm_xwu(CodeType code, uint64_t addr)
{
	return new OpPrfm_xwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpPrfm_xx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "prfm\t" << DisasmI(rt,16) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm);
		if (opt) sink << ",sxtx" << DisasmINZ(" ", shift) << "]";
		else     sink << DisasmINZ(",lsl ",shift) << "]";
}}
template <	typename	ARCH>
void OpPrfm_xx<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.PrefetchMemory( rt, cpu.GetGSR(rn) + (cpu.GetGZR(rm) << shift) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpPrfm_xx(CodeType code, uint64_t addr)
{
	return new OpPrfm_xx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpPrfum<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "prfum\t" << DisasmI(rt,16) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpPrfum<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		cpu.PrefetchMemory( rt, cpu.GetGSR(rn) + U64(imm) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpPrfum(CodeType code, uint64_t addr)
{
	return new OpPrfum<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRbit_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rbit\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn);
}}
template <	typename	ARCH>
void OpRbit_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 res( cpu.GetGZR(rn) );
		uint32_t const masks[] = {0x55555555, 0x33333333, 0x0f0f0f0f, 0x00ff00ff, 0x0000ffff};

		for (unsigned i = 0; i < 5; ++i) {
			unsigned shift = (1<<i);
			U32 mask = U32(masks[i]);
			res = ((res >> shift) & mask) | ((res & mask) << shift);
		}

		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRbit_w(CodeType code, uint64_t addr)
{
	return new OpRbit_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRbit_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rbit\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn);
}}
template <	typename	ARCH>
void OpRbit_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 res( cpu.GetGZR(rn) );
		uint64_t const masks[] = {0x5555555555555555ull, 0x3333333333333333ull, 0x0f0f0f0f0f0f0f0full, 0x00ff00ff00ff00ffull, 0x0000ffff0000ffffull, 0x00000000ffffffffull};

		for (unsigned i = 0; i < 6; ++i) {
			unsigned shift = (1<<i);
			U64 mask = U64(masks[i]);
			res = ((res >> shift) & mask) | ((res & mask) << shift);
		}

		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRbit_x(CodeType code, uint64_t addr)
{
	return new OpRbit_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRet<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 30)
		sink << "ret";
		else
		sink << "ret\t" << DisasmGZXR(rn);
}}
template <	typename	ARCH>
void OpRet<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.BranchTo( cpu.GetGZR(rn), ARCH::B_RET );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRet(CodeType code, uint64_t addr)
{
	return new OpRet<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRev_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rev\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn);
}}
template <	typename	ARCH>
void OpRev_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 const msk( 0xff );
		U32 src( cpu.GetGZR(rn) ), res( ((src << 24) & (msk << 24)) | ((src << 8) & (msk << 16)) | ((src >> 8) & (msk << 8)) | ((src >> 24) & (msk << 0)) );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRev_w(CodeType code, uint64_t addr)
{
	return new OpRev_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRev_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rev\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn);
}}
template <	typename	ARCH>
void OpRev_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 const msk( 0xff );
		U64 src( cpu.GetGZR(rn) ), res( ((src << 56) & (msk << 56)) | ((src << 40) & (msk << 48)) | ((src << 24) & (msk << 40)) | ((src << 8) & (msk << 32)) | ((src >> 8) & (msk << 24)) | ((src >> 24) & (msk << 16)) | ((src >> 40) & (msk << 8)) | ((src >> 56) & (msk << 0)) );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRev_x(CodeType code, uint64_t addr)
{
	return new OpRev_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRev16_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rev16\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn);
}}
template <	typename	ARCH>
void OpRev16_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 res( cpu.GetGZR(rn) );
		uint32_t const masks[] = {0x00ff00ff};

		for (unsigned i = 0; i < 1; ++i) {
			unsigned shift = (8<<i);
			U32 mask = U32(masks[i]);
			res = ((res >> shift) & mask) | ((res & mask) << shift);
		}

		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRev16_w(CodeType code, uint64_t addr)
{
	return new OpRev16_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRev16_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rev16\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn);
}}
template <	typename	ARCH>
void OpRev16_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 res( cpu.GetGZR(rn) );
		uint64_t const masks[] = {0x00ff00ff00ff00ffull};

		for (unsigned i = 0; i < 1; ++i) {
			unsigned shift = (8<<i);
			U64 mask = U64(masks[i]);
			res = ((res >> shift) & mask) | ((res & mask) << shift);
		}

		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRev16_x(CodeType code, uint64_t addr)
{
	return new OpRev16_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRev32_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rev32\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn);
}}
template <	typename	ARCH>
void OpRev32_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 res( cpu.GetGZR(rn) );
		uint64_t const masks[] = {0x00ff00ff00ff00ffull, 0x0000ffff0000ffffull};

		for (unsigned i = 0; i < 2; ++i) {
			unsigned shift = (8<<i);
			U64 mask = U64(masks[i]);
			res = ((res >> shift) & mask) | ((res & mask) << shift);
		}

		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRev32_x(CodeType code, uint64_t addr)
{
	return new OpRev32_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRor_www<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ror\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
}}
template <	typename	ARCH>
void OpRor_www<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res( RotateRight(op1, op2 & U32(0b11111)) );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRor_www(CodeType code, uint64_t addr)
{
	return new OpRor_www<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRor_xxx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ror\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpRor_xxx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res( RotateRight(op1, op2 & U64(0b111111)) );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRor_xxx(CodeType code, uint64_t addr)
{
	return new OpRor_xxx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSbc_www<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "ngc\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm);
		else
		sink << "sbc\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
}}
template <	typename	ARCH>
void OpSbc_www<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::BOOL BOOL;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 - op2 - U32(not BOOL(cpu.GetCarry()));
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSbc_www(CodeType code, uint64_t addr)
{
	return new OpSbc_www<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSbc_xxx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "ngc\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm);
		else
		sink << "sbc\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpSbc_xxx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::BOOL BOOL;
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 - op2 - U64(not BOOL(cpu.GetCarry()));
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSbc_xxx(CodeType code, uint64_t addr)
{
	return new OpSbc_xxx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSbcs_www<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "ngcs\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm);
		else
		sink << "sbcs\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
}}
template <	typename	ARCH>
void OpSbcs_www<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::BOOL BOOL;

		BOOL borrow( not BOOL(cpu.GetCarry()) );
		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 - op2 - U32(borrow);
		cpu.SetGZR(rd, res);

		BOOL n = S32(res) < S32(0), z = res == U32(0);
		if (cpu.Test(borrow))
		cpu.SetNZCV( n, z, op1 >  op2, n xor (S32(op1) <= S32(op2)) );
		else
		cpu.SetNZCV( n, z, op1 >= op2, n xor (S32(op1) <  S32(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSbcs_www(CodeType code, uint64_t addr)
{
	return new OpSbcs_www<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSbcs_xxx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "ngcs\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm);
		else
		sink << "sbcs\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpSbcs_xxx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::BOOL BOOL;

		BOOL borrow( not BOOL(cpu.GetCarry()) );
		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = op1 - op2 - U64(borrow);
		cpu.SetGZR(rd, res);

		BOOL n = S64(res) < S64(0), z = res == U64(0);
		if (cpu.Test(borrow))
		cpu.SetNZCV( n, z, op1 >  op2, n xor (S64(op1) <= S64(op2)) );
		else
		cpu.SetNZCV( n, z, op1 >= op2, n xor (S64(op1) <  S64(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSbcs_xxx(CodeType code, uint64_t addr)
{
	return new OpSbcs_xxx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSbfm_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (imms == 0b11111)
		sink << "asr\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(immr);
		else if (imms < immr)
		sink << "sbfiz\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(-immr&31) << ", " << DisasmI(imms+1);
		else if ((immr == 0) and (imms == 0b00111))
		sink << "sxtb\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn);
		else if ((immr == 0) and (imms == 0b01111))
		sink << "sxth\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn);
		else
		sink << "sbfx\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(immr) << ", " << DisasmI(imms+1-immr);
}}
template <	typename	ARCH>
void OpSbfm_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;
		unsigned l = (imms ^ 31), r = (l + immr) & 31;

		U32 src( cpu.GetGZR(rn) ), res( S32(src << l) >> r );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSbfm_w(CodeType code, uint64_t addr)
{
	return new OpSbfm_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSbfm_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (imms == 0b111111)
		sink << "asr\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(immr);
		else if (imms < immr)
		sink << "sbfiz\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(-immr&63) << ", " << DisasmI(imms+1);
		else if ((immr == 0) and (imms == 0b000111))
		sink << "sxtb\t" << DisasmGZXR(rd) << ", " << DisasmGZWR(rn);
		else if ((immr == 0) and (imms == 0b001111))
		sink << "sxth\t" << DisasmGZXR(rd) << ", " << DisasmGZWR(rn);
		else if ((immr == 0) and (imms == 0b011111))
		sink << "sxtw\t" << DisasmGZXR(rd) << ", " << DisasmGZWR(rn);
		else
		sink << "sbfx\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(immr) << ", " << DisasmI(imms+1-immr);
}}
template <	typename	ARCH>
void OpSbfm_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;
		unsigned l = (imms ^ 63), r = (l + immr) & 63;

		U64 src( cpu.GetGZR(rn) ), res( S64(src << l) >> r );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSbfm_x(CodeType code, uint64_t addr)
{
	return new OpSbfm_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSdiv_www<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sdiv\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
}}
template <	typename	ARCH>
void OpSdiv_www<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;

		S32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res ( Div( cpu, op1, op2 ) );
		cpu.SetGZR(rd, U32(res));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSdiv_www(CodeType code, uint64_t addr)
{
	return new OpSdiv_www<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSdiv_xxx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sdiv\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpSdiv_xxx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		S64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res( Div( cpu, op1, op2 ) );
		cpu.SetGZR(rd, U64(res));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSdiv_xxx(CodeType code, uint64_t addr)
{
	return new OpSdiv_xxx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmaddl_xw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (ra == 31)
		sink << "smull\t" << DisasmGZXR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
		else
		sink << "smaddl\t" << DisasmGZXR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmGZXR(ra);
}}
template <	typename	ARCH>
void OpSmaddl_xw<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		S64 op1( S32( cpu.GetGZR(rn) ) ), op2( S32( cpu.GetGZR(rm) ) ), op3( cpu.GetGZR(ra ) ), res( op3 + (op1 * op2) );
		cpu.SetGZR(rd, U64(res));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmaddl_xw(CodeType code, uint64_t addr)
{
	return new OpSmaddl_xw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmc<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smc\t" << DisasmI(imm,16);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmc(CodeType code, uint64_t addr)
{
	return new OpSmc<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmsubl_xw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (ra == 31)
		sink << "smnegl\t" << DisasmGZXR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
		else
		sink << "smsubl\t" << DisasmGZXR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmGZXR(ra);
}}
template <	typename	ARCH>
void OpSmsubl_xw<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		S64 op1( S32( cpu.GetGZR(rn) ) ), op2( S32( cpu.GetGZR(rm) ) ), op3( cpu.GetGZR(ra ) ), res( op3 - (op1 * op2) );
		cpu.SetGZR(rd, U64(res));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmsubl_xw(CodeType code, uint64_t addr)
{
	return new OpSmsubl_xw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmulh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smulh\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpSmulh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		S64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res( SignedMultiplyHigh64( cpu, op1, op2 ) );

		cpu.SetGZR(rd, U64(res));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmulh(CodeType code, uint64_t addr)
{
	return new OpSmulh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStlr_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "stlr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStlr_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		U32 data( cpu.GetGZR(rt) );
		cpu.MemWrite32(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStlr_w(CodeType code, uint64_t addr)
{
	return new OpStlr_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStlr_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "stlr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStlr_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		U64 data( cpu.GetGZR(rt) );
		cpu.MemWrite64(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStlr_x(CodeType code, uint64_t addr)
{
	return new OpStlr_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStlrb_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "stlrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStlrb_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		U8 data( cpu.GetGZR(rt) );
		cpu.MemWrite8(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStlrb_w(CodeType code, uint64_t addr)
{
	return new OpStlrb_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStlrh_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "stlrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStlrh_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		U16 data( cpu.GetGZR(rt) );
		cpu.MemWrite16(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStlrh_w(CodeType code, uint64_t addr)
{
	return new OpStlrh_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStlxp_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "stlxp\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", " << DisasmGZWR(rt2) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStlxp_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		U32 data0( cpu.GetGZR(rt) ), data1( cpu.GetGZR(rt2) );
		if (cpu.ExclusiveMonitorsPass(addr, 8)) {
			cpu.MemWrite32( addr + U64(0), data0 );
			cpu.MemWrite32( addr + U64(4), data1 );
			cpu.SetGZR(rs, U64(0));
			} else {
			cpu.SetGZR(rs, U64(1));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStlxp_w(CodeType code, uint64_t addr)
{
	return new OpStlxp_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStlxp_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "stlxp\t" << DisasmGZWR(rs) << ", " << DisasmGZXR(rt) << ", " << DisasmGZXR(rt2) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStlxp_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		U64 data0( cpu.GetGZR(rt) ), data1( cpu.GetGZR(rt2) );
		if (cpu.ExclusiveMonitorsPass(addr, 16)) {
			cpu.MemWrite64( addr + U64(0), data0 );
			cpu.MemWrite64( addr + U64(8), data1 );
			cpu.SetGZR(rs, U64(0));
			} else {
			cpu.SetGZR(rs, U64(1));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStlxp_x(CodeType code, uint64_t addr)
{
	return new OpStlxp_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStlxr_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "stlxr\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStlxr_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr = cpu.GetGSR(rn);
		if (cpu.ExclusiveMonitorsPass(addr, 4)) {
			cpu.MemWrite32( addr, U32(cpu.GetGZR(rt)) );
			cpu.SetGZR(rs, U64(0));
			} else {
			cpu.SetGZR(rs, U64(1));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStlxr_w(CodeType code, uint64_t addr)
{
	return new OpStlxr_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStlxr_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "stlxr\t" << DisasmGZWR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStlxr_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr = cpu.GetGSR(rn);
		if (cpu.ExclusiveMonitorsPass(addr, 8)) {
			cpu.MemWrite64( addr, cpu.GetGZR(rt) );
			cpu.SetGZR(rs, U64(0));
			} else {
			cpu.SetGZR(rs, U64(1));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStlxr_x(CodeType code, uint64_t addr)
{
	return new OpStlxr_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStlxrb_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "stlxrb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStlxrb_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8  U8;
		typedef typename ARCH::U64 U64;

		U64 addr = cpu.GetGSR(rn);
		if (cpu.ExclusiveMonitorsPass(addr, 1)) {
			cpu.MemWrite8( addr, U8(cpu.GetGZR(rt)) );
			cpu.SetGZR(rs, U64(0));
			} else {
			cpu.SetGZR(rs, U64(1));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStlxrb_w(CodeType code, uint64_t addr)
{
	return new OpStlxrb_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStlxrh_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "stlxrh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStlxrh_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 addr = cpu.GetGSR(rn);
		if (cpu.ExclusiveMonitorsPass(addr, 2)) {
			cpu.MemWrite16( addr, U16(cpu.GetGZR(rt)) );
			cpu.SetGZR(rs, U64(0));
			} else {
			cpu.SetGZR(rs, U64(1));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStlxrh_w(CodeType code, uint64_t addr)
{
	return new OpStlxrh_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStp_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << (am ? "" : "n") << "p\t" << DisasmGZWR(rt) << ", " << DisasmGZWR(rt2) << ", " << DisasmMemoryRI(rn,imm,am);
}}
template <	typename	ARCH>
void OpStp_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* TODO: catch Non-temporal hint (am == 0) */
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U32 data0( cpu.GetGZR(rt) ), data1( cpu.GetGZR(rt2) );
		cpu.MemWrite32( addr + U64(0), data0 );
		cpu.MemWrite32( addr + U64(4), data1 );
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStp_w(CodeType code, uint64_t addr)
{
	return new OpStp_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStp_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << (am ? "" : "n") << "p\t" << DisasmGZXR(rt) << ", " << DisasmGZXR(rt2) << ", " << DisasmMemoryRI(rn,imm,am);
}}
template <	typename	ARCH>
void OpStp_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* TODO: catch Non-temporal hint (am == 0) */
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U64 data0( cpu.GetGZR(rt) ), data1( cpu.GetGZR(rt2) );
		cpu.MemWrite64( addr + U64(0), data0 );
		cpu.MemWrite64( addr + U64(8), data1 );
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStp_x(CodeType code, uint64_t addr)
{
	return new OpStp_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_wxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << (am ? "" : "u") << "r\t" << DisasmGZWR(rt) << ", " << DisasmMemoryRI(rn,imm,am);
}}
template <	typename	ARCH>
void OpStr_wxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U32 data( cpu.GetGZR(rt) );
		cpu.MemWrite32(addr, data);
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_wxi(CodeType code, uint64_t addr)
{
	return new OpStr_wxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_wuo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpStr_wuo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U32 data( cpu.GetGZR(rt) );
		cpu.MemWrite32(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_wuo(CodeType code, uint64_t addr)
{
	return new OpStr_wuo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_xxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << (am ? "" : "u") << "r\t" << DisasmGZXR(rt) << ", " << DisasmMemoryRI(rn,imm,am);
}}
template <	typename	ARCH>
void OpStr_xxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U64 data( cpu.GetGZR(rt) );
		cpu.MemWrite64(addr, data);
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_xxi(CodeType code, uint64_t addr)
{
	return new OpStr_xxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_xuo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpStr_xuo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U64 data( cpu.GetGZR(rt) );
		cpu.MemWrite64(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_xuo(CodeType code, uint64_t addr)
{
	return new OpStr_xuo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_wxwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_wxwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.GetGZR(rt) );
		cpu.MemWrite32(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_wxwu(CodeType code, uint64_t addr)
{
	return new OpStr_wxwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_wxxu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
}}
template <	typename	ARCH>
void OpStr_wxxu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.GetGZR(rt) );
		cpu.MemWrite32(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_wxxu(CodeType code, uint64_t addr)
{
	return new OpStr_wxxu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_wxws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_wxws<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.GetGZR(rt) );
		cpu.MemWrite32(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_wxws(CodeType code, uint64_t addr)
{
	return new OpStr_wxws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_wxxs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_wxxs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.GetGZR(rt) );
		cpu.MemWrite32(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_wxxs(CodeType code, uint64_t addr)
{
	return new OpStr_wxxs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_xxwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_xxwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( cpu.GetGZR(rt) );
		cpu.MemWrite64(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_xxwu(CodeType code, uint64_t addr)
{
	return new OpStr_xxwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_xxxu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
}}
template <	typename	ARCH>
void OpStr_xxxu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( cpu.GetGZR(rt) );
		cpu.MemWrite64(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_xxxu(CodeType code, uint64_t addr)
{
	return new OpStr_xxxu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_xxws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_xxws<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( cpu.GetGZR(rt) );
		cpu.MemWrite64(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_xxws(CodeType code, uint64_t addr)
{
	return new OpStr_xxws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_xxxs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_xxxs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( cpu.GetGZR(rt) );
		cpu.MemWrite64(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_xxxs(CodeType code, uint64_t addr)
{
	return new OpStr_xxxs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStrb_wxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << (am ? "" : "u") << "rb\t" << DisasmGZWR(rt) << ", " << DisasmMemoryRI(rn,imm,am);
}}
template <	typename	ARCH>
void OpStrb_wxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U8 data( cpu.GetGZR(rt) );
		cpu.MemWrite8(addr, data);
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStrb_wxi(CodeType code, uint64_t addr)
{
	return new OpStrb_wxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStrb_wuo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "strb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpStrb_wuo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U8 data( cpu.GetGZR(rt) );
		cpu.MemWrite8(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStrb_wuo(CodeType code, uint64_t addr)
{
	return new OpStrb_wuo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStrb_wxwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "strb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStrb_wxwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::U8 U8;

		U64 offset( U64(U32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U8 data( cpu.GetGZR(rt) );
		cpu.MemWrite8(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStrb_wxwu(CodeType code, uint64_t addr)
{
	return new OpStrb_wxwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStrb_wxxu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "strb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
}}
template <	typename	ARCH>
void OpStrb_wxxu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::U8 U8;

		U64 offset( U64(U64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U8 data( cpu.GetGZR(rt) );
		cpu.MemWrite8(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStrb_wxxu(CodeType code, uint64_t addr)
{
	return new OpStrb_wxxu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStrb_wxws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "strb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStrb_wxws<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::U8 U8;

		U64 offset( S64(S32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U8 data( cpu.GetGZR(rt) );
		cpu.MemWrite8(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStrb_wxws(CodeType code, uint64_t addr)
{
	return new OpStrb_wxws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStrb_wxxs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "strb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStrb_wxxs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::U8 U8;

		U64 offset( S64(S64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U8 data( cpu.GetGZR(rt) );
		cpu.MemWrite8(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStrb_wxxs(CodeType code, uint64_t addr)
{
	return new OpStrb_wxxs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStrh_wxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << (am ? "" : "u") << "rh\t" << DisasmGZWR(rt) << ", " << DisasmMemoryRI(rn,imm,am);
}}
template <	typename	ARCH>
void OpStrh_wxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U16 data( cpu.GetGZR(rt) );
		cpu.MemWrite16(addr, data);
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStrh_wxi(CodeType code, uint64_t addr)
{
	return new OpStrh_wxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStrh_wuo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "strh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpStrh_wuo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U16 data( cpu.GetGZR(rt) );
		cpu.MemWrite16(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStrh_wuo(CodeType code, uint64_t addr)
{
	return new OpStrh_wuo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStrh_wxwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "strh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStrh_wxwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U16 data( cpu.GetGZR(rt) );
		cpu.MemWrite16(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStrh_wxwu(CodeType code, uint64_t addr)
{
	return new OpStrh_wxwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStrh_wxxu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "strh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << DisasmINZ(",lsl ",shift) << "]";
}}
template <	typename	ARCH>
void OpStrh_wxxu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U16 data( cpu.GetGZR(rt) );
		cpu.MemWrite16(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStrh_wxxu(CodeType code, uint64_t addr)
{
	return new OpStrh_wxxu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStrh_wxws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "strh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZWR(rm) << ",sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStrh_wxws<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U16 data( cpu.GetGZR(rt) );
		cpu.MemWrite16(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStrh_wxws(CodeType code, uint64_t addr)
{
	return new OpStrh_wxws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStrh_wxxs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "strh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmGZXR(rm) << ",sxtx" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStrh_wxxs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 offset( S64(S64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U16 data( cpu.GetGZR(rt) );
		cpu.MemWrite16(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStrh_wxxs(CodeType code, uint64_t addr)
{
	return new OpStrh_wxxs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSttr_wbo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sttr\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpSttr_wbo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U32 data( cpu.GetGZR(rt) );
		cpu.MemWriteUnprivileged32(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSttr_wbo(CodeType code, uint64_t addr)
{
	return new OpSttr_wbo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSttr_xbo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sttr\t" << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpSttr_xbo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U64 data( cpu.GetGZR(rt) );
		cpu.MemWriteUnprivileged64(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSttr_xbo(CodeType code, uint64_t addr)
{
	return new OpSttr_xbo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSttrb_wbo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sttrb\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpSttrb_wbo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U8 data( cpu.GetGZR(rt) );
		cpu.MemWriteUnprivileged8(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSttrb_wbo(CodeType code, uint64_t addr)
{
	return new OpSttrb_wbo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSttrh_wbo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sttrh\t" << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "," << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpSttrh_wbo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U16 data( cpu.GetGZR(rt) );
		cpu.MemWriteUnprivileged16(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSttrh_wbo(CodeType code, uint64_t addr)
{
	return new OpSttrh_wbo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStxp_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "stxp\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", " << DisasmGZWR(rt2) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStxp_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		U32 data0( cpu.GetGZR(rt) ), data1( cpu.GetGZR(rt2) );
		if (cpu.ExclusiveMonitorsPass(addr, 8)) {
			cpu.MemWrite32( addr + U64(0), data0 );
			cpu.MemWrite32( addr + U64(4), data1 );
			cpu.SetGZR(rs, U64(0));
			} else {
			cpu.SetGZR(rs, U64(1));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStxp_w(CodeType code, uint64_t addr)
{
	return new OpStxp_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStxp_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "stxp\t" << DisasmGZWR(rs) << ", " << DisasmGZXR(rt) << ", " << DisasmGZXR(rt2) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStxp_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		U64 data0( cpu.GetGZR(rt) ), data1( cpu.GetGZR(rt2) );
		if (cpu.ExclusiveMonitorsPass(addr, 16)) {
			cpu.MemWrite64( addr + U64(0), data0 );
			cpu.MemWrite64( addr + U64(8), data1 );
			cpu.SetGZR(rs, U64(0));
			} else {
			cpu.SetGZR(rs, U64(1));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStxp_x(CodeType code, uint64_t addr)
{
	return new OpStxp_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStxr_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "stxr\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStxr_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr = cpu.GetGSR(rn);
		if (cpu.ExclusiveMonitorsPass(addr, 4)) {
			cpu.MemWrite32( addr, U32(cpu.GetGZR(rt)) );
			cpu.SetGZR(rs, U64(0));
			} else {
			cpu.SetGZR(rs, U64(1));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStxr_w(CodeType code, uint64_t addr)
{
	return new OpStxr_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStxr_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "stxr\t" << DisasmGZWR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStxr_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr = cpu.GetGSR(rn);
		if (cpu.ExclusiveMonitorsPass(addr, 8)) {
			cpu.MemWrite64( addr, cpu.GetGZR(rt) );
			cpu.SetGZR(rs, U64(0));
			} else {
			cpu.SetGZR(rs, U64(1));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStxr_x(CodeType code, uint64_t addr)
{
	return new OpStxr_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStxrb_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "stxrb\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStxrb_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8  U8;
		typedef typename ARCH::U64 U64;

		U64 addr = cpu.GetGSR(rn);
		if (cpu.ExclusiveMonitorsPass(addr, 1)) {
			cpu.MemWrite8( addr, U8(cpu.GetGZR(rt)) );
			cpu.SetGZR(rs, U64(0));
			} else {
			cpu.SetGZR(rs, U64(1));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStxrb_w(CodeType code, uint64_t addr)
{
	return new OpStxrb_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStxrh_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "stxrh\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStxrh_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 addr = cpu.GetGSR(rn);
		if (cpu.ExclusiveMonitorsPass(addr, 2)) {
			cpu.MemWrite16( addr, U16(cpu.GetGZR(rt)) );
			cpu.SetGZR(rs, U64(0));
			} else {
			cpu.SetGZR(rs, U64(1));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStxrh_w(CodeType code, uint64_t addr)
{
	return new OpStxrh_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_wsxtb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sub\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSub_wsxtb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( S32(S8(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_wsxtb(CodeType code, uint64_t addr)
{
	return new OpSub_wsxtb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_wsxth<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sub\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSub_wsxth<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( S32(S16(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_wsxth(CodeType code, uint64_t addr)
{
	return new OpSub_wsxth<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_wsxtw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sub\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSub_wsxtw<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( S32(S32(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_wsxtw(CodeType code, uint64_t addr)
{
	return new OpSub_wsxtw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_wsxtx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sub\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtx" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSub_wsxtx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( S32(S64(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_wsxtx(CodeType code, uint64_t addr)
{
	return new OpSub_wsxtx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_wuxtb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sub\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSub_wuxtb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( U32(U8(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_wuxtb(CodeType code, uint64_t addr)
{
	return new OpSub_wuxtb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_wuxth<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sub\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSub_wuxth<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( U32(U16(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_wuxth(CodeType code, uint64_t addr)
{
	return new OpSub_wuxth<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_wuxtw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sub\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSub_wuxtw<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( U32(U32(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_wuxtw(CodeType code, uint64_t addr)
{
	return new OpSub_wuxtw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_wuxtx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sub\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtx" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSub_wuxtx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( U32(U64(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_wuxtx(CodeType code, uint64_t addr)
{
	return new OpSub_wuxtx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_xsxtb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sub\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSub_xsxtb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( S64(S8(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_xsxtb(CodeType code, uint64_t addr)
{
	return new OpSub_xsxtb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_xsxth<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sub\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSub_xsxth<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( S64(S16(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_xsxth(CodeType code, uint64_t addr)
{
	return new OpSub_xsxth<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_xsxtw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sub\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSub_xsxtw<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( S64(S32(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_xsxtw(CodeType code, uint64_t addr)
{
	return new OpSub_xsxtw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_xsxtx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sub\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", sxtx" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSub_xsxtx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( S64(S64(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_xsxtx(CodeType code, uint64_t addr)
{
	return new OpSub_xsxtx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_xuxtb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sub\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSub_xuxtb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( U64(U8(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_xuxtb(CodeType code, uint64_t addr)
{
	return new OpSub_xuxtb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_xuxth<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sub\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSub_xuxth<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( U64(U16(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_xuxth(CodeType code, uint64_t addr)
{
	return new OpSub_xuxth<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_xuxtw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sub\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSub_xuxtw<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( U64(U32(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_xuxtw(CodeType code, uint64_t addr)
{
	return new OpSub_xuxtw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_xuxtx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sub\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", uxtx" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSub_xuxtx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( U64(U64(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_xuxtx(CodeType code, uint64_t addr)
{
	return new OpSub_xuxtx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_wi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sub\t" << DisasmGSWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmI(imm,16/*?*/);
}}
template <	typename	ARCH>
void OpSub_wi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1(cpu.GetGSR(rn)), op2(imm), res = op1 - op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_wi(CodeType code, uint64_t addr)
{
	return new OpSub_wi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_xi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sub\t" << DisasmGSXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmI(imm,16/*?*/);
}}
template <	typename	ARCH>
void OpSub_xi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1(cpu.GetGSR(rn)), op2(imm), res = op1 - op2;
		cpu.SetGSR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_xi(CodeType code, uint64_t addr)
{
	return new OpSub_xi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_wlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "neg\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
		else
		sink << "sub\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpSub_wlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_wlsl(CodeType code, uint64_t addr)
{
	return new OpSub_wlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_wlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "neg\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
		else
		sink << "sub\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpSub_wlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( U32(cpu.GetGZR(rm)) >> imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_wlsr(CodeType code, uint64_t addr)
{
	return new OpSub_wlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_wasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "neg\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
		else
		sink << "sub\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpSub_wasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 op1( cpu.GetGZR(rn) ), op2( S32(cpu.GetGZR(rm)) >> imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_wasr(CodeType code, uint64_t addr)
{
	return new OpSub_wasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_xlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "neg\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
		else
		sink << "sub\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpSub_xlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_xlsl(CodeType code, uint64_t addr)
{
	return new OpSub_xlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_xlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "neg\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
		else
		sink << "sub\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpSub_xlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) >> imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_xlsr(CodeType code, uint64_t addr)
{
	return new OpSub_xlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_xasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == 31)
		sink << "neg\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
		else
		sink << "sub\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpSub_xasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGZR(rn) ), op2( S64(cpu.GetGZR(rm)) >> imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_xasr(CodeType code, uint64_t addr)
{
	return new OpSub_xasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_wuxtb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
		else
		sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSubs_wuxtb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 op1( cpu.GetGSR(rn) ), op2( U32(U8(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), op1 == op2, op1 >= op2, (S32(res) < S32(0)) xor (S32(op1) < S32(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_wuxtb(CodeType code, uint64_t addr)
{
	return new OpSubs_wuxtb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_wuxth<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
		else
		sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSubs_wuxth<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 op1( cpu.GetGSR(rn) ), op2( U32(U16(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), op1 == op2, op1 >= op2, (S32(res) < S32(0)) xor (S32(op1) < S32(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_wuxth(CodeType code, uint64_t addr)
{
	return new OpSubs_wuxth<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_wuxtw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
		else
		sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSubs_wuxtw<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 op1( cpu.GetGSR(rn) ), op2( U32(U32(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), op1 == op2, op1 >= op2, (S32(res) < S32(0)) xor (S32(op1) < S32(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_wuxtw(CodeType code, uint64_t addr)
{
	return new OpSubs_wuxtw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_wuxtx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtx" << DisasmINZ(" ", imm);
		else
		sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", uxtx" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSubs_wuxtx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 op1( cpu.GetGSR(rn) ), op2( U32(U64(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), op1 == op2, op1 >= op2, (S32(res) < S32(0)) xor (S32(op1) < S32(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_wuxtx(CodeType code, uint64_t addr)
{
	return new OpSubs_wuxtx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_wsxtb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
		else
		sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSubs_wsxtb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( S32(S8(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), op1 == op2, op1 >= op2, (S32(res) < S32(0)) xor (S32(op1) < S32(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_wsxtb(CodeType code, uint64_t addr)
{
	return new OpSubs_wsxtb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_wsxth<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
		else
		sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSubs_wsxth<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( S32(S16(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), op1 == op2, op1 >= op2, (S32(res) < S32(0)) xor (S32(op1) < S32(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_wsxth(CodeType code, uint64_t addr)
{
	return new OpSubs_wsxth<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_wsxtw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
		else
		sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSubs_wsxtw<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( S32(S32(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), op1 == op2, op1 >= op2, (S32(res) < S32(0)) xor (S32(op1) < S32(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_wsxtw(CodeType code, uint64_t addr)
{
	return new OpSubs_wsxtw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_wsxtx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtx" << DisasmINZ(" ", imm);
		else
		sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmGZWR(rm) << ", sxtx" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSubs_wsxtx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGSR(rn) ), op2( S32(S64(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), op1 == op2, op1 >= op2, (S32(res) < S32(0)) xor (S32(op1) < S32(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_wsxtx(CodeType code, uint64_t addr)
{
	return new OpSubs_wsxtx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_xuxtb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
		else
		sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtb" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSubs_xuxtb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGSR(rn) ), op2( U64(U8(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), op1 == op2, op1 >= op2, (S64(res) < S64(0)) xor (S64(op1) < S64(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_xuxtb(CodeType code, uint64_t addr)
{
	return new OpSubs_xuxtb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_xuxth<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
		else
		sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxth" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSubs_xuxth<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGSR(rn) ), op2( U64(U16(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), op1 == op2, op1 >= op2, (S64(res) < S64(0)) xor (S64(op1) < S64(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_xuxth(CodeType code, uint64_t addr)
{
	return new OpSubs_xuxth<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_xuxtw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
		else
		sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSubs_xuxtw<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGSR(rn) ), op2( U64(U32(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), op1 == op2, op1 >= op2, (S64(res) < S64(0)) xor (S64(op1) < S64(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_xuxtw(CodeType code, uint64_t addr)
{
	return new OpSubs_xuxtw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_xuxtx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", uxtx" << DisasmINZ(" ", imm);
		else
		sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", uxtx" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSubs_xuxtx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGSR(rn) ), op2( U64(U64(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), op1 == op2, op1 >= op2, (S64(res) < S64(0)) xor (S64(op1) < S64(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_xuxtx(CodeType code, uint64_t addr)
{
	return new OpSubs_xuxtx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_xsxtb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
		else
		sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtb" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSubs_xsxtb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( S64(S8(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), op1 == op2, op1 >= op2, (S64(res) < S64(0)) xor (S64(op1) < S64(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_xsxtb(CodeType code, uint64_t addr)
{
	return new OpSubs_xsxtb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_xsxth<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
		else
		sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxth" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSubs_xsxth<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( S64(S16(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), op1 == op2, op1 >= op2, (S64(res) < S64(0)) xor (S64(op1) < S64(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_xsxth(CodeType code, uint64_t addr)
{
	return new OpSubs_xsxth<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_xsxtw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
		else
		sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSubs_xsxtw<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( S64(S32(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), op1 == op2, op1 >= op2, (S64(res) < S64(0)) xor (S64(op1) < S64(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_xsxtw(CodeType code, uint64_t addr)
{
	return new OpSubs_xsxtw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_xsxtx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", sxtx" << DisasmINZ(" ", imm);
		else
		sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", sxtx" << DisasmINZ(" ", imm);
}}
template <	typename	ARCH>
void OpSubs_xsxtx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGSR(rn) ), op2( S64(S64(cpu.GetGZR(rm))) << imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), op1 == op2, op1 >= op2, (S64(res) < S64(0)) xor (S64(op1) < S64(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_xsxtx(CodeType code, uint64_t addr)
{
	return new OpSubs_xsxtx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_wi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGSWR(rn) << ", " << DisasmI(imm,16/*?*/);
		else
		sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGSWR(rn) << ", " << DisasmI(imm,16/*?*/);
}}
template <	typename	ARCH>
void OpSubs_wi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;

		U32 op1(cpu.GetGSR(rn)), op2(imm), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), op1 == op2, op1 >= op2, (S32(res) < S32(0)) xor (S32(op1) < S32(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_wi(CodeType code, uint64_t addr)
{
	return new OpSubs_wi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_xi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGSXR(rn) << ", " << DisasmI(imm,16/*?*/);
		else
		sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGSXR(rn) << ", " << DisasmI(imm,16/*?*/);
}}
template <	typename	ARCH>
void OpSubs_xi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 op1(cpu.GetGSR(rn)), op2(imm), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), op1 == op2, op1 >= op2, (S64(res) < S64(0)) xor (S64(op1) < S64(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_xi(CodeType code, uint64_t addr)
{
	return new OpSubs_xi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_wlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
		else if (rn == 31)
		sink << "negs\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
		else
		sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpSubs_wlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), op1 == op2, op1 >= op2, (S32(res) < S32(0)) xor (S32(op1) < S32(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_wlsl(CodeType code, uint64_t addr)
{
	return new OpSubs_wlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_wlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
		else if (rn == 31)
		sink << "negs\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
		else
		sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpSubs_wlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 op1( cpu.GetGZR(rn) ), op2( U32(cpu.GetGZR(rm)) >> imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), op1 == op2, op1 >= op2, (S32(res) < S32(0)) xor (S32(op1) < S32(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_wlsr(CodeType code, uint64_t addr)
{
	return new OpSubs_wlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_wasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
		else if (rn == 31)
		sink << "negs\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
		else
		sink << "subs\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpSubs_wasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		U32 op1( cpu.GetGZR(rn) ), op2( S32(cpu.GetGZR(rm)) >> imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S32(res) < S32(0), op1 == op2, op1 >= op2, (S32(res) < S32(0)) xor (S32(op1) < S32(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_wasr(CodeType code, uint64_t addr)
{
	return new OpSubs_wasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_xlsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
		else if (rn == 31)
		sink << "negs\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
		else
		sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ",imm);
}}
template <	typename	ARCH>
void OpSubs_xlsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) << imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), op1 == op2, op1 >= op2, (S64(res) < S64(0)) xor (S64(op1) < S64(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_xlsl(CodeType code, uint64_t addr)
{
	return new OpSubs_xlsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_xlsr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
		else if (rn == 31)
		sink << "negs\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
		else
		sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", lsr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpSubs_xlsr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) >> imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), op1 == op2, op1 >= op2, (S64(res) < S64(0)) xor (S64(op1) < S64(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_xlsr(CodeType code, uint64_t addr)
{
	return new OpSubs_xlsr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubs_xasr<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rd == 31)
		sink << "cmp\t" << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
		else if (rn == 31)
		sink << "negs\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
		else
		sink << "subs\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm) << ", asr " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpSubs_xasr<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 op1( cpu.GetGZR(rn) ), op2( S64(cpu.GetGZR(rm)) >> imm ), res = op1 - op2;
		cpu.SetGZR(rd, res);
		cpu.SetNZCV( S64(res) < S64(0), op1 == op2, op1 >= op2, (S64(res) < S64(0)) xor (S64(op1) < S64(op2)) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubs_xasr(CodeType code, uint64_t addr)
{
	return new OpSubs_xasr<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSvc<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "svc\t" << DisasmI(imm,16);
}}
template <	typename	ARCH>
void OpSvc<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.CallSupervisor( imm );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSvc(CodeType code, uint64_t addr)
{
	return new OpSvc<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpTb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "tb" << (bitval?"nz\t":"z\t");
		if (not pos1)  sink << DisasmGZWR(rt);
		else           sink << DisasmGZXR(rt);
		sink << ", " << DisasmI(pos) << ", 0x" << std::hex << (this->GetAddr()+imm);
}}
template <	typename	ARCH>
void OpTb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 operand( cpu.GetGZR(rt) );
		if (cpu.Test( ((operand >> pos) & U64(1)) == U64(bitval) ))
		cpu.BranchTo( cpu.GetPC() + U64(S64(imm)), ARCH::B_JMP );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpTb(CodeType code, uint64_t addr)
{
	return new OpTb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUbfm_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (imms == 0b11111)
		sink << "lsr\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(immr);
		else if (immr == (imms+1))
		sink << "lsl\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(31-imms);
		else if (imms < immr)
		sink << "ubfiz\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(-immr&31) << ", " << DisasmI(imms+1);
		else if ((immr == 0) and (imms == 0b111))
		sink << "uxtb\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn);
		else if ((immr == 0) and (imms == 0b1111))
		sink << "uxth\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn);
		else
		sink << "ubfx\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(immr) << ", " << DisasmI(imms+1-immr);
}}
template <	typename	ARCH>
void OpUbfm_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		unsigned l = (imms ^ 31), r = (l + immr) & 31;

		U32 src( cpu.GetGZR(rn) ), res( (src << l) >> r );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUbfm_w(CodeType code, uint64_t addr)
{
	return new OpUbfm_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUbfm_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (imms == 0b111111)
		sink << "lsr\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(immr);
		else if (immr == (imms+1))
		sink << "lsl\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(63-imms);
		else if (imms < immr)
		sink << "ubfiz\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(-immr&63) << ", " << DisasmI(imms+1);
		// else if ((immr == 0) and (imms == 0b111))
		//   sink << "uxtb\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn);
		// else if ((immr == 0) and (imms == 0b1111))
		//   sink << "uxth\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn);
		else
		sink << "ubfx\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(immr) << ", " << DisasmI(imms+1-immr);
}}
template <	typename	ARCH>
void OpUbfm_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		unsigned l = (imms ^ 63), r = (l + immr) & 63;

		U64 src( cpu.GetGZR(rn) ), res( (src << l) >> r );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUbfm_x(CodeType code, uint64_t addr)
{
	return new OpUbfm_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUdiv_www<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "udiv\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
}}
template <	typename	ARCH>
void OpUdiv_www<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 const zero(0);
		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = cpu.Test(op2 == zero) ? zero : (op1 / op2);
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUdiv_www(CodeType code, uint64_t addr)
{
	return new OpUdiv_www<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUdiv_xxx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "udiv\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpUdiv_xxx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 const zero(0);
		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res = cpu.Test(op2 == zero) ? zero : (op1 / op2);
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUdiv_xxx(CodeType code, uint64_t addr)
{
	return new OpUdiv_xxx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmaddl_xw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (ra == 31)
		sink << "umull\t" << DisasmGZXR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
		else
		sink << "umaddl\t" << DisasmGZXR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmGZXR(ra);
}}
template <	typename	ARCH>
void OpUmaddl_xw<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::U32 U32;

		U64 op1( U32(cpu.GetGZR(rn)) ), op2( U32(cpu.GetGZR(rm)) ), res( cpu.GetGZR(ra) + op1*op2 );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmaddl_xw(CodeType code, uint64_t addr)
{
	return new OpUmaddl_xw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmsubl_xw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (ra == 31)
		sink << "umnegl\t" << DisasmGZXR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
		else
		sink << "umsubl\t" << DisasmGZXR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm) << ", " << DisasmGZXR(ra);
}}
template <	typename	ARCH>
void OpUmsubl_xw<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::U32 U32;

		U64 op1( U32(cpu.GetGZR(rn)) ), op2( U32(cpu.GetGZR(rm)) ), res( cpu.GetGZR(ra) - op1*op2 );
		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmsubl_xw(CodeType code, uint64_t addr)
{
	return new OpUmsubl_xw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmulh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umulh\t" << DisasmGZXR(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpUmulh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res( UnsignedMultiplyHigh64( cpu, op1, op2 ) );

		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmulh(CodeType code, uint64_t addr)
{
	return new OpUmulh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCrc32b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "crc32b\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
}}
template <	typename	ARCH>
void OpCrc32b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( U8(cpu.GetGZR(rm)) ), res( PolyMod2<U32,8>(op1 ^ op2, 0xedb88320) );

		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCrc32b(CodeType code, uint64_t addr)
{
	return new OpCrc32b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCrc32h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "crc32h\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
}}
template <	typename	ARCH>
void OpCrc32h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( U16(cpu.GetGZR(rm)) ), res( PolyMod2<U32,16>(op1 ^ op2, 0xedb88320) );

		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCrc32h(CodeType code, uint64_t addr)
{
	return new OpCrc32h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCrc32w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "crc32w\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
}}
template <	typename	ARCH>
void OpCrc32w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res( PolyMod2<U32,32>(op1 ^ op2, 0xedb88320) );

		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCrc32w(CodeType code, uint64_t addr)
{
	return new OpCrc32w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCrc32x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "crc32x\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpCrc32x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 op1( U32(cpu.GetGZR(rn)) ), op2( cpu.GetGZR(rm) ), res( PolyMod2<U32,64>(op1 ^ op2, 0xedb88320) );

		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCrc32x(CodeType code, uint64_t addr)
{
	return new OpCrc32x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCrc32cb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "crc32cb\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
}}
template <	typename	ARCH>
void OpCrc32cb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( U8(cpu.GetGZR(rm)) ), res( PolyMod2<U32,8>(op1 ^ op2, 0x82f63b78) );

		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCrc32cb(CodeType code, uint64_t addr)
{
	return new OpCrc32cb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCrc32ch<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "crc32ch\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
}}
template <	typename	ARCH>
void OpCrc32ch<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( U16(cpu.GetGZR(rm)) ), res( PolyMod2<U32,16>(op1 ^ op2, 0x82f63b78) );

		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCrc32ch(CodeType code, uint64_t addr)
{
	return new OpCrc32ch<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCrc32cw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "crc32cw\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZWR(rm);
}}
template <	typename	ARCH>
void OpCrc32cw<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 op1( cpu.GetGZR(rn) ), op2( cpu.GetGZR(rm) ), res( PolyMod2<U32,32>(op1 ^ op2, 0x82f63b78) );

		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCrc32cw(CodeType code, uint64_t addr)
{
	return new OpCrc32cw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCrc32cx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "crc32cx\t" << DisasmGZWR(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmGZXR(rm);
}}
template <	typename	ARCH>
void OpCrc32cx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 op1( U32(cpu.GetGZR(rn)) ), op2( cpu.GetGZR(rm) ), res( PolyMod2<U32,64>(op1 ^ op2, 0x82f63b78) );

		cpu.SetGZR(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCrc32cx(CodeType code, uint64_t addr)
{
	return new OpCrc32cx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCas_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cas" << (&"a"[!a]) << (&"l"[!l]) << "\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpCas_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		U32 comparevalue( cpu.GetGZR(rs) );

		/*BEG ATOMIC*/
		U32 data( cpu.MemRead32(addr) );

		if (cpu.Test(data == comparevalue))
		cpu.MemWrite32(addr, U32(cpu.GetGZR(rt)));
		cpu.SetGZR(rs, data);
		/*END ATOMIC*/
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCas_w(CodeType code, uint64_t addr)
{
	return new OpCas_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCas_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cas" << (&"a"[!a]) << (&"l"[!l]) << "\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpCas_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		U64 comparevalue( cpu.GetGZR(rs) );

		/*BEG ATOMIC*/
		U64 data( cpu.MemRead64(addr) );

		if (cpu.Test(data == comparevalue))
		cpu.MemWrite64(addr, cpu.GetGZR(rt));
		cpu.SetGZR(rs, data);
		/*END ATOMIC*/
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCas_x(CodeType code, uint64_t addr)
{
	return new OpCas_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCasb_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cas" << (&"a"[!a]) << (&"l"[!l]) << "b\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpCasb_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		U8 comparevalue( cpu.GetGZR(rs) );

		/*BEG ATOMIC*/
		U8 data( cpu.MemRead8(addr) );

		if (cpu.Test(data == comparevalue))
		cpu.MemWrite8(addr, U8(cpu.GetGZR(rt)));
		cpu.SetGZR(rs, typename ARCH::U32(data));
		/*END ATOMIC*/
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCasb_w(CodeType code, uint64_t addr)
{
	return new OpCasb_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCash_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cas" << (&"a"[!a]) << (&"l"[!l]) << "h\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpCash_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		U16 comparevalue( cpu.GetGZR(rs) );

		/*BEG ATOMIC*/
		U16 data( cpu.MemRead16(addr) );

		if (cpu.Test(data == comparevalue))
		cpu.MemWrite16(addr, U16(cpu.GetGZR(rt)));
		cpu.SetGZR(rs, typename ARCH::U32(data));
		/*END ATOMIC*/
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCash_w(CodeType code, uint64_t addr)
{
	return new OpCash_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCasp_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "casp" << (&"a"[!a]) << (&"l"[!l]) << "\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rs|1) << ", " << DisasmGZWR(rt) << ", " << DisasmGZWR(rt|1) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpCasp_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		U32 comparevalue0( cpu.GetGZR(rs+0) ),
		comparevalue1( cpu.GetGZR(rs+1) );

		/*BEG ATOMIC*/
		U32 data0( cpu.MemRead32(addr+U64(0)) ),
		data1( cpu.MemRead32(addr+U64(4)) );

		if (cpu.Test(data0 == comparevalue0 and data1 == comparevalue1))
		{
			cpu.MemWrite32(addr+U64(0), U32(cpu.GetGZR(rt+0)));
			cpu.MemWrite32(addr+U64(4), U32(cpu.GetGZR(rt+1)));
		}
		cpu.SetGZR(rs+0, data0);
		cpu.SetGZR(rs+1, data1);
		/*END ATOMIC*/
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCasp_w(CodeType code, uint64_t addr)
{
	return new OpCasp_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCasp_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "casp" << (&"a"[!a]) << (&"l"[!l]) << "\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rs|1) << ", " << DisasmGZXR(rt) << ", " << DisasmGZXR(rt|1) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpCasp_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		U64 comparevalue0( cpu.GetGZR(rs+0) ),
		comparevalue1( cpu.GetGZR(rs+1) );

		/*BEG ATOMIC*/
		U64 data0( cpu.MemRead64(addr+U64(0)) ),
		data1( cpu.MemRead64(addr+U64(8)) );

		if (cpu.Test(data0 == comparevalue0 and data1 == comparevalue1))
		{
			cpu.MemWrite64(addr+U64(0), cpu.GetGZR(rt+0));
			cpu.MemWrite64(addr+U64(8), cpu.GetGZR(rt+1));
		}
		cpu.SetGZR(rs+0, data0);
		cpu.SetGZR(rs+1, data1);
		/*END ATOMIC*/
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCasp_x(CodeType code, uint64_t addr)
{
	return new OpCasp_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSwp_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "swp" << (&"a"[!a]) << (&"l"[!l]) << "\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpSwp_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U32 data( cpu.MemRead32(addr) );
		cpu.MemWrite32(addr, U32(cpu.GetGZR(rs)));
		cpu.SetGZR(rt, data);
		/*END ATOMIC*/
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSwp_w(CodeType code, uint64_t addr)
{
	return new OpSwp_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSwp_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "swp" << (&"a"[!a]) << (&"l"[!l]) << "\t" << DisasmGZXR(rs) << ", " << DisasmGZXR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpSwp_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U64 data( cpu.MemRead64(addr) );
		cpu.MemWrite64(addr, cpu.GetGZR(rs));
		cpu.SetGZR(rt, data);
		/*END ATOMIC*/
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSwp_x(CodeType code, uint64_t addr)
{
	return new OpSwp_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSwpb_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "swp" << (&"a"[!a]) << (&"l"[!l]) << "b\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpSwpb_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U32 data( cpu.MemRead8(addr) );
		cpu.MemWrite8(addr, U8(cpu.GetGZR(rs)));
		cpu.SetGZR(rt, data);
		/*END ATOMIC*/
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSwpb_w(CodeType code, uint64_t addr)
{
	return new OpSwpb_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSwph_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "swp" << (&"a"[!a]) << (&"l"[!l]) << "h\t" << DisasmGZWR(rs) << ", " << DisasmGZWR(rt) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpSwph_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U32 data( cpu.MemRead16(addr) );
		cpu.MemWrite16(addr, U16(cpu.GetGZR(rs)));
		cpu.SetGZR(rt, data);
		/*END ATOMIC*/
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSwph_w(CodeType code, uint64_t addr)
{
	return new OpSwph_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstadd_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "add" << (&"a"[!a]) << (&"l"[!r]) << "\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstadd_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U32 oldval( cpu.MemRead32(addr) ), newval( oldval + U32(cpu.GetGZR(rs)) );
		cpu.MemWrite32(addr, newval);
		cpu.SetGZR(rt, oldval);
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstadd_w(CodeType code, uint64_t addr)
{
	return new OpLdstadd_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstadd_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "add" << (&"a"[!a]) << (&"l"[!r]) << "\t" << DisasmGZXR(rs);
		if (ld)
		sink << ", " << DisasmGZXR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstadd_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U64 oldval( cpu.MemRead64(addr) ), newval( oldval + U64(cpu.GetGZR(rs)) );
		cpu.MemWrite64(addr, newval);
		cpu.SetGZR(rt, oldval);
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstadd_x(CodeType code, uint64_t addr)
{
	return new OpLdstadd_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstaddb_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "add" << (&"a"[!a]) << (&"l"[!r]) << "b\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstaddb_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U8 oldval( cpu.MemRead8(addr) ), newval( oldval + U8(cpu.GetGZR(rs)) );
		cpu.MemWrite8(addr, newval);
		cpu.SetGZR(rt, typename ARCH::U32(oldval));
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstaddb_w(CodeType code, uint64_t addr)
{
	return new OpLdstaddb_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstaddh_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "add" << (&"a"[!a]) << (&"l"[!r]) << "h\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstaddh_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U16 oldval( cpu.MemRead16(addr) ), newval( oldval + U16(cpu.GetGZR(rs)) );
		cpu.MemWrite16(addr, newval);
		cpu.SetGZR(rt, typename ARCH::U32(oldval));
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstaddh_w(CodeType code, uint64_t addr)
{
	return new OpLdstaddh_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstclr_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "clr" << (&"a"[!a]) << (&"l"[!r]) << "\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstclr_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U32 oldval( cpu.MemRead32(addr) ), newval( oldval & ~U32(cpu.GetGZR(rs)) );
		cpu.MemWrite32(addr, newval);
		cpu.SetGZR(rt, oldval);
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstclr_w(CodeType code, uint64_t addr)
{
	return new OpLdstclr_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstclr_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "clr" << (&"a"[!a]) << (&"l"[!r]) << "\t" << DisasmGZXR(rs);
		if (ld)
		sink << ", " << DisasmGZXR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstclr_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U64 oldval( cpu.MemRead64(addr) ), newval( oldval & ~U64(cpu.GetGZR(rs)) );
		cpu.MemWrite64(addr, newval);
		cpu.SetGZR(rt, oldval);
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstclr_x(CodeType code, uint64_t addr)
{
	return new OpLdstclr_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstclrb_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "clr" << (&"a"[!a]) << (&"l"[!r]) << "b\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstclrb_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U8 oldval( cpu.MemRead8(addr) ), newval( oldval & ~U8(cpu.GetGZR(rs)) );
		cpu.MemWrite8(addr, newval);
		cpu.SetGZR(rt, typename ARCH::U32(oldval));
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstclrb_w(CodeType code, uint64_t addr)
{
	return new OpLdstclrb_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstclrh_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "clr" << (&"a"[!a]) << (&"l"[!r]) << "\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstclrh_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U16 oldval( cpu.MemRead16(addr) ), newval( oldval & ~U16(cpu.GetGZR(rs)) );
		cpu.MemWrite16(addr, newval);
		cpu.SetGZR(rt, typename ARCH::U32(oldval));
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstclrh_w(CodeType code, uint64_t addr)
{
	return new OpLdstclrh_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdsteor_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "eor" << (&"a"[!a]) << (&"l"[!r]) << "h\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdsteor_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U32 oldval( cpu.MemRead32(addr) ), newval( oldval ^ U32(cpu.GetGZR(rs)) );
		cpu.MemWrite32(addr, newval);
		cpu.SetGZR(rt, oldval);
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdsteor_w(CodeType code, uint64_t addr)
{
	return new OpLdsteor_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdsteor_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "eor" << (&"a"[!a]) << (&"l"[!r]) << "\t" << DisasmGZXR(rs);
		if (ld)
		sink << ", " << DisasmGZXR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdsteor_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U64 oldval( cpu.MemRead64(addr) ), newval( oldval ^ U64(cpu.GetGZR(rs)) );
		cpu.MemWrite64(addr, newval);
		cpu.SetGZR(rt, oldval);
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdsteor_x(CodeType code, uint64_t addr)
{
	return new OpLdsteor_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdsteorb_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "eor" << (&"a"[!a]) << (&"l"[!r]) << "b\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdsteorb_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U8 oldval( cpu.MemRead8(addr) ), newval( oldval ^ U8(cpu.GetGZR(rs)) );
		cpu.MemWrite8(addr, newval);
		cpu.SetGZR(rt, typename ARCH::U32(oldval));
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdsteorb_w(CodeType code, uint64_t addr)
{
	return new OpLdsteorb_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdsteorh_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "eor" << (&"a"[!a]) << (&"l"[!r]) << "h\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdsteorh_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U16 oldval( cpu.MemRead16(addr) ), newval( oldval ^ U16(cpu.GetGZR(rs)) );
		cpu.MemWrite16(addr, newval);
		cpu.SetGZR(rt, typename ARCH::U32(oldval));
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdsteorh_w(CodeType code, uint64_t addr)
{
	return new OpLdsteorh_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstset_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "set" << (&"a"[!a]) << (&"l"[!r]) << "\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstset_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U32 oldval( cpu.MemRead32(addr) ), newval( oldval | U32(cpu.GetGZR(rs)) );
		cpu.MemWrite32(addr, newval);
		cpu.SetGZR(rt, oldval);
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstset_w(CodeType code, uint64_t addr)
{
	return new OpLdstset_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstset_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "set" << (&"a"[!a]) << (&"l"[!r]) << "\t" << DisasmGZXR(rs);
		if (ld)
		sink << ", " << DisasmGZXR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstset_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U64 oldval( cpu.MemRead64(addr) ), newval( oldval | U64(cpu.GetGZR(rs)) );
		cpu.MemWrite64(addr, newval);
		cpu.SetGZR(rt, oldval);
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstset_x(CodeType code, uint64_t addr)
{
	return new OpLdstset_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstsetb_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "set" << (&"a"[!a]) << (&"l"[!r]) << "b\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstsetb_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U8 oldval( cpu.MemRead8(addr) ), newval( oldval | U8(cpu.GetGZR(rs)) );
		cpu.MemWrite8(addr, newval);
		cpu.SetGZR(rt, typename ARCH::U32(oldval));
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstsetb_w(CodeType code, uint64_t addr)
{
	return new OpLdstsetb_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstseth_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "set" << (&"a"[!a]) << (&"l"[!r]) << "h\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstseth_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U16 oldval( cpu.MemRead16(addr) ), newval( oldval | U16(cpu.GetGZR(rs)) );
		cpu.MemWrite16(addr, newval);
		cpu.SetGZR(rt, typename ARCH::U32(oldval));
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstseth_w(CodeType code, uint64_t addr)
{
	return new OpLdstseth_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstsmax_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "smax" << (&"a"[!a]) << (&"l"[!r]) << "\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstsmax_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U32 oldval( cpu.MemRead32(addr) ), newval( U32(Maximum(S32(oldval), S32(cpu.GetGZR(rs)))) );
		cpu.MemWrite32(addr, newval);
		cpu.SetGZR(rt, oldval);
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstsmax_w(CodeType code, uint64_t addr)
{
	return new OpLdstsmax_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstsmax_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "smax" << (&"a"[!a]) << (&"l"[!r]) << "\t" << DisasmGZXR(rs);
		if (ld)
		sink << ", " << DisasmGZXR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstsmax_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U64 oldval( cpu.MemRead64(addr) ), newval( U64(Maximum(S64(oldval), S64(cpu.GetGZR(rs)))) );
		cpu.MemWrite64(addr, newval);
		cpu.SetGZR(rt, oldval);
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstsmax_x(CodeType code, uint64_t addr)
{
	return new OpLdstsmax_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstsmaxb_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "smax" << (&"a"[!a]) << (&"l"[!r]) << "b\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstsmaxb_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U8 oldval( cpu.MemRead8(addr) ), newval( U8(Maximum(S8(oldval), S8(cpu.GetGZR(rs)))) );
		cpu.MemWrite8(addr, newval);
		cpu.SetGZR(rt, typename ARCH::U32(oldval));
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstsmaxb_w(CodeType code, uint64_t addr)
{
	return new OpLdstsmaxb_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstsmaxh_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "smax" << (&"a"[!a]) << (&"l"[!r]) << "h\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstsmaxh_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U16 oldval( cpu.MemRead16(addr) ), newval( U16(Maximum(S16(oldval), S16(cpu.GetGZR(rs)))) );
		cpu.MemWrite16(addr, newval);
		cpu.SetGZR(rt, typename ARCH::U32(oldval));
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstsmaxh_w(CodeType code, uint64_t addr)
{
	return new OpLdstsmaxh_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstsmin_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "smin" << (&"a"[!a]) << (&"l"[!r]) << "\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstsmin_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U32 oldval( cpu.MemRead32(addr) ), newval( U32(Minimum(S32(oldval), S32(cpu.GetGZR(rs)))) );
		cpu.MemWrite32(addr, newval);
		cpu.SetGZR(rt, oldval);
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstsmin_w(CodeType code, uint64_t addr)
{
	return new OpLdstsmin_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstsmin_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "smin" << (&"a"[!a]) << (&"l"[!r]) << "\t" << DisasmGZXR(rs);
		if (ld)
		sink << ", " << DisasmGZXR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstsmin_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U64 oldval( cpu.MemRead64(addr) ), newval( U64(Minimum(S64(oldval), S64(cpu.GetGZR(rs)))) );
		cpu.MemWrite64(addr, newval);
		cpu.SetGZR(rt, oldval);
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstsmin_x(CodeType code, uint64_t addr)
{
	return new OpLdstsmin_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstsminb_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "smin" << (&"a"[!a]) << (&"l"[!r]) << "b\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstsminb_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U8 oldval( cpu.MemRead8(addr) ), newval( U8(Minimum(S8(oldval), S8(cpu.GetGZR(rs)))) );
		cpu.MemWrite8(addr, newval);
		cpu.SetGZR(rt, typename ARCH::U32(oldval));
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstsminb_w(CodeType code, uint64_t addr)
{
	return new OpLdstsminb_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstsminh_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "smin" << (&"a"[!a]) << (&"l"[!r]) << "h\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstsminh_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U16 oldval( cpu.MemRead16(addr) ), newval( U16(Minimum(S16(oldval), S16(cpu.GetGZR(rs)))) );
		cpu.MemWrite16(addr, newval);
		cpu.SetGZR(rt, typename ARCH::U32(oldval));
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstsminh_w(CodeType code, uint64_t addr)
{
	return new OpLdstsminh_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstumax_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "umax" << (&"a"[!a]) << (&"l"[!r]) << "\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstumax_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U32 oldval( cpu.MemRead32(addr) ), newval( Maximum(oldval, U32(cpu.GetGZR(rs))) );
		cpu.MemWrite32(addr, newval);
		cpu.SetGZR(rt, oldval);
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstumax_w(CodeType code, uint64_t addr)
{
	return new OpLdstumax_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstumax_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "umax" << (&"a"[!a]) << (&"l"[!r]) << "\t" << DisasmGZXR(rs);
		if (ld)
		sink << ", " << DisasmGZXR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstumax_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U64 oldval( cpu.MemRead64(addr) ), newval( Maximum(oldval, U64(cpu.GetGZR(rs))) );
		cpu.MemWrite64(addr, newval);
		cpu.SetGZR(rt, oldval);
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstumax_x(CodeType code, uint64_t addr)
{
	return new OpLdstumax_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstumaxb_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "umax" << (&"a"[!a]) << (&"l"[!r]) << "b\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstumaxb_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U8 oldval( cpu.MemRead8(addr) ), newval( Maximum(oldval, U8(cpu.GetGZR(rs))) );
		cpu.MemWrite8(addr, newval);
		cpu.SetGZR(rt, typename ARCH::U32(oldval));
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstumaxb_w(CodeType code, uint64_t addr)
{
	return new OpLdstumaxb_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstumaxh_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "umax" << (&"a"[!a]) << (&"l"[!r]) << "h\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstumaxh_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U16 oldval( cpu.MemRead16(addr) ), newval( Maximum(oldval, U16(cpu.GetGZR(rs))) );
		cpu.MemWrite16(addr, newval);
		cpu.SetGZR(rt, typename ARCH::U32(oldval));
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstumaxh_w(CodeType code, uint64_t addr)
{
	return new OpLdstumaxh_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstumin_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "umin" << (&"a"[!a]) << (&"l"[!r]) << "\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstumin_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U32 oldval( cpu.MemRead32(addr) ), newval( Minimum(oldval, U32(cpu.GetGZR(rs))) );
		cpu.MemWrite32(addr, newval);
		cpu.SetGZR(rt, oldval);
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstumin_w(CodeType code, uint64_t addr)
{
	return new OpLdstumin_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstumin_x<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "umin" << (&"a"[!a]) << (&"l"[!r]) << "\t" << DisasmGZXR(rs);
		if (ld)
		sink << ", " << DisasmGZXR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstumin_x<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U64 oldval( cpu.MemRead64(addr) ), newval( Minimum(oldval, U64(cpu.GetGZR(rs))) );
		cpu.MemWrite64(addr, newval);
		cpu.SetGZR(rt, oldval);
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstumin_x(CodeType code, uint64_t addr)
{
	return new OpLdstumin_x<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstuminb_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "umin" << (&"a"[!a]) << (&"l"[!r]) << "b\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstuminb_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U8 oldval( cpu.MemRead8(addr) ), newval( Minimum(oldval, U8(cpu.GetGZR(rs))) );
		cpu.MemWrite8(addr, newval);
		cpu.SetGZR(rt, typename ARCH::U32(oldval));
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstuminb_w(CodeType code, uint64_t addr)
{
	return new OpLdstuminb_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdstuminh_w<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		bool ld = rt != 31 or a;
		sink << (ld ? "ld" : "st") << "umin" << (&"a"[!a]) << (&"l"[!r]) << "h\t" << DisasmGZWR(rs);
		if (ld)
		sink << ", " << DisasmGZWR(rt);
		sink << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdstuminh_w<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		/*BEG ATOMIC*/
		U16 oldval( cpu.MemRead16(addr) ), newval( Minimum(oldval, U16(cpu.GetGZR(rs))) );
		cpu.MemWrite16(addr, newval);
		cpu.SetGZR(rt, typename ARCH::U32(oldval));
		/*END ATOMIC*/;
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdstuminh_w(CodeType code, uint64_t addr)
{
	return new OpLdstuminh_w<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBti<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bti";
		if (tt) {
			sink << '\t';
			if (tt & 0b10) sink << 'j';
			if (tt & 0b01) sink << 'c';
		}
}}
template <	typename	ARCH>
void OpBti<	ARCH>::execute( ARCH & cpu) const
{
	{ /* NOP */ }}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBti(CodeType code, uint64_t addr)
{
	return new OpBti<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAbs_dd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "abs\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}
template <	typename	ARCH>
void OpAbs_dd<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS64(rd, Abs(cpu, cpu.GetVS64(rn, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAbs_dd(CodeType code, uint64_t addr)
{
	return new OpAbs_dd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAbs_vbb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "abs\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpAbs_vbb<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 8<<q;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVS8(rd, e, Abs(cpu, cpu.GetVS8(rn, e)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAbs_vbb(CodeType code, uint64_t addr)
{
	return new OpAbs_vbb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAbs_vhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "abs\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}
template <	typename	ARCH>
void OpAbs_vhh<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 4<<q;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVS16(rd, e, Abs(cpu, cpu.GetVS16(rn, e)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAbs_vhh(CodeType code, uint64_t addr)
{
	return new OpAbs_vhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAbs_vss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "abs\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}
template <	typename	ARCH>
void OpAbs_vss<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 2<<q;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVS32(rd, e, Abs(cpu, cpu.GetVS32(rn, e)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAbs_vss(CodeType code, uint64_t addr)
{
	return new OpAbs_vss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAbs_v2d2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "abs\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3);
}}
template <	typename	ARCH>
void OpAbs_v2d2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 2;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVS64(rd, e, Abs(cpu, cpu.GetVS64(rn, e)));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAbs_v2d2d(CodeType code, uint64_t addr)
{
	return new OpAbs_v2d2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}
template <	typename	ARCH>
void OpAdd_d<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU64(rd, cpu.GetVU64(rn, 0) + cpu.GetVU64(rm, 0));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_d(CodeType code, uint64_t addr)
{
	return new OpAdd_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_vb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpAdd_vb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		cpu.SetVU8(rd, idx, cpu.GetVU8(rn, idx) + cpu.GetVU8(rm, idx));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_vb(CodeType code, uint64_t addr)
{
	return new OpAdd_vb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpAdd_vh<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		cpu.SetVU16(rd, idx, cpu.GetVU16(rn, idx) + cpu.GetVU16(rm, idx));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_vh(CodeType code, uint64_t addr)
{
	return new OpAdd_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpAdd_vs<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		cpu.SetVU32(rd, idx, cpu.GetVU32(rn, idx) + cpu.GetVU32(rm, idx));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_vs(CodeType code, uint64_t addr)
{
	return new OpAdd_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAdd_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "add\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpAdd_v2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0; idx < 2; ++idx)
		cpu.SetVU64(rd, idx, cpu.GetVU64(rn, idx) + cpu.GetVU64(rm, idx));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAdd_v2d(CodeType code, uint64_t addr)
{
	return new OpAdd_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAddhn2_v16bv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "addhn2\t" << DisasmTV(rd, 16, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpAddhn2_v16bv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		for (unsigned idx = 0, end = 8; idx < end; ++idx)
		{
			cpu.SetVU8(rd, idx + end, DST((cpu.GetVU16(rn, idx) + cpu.GetVU16(rm, idx)) >> 8));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAddhn2_v16bv8hv8h(CodeType code, uint64_t addr)
{
	return new OpAddhn2_v16bv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAddhn2_v4sv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "addhn2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpAddhn2_v4sv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		for (unsigned idx = 0, end = 2; idx < end; ++idx)
		{
			cpu.SetVU32(rd, idx + end, DST((cpu.GetVU64(rn, idx) + cpu.GetVU64(rm, idx)) >> 32));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAddhn2_v4sv2dv2d(CodeType code, uint64_t addr)
{
	return new OpAddhn2_v4sv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAddhn2_v8hv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "addhn2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpAddhn2_v8hv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		for (unsigned idx = 0, end = 4; idx < end; ++idx)
		{
			cpu.SetVU16(rd, idx + end, DST((cpu.GetVU32(rn, idx) + cpu.GetVU32(rm, idx)) >> 16));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAddhn2_v8hv4sv4s(CodeType code, uint64_t addr)
{
	return new OpAddhn2_v8hv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAddhn_v2sv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "addhn\t" << DisasmTV(rd, 2, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpAddhn_v2sv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		for (unsigned idx = 0, end = 2; idx < end; ++idx)
		{
			cpu.SetVU32(rd, idx, DST((cpu.GetVU64(rn, idx) + cpu.GetVU64(rm, idx)) >> 32));
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAddhn_v2sv2dv2d(CodeType code, uint64_t addr)
{
	return new OpAddhn_v2sv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAddhn_v4hv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "addhn\t" << DisasmTV(rd, 4, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpAddhn_v4hv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		for (unsigned idx = 0, end = 4; idx < end; ++idx)
		{
			cpu.SetVU16(rd, idx, DST((cpu.GetVU32(rn, idx) + cpu.GetVU32(rm, idx)) >> 16));
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAddhn_v4hv4sv4s(CodeType code, uint64_t addr)
{
	return new OpAddhn_v4hv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAddhn_v8bv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "addhn\t" << DisasmTV(rd, 8, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpAddhn_v8bv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		for (unsigned idx = 0, end = 8; idx < end; ++idx)
		{
			cpu.SetVU8(rd, idx, DST((cpu.GetVU16(rn, idx) + cpu.GetVU16(rm, idx)) >> 8));
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAddhn_v8bv8hv8h(CodeType code, uint64_t addr)
{
	return new OpAddhn_v8bv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAddp_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "addp\t" << DisasmD(rd) << ", " << DisasmTV(rn, 2, 3);
}}
template <	typename	ARCH>
void OpAddp_d<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU64(rd, cpu.GetVU64(rn, 0) + cpu.GetVU64(rn, 1));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAddp_d(CodeType code, uint64_t addr)
{
	return new OpAddp_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAddp_vb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "addp\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpAddp_vb<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 8<<q;
		typename ARCH::U8 res[elements];

		for (unsigned e=0; e < elements; e += 2)
		{
			res[       (0+e)/2] = cpu.GetVU8(rn, e) + cpu.GetVU8(rn, e+1);
			res[(elements+e)/2] = cpu.GetVU8(rm, e) + cpu.GetVU8(rm, e+1);
		}

		for (unsigned e=0; e < elements; e += 1)
		cpu.SetVU8(rd, e, res[e]);

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAddp_vb(CodeType code, uint64_t addr)
{
	return new OpAddp_vb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAddp_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "addp\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpAddp_vh<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 4<<q;
		typename ARCH::U16 res[elements];

		for (unsigned e=0; e < elements; e += 2)
		{
			res[       (0+e)/2] = cpu.GetVU16(rn, e) + cpu.GetVU16(rn, e+1);
			res[(elements+e)/2] = cpu.GetVU16(rm, e) + cpu.GetVU16(rm, e+1);
		}

		for (unsigned e=0; e < elements; e += 1)
		cpu.SetVU16(rd, e, res[e]);

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAddp_vh(CodeType code, uint64_t addr)
{
	return new OpAddp_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAddp_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "addp\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpAddp_vs<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 2<<q;
		typename ARCH::U32 res[elements];

		for (unsigned e=0; e < elements; e += 2)
		{
			res[       (0+e)/2] = cpu.GetVU32(rn, e) + cpu.GetVU32(rn, e+1);
			res[(elements+e)/2] = cpu.GetVU32(rm, e) + cpu.GetVU32(rm, e+1);
		}

		for (unsigned e=0; e < elements; e += 1)
		cpu.SetVU32(rd, e, res[e]);

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAddp_vs(CodeType code, uint64_t addr)
{
	return new OpAddp_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAddp_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "addp\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpAddp_v2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typename ARCH::U64 res[2];

		for (unsigned e=0; e < 1; e += 1)
		{
			res[e+0] = cpu.GetVU64(rn, 2*e) + cpu.GetVU64(rn, 2*e+1);
			res[e+1] = cpu.GetVU64(rm, 2*e) + cpu.GetVU64(rm, 2*e+1);
		}

		for (unsigned e=0; e < 2; e += 1)
		cpu.SetVU64(rd, e, res[e]);

		cpu.ClearHighV(rd, 16);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAddp_v2d(CodeType code, uint64_t addr)
{
	return new OpAddp_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAddv_bvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "addv\t" << DisasmB(rd) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpAddv_bvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;

		U8 res(0);
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		res += cpu.GetVU8(rn, idx);
		cpu.SetVU8(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAddv_bvb(CodeType code, uint64_t addr)
{
	return new OpAddv_bvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAddv_hvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "addv\t" << DisasmH(rd) << ", " << DisasmTV(rn, 4<<q, 1);
}}
template <	typename	ARCH>
void OpAddv_hvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;

		U16 res(0);
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		res += cpu.GetVU16(rn, idx);
		cpu.SetVU16(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAddv_hvh(CodeType code, uint64_t addr)
{
	return new OpAddv_hvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAddv_sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "addv\t" << DisasmS(rd) << ", " << DisasmTV(rn, 4, 2);
}}
template <	typename	ARCH>
void OpAddv_sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 res(0);
		for (unsigned idx = 0, end = 2<<1; idx < end; ++idx)
		res += cpu.GetVU32(rn, idx);
		cpu.SetVU32(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAddv_sv4s(CodeType code, uint64_t addr)
{
	return new OpAddv_sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAesd_v16b16b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "aesd\t" << DisasmTV(rd, 16, 0) << ", " << DisasmTV(rn, 16, 0);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAesd_v16b16b(CodeType code, uint64_t addr)
{
	return new OpAesd_v16b16b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAese_v16b16b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "aese\t" << DisasmTV(rd, 16, 0) << ", " << DisasmTV(rn, 16, 0);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAese_v16b16b(CodeType code, uint64_t addr)
{
	return new OpAese_v16b16b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAesimc_v16b16b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "aesimc\t" << DisasmTV(rd, 16, 0) << ", " << DisasmTV(rn, 16, 0);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAesimc_v16b16b(CodeType code, uint64_t addr)
{
	return new OpAesimc_v16b16b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAesmc_v16b16b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "aesmc\t" << DisasmTV(rd, 16, 0) << ", " << DisasmTV(rn, 16, 0);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAesmc_v16b16b(CodeType code, uint64_t addr)
{
	return new OpAesmc_v16b16b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmeq_d_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmeq\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}
template <	typename	ARCH>
void OpCmeq_d_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;

		S64 op1 = cpu.GetVS64(rn, 0), op2 = cpu.GetVS64(rm, 0), res = -S64(op1 == op2);
		cpu.SetVS64(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmeq_d_reg(CodeType code, uint64_t addr)
{
	return new OpCmeq_d_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmeq_vb_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmeq\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpCmeq_vb_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;

		for (unsigned e=0, end = 8<<q; e < end; e += 1)
		{
			S8 op1 = cpu.GetVS8(rn, e), op2 = cpu.GetVS8(rm, e), res = -S8(op1 == op2);
			cpu.SetVS8(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmeq_vb_reg(CodeType code, uint64_t addr)
{
	return new OpCmeq_vb_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmeq_vh_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmeq\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpCmeq_vh_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;

		for (unsigned e=0, end=4<<q; e < end; e += 1)
		{
			S16 op1 = cpu.GetVS16(rn, e), op2 = cpu.GetVS16(rm, e), res = -S16(op1 == op2);
			cpu.SetVS16(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmeq_vh_reg(CodeType code, uint64_t addr)
{
	return new OpCmeq_vh_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmeq_vs_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmeq\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpCmeq_vs_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;

		for (unsigned e=0, end=2<<q; e < end; e += 1)
		{
			S32 op1 = cpu.GetVS32(rn, e), op2 = cpu.GetVS32(rm, e), res = -S32(op1 == op2);
			cpu.SetVS32(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmeq_vs_reg(CodeType code, uint64_t addr)
{
	return new OpCmeq_vs_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmeq_v2d_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmeq\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpCmeq_v2d_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;

		for (unsigned e=0; e < 2; e += 1)
		{
			S64 op1 = cpu.GetVS64(rn, e), op2 = cpu.GetVS64(rm, e), res = -S64(op1 == op2);
			cpu.SetVS64(rd, e, res);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmeq_v2d_reg(CodeType code, uint64_t addr)
{
	return new OpCmeq_v2d_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmeq_d_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmeq\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", #0";
}}
template <	typename	ARCH>
void OpCmeq_d_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;

		S64 op1 = cpu.GetVS64(rn, 0), op2( 0 ), res = -S64(op1 == op2);
		cpu.SetVS64(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmeq_d_zero(CodeType code, uint64_t addr)
{
	return new OpCmeq_d_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmeq_vb_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmeq\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", #0";
}}
template <	typename	ARCH>
void OpCmeq_vb_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;

		for (unsigned e=0, end=8<<q; e < end; e += 1)
		{
			S8 op1 = cpu.GetVS8(rn, e), op2( 0 ), res = -S8(op1 == op2);
			cpu.SetVS8(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmeq_vb_zero(CodeType code, uint64_t addr)
{
	return new OpCmeq_vb_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmeq_vh_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmeq\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", #0";
}}
template <	typename	ARCH>
void OpCmeq_vh_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;

		for (unsigned e=0, end=4<<q; e < end; e += 1)
		{
			S16 op1 = cpu.GetVS16(rn, e), op2( 0 ), res = -S16(op1 == op2);
			cpu.SetVS16(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmeq_vh_zero(CodeType code, uint64_t addr)
{
	return new OpCmeq_vh_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmeq_vs_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmeq\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", #0";
}}
template <	typename	ARCH>
void OpCmeq_vs_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;

		for (unsigned e=0, end=2<<q; e < end; e += 1)
		{
			S32 op1 = cpu.GetVS32(rn, e), op2( 0 ), res = -S32(op1 == op2);
			cpu.SetVS32(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmeq_vs_zero(CodeType code, uint64_t addr)
{
	return new OpCmeq_vs_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmeq_v2d_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmeq\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", #0";
}}
template <	typename	ARCH>
void OpCmeq_v2d_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;

		for (unsigned e=0; e < 2; e += 1)
		{
			S64 op1 = cpu.GetVS64(rn, e), op2( 0 ), res = -S64(op1 == op2);
			cpu.SetVS64(rd, e, res);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmeq_v2d_zero(CodeType code, uint64_t addr)
{
	return new OpCmeq_v2d_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmge_d_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmge\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}
template <	typename	ARCH>
void OpCmge_d_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;

		S64 op1 = cpu.GetVS64(rn, 0), op2 = cpu.GetVS64(rm, 0), res = -S64(op1 >= op2);
		cpu.SetVS64(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmge_d_reg(CodeType code, uint64_t addr)
{
	return new OpCmge_d_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmge_vb_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmge\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpCmge_vb_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;

		for (unsigned e=0, end=8<<q; e < end; e += 1)
		{
			S8 op1 = cpu.GetVS8(rn, e), op2 = cpu.GetVS8(rm, e), res = -S8(op1 >= op2);
			cpu.SetVS8(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmge_vb_reg(CodeType code, uint64_t addr)
{
	return new OpCmge_vb_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmge_vh_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmge\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpCmge_vh_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;

		for (unsigned e=0, end=4<<q; e < end; e += 1)
		{
			S16 op1 = cpu.GetVS16(rn, e), op2 = cpu.GetVS16(rm, e), res = -S16(op1 >= op2);
			cpu.SetVS16(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmge_vh_reg(CodeType code, uint64_t addr)
{
	return new OpCmge_vh_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmge_vs_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmge\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpCmge_vs_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;

		for (unsigned e=0, end=2<<q; e < end; e += 1)
		{
			S32 op1 = cpu.GetVS32(rn, e), op2 = cpu.GetVS32(rm, e), res = -S32(op1 >= op2);
			cpu.SetVS32(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmge_vs_reg(CodeType code, uint64_t addr)
{
	return new OpCmge_vs_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmge_v2d_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmge\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpCmge_v2d_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;

		for (unsigned e=0; e < 2; e += 1)
		{
			S64 op1 = cpu.GetVS64(rn, e), op2 = cpu.GetVS64(rm, e), res = -S64(op1 >= op2);
			cpu.SetVS64(rd, e, res);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmge_v2d_reg(CodeType code, uint64_t addr)
{
	return new OpCmge_v2d_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmge_d_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmge\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", #0";
}}
template <	typename	ARCH>
void OpCmge_d_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;

		S64 op1 = cpu.GetVS64(rn, 0), op2( 0 ), res = -S64(op1 >= op2);
		cpu.SetVS64(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmge_d_zero(CodeType code, uint64_t addr)
{
	return new OpCmge_d_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmge_vb_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmge\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", #0";
}}
template <	typename	ARCH>
void OpCmge_vb_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;

		for (unsigned e=0, end=8<<q; e < end; e += 1)
		{
			S8 op1 = cpu.GetVS8(rn, e), op2( 0 ), res = -S8(op1 >= op2);
			cpu.SetVS8(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmge_vb_zero(CodeType code, uint64_t addr)
{
	return new OpCmge_vb_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmge_vh_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmge\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", #0";
}}
template <	typename	ARCH>
void OpCmge_vh_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;

		for (unsigned e=0, end=4<<q; e < end; e += 1)
		{
			S16 op1 = cpu.GetVS16(rn, e), op2( 0 ), res = -S16(op1 >= op2);
			cpu.SetVS16(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmge_vh_zero(CodeType code, uint64_t addr)
{
	return new OpCmge_vh_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmge_vs_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmge\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", #0";
}}
template <	typename	ARCH>
void OpCmge_vs_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;

		for (unsigned e=0, end=2<<q; e < end; e += 1)
		{
			S32 op1 = cpu.GetVS32(rn, e), op2( 0 ), res = -S32(op1 >= op2);
			cpu.SetVS32(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmge_vs_zero(CodeType code, uint64_t addr)
{
	return new OpCmge_vs_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmge_v2d_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmge\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", #0";
}}
template <	typename	ARCH>
void OpCmge_v2d_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;

		for (unsigned e=0; e < 2; e += 1)
		{
			S64 op1 = cpu.GetVS64(rn, e), op2( 0 ), res = -S64(op1 >= op2);
			cpu.SetVS64(rd, e, res);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmge_v2d_zero(CodeType code, uint64_t addr)
{
	return new OpCmge_v2d_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmgt_d_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmgt\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}
template <	typename	ARCH>
void OpCmgt_d_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;

		S64 op1 = cpu.GetVS64(rn, 0), op2 = cpu.GetVS64(rm, 0), res = -S64(op1 > op2);
		cpu.SetVS64(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmgt_d_reg(CodeType code, uint64_t addr)
{
	return new OpCmgt_d_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmgt_vb_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmgt\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpCmgt_vb_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;

		for (unsigned e=0, end=8<<q; e < end; e += 1)
		{
			S8 op1 = cpu.GetVS8(rn, e), op2 = cpu.GetVS8(rm, e), res = -S8(op1 > op2);
			cpu.SetVS8(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmgt_vb_reg(CodeType code, uint64_t addr)
{
	return new OpCmgt_vb_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmgt_vh_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmgt\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpCmgt_vh_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;

		for (unsigned e=0, end=4<<q; e < end; e += 1)
		{
			S16 op1 = cpu.GetVS16(rn, e), op2 = cpu.GetVS16(rm, e), res = -S16(op1 > op2);
			cpu.SetVS16(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmgt_vh_reg(CodeType code, uint64_t addr)
{
	return new OpCmgt_vh_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmgt_vs_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmgt\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpCmgt_vs_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;

		for (unsigned e=0, end=2<<q; e < end; e += 1)
		{
			S32 op1 = cpu.GetVS32(rn, e), op2 = cpu.GetVS32(rm, e), res = -S32(op1 > op2);
			cpu.SetVS32(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmgt_vs_reg(CodeType code, uint64_t addr)
{
	return new OpCmgt_vs_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmgt_v2d_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmgt\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpCmgt_v2d_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;

		for (unsigned e=0; e < 2; e += 1)
		{
			S64 op1 = cpu.GetVS64(rn, e), op2 = cpu.GetVS64(rm, e), res = -S64(op1 > op2);
			cpu.SetVS64(rd, e, res);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmgt_v2d_reg(CodeType code, uint64_t addr)
{
	return new OpCmgt_v2d_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmgt_d_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmgt\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", #0";
}}
template <	typename	ARCH>
void OpCmgt_d_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;

		S64 op1 = cpu.GetVS64(rn, 0), op2( 0 ), res = -S64(op1 > op2);
		cpu.SetVS64(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmgt_d_zero(CodeType code, uint64_t addr)
{
	return new OpCmgt_d_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmgt_vb_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmgt\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", #0";
}}
template <	typename	ARCH>
void OpCmgt_vb_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;

		for (unsigned e=0, end=8<<q; e < end; e += 1)
		{
			S8 op1 = cpu.GetVS8(rn, e), op2( 0 ), res = -S8(op1 > op2);
			cpu.SetVS8(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmgt_vb_zero(CodeType code, uint64_t addr)
{
	return new OpCmgt_vb_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmgt_vh_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmgt\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", #0";
}}
template <	typename	ARCH>
void OpCmgt_vh_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;

		for (unsigned e=0, end=4<<q; e < end; e += 1)
		{
			S16 op1 = cpu.GetVS16(rn, e), op2( 0 ), res = -S16(op1 > op2);
			cpu.SetVS16(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmgt_vh_zero(CodeType code, uint64_t addr)
{
	return new OpCmgt_vh_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmgt_vs_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmgt\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", #0";
}}
template <	typename	ARCH>
void OpCmgt_vs_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;

		for (unsigned e=0, end=2<<q; e < end; e += 1)
		{
			S32 op1 = cpu.GetVS32(rn, e), op2( 0 ), res = -S32(op1 > op2);
			cpu.SetVS32(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmgt_vs_zero(CodeType code, uint64_t addr)
{
	return new OpCmgt_vs_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmgt_v2d_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmgt\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", #0";
}}
template <	typename	ARCH>
void OpCmgt_v2d_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;

		for (unsigned e=0; e < 2; e += 1)
		{
			S64 op1 = cpu.GetVS64(rn, e), op2( 0 ), res = -S64(op1 > op2);
			cpu.SetVS64(rd, e, res);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmgt_v2d_zero(CodeType code, uint64_t addr)
{
	return new OpCmgt_v2d_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmhi_d_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmhi\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}
template <	typename	ARCH>
void OpCmhi_d_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1 = cpu.GetVU64(rn, 0), op2 = cpu.GetVU64(rm, 0), res = -U64(op1 > op2);
		cpu.SetVU64(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmhi_d_reg(CodeType code, uint64_t addr)
{
	return new OpCmhi_d_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmhi_vb_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmhi\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpCmhi_vb_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;

		for (unsigned e=0, end=8<<q; e < end; e += 1)
		{
			U8 op1 = cpu.GetVU8(rn, e), op2 = cpu.GetVU8(rm, e), res = -U8(op1 > op2);
			cpu.SetVU8(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmhi_vb_reg(CodeType code, uint64_t addr)
{
	return new OpCmhi_vb_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmhi_vh_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmhi\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpCmhi_vh_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;

		for (unsigned e=0, end=4<<q; e < end; e += 1)
		{
			U16 op1 = cpu.GetVU16(rn, e), op2 = cpu.GetVU16(rm, e), res = -U16(op1 > op2);
			cpu.SetVU16(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmhi_vh_reg(CodeType code, uint64_t addr)
{
	return new OpCmhi_vh_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmhi_vs_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmhi\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpCmhi_vs_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		for (unsigned e=0, end=2<<q; e < end; e += 1)
		{
			U32 op1 = cpu.GetVU32(rn, e), op2 = cpu.GetVU32(rm, e), res = -U32(op1 > op2);
			cpu.SetVU32(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmhi_vs_reg(CodeType code, uint64_t addr)
{
	return new OpCmhi_vs_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmhi_v2d_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmhi\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpCmhi_v2d_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		for (unsigned e=0; e < 2; e += 1)
		{
			U64 op1 = cpu.GetVU64(rn, e), op2 = cpu.GetVU64(rm, e), res = -U64(op1 > op2);
			cpu.SetVU64(rd, e, res);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmhi_v2d_reg(CodeType code, uint64_t addr)
{
	return new OpCmhi_v2d_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmhs_d_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmhs\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}
template <	typename	ARCH>
void OpCmhs_d_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 op1 = cpu.GetVU64(rn, 0), op2 = cpu.GetVU64(rm, 0), res = -U64(op1 >= op2);
		cpu.SetVU64(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmhs_d_reg(CodeType code, uint64_t addr)
{
	return new OpCmhs_d_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmhs_vb_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmhs\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpCmhs_vb_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;

		for (unsigned e=0, end=8<<q; e < end; e += 1)
		{
			U8 op1 = cpu.GetVU8(rn, e), op2 = cpu.GetVU8(rm, e), res = -U8(op1 >= op2);
			cpu.SetVU8(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmhs_vb_reg(CodeType code, uint64_t addr)
{
	return new OpCmhs_vb_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmhs_vh_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmhs\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpCmhs_vh_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;

		for (unsigned e=0, end=4<<q; e < end; e += 1)
		{
			U16 op1 = cpu.GetVU16(rn, e), op2 = cpu.GetVU16(rm, e), res = -U16(op1 >= op2);
			cpu.SetVU16(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmhs_vh_reg(CodeType code, uint64_t addr)
{
	return new OpCmhs_vh_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmhs_vs_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmhs\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpCmhs_vs_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		for (unsigned e=0, end=2<<q; e < end; e += 1)
		{
			U32 op1 = cpu.GetVU32(rn, e), op2 = cpu.GetVU32(rm, e), res = -U32(op1 >= op2);
			cpu.SetVU32(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmhs_vs_reg(CodeType code, uint64_t addr)
{
	return new OpCmhs_vs_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmhs_v2d_reg<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmhs\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpCmhs_v2d_reg<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		for (unsigned e=0; e < 2; e += 1)
		{
			U64 op1 = cpu.GetVU64(rn, e), op2 = cpu.GetVU64(rm, e), res = -U64(op1 >= op2);
			cpu.SetVU64(rd, e, res);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmhs_v2d_reg(CodeType code, uint64_t addr)
{
	return new OpCmhs_v2d_reg<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmle_d_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmle\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", #0";
}}
template <	typename	ARCH>
void OpCmle_d_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;

		S64 op1 = cpu.GetVS64(rn, 0), op2( 0 ), res = -S64(op1 <= op2);
		cpu.SetVS64(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmle_d_zero(CodeType code, uint64_t addr)
{
	return new OpCmle_d_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmle_vb_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmle\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", #0";
}}
template <	typename	ARCH>
void OpCmle_vb_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;

		for (unsigned e=0, end=8<<q; e < end; e += 1)
		{
			S8 op1 = cpu.GetVS8(rn, e), op2( 0 ), res = -S8(op1 <= op2);
			cpu.SetVS8(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmle_vb_zero(CodeType code, uint64_t addr)
{
	return new OpCmle_vb_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmle_vh_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmle\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", #0";
}}
template <	typename	ARCH>
void OpCmle_vh_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;

		for (unsigned e=0, end=4<<q; e < end; e += 1)
		{
			S16 op1 = cpu.GetVS16(rn, e), op2( 0 ), res = -S16(op1 <= op2);
			cpu.SetVS16(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmle_vh_zero(CodeType code, uint64_t addr)
{
	return new OpCmle_vh_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmle_vs_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmle\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", #0";
}}
template <	typename	ARCH>
void OpCmle_vs_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;

		for (unsigned e=0, end=2<<q; e < end; e += 1)
		{
			S32 op1 = cpu.GetVS32(rn, e), op2( 0 ), res = -S32(op1 <= op2);
			cpu.SetVS32(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmle_vs_zero(CodeType code, uint64_t addr)
{
	return new OpCmle_vs_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmle_v2d_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmle\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", #0";
}}
template <	typename	ARCH>
void OpCmle_v2d_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;

		for (unsigned e=0; e < 2; e += 1)
		{
			S64 op1 = cpu.GetVS64(rn, e), op2( 0 ), res = -S64(op1 <= op2);
			cpu.SetVS64(rd, e, res);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmle_v2d_zero(CodeType code, uint64_t addr)
{
	return new OpCmle_v2d_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmlt_d_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmlt\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", #0";
}}
template <	typename	ARCH>
void OpCmlt_d_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;

		S64 op1 = cpu.GetVS64(rn, 0), op2( 0 ), res = -S64(op1 < op2);
		cpu.SetVS64(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmlt_d_zero(CodeType code, uint64_t addr)
{
	return new OpCmlt_d_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmlt_vb_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmlt\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", #0";
}}
template <	typename	ARCH>
void OpCmlt_vb_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;

		for (unsigned e=0, end=8<<q; e < end; e += 1)
		{
			S8 op1 = cpu.GetVS8(rn, e), op2( 0 ), res = -S8(op1 < op2);
			cpu.SetVS8(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmlt_vb_zero(CodeType code, uint64_t addr)
{
	return new OpCmlt_vb_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmlt_vh_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmlt\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", #0";
}}
template <	typename	ARCH>
void OpCmlt_vh_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;

		for (unsigned e=0, end=4<<q; e < end; e += 1)
		{
			S16 op1 = cpu.GetVS16(rn, e), op2( 0 ), res = -S16(op1 < op2);
			cpu.SetVS16(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmlt_vh_zero(CodeType code, uint64_t addr)
{
	return new OpCmlt_vh_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmlt_vs_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmlt\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", #0";
}}
template <	typename	ARCH>
void OpCmlt_vs_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;

		for (unsigned e=0, end=2<<q; e < end; e += 1)
		{
			S32 op1 = cpu.GetVS32(rn, e), op2( 0 ), res = -S32(op1 < op2);
			cpu.SetVS32(rd, e, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmlt_vs_zero(CodeType code, uint64_t addr)
{
	return new OpCmlt_vs_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmlt_v2d_zero<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmlt\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", #0";
}}
template <	typename	ARCH>
void OpCmlt_v2d_zero<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;

		for (unsigned e=0; e < 2; e += 1)
		{
			S64 op1 = cpu.GetVS64(rn, e), op2( 0 ), res = -S64(op1 < op2);
			cpu.SetVS64(rd, e, res);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmlt_v2d_zero(CodeType code, uint64_t addr)
{
	return new OpCmlt_v2d_zero<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmtst_ddd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmtst\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}
template <	typename	ARCH>
void OpCmtst_ddd<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 val( cpu.GetVU64(rn, 0) & cpu.GetVU64(rm, 0) );
		cpu.SetVU64(rd, cpu.Test(val != U64(0)) ? ~U64(0) : U64(0));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmtst_ddd(CodeType code, uint64_t addr)
{
	return new OpCmtst_ddd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmtst_v2dv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmtst\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpCmtst_v2dv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		for (unsigned idx = 0, end = 2; idx < end; ++idx)
		{
			U64 val( cpu.GetVU64(rn, idx) & cpu.GetVU64(rm, idx) );
			cpu.SetVU64(rd, idx, cpu.Test(val != U64(0)) ? ~U64(0) : U64(0));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmtst_v2dv2dv2d(CodeType code, uint64_t addr)
{
	return new OpCmtst_v2dv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdp_so<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << (am ? "" : "n") << "p\t" << DisasmS(rt) << ", " << DisasmS(rt2) << ", " << DisasmMemoryRI(rn, imm, am);
}}
template <	typename	ARCH>
void OpLdp_so<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* TODO: catch Non-temporal hint (am == 0) */
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U32 data0( cpu.MemRead32( addr + U64(0) ) ),
		data1( cpu.MemRead32( addr + U64(4) ) );
		cpu.SetVU32(rt,  data0);
		cpu.SetVU32(rt2, data1);
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdp_so(CodeType code, uint64_t addr)
{
	return new OpLdp_so<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdp_do<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << (am ? "" : "n") << "p\t" << DisasmD(rt) << ", " << DisasmD(rt2) << ", " << DisasmMemoryRI(rn, imm, am);
}}
template <	typename	ARCH>
void OpLdp_do<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* TODO: catch Non-temporal hint (am == 0) */
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U64 data0( cpu.MemRead64( addr + U64(0) ) ),
		data1( cpu.MemRead64( addr + U64(8) ) );
		cpu.SetVU64(rt,  data0);
		cpu.SetVU64(rt2, data1);
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdp_do(CodeType code, uint64_t addr)
{
	return new OpLdp_do<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdp_qo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << (am ? "" : "n") << "p\t" << DisasmQ(rt) << ", " << DisasmQ(rt2) << ", " << DisasmMemoryRI(rn, imm, am);
}}
template <	typename	ARCH>
void OpLdp_qo<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* TODO: catch Non-temporal hint (am == 0) */
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U64 data0( cpu.MemRead64( addr + U64( 0) ) ),
		data1( cpu.MemRead64( addr + U64( 8) ) ),
		data2( cpu.MemRead64( addr + U64(16) ) ),
		data3( cpu.MemRead64( addr + U64(24) ) );
		cpu.SetVU64(rt,  0, data0);
		cpu.SetVU64(rt,  1, data1);
		cpu.SetVU64(rt2, 0, data2);
		cpu.SetVU64(rt2, 1, data3);
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdp_qo(CodeType code, uint64_t addr)
{
	return new OpLdp_qo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_bxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << (am ? "" : "u") << "r\t" << DisasmB(rt) << ", " << DisasmMemoryRI(rn, imm, am);
}}
template <	typename	ARCH>
void OpLdr_bxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U8 data( cpu.MemRead8(addr) );
		cpu.SetVU8(rt, data);
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_bxi(CodeType code, uint64_t addr)
{
	return new OpLdr_bxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_buo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmB(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpLdr_buo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U8 data( cpu.MemRead8(addr) );
		cpu.SetVU8(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_buo(CodeType code, uint64_t addr)
{
	return new OpLdr_buo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_hxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << (am ? "" : "u") << "r\t" << DisasmH(rt) << ", " << DisasmMemoryRI(rn, imm, am);
}}
template <	typename	ARCH>
void OpLdr_hxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U16 data( cpu.MemRead16(addr) );
		cpu.SetVU16(rt, data);
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_hxi(CodeType code, uint64_t addr)
{
	return new OpLdr_hxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_huo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmH(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpLdr_huo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U16 data( cpu.MemRead16(addr) );
		cpu.SetVU16(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_huo(CodeType code, uint64_t addr)
{
	return new OpLdr_huo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_sxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << (am ? "" : "u") << "r\t" << DisasmS(rt) << ", " << DisasmMemoryRI(rn, imm, am);
}}
template <	typename	ARCH>
void OpLdr_sxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U32 data( cpu.MemRead32(addr) );
		cpu.SetVU32(rt, data);
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_sxi(CodeType code, uint64_t addr)
{
	return new OpLdr_sxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_suo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmS(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpLdr_suo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U32 data( cpu.MemRead32(addr) );
		cpu.SetVU32(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_suo(CodeType code, uint64_t addr)
{
	return new OpLdr_suo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_dxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << (am ? "" : "u") << "r\t" << DisasmD(rt) << ", " << DisasmMemoryRI(rn, imm, am);
}}
template <	typename	ARCH>
void OpLdr_dxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U64 data( cpu.MemRead64(addr) );
		cpu.SetVU64(rt, data);
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_dxi(CodeType code, uint64_t addr)
{
	return new OpLdr_dxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_duo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmD(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpLdr_duo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U64 data( cpu.MemRead64(addr) );
		cpu.SetVU64(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_duo(CodeType code, uint64_t addr)
{
	return new OpLdr_duo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_qxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << (am ? "" : "u") << "r\t" << DisasmQ(rt) << ", " << DisasmMemoryRI(rn, imm, am);
}}
template <	typename	ARCH>
void OpLdr_qxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* XXX: handling of quad vector */
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U64 data0( cpu.MemRead64(addr) ), data1( cpu.MemRead64(addr+U64(8)) );
		cpu.SetVU64(rt, 0, data0);
		cpu.SetVU64(rt, 1, data1);
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_qxi(CodeType code, uint64_t addr)
{
	return new OpLdr_qxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_quo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmQ(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpLdr_quo<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* XXX: handling of quad vector */
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U64 data0( cpu.MemRead64(addr) ), data1( cpu.MemRead64(addr+U64(8)) );
		cpu.SetVU64(rt, 0, data0);
		cpu.SetVU64(rt, 1, data1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_quo(CodeType code, uint64_t addr)
{
	return new OpLdr_quo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_slit<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmS(rt) << ", 0x" << std::hex << (this->GetAddr()+imm);
}}
template <	typename	ARCH>
void OpLdr_slit<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetPC() + U64(imm) );
		U32 data( cpu.MemRead32(addr) );
		cpu.SetVU32(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_slit(CodeType code, uint64_t addr)
{
	return new OpLdr_slit<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_dlit<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmD(rt) << ", 0x" << std::hex << (this->GetAddr()+imm);
}}
template <	typename	ARCH>
void OpLdr_dlit<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetPC() + U64(imm) );
		U64 data( cpu.MemRead64(addr) );
		cpu.SetVU64(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_dlit(CodeType code, uint64_t addr)
{
	return new OpLdr_dlit<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_qlit<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmQ(rt) << ", 0x" << std::hex << (this->GetAddr()+imm);
}}
template <	typename	ARCH>
void OpLdr_qlit<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* XXX: handling of quad vector */
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetPC() + U64(imm) );
		U64 data0( cpu.MemRead64(addr) ), data1( cpu.MemRead64(addr + U64(8)) );
		cpu.SetVU64(rt, 0, data0);
		cpu.SetVU64(rt, 1, data1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_qlit(CodeType code, uint64_t addr)
{
	return new OpLdr_qlit<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_bxwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmB(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_bxwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U8 data( cpu.MemRead8(addr) );
		cpu.SetVU8(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_bxwu(CodeType code, uint64_t addr)
{
	return new OpLdr_bxwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_bxxu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmB(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_bxxu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U8 data( cpu.MemRead8(addr) );
		cpu.SetVU8(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_bxxu(CodeType code, uint64_t addr)
{
	return new OpLdr_bxxu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_bxws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmB(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_bxws<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U8  U8;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(S32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U8 data( cpu.MemRead8(addr) );
		cpu.SetVU8(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_bxws(CodeType code, uint64_t addr)
{
	return new OpLdr_bxws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_bxxs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmB(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", sxtx" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_bxxs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		U64 offset( U64(S64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U8 data( cpu.MemRead8(addr) );
		cpu.SetVU8(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_bxxs(CodeType code, uint64_t addr)
{
	return new OpLdr_bxxs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_hxwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmH(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_hxwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U16 data( cpu.MemRead16(addr) );
		cpu.SetVU16(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_hxwu(CodeType code, uint64_t addr)
{
	return new OpLdr_hxwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_hxxu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmH(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_hxxu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U16 data( cpu.MemRead16(addr) );
		cpu.SetVU16(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_hxxu(CodeType code, uint64_t addr)
{
	return new OpLdr_hxxu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_hxws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmH(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_hxws<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(S32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U16 data( cpu.MemRead16(addr) );
		cpu.SetVU16(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_hxws(CodeType code, uint64_t addr)
{
	return new OpLdr_hxws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_hxxs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmH(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", sxtx" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_hxxs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(S64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U16 data( cpu.MemRead16(addr) );
		cpu.SetVU16(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_hxxs(CodeType code, uint64_t addr)
{
	return new OpLdr_hxxs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_sxwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmS(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_sxwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.MemRead32(addr) );
		cpu.SetVU32(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_sxwu(CodeType code, uint64_t addr)
{
	return new OpLdr_sxwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_sxxu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmS(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_sxxu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.MemRead32(addr) );
		cpu.SetVU32(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_sxxu(CodeType code, uint64_t addr)
{
	return new OpLdr_sxxu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_sxws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmS(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_sxws<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(S32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.MemRead32(addr) );
		cpu.SetVU32(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_sxws(CodeType code, uint64_t addr)
{
	return new OpLdr_sxws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_sxxs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmS(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", sxtx" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_sxxs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(S64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.MemRead32(addr) );
		cpu.SetVU32(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_sxxs(CodeType code, uint64_t addr)
{
	return new OpLdr_sxxs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_dxwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmD(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_dxwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( cpu.MemRead64(addr) );
		cpu.SetVU64(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_dxwu(CodeType code, uint64_t addr)
{
	return new OpLdr_dxwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_dxxu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmD(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_dxxu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( cpu.MemRead64(addr) );
		cpu.SetVU64(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_dxxu(CodeType code, uint64_t addr)
{
	return new OpLdr_dxxu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_dxws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmD(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_dxws<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(S32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( cpu.MemRead64(addr) );
		cpu.SetVU64(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_dxws(CodeType code, uint64_t addr)
{
	return new OpLdr_dxws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_dxxs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmD(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", sxtx" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_dxxs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(S64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( cpu.MemRead64(addr) );
		cpu.SetVU64(rt, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_dxxs(CodeType code, uint64_t addr)
{
	return new OpLdr_dxxs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_qxwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmQ(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_qxwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* XXX: handling of quad vector */
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data0( cpu.MemRead64(addr) ), data1( cpu.MemRead64(addr + U64(8)) );
		cpu.SetVU64(rt, 0, data0);
		cpu.SetVU64(rt, 1, data1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_qxwu(CodeType code, uint64_t addr)
{
	return new OpLdr_qxwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_qxxu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmQ(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_qxxu<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* XXX: handling of quad vector */
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data0( cpu.MemRead64(addr) ), data1( cpu.MemRead64(addr + U64(8)) );
		cpu.SetVU64(rt, 0, data0);
		cpu.SetVU64(rt, 1, data1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_qxxu(CodeType code, uint64_t addr)
{
	return new OpLdr_qxxu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_qxws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmQ(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_qxws<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* XXX: handling of quad vector */
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(S32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data0( cpu.MemRead64(addr) ), data1( cpu.MemRead64(addr + U64(8)) );
		cpu.SetVU64(rt, 0, data0);
		cpu.SetVU64(rt, 1, data1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_qxws(CodeType code, uint64_t addr)
{
	return new OpLdr_qxws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdr_qxxs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ldr\t" << DisasmQ(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", sxtx" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpLdr_qxxs<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* XXX: handling of quad vector */
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(S64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data0( cpu.MemRead64(addr) ), data1( cpu.MemRead64(addr + U64(8)) );
		cpu.SetVU64(rt, 0, data0);
		cpu.SetVU64(rt, 1, data1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdr_qxxs(CodeType code, uint64_t addr)
{
	return new OpLdr_qxxs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMov_vbii<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mov\t" << DisasmTV(rd, 0, 0) << DisasmSubscript(index1) << ", " << DisasmTV(rn, 0, 0) << DisasmSubscript(index2);
}}
template <	typename	ARCH>
void OpMov_vbii<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU8(rd, index1, cpu.GetVU8(rn, index2));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMov_vbii(CodeType code, uint64_t addr)
{
	return new OpMov_vbii<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMov_vhii<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mov\t" << DisasmTV(rd, 0, 1) << DisasmSubscript(index1) << ", " << DisasmTV(rn, 0, 1) << DisasmSubscript(index2);
}}
template <	typename	ARCH>
void OpMov_vhii<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU16(rd, index1, cpu.GetVU16(rn, index2));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMov_vhii(CodeType code, uint64_t addr)
{
	return new OpMov_vhii<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMov_vsii<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mov\t" << DisasmTV(rd, 0, 2) << DisasmSubscript(index1) << ", " << DisasmTV(rn, 0, 2) << DisasmSubscript(index2);
}}
template <	typename	ARCH>
void OpMov_vsii<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU32(rd, index1, cpu.GetVU32(rn, index2));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMov_vsii(CodeType code, uint64_t addr)
{
	return new OpMov_vsii<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMov_vdii<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mov\t" << DisasmTV(rd, 0, 3) << DisasmSubscript(index1) << ", " << DisasmTV(rn, 0, 3) << DisasmSubscript(index2);
}}
template <	typename	ARCH>
void OpMov_vdii<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU64(rd, index1, cpu.GetVU64(rn, index2));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMov_vdii(CodeType code, uint64_t addr)
{
	return new OpMov_vdii<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpIns_vbw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ins\t" << DisasmTV(rd, 0, 0) << DisasmSubscript(index) << ", " << DisasmGZWR(rn);
}}
template <	typename	ARCH>
void OpIns_vbw<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU8(rd, index, typename ARCH::U8(cpu.GetGZR(rn)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpIns_vbw(CodeType code, uint64_t addr)
{
	return new OpIns_vbw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpIns_vhw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ins\t" << DisasmTV(rd, 0, 1) << DisasmSubscript(index) << ", " << DisasmGZWR(rn);
}}
template <	typename	ARCH>
void OpIns_vhw<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU16(rd, index, typename ARCH::U16(cpu.GetGZR(rn)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpIns_vhw(CodeType code, uint64_t addr)
{
	return new OpIns_vhw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpIns_vsw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ins\t" << DisasmTV(rd, 0, 2) << DisasmSubscript(index) << ", " << DisasmGZWR(rn);
}}
template <	typename	ARCH>
void OpIns_vsw<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU32(rd, index, typename ARCH::U32(cpu.GetGZR(rn)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpIns_vsw(CodeType code, uint64_t addr)
{
	return new OpIns_vsw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpIns_vdx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ins\t" << DisasmTV(rd, 0, 3) << DisasmSubscript(index) << ", " << DisasmGZXR(rn);
}}
template <	typename	ARCH>
void OpIns_vdx<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU64(rd, index, cpu.GetGZR(rn));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpIns_vdx(CodeType code, uint64_t addr)
{
	return new OpIns_vdx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpPmull<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "pmull\t" << DisasmTV(rd, 1, 4) << ", " << DisasmTV(rn, 1, 3) << ", " << DisasmTV(rm, 1, 3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpPmull(CodeType code, uint64_t addr)
{
	return new OpPmull<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpPmull2<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "pmull2\t" << DisasmTV(rd, 1, 4) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpPmull2(CodeType code, uint64_t addr)
{
	return new OpPmull2<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpPmull2_v8hv16bv16b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "pmull2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 16, 0) << ", " << DisasmTV(rm, 16, 0);
}}
template <	typename	ARCH>
void OpPmull2_v8hv16bv16b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;

		for (unsigned idx = 0, end=8; idx < end; ++idx)
		{
			U16 op1(cpu.GetVU8(rn, end + idx)), op2(cpu.GetVU8(rm, end + idx)), res(0);
			for (unsigned bit = 0; bit < 8; ++bit)
			res = res ^ (op2*(op1 & U16(1<<bit)));
			cpu.SetVU16(rd, idx, res);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpPmull2_v8hv16bv16b(CodeType code, uint64_t addr)
{
	return new OpPmull2_v8hv16bv16b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpPmull_v8hv8bv8b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "pmull\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8, 0) << ", " << DisasmTV(rm, 8, 0);
}}
template <	typename	ARCH>
void OpPmull_v8hv8bv8b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;

		for (unsigned idx = 0, end=8; idx < end; ++idx)
		{
			U16 op1(cpu.GetVU8(rn, idx)), op2(cpu.GetVU8(rm, idx)), res(0);
			for (unsigned bit = 0; bit < 8; ++bit)
			res = res ^ (op2*(op1 & U16(1<<bit)));
			cpu.SetVU16(rd, idx, res);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpPmull_v8hv8bv8b(CodeType code, uint64_t addr)
{
	return new OpPmull_v8hv8bv8b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRaddhn2_v16bv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "raddhn2\t" << DisasmTV(rd, 16, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpRaddhn2_v16bv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		typedef typename ARCH::U16 SRC;
		for (unsigned idx = 0, end = 8; idx < end; ++idx)
		{
			cpu.SetVU8(rd, idx + end, DST((cpu.GetVU16(rn, idx) + cpu.GetVU16(rm, idx) + (SRC(1) << 7)) >> 8));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRaddhn2_v16bv8hv8h(CodeType code, uint64_t addr)
{
	return new OpRaddhn2_v16bv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRaddhn2_v4sv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "raddhn2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpRaddhn2_v4sv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		typedef typename ARCH::U64 SRC;
		for (unsigned idx = 0, end = 2; idx < end; ++idx)
		{
			cpu.SetVU32(rd, idx + end, DST((cpu.GetVU64(rn, idx) + cpu.GetVU64(rm, idx) + (SRC(1) << 31)) >> 32));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRaddhn2_v4sv2dv2d(CodeType code, uint64_t addr)
{
	return new OpRaddhn2_v4sv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRaddhn2_v8hv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "raddhn2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpRaddhn2_v8hv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		typedef typename ARCH::U32 SRC;
		for (unsigned idx = 0, end = 4; idx < end; ++idx)
		{
			cpu.SetVU16(rd, idx + end, DST((cpu.GetVU32(rn, idx) + cpu.GetVU32(rm, idx) + (SRC(1) << 15)) >> 16));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRaddhn2_v8hv4sv4s(CodeType code, uint64_t addr)
{
	return new OpRaddhn2_v8hv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRaddhn_v2sv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "raddhn\t" << DisasmTV(rd, 2, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpRaddhn_v2sv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		typedef typename ARCH::U64 SRC;
		for (unsigned idx = 0, end = 2; idx < end; ++idx)
		{
			cpu.SetVU32(rd, idx, DST((cpu.GetVU64(rn, idx) + cpu.GetVU64(rm, idx) + (SRC(1) << 31)) >> 32));
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRaddhn_v2sv2dv2d(CodeType code, uint64_t addr)
{
	return new OpRaddhn_v2sv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRaddhn_v4hv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "raddhn\t" << DisasmTV(rd, 4, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpRaddhn_v4hv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		typedef typename ARCH::U32 SRC;
		for (unsigned idx = 0, end = 4; idx < end; ++idx)
		{
			cpu.SetVU16(rd, idx, DST((cpu.GetVU32(rn, idx) + cpu.GetVU32(rm, idx) + (SRC(1) << 15)) >> 16));
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRaddhn_v4hv4sv4s(CodeType code, uint64_t addr)
{
	return new OpRaddhn_v4hv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRaddhn_v8bv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "raddhn\t" << DisasmTV(rd, 8, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpRaddhn_v8bv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		typedef typename ARCH::U16 SRC;
		for (unsigned idx = 0, end = 8; idx < end; ++idx)
		{
			cpu.SetVU8(rd, idx, DST((cpu.GetVU16(rn, idx) + cpu.GetVU16(rm, idx) + (SRC(1) << 7)) >> 8));
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRaddhn_v8bv8hv8h(CodeType code, uint64_t addr)
{
	return new OpRaddhn_v8bv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRshrn2_v16b8hi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rshrn2\t" << DisasmTV(rd, 16, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpRshrn2_v16b8hi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		typedef typename ARCH::U16 SRC;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST((cpu.GetVU16(rn, idx) + SRC(round)) >> shift);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRshrn2_v16b8hi(CodeType code, uint64_t addr)
{
	return new OpRshrn2_v16b8hi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRshrn2_v4s2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rshrn2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpRshrn2_v4s2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		typedef typename ARCH::U64 SRC;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST((cpu.GetVU64(rn, idx) + SRC(round)) >> shift);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRshrn2_v4s2di(CodeType code, uint64_t addr)
{
	return new OpRshrn2_v4s2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRshrn2_v8h4si<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rshrn2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpRshrn2_v8h4si<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		typedef typename ARCH::U32 SRC;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST((cpu.GetVU32(rn, idx) + SRC(round)) >> shift);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRshrn2_v8h4si(CodeType code, uint64_t addr)
{
	return new OpRshrn2_v8h4si<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRshrn_v2s2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rshrn\t" << DisasmTV(rd, 2, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpRshrn_v2s2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		typedef typename ARCH::U64 SRC;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST((cpu.GetVU64(rn, idx) + SRC(round)) >> shift);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRshrn_v2s2di(CodeType code, uint64_t addr)
{
	return new OpRshrn_v2s2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRshrn_v4h4si<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rshrn\t" << DisasmTV(rd, 4, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpRshrn_v4h4si<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		typedef typename ARCH::U32 SRC;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST((cpu.GetVU32(rn, idx) + SRC(round)) >> shift);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRshrn_v4h4si(CodeType code, uint64_t addr)
{
	return new OpRshrn_v4h4si<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRshrn_v8b8hi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rshrn\t" << DisasmTV(rd, 8, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpRshrn_v8b8hi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		typedef typename ARCH::U16 SRC;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST((cpu.GetVU16(rn, idx) + SRC(round)) >> shift);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRshrn_v8b8hi(CodeType code, uint64_t addr)
{
	return new OpRshrn_v8b8hi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRsubhn2_v16bv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rsubhn2\t" << DisasmTV(rd, 16, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpRsubhn2_v16bv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		typedef typename ARCH::U16 SRC;
		for (unsigned idx = 0, end = 8; idx < end; ++idx)
		{
			cpu.SetVU8(rd, idx + end, DST((cpu.GetVU16(rn, idx) - cpu.GetVU16(rm, idx) + (SRC(1) << 7)) >> 8));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRsubhn2_v16bv8hv8h(CodeType code, uint64_t addr)
{
	return new OpRsubhn2_v16bv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRsubhn2_v4sv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rsubhn2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpRsubhn2_v4sv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		typedef typename ARCH::U64 SRC;
		for (unsigned idx = 0, end = 2; idx < end; ++idx)
		{
			cpu.SetVU32(rd, idx + end, DST((cpu.GetVU64(rn, idx) - cpu.GetVU64(rm, idx) + (SRC(1) << 31)) >> 32));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRsubhn2_v4sv2dv2d(CodeType code, uint64_t addr)
{
	return new OpRsubhn2_v4sv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRsubhn2_v8hv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rsubhn2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpRsubhn2_v8hv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		typedef typename ARCH::U32 SRC;
		for (unsigned idx = 0, end = 4; idx < end; ++idx)
		{
			cpu.SetVU16(rd, idx + end, DST((cpu.GetVU32(rn, idx) - cpu.GetVU32(rm, idx) + (SRC(1) << 15)) >> 16));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRsubhn2_v8hv4sv4s(CodeType code, uint64_t addr)
{
	return new OpRsubhn2_v8hv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRsubhn_v2sv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rsubhn\t" << DisasmTV(rd, 2, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpRsubhn_v2sv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		typedef typename ARCH::U64 SRC;
		for (unsigned idx = 0, end = 2; idx < end; ++idx)
		{
			cpu.SetVU32(rd, idx, DST((cpu.GetVU64(rn, idx) - cpu.GetVU64(rm, idx) + (SRC(1) << 31)) >> 32));
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRsubhn_v2sv2dv2d(CodeType code, uint64_t addr)
{
	return new OpRsubhn_v2sv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRsubhn_v4hv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rsubhn\t" << DisasmTV(rd, 4, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpRsubhn_v4hv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		typedef typename ARCH::U32 SRC;
		for (unsigned idx = 0, end = 4; idx < end; ++idx)
		{
			cpu.SetVU16(rd, idx, DST((cpu.GetVU32(rn, idx) - cpu.GetVU32(rm, idx) + (SRC(1) << 15)) >> 16));
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRsubhn_v4hv4sv4s(CodeType code, uint64_t addr)
{
	return new OpRsubhn_v4hv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRsubhn_v8bv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rsubhn\t" << DisasmTV(rd, 8, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpRsubhn_v8bv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		typedef typename ARCH::U16 SRC;
		for (unsigned idx = 0, end = 8; idx < end; ++idx)
		{
			cpu.SetVU8(rd, idx, DST((cpu.GetVU16(rn, idx) - cpu.GetVU16(rm, idx) + (SRC(1) << 7)) >> 8));
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRsubhn_v8bv8hv8h(CodeType code, uint64_t addr)
{
	return new OpRsubhn_v8bv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSabal2_v2dv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sabal2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpSabal2_v2dv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		typedef typename ARCH::S64 S64;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS64(rd, idx) + S64(Abs(cpu, S64(cpu.GetVS32(rn, elements + idx)) - S64(cpu.GetVS32(rm, elements + idx))));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSabal2_v2dv4sv4s(CodeType code, uint64_t addr)
{
	return new OpSabal2_v2dv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSabal2_v4sv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sabal2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpSabal2_v4sv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		typedef typename ARCH::S32 S32;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS32(rd, idx) + S32(Abs(cpu, S32(cpu.GetVS16(rn, elements + idx)) - S32(cpu.GetVS16(rm, elements + idx))));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSabal2_v4sv8hv8h(CodeType code, uint64_t addr)
{
	return new OpSabal2_v4sv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSabal2_v8hv16bv16b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sabal2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 16, 0) << ", " << DisasmTV(rm, 16, 0);
}}
template <	typename	ARCH>
void OpSabal2_v8hv16bv16b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		typedef typename ARCH::S16 S16;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS16(rd, idx) + S16(Abs(cpu, S16(cpu.GetVS8(rn, elements + idx)) - S16(cpu.GetVS8(rm, elements + idx))));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSabal2_v8hv16bv16b(CodeType code, uint64_t addr)
{
	return new OpSabal2_v8hv16bv16b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSabal_v2dv2sv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sabal\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 2, 2);
}}
template <	typename	ARCH>
void OpSabal_v2dv2sv2s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		for (unsigned idx = 0; idx < 2; ++idx)
		{
			cpu.SetVS64(rd, idx, cpu.GetVS64(rd, idx) + Abs(cpu, S64(cpu.GetVS32(rn, idx)) - S64(cpu.GetVS32(rm, idx))));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSabal_v2dv2sv2s(CodeType code, uint64_t addr)
{
	return new OpSabal_v2dv2sv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSabal_v4sv4hv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sabal\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 4, 1);
}}
template <	typename	ARCH>
void OpSabal_v4sv4hv4h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		for (unsigned idx = 0; idx < 4; ++idx)
		{
			cpu.SetVS32(rd, idx, cpu.GetVS32(rd, idx) + Abs(cpu, S32(cpu.GetVS16(rn, idx)) - S32(cpu.GetVS16(rm, idx))));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSabal_v4sv4hv4h(CodeType code, uint64_t addr)
{
	return new OpSabal_v4sv4hv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSabal_v8hv8bv8b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sabal\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8, 0) << ", " << DisasmTV(rm, 8, 0);
}}
template <	typename	ARCH>
void OpSabal_v8hv8bv8b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		for (unsigned idx = 0; idx < 8; ++idx)
		{
			cpu.SetVS16(rd, idx, cpu.GetVS16(rd, idx) + Abs(cpu, S16(cpu.GetVS8(rn, idx)) - S16(cpu.GetVS8(rm, idx))));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSabal_v8hv8bv8b(CodeType code, uint64_t addr)
{
	return new OpSabal_v8hv8bv8b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSabdl2_v2dv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sabdl2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpSabdl2_v2dv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		typedef typename ARCH::S64 S64;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = S64(Abs(cpu, S64(cpu.GetVS32(rn, elements + idx)) - S64(cpu.GetVS32(rm, elements + idx))));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSabdl2_v2dv4sv4s(CodeType code, uint64_t addr)
{
	return new OpSabdl2_v2dv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSabdl2_v4sv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sabdl2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpSabdl2_v4sv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		typedef typename ARCH::S32 S32;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = S32(Abs(cpu, S32(cpu.GetVS16(rn, elements + idx)) - S32(cpu.GetVS16(rm, elements + idx))));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSabdl2_v4sv8hv8h(CodeType code, uint64_t addr)
{
	return new OpSabdl2_v4sv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSabdl2_v8hv16bv16b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sabdl2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 16, 0) << ", " << DisasmTV(rm, 16, 0);
}}
template <	typename	ARCH>
void OpSabdl2_v8hv16bv16b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		typedef typename ARCH::S16 S16;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = S16(Abs(cpu, S16(cpu.GetVS8(rn, elements + idx)) - S16(cpu.GetVS8(rm, elements + idx))));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSabdl2_v8hv16bv16b(CodeType code, uint64_t addr)
{
	return new OpSabdl2_v8hv16bv16b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSabdl_v2dv2sv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sabdl\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 2, 2);
}}
template <	typename	ARCH>
void OpSabdl_v2dv2sv2s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		for (unsigned idx = 0; idx < 2; ++idx)
		{
			cpu.SetVS64(rd, idx, Abs(cpu, S64(cpu.GetVS32(rn, idx)) - S64(cpu.GetVS32(rm, idx))));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSabdl_v2dv2sv2s(CodeType code, uint64_t addr)
{
	return new OpSabdl_v2dv2sv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSabdl_v4sv4hv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sabdl\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 4, 1);
}}
template <	typename	ARCH>
void OpSabdl_v4sv4hv4h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		for (unsigned idx = 0; idx < 4; ++idx)
		{
			cpu.SetVS32(rd, idx, Abs(cpu, S32(cpu.GetVS16(rn, idx)) - S32(cpu.GetVS16(rm, idx))));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSabdl_v4sv4hv4h(CodeType code, uint64_t addr)
{
	return new OpSabdl_v4sv4hv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSabdl_v8hv8bv8b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sabdl\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8, 0) << ", " << DisasmTV(rm, 8, 0);
}}
template <	typename	ARCH>
void OpSabdl_v8hv8bv8b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		for (unsigned idx = 0; idx < 8; ++idx)
		{
			cpu.SetVS16(rd, idx, Abs(cpu, S16(cpu.GetVS8(rn, idx)) - S16(cpu.GetVS8(rm, idx))));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSabdl_v8hv8bv8b(CodeType code, uint64_t addr)
{
	return new OpSabdl_v8hv8bv8b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSaddl2_v2dv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "saddl2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpSaddl2_v2dv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		typedef typename ARCH::S64 S64;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = S64(cpu.GetVS32(rn, elements + idx)) + S64(cpu.GetVS32(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSaddl2_v2dv4sv4s(CodeType code, uint64_t addr)
{
	return new OpSaddl2_v2dv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSaddl2_v4sv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "saddl2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpSaddl2_v4sv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		typedef typename ARCH::S32 S32;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = S32(cpu.GetVS16(rn, elements + idx)) + S32(cpu.GetVS16(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSaddl2_v4sv8hv8h(CodeType code, uint64_t addr)
{
	return new OpSaddl2_v4sv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSaddl2_v8hv16bv16b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "saddl2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 16, 0) << ", " << DisasmTV(rm, 16, 0);
}}
template <	typename	ARCH>
void OpSaddl2_v8hv16bv16b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		typedef typename ARCH::S16 S16;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = S16(cpu.GetVS8(rn, elements + idx)) + S16(cpu.GetVS8(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSaddl2_v8hv16bv16b(CodeType code, uint64_t addr)
{
	return new OpSaddl2_v8hv16bv16b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSaddl_v2dv2sv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "saddl\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 2, 2);
}}
template <	typename	ARCH>
void OpSaddl_v2dv2sv2s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		for (unsigned idx = 0; idx < 2; ++idx)
		{
			cpu.SetVS64(rd, idx, S64(cpu.GetVS32(rn, idx)) + S64(cpu.GetVS32(rm, idx)));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSaddl_v2dv2sv2s(CodeType code, uint64_t addr)
{
	return new OpSaddl_v2dv2sv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSaddl_v4sv4hv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "saddl\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 4, 1);
}}
template <	typename	ARCH>
void OpSaddl_v4sv4hv4h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		for (unsigned idx = 0; idx < 4; ++idx)
		{
			cpu.SetVS32(rd, idx, S32(cpu.GetVS16(rn, idx)) + S32(cpu.GetVS16(rm, idx)));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSaddl_v4sv4hv4h(CodeType code, uint64_t addr)
{
	return new OpSaddl_v4sv4hv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSaddl_v8hv8bv8b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "saddl\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8, 0) << ", " << DisasmTV(rm, 8, 0);
}}
template <	typename	ARCH>
void OpSaddl_v8hv8bv8b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		for (unsigned idx = 0; idx < 8; ++idx)
		{
			cpu.SetVS16(rd, idx, S16(cpu.GetVS8(rn, idx)) + S16(cpu.GetVS8(rm, idx)));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSaddl_v8hv8bv8b(CodeType code, uint64_t addr)
{
	return new OpSaddl_v8hv8bv8b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSaddlv_dv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "saddlv\t" << DisasmD(rd) << ", " << DisasmTV(rn, 4, 2);
}}
template <	typename	ARCH>
void OpSaddlv_dv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 4;
		typedef typename ARCH::S64 S64;

		S64 sum = S64(cpu.GetVS32(rn, 0));
		for (unsigned e=1; e < elements; e += 1)
		{
			sum += S64(cpu.GetVS32(rn, e));
		}

		cpu.SetVS64(rd, sum);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSaddlv_dv4s(CodeType code, uint64_t addr)
{
	return new OpSaddlv_dv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSaddw2_v2dv2dv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "saddw2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpSaddw2_v2dv2dv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS64(rn, idx) + DST(cpu.GetVS32(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSaddw2_v2dv2dv4s(CodeType code, uint64_t addr)
{
	return new OpSaddw2_v2dv2dv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSaddw2_v4sv4sv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "saddw2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpSaddw2_v4sv4sv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS32(rn, idx) + DST(cpu.GetVS16(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSaddw2_v4sv4sv8h(CodeType code, uint64_t addr)
{
	return new OpSaddw2_v4sv4sv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSaddw2_v8hv8hv16b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "saddw2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 16, 0);
}}
template <	typename	ARCH>
void OpSaddw2_v8hv8hv16b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS16(rn, idx) + DST(cpu.GetVS8(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSaddw2_v8hv8hv16b(CodeType code, uint64_t addr)
{
	return new OpSaddw2_v8hv8hv16b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSaddw_v2dv2dv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "saddw\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 2);
}}
template <	typename	ARCH>
void OpSaddw_v2dv2dv2s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS64(rn, idx) + DST(cpu.GetVS32(rm, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSaddw_v2dv2dv2s(CodeType code, uint64_t addr)
{
	return new OpSaddw_v2dv2dv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSaddw_v4sv4sv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "saddw\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 1);
}}
template <	typename	ARCH>
void OpSaddw_v4sv4sv4h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS32(rn, idx) + DST(cpu.GetVS16(rm, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSaddw_v4sv4sv4h(CodeType code, uint64_t addr)
{
	return new OpSaddw_v4sv4sv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSaddw_v8hv8hv8b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "saddw\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 0);
}}
template <	typename	ARCH>
void OpSaddw_v8hv8hv8b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS16(rn, idx) + DST(cpu.GetVS8(rm, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSaddw_v8hv8hv8b(CodeType code, uint64_t addr)
{
	return new OpSaddw_v8hv8hv8b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSha1c<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sha1c\t" << DisasmQ(rd) << ", " << DisasmS(rn) << ", " << DisasmTV(rm, 4, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSha1c(CodeType code, uint64_t addr)
{
	return new OpSha1c<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSha1h_ss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sha1h\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSha1h_ss(CodeType code, uint64_t addr)
{
	return new OpSha1h_ss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSha1m<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sha1m\t" << DisasmQ(rd) << ", " << DisasmS(rn) << ", " << DisasmTV(rm, 4, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSha1m(CodeType code, uint64_t addr)
{
	return new OpSha1m<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSha1p<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sha1p\t" << DisasmQ(rd) << ", " << DisasmS(rn) << ", " << DisasmTV(rm, 4, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSha1p(CodeType code, uint64_t addr)
{
	return new OpSha1p<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSha1su0_v4sv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sha1su0\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSha1su0_v4sv4sv4s(CodeType code, uint64_t addr)
{
	return new OpSha1su0_v4sv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSha1su1_v4s4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sha1su1\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSha1su1_v4s4s(CodeType code, uint64_t addr)
{
	return new OpSha1su1_v4s4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSha256h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sha256h\t" << DisasmQ(rd) << ", " << DisasmQ(rn) << ", " << DisasmTV(rm, 4, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSha256h(CodeType code, uint64_t addr)
{
	return new OpSha256h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSha256h2<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sha256h2\t" << DisasmQ(rd) << ", " << DisasmQ(rn) << ", " << DisasmTV(rm, 4, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSha256h2(CodeType code, uint64_t addr)
{
	return new OpSha256h2<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSha256su0_v4s4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sha256su0\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSha256su0_v4s4s(CodeType code, uint64_t addr)
{
	return new OpSha256su0_v4s4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSha256su1_v4sv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sha256su1\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSha256su1_v4sv4sv4s(CodeType code, uint64_t addr)
{
	return new OpSha256su1_v4sv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpShll_v8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "shll" << (q ? "2" : "") << '\t' << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8<<q, 0) << ", #8";
}}
template <	typename	ARCH>
void OpShll_v8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;

		unsigned const elements = 8, srcidx = elements*q;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU8(rn, srcidx + idx)) << 8;
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpShll_v8h(CodeType code, uint64_t addr)
{
	return new OpShll_v8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpShll_v4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "shll" << (q ? "2" : "") << '\t' << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4<<q, 1) << ", #16";
}}
template <	typename	ARCH>
void OpShll_v4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;

		unsigned const elements = 4, srcidx = elements*q;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU16(rn, srcidx + idx)) << 16;
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpShll_v4s(CodeType code, uint64_t addr)
{
	return new OpShll_v4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpShll_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "shll" << (q ? "2" : "") << '\t' << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2<<q, 2) << ", #32";
}}
template <	typename	ARCH>
void OpShll_v2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;

		unsigned const elements = 2, srcidx = elements*q;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU32(rn, srcidx + idx)) << 32;
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpShll_v2d(CodeType code, uint64_t addr)
{
	return new OpShll_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpShrn2_v16b8hi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "shrn2\t" << DisasmTV(rd, 16, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpShrn2_v16b8hi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU16(rn, idx) >> shift);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpShrn2_v16b8hi(CodeType code, uint64_t addr)
{
	return new OpShrn2_v16b8hi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpShrn2_v4s2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "shrn2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpShrn2_v4s2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU64(rn, idx) >> shift);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpShrn2_v4s2di(CodeType code, uint64_t addr)
{
	return new OpShrn2_v4s2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpShrn2_v8h4si<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "shrn2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpShrn2_v8h4si<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU32(rn, idx) >> shift);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpShrn2_v8h4si(CodeType code, uint64_t addr)
{
	return new OpShrn2_v8h4si<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpShrn_v2s2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "shrn\t" << DisasmTV(rd, 2, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpShrn_v2s2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU64(rn, idx) >> shift);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpShrn_v2s2di(CodeType code, uint64_t addr)
{
	return new OpShrn_v2s2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpShrn_v4h4si<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "shrn\t" << DisasmTV(rd, 4, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpShrn_v4h4si<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU32(rn, idx) >> shift);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpShrn_v4h4si(CodeType code, uint64_t addr)
{
	return new OpShrn_v4h4si<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpShrn_v8b8hi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "shrn\t" << DisasmTV(rd, 8, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpShrn_v8b8hi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU16(rn, idx) >> shift);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpShrn_v8b8hi(CodeType code, uint64_t addr)
{
	return new OpShrn_v8b8hi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmaxv_bvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smaxv\t" << DisasmB(rd) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpSmaxv_bvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;

		S8 res = cpu.GetVS8(rn, 0);
		for (unsigned idx = 1, end=8<<q; idx < end; ++idx)
		{
			S8 elem = cpu.GetVS8(rn, idx);
			if (cpu.Test(res < elem)) res = elem;
		}
		cpu.SetVS8(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmaxv_bvb(CodeType code, uint64_t addr)
{
	return new OpSmaxv_bvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmaxv_hvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smaxv\t" << DisasmH(rd) << ", " << DisasmTV(rn, 4<<q, 1);
}}
template <	typename	ARCH>
void OpSmaxv_hvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;

		S16 res = cpu.GetVS16(rn, 0);
		for (unsigned idx = 1, end=4<<q; idx < end; ++idx)
		{
			S16 elem = cpu.GetVS16(rn, idx);
			if (cpu.Test(res < elem)) res = elem;
		}
		cpu.SetVS16(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmaxv_hvh(CodeType code, uint64_t addr)
{
	return new OpSmaxv_hvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmaxv_sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smaxv\t" << DisasmS(rd) << ", " << DisasmTV(rn, 4, 2);
}}
template <	typename	ARCH>
void OpSmaxv_sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;

		S32 res = cpu.GetVS32(rn, 0);
		for (unsigned idx = 1, end=2<<1; idx < end; ++idx)
		{
			S32 elem = cpu.GetVS32(rn, idx);
			if (cpu.Test(res < elem)) res = elem;
		}
		cpu.SetVS32(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmaxv_sv4s(CodeType code, uint64_t addr)
{
	return new OpSmaxv_sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSminv_bvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sminv\t" << DisasmB(rd) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpSminv_bvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;

		S8 res = cpu.GetVS8(rn, 0);
		for (unsigned idx = 1, end=8<<q; idx < end; ++idx)
		{
			S8 elem = cpu.GetVS8(rn, idx);
			if (cpu.Test(res > elem)) res = elem;
		}
		cpu.SetVS8(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSminv_bvb(CodeType code, uint64_t addr)
{
	return new OpSminv_bvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSminv_hvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sminv\t" << DisasmH(rd) << ", " << DisasmTV(rn, 4<<q, 1);
}}
template <	typename	ARCH>
void OpSminv_hvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;

		S16 res = cpu.GetVS16(rn, 0);
		for (unsigned idx = 1, end=4<<q; idx < end; ++idx)
		{
			S16 elem = cpu.GetVS16(rn, idx);
			if (cpu.Test(res > elem)) res = elem;
		}
		cpu.SetVS16(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSminv_hvh(CodeType code, uint64_t addr)
{
	return new OpSminv_hvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSminv_sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sminv\t" << DisasmS(rd) << ", " << DisasmTV(rn, 4, 2);
}}
template <	typename	ARCH>
void OpSminv_sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;

		S32 res = cpu.GetVS32(rn, 0);
		for (unsigned idx = 1, end=2<<1; idx < end; ++idx)
		{
			S32 elem = cpu.GetVS32(rn, idx);
			if (cpu.Test(res > elem)) res = elem;
		}
		cpu.SetVS32(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSminv_sv4s(CodeType code, uint64_t addr)
{
	return new OpSminv_sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmaxv_bvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umaxv\t" << DisasmB(rd) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpUmaxv_bvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;

		U8 res = cpu.GetVU8(rn, 0);
		for (unsigned idx = 1, end=8<<q; idx < end; ++idx)
		{
			U8 elem = cpu.GetVU8(rn, idx);
			if (cpu.Test(res < elem)) res = elem;
		}
		cpu.SetVU8(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmaxv_bvb(CodeType code, uint64_t addr)
{
	return new OpUmaxv_bvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmaxv_hvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umaxv\t" << DisasmH(rd) << ", " << DisasmTV(rn, 4<<q, 1);
}}
template <	typename	ARCH>
void OpUmaxv_hvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;

		U16 res = cpu.GetVU16(rn, 0);
		for (unsigned idx = 1, end=4<<q; idx < end; ++idx)
		{
			U16 elem = cpu.GetVU16(rn, idx);
			if (cpu.Test(res < elem)) res = elem;
		}
		cpu.SetVU16(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmaxv_hvh(CodeType code, uint64_t addr)
{
	return new OpUmaxv_hvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmaxv_sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umaxv\t" << DisasmS(rd) << ", " << DisasmTV(rn, 4, 2);
}}
template <	typename	ARCH>
void OpUmaxv_sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 res = cpu.GetVU32(rn, 0);
		for (unsigned idx = 1, end=2<<1; idx < end; ++idx)
		{
			U32 elem = cpu.GetVU32(rn, idx);
			if (cpu.Test(res < elem)) res = elem;
		}
		cpu.SetVU32(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmaxv_sv4s(CodeType code, uint64_t addr)
{
	return new OpUmaxv_sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUminv_bvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uminv\t" << DisasmB(rd) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpUminv_bvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;

		U8 res = cpu.GetVU8(rn, 0);
		for (unsigned idx = 1, end=8<<q; idx < end; ++idx)
		{
			U8 elem = cpu.GetVU8(rn, idx);
			if (cpu.Test(res > elem)) res = elem;
		}
		cpu.SetVU8(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUminv_bvb(CodeType code, uint64_t addr)
{
	return new OpUminv_bvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUminv_hvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uminv\t" << DisasmH(rd) << ", " << DisasmTV(rn, 4<<q, 1);
}}
template <	typename	ARCH>
void OpUminv_hvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;

		U16 res = cpu.GetVU16(rn, 0);
		for (unsigned idx = 1, end=4<<q; idx < end; ++idx)
		{
			U16 elem = cpu.GetVU16(rn, idx);
			if (cpu.Test(res > elem)) res = elem;
		}
		cpu.SetVU16(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUminv_hvh(CodeType code, uint64_t addr)
{
	return new OpUminv_hvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUminv_sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uminv\t" << DisasmS(rd) << ", " << DisasmTV(rn, 4, 2);
}}
template <	typename	ARCH>
void OpUminv_sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		U32 res = cpu.GetVU32(rn, 0);
		for (unsigned idx = 1, end=2<<1; idx < end; ++idx)
		{
			U32 elem = cpu.GetVU32(rn, idx);
			if (cpu.Test(res > elem)) res = elem;
		}
		cpu.SetVU32(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUminv_sv4s(CodeType code, uint64_t addr)
{
	return new OpUminv_sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmlal2_v2dv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smlal2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpSmlal2_v2dv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS64(rd, idx) + (DST(cpu.GetVS32(rn, elements + idx)) * DST(cpu.GetVS32(rm, elements + idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmlal2_v2dv4sv4s(CodeType code, uint64_t addr)
{
	return new OpSmlal2_v2dv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmlal2_v2dv4svsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smlal2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSmlal2_v2dv4svsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		DST element(cpu.GetVS32(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS64(rd, idx) + (DST(cpu.GetVS32(rn, elements + idx)) * element);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmlal2_v2dv4svsi(CodeType code, uint64_t addr)
{
	return new OpSmlal2_v2dv4svsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmlal2_v4sv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smlal2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpSmlal2_v4sv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS32(rd, idx) + (DST(cpu.GetVS16(rn, elements + idx)) * DST(cpu.GetVS16(rm, elements + idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmlal2_v4sv8hv8h(CodeType code, uint64_t addr)
{
	return new OpSmlal2_v4sv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmlal2_v4sv8hvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smlal2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSmlal2_v4sv8hvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		DST element(cpu.GetVS16(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS32(rd, idx) + (DST(cpu.GetVS16(rn, elements + idx)) * element);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmlal2_v4sv8hvhi(CodeType code, uint64_t addr)
{
	return new OpSmlal2_v4sv8hvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmlal2_v8hv16bv16b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smlal2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 16, 0) << ", " << DisasmTV(rm, 16, 0);
}}
template <	typename	ARCH>
void OpSmlal2_v8hv16bv16b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS16(rd, idx) + (DST(cpu.GetVS8(rn, elements + idx)) * DST(cpu.GetVS8(rm, elements + idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmlal2_v8hv16bv16b(CodeType code, uint64_t addr)
{
	return new OpSmlal2_v8hv16bv16b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmlal_v2dv2sv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smlal\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 2, 2);
}}
template <	typename	ARCH>
void OpSmlal_v2dv2sv2s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS64(rd, idx) + (DST(cpu.GetVS32(rn, idx)) * DST(cpu.GetVS32(rm, idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmlal_v2dv2sv2s(CodeType code, uint64_t addr)
{
	return new OpSmlal_v2dv2sv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmlal_v2dv2svsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smlal\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSmlal_v2dv2svsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		DST element(cpu.GetVS32(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS64(rd, idx) + (DST(cpu.GetVS32(rn, idx)) * element);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmlal_v2dv2svsi(CodeType code, uint64_t addr)
{
	return new OpSmlal_v2dv2svsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmlal_v4sv4hv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smlal\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 4, 1);
}}
template <	typename	ARCH>
void OpSmlal_v4sv4hv4h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS32(rd, idx) + (DST(cpu.GetVS16(rn, idx)) * DST(cpu.GetVS16(rm, idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmlal_v4sv4hv4h(CodeType code, uint64_t addr)
{
	return new OpSmlal_v4sv4hv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmlal_v4sv4hvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smlal\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSmlal_v4sv4hvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		DST element(cpu.GetVS16(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS32(rd, idx) + (DST(cpu.GetVS16(rn, idx)) * element);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmlal_v4sv4hvhi(CodeType code, uint64_t addr)
{
	return new OpSmlal_v4sv4hvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmlal_v8hv8bv8b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smlal\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8, 0) << ", " << DisasmTV(rm, 8, 0);
}}
template <	typename	ARCH>
void OpSmlal_v8hv8bv8b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS16(rd, idx) + (DST(cpu.GetVS8(rn, idx)) * DST(cpu.GetVS8(rm, idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmlal_v8hv8bv8b(CodeType code, uint64_t addr)
{
	return new OpSmlal_v8hv8bv8b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmlsl2_v2dv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smlsl2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpSmlsl2_v2dv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS64(rd, idx) - (DST(cpu.GetVS32(rn, elements + idx)) * DST(cpu.GetVS32(rm, elements + idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmlsl2_v2dv4sv4s(CodeType code, uint64_t addr)
{
	return new OpSmlsl2_v2dv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmlsl2_v2dv4svsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smlsl2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSmlsl2_v2dv4svsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		DST element(cpu.GetVS32(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS64(rd, idx) - (DST(cpu.GetVS32(rn, elements + idx)) * element);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmlsl2_v2dv4svsi(CodeType code, uint64_t addr)
{
	return new OpSmlsl2_v2dv4svsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmlsl2_v4sv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smlsl2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpSmlsl2_v4sv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS32(rd, idx) - (DST(cpu.GetVS16(rn, elements + idx)) * DST(cpu.GetVS16(rm, elements + idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmlsl2_v4sv8hv8h(CodeType code, uint64_t addr)
{
	return new OpSmlsl2_v4sv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmlsl2_v4sv8hvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smlsl2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSmlsl2_v4sv8hvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		DST element(cpu.GetVS16(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS32(rd, idx) - (DST(cpu.GetVS16(rn, elements + idx)) * element);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmlsl2_v4sv8hvhi(CodeType code, uint64_t addr)
{
	return new OpSmlsl2_v4sv8hvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmlsl2_v8hv16bv16b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smlsl2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 16, 0) << ", " << DisasmTV(rm, 16, 0);
}}
template <	typename	ARCH>
void OpSmlsl2_v8hv16bv16b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS16(rd, idx) - (DST(cpu.GetVS8(rn, elements + idx)) * DST(cpu.GetVS8(rm, elements + idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmlsl2_v8hv16bv16b(CodeType code, uint64_t addr)
{
	return new OpSmlsl2_v8hv16bv16b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmlsl_v2dv2sv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smlsl\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 2, 2);
}}
template <	typename	ARCH>
void OpSmlsl_v2dv2sv2s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS64(rd, idx) - (DST(cpu.GetVS32(rn, idx)) * DST(cpu.GetVS32(rm, idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmlsl_v2dv2sv2s(CodeType code, uint64_t addr)
{
	return new OpSmlsl_v2dv2sv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmlsl_v2dv2svsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smlsl\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSmlsl_v2dv2svsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		DST element(cpu.GetVS32(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS64(rd, idx) - (DST(cpu.GetVS32(rn, idx)) * element);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmlsl_v2dv2svsi(CodeType code, uint64_t addr)
{
	return new OpSmlsl_v2dv2svsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmlsl_v4sv4hv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smlsl\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 4, 1);
}}
template <	typename	ARCH>
void OpSmlsl_v4sv4hv4h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS32(rd, idx) - (DST(cpu.GetVS16(rn, idx)) * DST(cpu.GetVS16(rm, idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmlsl_v4sv4hv4h(CodeType code, uint64_t addr)
{
	return new OpSmlsl_v4sv4hv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmlsl_v4sv4hvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smlsl\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSmlsl_v4sv4hvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		DST element(cpu.GetVS16(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS32(rd, idx) - (DST(cpu.GetVS16(rn, idx)) * element);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmlsl_v4sv4hvhi(CodeType code, uint64_t addr)
{
	return new OpSmlsl_v4sv4hvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmlsl_v8hv8bv8b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smlsl\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8, 0) << ", " << DisasmTV(rm, 8, 0);
}}
template <	typename	ARCH>
void OpSmlsl_v8hv8bv8b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS16(rd, idx) - (DST(cpu.GetVS8(rn, idx)) * DST(cpu.GetVS8(rm, idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmlsl_v8hv8bv8b(CodeType code, uint64_t addr)
{
	return new OpSmlsl_v8hv8bv8b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmov_wvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smov\t" << DisasmGZWR(rd) << ", " << DisasmTV(rn, 0, 0) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSmov_wvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		cpu.SetGZR(rd, U32(S32(cpu.GetVS8(rn, index))));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmov_wvb(CodeType code, uint64_t addr)
{
	return new OpSmov_wvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmov_wvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smov\t" << DisasmGZWR(rd) << ", " << DisasmTV(rn, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSmov_wvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		cpu.SetGZR(rd, U32(S32(cpu.GetVS16(rn, index))));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmov_wvh(CodeType code, uint64_t addr)
{
	return new OpSmov_wvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmov_xvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smov\t" << DisasmGZXR(rd) << ", " << DisasmTV(rn, 0, 0) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSmov_xvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		cpu.SetGZR(rd, U64(S64(cpu.GetVS8(rn, index))));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmov_xvb(CodeType code, uint64_t addr)
{
	return new OpSmov_xvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmov_xvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smov\t" << DisasmGZXR(rd) << ", " << DisasmTV(rn, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSmov_xvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		cpu.SetGZR(rd, U64(S64(cpu.GetVS16(rn, index))));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmov_xvh(CodeType code, uint64_t addr)
{
	return new OpSmov_xvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmov_xvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smov\t" << DisasmGZXR(rd) << ", " << DisasmTV(rn, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSmov_xvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;

		cpu.SetGZR(rd, U64(S64(cpu.GetVS32(rn, index))));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmov_xvs(CodeType code, uint64_t addr)
{
	return new OpSmov_xvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmull2_v2dv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smull2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpSmull2_v2dv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVS32(rm, elements + idx)) * DST(cpu.GetVS32(rn, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmull2_v2dv4sv4s(CodeType code, uint64_t addr)
{
	return new OpSmull2_v2dv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmull2_v2dv4svsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smull2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSmull2_v2dv4svsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		DST element(cpu.GetVS32(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVS32(rn, elements + idx)) * element;
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmull2_v2dv4svsi(CodeType code, uint64_t addr)
{
	return new OpSmull2_v2dv4svsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmull2_v4sv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smull2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpSmull2_v4sv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVS16(rm, elements + idx)) * DST(cpu.GetVS16(rn, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmull2_v4sv8hv8h(CodeType code, uint64_t addr)
{
	return new OpSmull2_v4sv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmull2_v4sv8hvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smull2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSmull2_v4sv8hvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		DST element(cpu.GetVS16(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVS16(rn, elements + idx)) * element;
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmull2_v4sv8hvhi(CodeType code, uint64_t addr)
{
	return new OpSmull2_v4sv8hvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmull2_v8hv16bv16b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smull2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 16, 0) << ", " << DisasmTV(rm, 16, 0);
}}
template <	typename	ARCH>
void OpSmull2_v8hv16bv16b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVS8(rm, elements + idx)) * DST(cpu.GetVS8(rn, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmull2_v8hv16bv16b(CodeType code, uint64_t addr)
{
	return new OpSmull2_v8hv16bv16b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmull_v2dv2sv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smull\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 2, 2);
}}
template <	typename	ARCH>
void OpSmull_v2dv2sv2s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVS32(rm, idx)) * DST(cpu.GetVS32(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmull_v2dv2sv2s(CodeType code, uint64_t addr)
{
	return new OpSmull_v2dv2sv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmull_v2dv2svsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smull\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSmull_v2dv2svsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		DST element(cpu.GetVS32(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVS32(rn, idx)) * element;
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmull_v2dv2svsi(CodeType code, uint64_t addr)
{
	return new OpSmull_v2dv2svsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmull_v4sv4hv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smull\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 4, 1);
}}
template <	typename	ARCH>
void OpSmull_v4sv4hv4h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVS16(rm, idx)) * DST(cpu.GetVS16(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmull_v4sv4hv4h(CodeType code, uint64_t addr)
{
	return new OpSmull_v4sv4hv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmull_v4sv4hvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smull\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSmull_v4sv4hvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		DST element(cpu.GetVS16(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVS16(rn, idx)) * element;
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmull_v4sv4hvhi(CodeType code, uint64_t addr)
{
	return new OpSmull_v4sv4hvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmull_v8hv8bv8b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smull\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8, 0) << ", " << DisasmTV(rm, 8, 0);
}}
template <	typename	ARCH>
void OpSmull_v8hv8bv8b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVS8(rm, idx)) * DST(cpu.GetVS8(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmull_v8hv8bv8b(CodeType code, uint64_t addr)
{
	return new OpSmull_v8hv8bv8b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqabs_bb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqabs\t" << DisasmB(rd) << ", " << DisasmB(rn);
}}
template <	typename	ARCH>
void OpSqabs_bb<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS8(rd, Abs(cpu, cpu.GetVS8(rn, 0), /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqabs_bb(CodeType code, uint64_t addr)
{
	return new OpSqabs_bb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqabs_dd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqabs\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}
template <	typename	ARCH>
void OpSqabs_dd<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS64(rd, Abs(cpu, cpu.GetVS64(rn, 0), /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqabs_dd(CodeType code, uint64_t addr)
{
	return new OpSqabs_dd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqabs_hh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqabs\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}
template <	typename	ARCH>
void OpSqabs_hh<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS16(rd, Abs(cpu, cpu.GetVS16(rn, 0), /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqabs_hh(CodeType code, uint64_t addr)
{
	return new OpSqabs_hh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqabs_ss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqabs\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}
template <	typename	ARCH>
void OpSqabs_ss<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS32(rd, Abs(cpu, cpu.GetVS32(rn, 0), /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqabs_ss(CodeType code, uint64_t addr)
{
	return new OpSqabs_ss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqabs_v2d2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqabs\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3);
}}
template <	typename	ARCH>
void OpSqabs_v2d2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 2;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVS64(rd, e, Abs(cpu, cpu.GetVS64(rn, e), /* sat */ true));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqabs_v2d2d(CodeType code, uint64_t addr)
{
	return new OpSqabs_v2d2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqadd_bbb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqadd\t" << DisasmB(rd) << ", " << DisasmB(rn) << ", " << DisasmB(rm);
}}
template <	typename	ARCH>
void OpSqadd_bbb<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS8(rd, SatAdd(cpu, cpu.GetVS8(rn, 0), cpu.GetVS8(rm, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqadd_bbb(CodeType code, uint64_t addr)
{
	return new OpSqadd_bbb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqadd_ddd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqadd\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}
template <	typename	ARCH>
void OpSqadd_ddd<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS64(rd, SatAdd(cpu, cpu.GetVS64(rn, 0), cpu.GetVS64(rm, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqadd_ddd(CodeType code, uint64_t addr)
{
	return new OpSqadd_ddd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqadd_hhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqadd\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}
template <	typename	ARCH>
void OpSqadd_hhh<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS16(rd, SatAdd(cpu, cpu.GetVS16(rn, 0), cpu.GetVS16(rm, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqadd_hhh(CodeType code, uint64_t addr)
{
	return new OpSqadd_hhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqadd_sss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqadd\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}
template <	typename	ARCH>
void OpSqadd_sss<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS32(rd, SatAdd(cpu, cpu.GetVS32(rn, 0), cpu.GetVS32(rm, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqadd_sss(CodeType code, uint64_t addr)
{
	return new OpSqadd_sss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqadd_v2dv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqadd\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpSqadd_v2dv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0; idx < 2; ++idx)
		{
			cpu.SetVS64(rd, idx, SatAdd(cpu, cpu.GetVS64(rn, idx), cpu.GetVS64(rm, idx)));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqadd_v2dv2dv2d(CodeType code, uint64_t addr)
{
	return new OpSqadd_v2dv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlal2_v2dv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlal2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpSqdmlal2_v2dv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatAdd(cpu, cpu.GetVS64(rd, idx), NeonSHL(cpu, DST(cpu.GetVS32(rn, elements + idx)) * DST(cpu.GetVS32(rm, elements + idx)), typename ARCH::S8(1), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlal2_v2dv4sv4s(CodeType code, uint64_t addr)
{
	return new OpSqdmlal2_v2dv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlal2_v2dv4svsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlal2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqdmlal2_v2dv4svsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		DST element(cpu.GetVS32(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatAdd(cpu, cpu.GetVS64(rd, idx), NeonSHL(cpu, DST(cpu.GetVS32(rn, elements + idx)) * element, typename ARCH::S8(1), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlal2_v2dv4svsi(CodeType code, uint64_t addr)
{
	return new OpSqdmlal2_v2dv4svsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlal2_v4sv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlal2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpSqdmlal2_v4sv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatAdd(cpu, cpu.GetVS32(rd, idx), NeonSHL(cpu, DST(cpu.GetVS16(rn, elements + idx)) * DST(cpu.GetVS16(rm, elements + idx)), typename ARCH::S8(1), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlal2_v4sv8hv8h(CodeType code, uint64_t addr)
{
	return new OpSqdmlal2_v4sv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlal2_v4sv8hvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlal2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqdmlal2_v4sv8hvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		DST element(cpu.GetVS16(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatAdd(cpu, cpu.GetVS32(rd, idx), NeonSHL(cpu, DST(cpu.GetVS16(rn, elements + idx)) * element, typename ARCH::S8(1), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlal2_v4sv8hvhi(CodeType code, uint64_t addr)
{
	return new OpSqdmlal2_v4sv8hvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlal_dss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlal\t" << DisasmD(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}
template <	typename	ARCH>
void OpSqdmlal_dss<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		cpu.SetVS64(rd, SatAdd(cpu, cpu.GetVS64(rd, 0), NeonSHL(cpu, S64(cpu.GetVS32(rn, 0)) * S64(cpu.GetVS32(rm, 0)), typename ARCH::S8(1), /* round */ false, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlal_dss(CodeType code, uint64_t addr)
{
	return new OpSqdmlal_dss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlal_dsvsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlal\t" << DisasmD(rd) << ", " << DisasmS(rn) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqdmlal_dsvsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		cpu.SetVS64(rd, SatAdd(cpu, cpu.GetVS64(rd, 0), NeonSHL(cpu, S64(cpu.GetVS32(rn, 0)) * S64(cpu.GetVS32(rm, index)), typename ARCH::S8(1), /* round */ false, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlal_dsvsi(CodeType code, uint64_t addr)
{
	return new OpSqdmlal_dsvsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlal_shh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlal\t" << DisasmS(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}
template <	typename	ARCH>
void OpSqdmlal_shh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		cpu.SetVS32(rd, SatAdd(cpu, cpu.GetVS32(rd, 0), NeonSHL(cpu, S32(cpu.GetVS16(rn, 0)) * S32(cpu.GetVS16(rm, 0)), typename ARCH::S8(1), /* round */ false, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlal_shh(CodeType code, uint64_t addr)
{
	return new OpSqdmlal_shh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlal_shvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlal\t" << DisasmS(rd) << ", " << DisasmH(rn) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqdmlal_shvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		cpu.SetVS32(rd, SatAdd(cpu, cpu.GetVS32(rd, 0), NeonSHL(cpu, S32(cpu.GetVS16(rn, 0)) * S32(cpu.GetVS16(rm, index)), typename ARCH::S8(1), /* round */ false, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlal_shvhi(CodeType code, uint64_t addr)
{
	return new OpSqdmlal_shvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlal_v2dv2sv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlal\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 2, 2);
}}
template <	typename	ARCH>
void OpSqdmlal_v2dv2sv2s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatAdd(cpu, cpu.GetVS64(rd, idx), NeonSHL(cpu, DST(cpu.GetVS32(rn, idx)) * DST(cpu.GetVS32(rm, idx)), typename ARCH::S8(1), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlal_v2dv2sv2s(CodeType code, uint64_t addr)
{
	return new OpSqdmlal_v2dv2sv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlal_v2dv2svsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlal\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqdmlal_v2dv2svsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		DST element(cpu.GetVS32(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatAdd(cpu, cpu.GetVS64(rd, idx), NeonSHL(cpu, DST(cpu.GetVS32(rn, idx)) * element, typename ARCH::S8(1), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlal_v2dv2svsi(CodeType code, uint64_t addr)
{
	return new OpSqdmlal_v2dv2svsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlal_v4sv4hv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlal\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 4, 1);
}}
template <	typename	ARCH>
void OpSqdmlal_v4sv4hv4h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatAdd(cpu, cpu.GetVS32(rd, idx), NeonSHL(cpu, DST(cpu.GetVS16(rn, idx)) * DST(cpu.GetVS16(rm, idx)), typename ARCH::S8(1), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlal_v4sv4hv4h(CodeType code, uint64_t addr)
{
	return new OpSqdmlal_v4sv4hv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlal_v4sv4hvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlal\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqdmlal_v4sv4hvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		DST element(cpu.GetVS16(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatAdd(cpu, cpu.GetVS32(rd, idx), NeonSHL(cpu, DST(cpu.GetVS16(rn, idx)) * element, typename ARCH::S8(1), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlal_v4sv4hvhi(CodeType code, uint64_t addr)
{
	return new OpSqdmlal_v4sv4hvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlsl2_v2dv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlsl2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpSqdmlsl2_v2dv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatSub(cpu, cpu.GetVS64(rd, idx), NeonSHL(cpu, DST(cpu.GetVS32(rn, elements + idx)) * DST(cpu.GetVS32(rm, elements + idx)), typename ARCH::S8(1), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlsl2_v2dv4sv4s(CodeType code, uint64_t addr)
{
	return new OpSqdmlsl2_v2dv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlsl2_v2dv4svsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlsl2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqdmlsl2_v2dv4svsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		DST element(cpu.GetVS32(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatSub(cpu, cpu.GetVS64(rd, idx), NeonSHL(cpu, DST(cpu.GetVS32(rn, elements + idx)) * element, typename ARCH::S8(1), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlsl2_v2dv4svsi(CodeType code, uint64_t addr)
{
	return new OpSqdmlsl2_v2dv4svsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlsl2_v4sv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlsl2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpSqdmlsl2_v4sv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatSub(cpu, cpu.GetVS32(rd, idx), NeonSHL(cpu, DST(cpu.GetVS16(rn, elements + idx)) * DST(cpu.GetVS16(rm, elements + idx)), typename ARCH::S8(1), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlsl2_v4sv8hv8h(CodeType code, uint64_t addr)
{
	return new OpSqdmlsl2_v4sv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlsl2_v4sv8hvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlsl2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqdmlsl2_v4sv8hvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		DST element(cpu.GetVS16(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatSub(cpu, cpu.GetVS32(rd, idx), NeonSHL(cpu, DST(cpu.GetVS16(rn, elements + idx)) * element, typename ARCH::S8(1), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlsl2_v4sv8hvhi(CodeType code, uint64_t addr)
{
	return new OpSqdmlsl2_v4sv8hvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlsl_dss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlsl\t" << DisasmD(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}
template <	typename	ARCH>
void OpSqdmlsl_dss<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		cpu.SetVS64(rd, SatSub(cpu, cpu.GetVS64(rd, 0), NeonSHL(cpu, S64(cpu.GetVS32(rn, 0)) * S64(cpu.GetVS32(rm, 0)), typename ARCH::S8(1), /* round */ false, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlsl_dss(CodeType code, uint64_t addr)
{
	return new OpSqdmlsl_dss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlsl_dsvsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlsl\t" << DisasmD(rd) << ", " << DisasmS(rn) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqdmlsl_dsvsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		cpu.SetVS64(rd, SatSub(cpu, cpu.GetVS64(rd, 0), NeonSHL(cpu, S64(cpu.GetVS32(rn, 0)) * S64(cpu.GetVS32(rm, index)), typename ARCH::S8(1), /* round */ false, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlsl_dsvsi(CodeType code, uint64_t addr)
{
	return new OpSqdmlsl_dsvsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlsl_shh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlsl\t" << DisasmS(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}
template <	typename	ARCH>
void OpSqdmlsl_shh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		cpu.SetVS32(rd, SatSub(cpu, cpu.GetVS32(rd, 0), NeonSHL(cpu, S32(cpu.GetVS16(rn, 0)) * S32(cpu.GetVS16(rm, 0)), typename ARCH::S8(1), /* round */ false, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlsl_shh(CodeType code, uint64_t addr)
{
	return new OpSqdmlsl_shh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlsl_shvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlsl\t" << DisasmS(rd) << ", " << DisasmH(rn) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqdmlsl_shvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		cpu.SetVS32(rd, SatSub(cpu, cpu.GetVS32(rd, 0), NeonSHL(cpu, S32(cpu.GetVS16(rn, 0)) * S32(cpu.GetVS16(rm, index)), typename ARCH::S8(1), /* round */ false, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlsl_shvhi(CodeType code, uint64_t addr)
{
	return new OpSqdmlsl_shvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlsl_v2dv2sv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlsl\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 2, 2);
}}
template <	typename	ARCH>
void OpSqdmlsl_v2dv2sv2s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatSub(cpu, cpu.GetVS64(rd, idx), NeonSHL(cpu, DST(cpu.GetVS32(rn, idx)) * DST(cpu.GetVS32(rm, idx)), typename ARCH::S8(1), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlsl_v2dv2sv2s(CodeType code, uint64_t addr)
{
	return new OpSqdmlsl_v2dv2sv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlsl_v2dv2svsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlsl\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqdmlsl_v2dv2svsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		DST element(cpu.GetVS32(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatSub(cpu, cpu.GetVS64(rd, idx), NeonSHL(cpu, DST(cpu.GetVS32(rn, idx)) * element, typename ARCH::S8(1), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlsl_v2dv2svsi(CodeType code, uint64_t addr)
{
	return new OpSqdmlsl_v2dv2svsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlsl_v4sv4hv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlsl\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 4, 1);
}}
template <	typename	ARCH>
void OpSqdmlsl_v4sv4hv4h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatSub(cpu, cpu.GetVS32(rd, idx), NeonSHL(cpu, DST(cpu.GetVS16(rn, idx)) * DST(cpu.GetVS16(rm, idx)), typename ARCH::S8(1), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlsl_v4sv4hv4h(CodeType code, uint64_t addr)
{
	return new OpSqdmlsl_v4sv4hv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmlsl_v4sv4hvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmlsl\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqdmlsl_v4sv4hvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		DST element(cpu.GetVS16(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatSub(cpu, cpu.GetVS32(rd, idx), NeonSHL(cpu, DST(cpu.GetVS16(rn, idx)) * element, typename ARCH::S8(1), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmlsl_v4sv4hvhi(CodeType code, uint64_t addr)
{
	return new OpSqdmlsl_v4sv4hvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmulh_hhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmulh\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}
template <	typename	ARCH>
void OpSqdmulh_hhh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S32 S32;
		cpu.SetVS16(rd, SatNarrow<S16>(cpu, NeonSHL(cpu, S32(cpu.GetVS16(rm, 0)) * S32(cpu.GetVS16(rn, 0)), typename ARCH::S8(-15), /* round */ false, /* sat */ false)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmulh_hhh(CodeType code, uint64_t addr)
{
	return new OpSqdmulh_hhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmulh_hhvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmulh\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqdmulh_hhvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S16 S16;
		cpu.SetVS16(rd, SatNarrow<S16>(cpu, NeonSHL(cpu, S32(cpu.GetVS16(rn, 0)) * S32(cpu.GetVS16(rm, index)), typename ARCH::S8(-15), /* round */ false, /* sat */ false)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmulh_hhvhi(CodeType code, uint64_t addr)
{
	return new OpSqdmulh_hhvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmulh_sss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmulh\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}
template <	typename	ARCH>
void OpSqdmulh_sss<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		cpu.SetVS32(rd, SatNarrow<S32>(cpu, NeonSHL(cpu, S64(cpu.GetVS32(rm, 0)) * S64(cpu.GetVS32(rn, 0)), typename ARCH::S8(-31), /* round */ false, /* sat */ false)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmulh_sss(CodeType code, uint64_t addr)
{
	return new OpSqdmulh_sss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmulh_ssvsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmulh\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqdmulh_ssvsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::S32 S32;
		cpu.SetVS32(rd, SatNarrow<S32>(cpu, NeonSHL(cpu, S64(cpu.GetVS32(rn, 0)) * S64(cpu.GetVS32(rm, index)), typename ARCH::S8(-31), /* round */ false, /* sat */ false)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmulh_ssvsi(CodeType code, uint64_t addr)
{
	return new OpSqdmulh_ssvsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmull2_v2dv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmull2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpSqdmull2_v2dv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = NeonSHL(cpu, DST(cpu.GetVS32(rm, elements + idx)) * DST(cpu.GetVS32(rn, elements + idx)), typename ARCH::S8(1), /* round */ false, /* sat */ true);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmull2_v2dv4sv4s(CodeType code, uint64_t addr)
{
	return new OpSqdmull2_v2dv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmull2_v2dv4svsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmull2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqdmull2_v2dv4svsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		DST element(cpu.GetVS32(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = NeonSHL(cpu, DST(cpu.GetVS32(rn, elements + idx)) * element, typename ARCH::S8(1), /* round */ false, /* sat */ true);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmull2_v2dv4svsi(CodeType code, uint64_t addr)
{
	return new OpSqdmull2_v2dv4svsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmull2_v4sv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmull2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpSqdmull2_v4sv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = NeonSHL(cpu, DST(cpu.GetVS16(rm, elements + idx)) * DST(cpu.GetVS16(rn, elements + idx)), typename ARCH::S8(1), /* round */ false, /* sat */ true);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmull2_v4sv8hv8h(CodeType code, uint64_t addr)
{
	return new OpSqdmull2_v4sv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmull2_v4sv8hvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmull2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqdmull2_v4sv8hvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		DST element(cpu.GetVS16(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = NeonSHL(cpu, DST(cpu.GetVS16(rn, elements + idx)) * element, typename ARCH::S8(1), /* round */ false, /* sat */ true);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmull2_v4sv8hvhi(CodeType code, uint64_t addr)
{
	return new OpSqdmull2_v4sv8hvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmull_dss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmull\t" << DisasmD(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}
template <	typename	ARCH>
void OpSqdmull_dss<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		cpu.SetVS64(rd, NeonSHL(cpu, S64(cpu.GetVS32(rn, 0)) * S64(cpu.GetVS32(rm, 0)), typename ARCH::S8(1), /* round */ false, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmull_dss(CodeType code, uint64_t addr)
{
	return new OpSqdmull_dss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmull_dsvsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmull\t" << DisasmD(rd) << ", " << DisasmS(rn) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqdmull_dsvsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		cpu.SetVS64(rd, NeonSHL(cpu, S64(cpu.GetVS32(rn, 0)) * S64(cpu.GetVS32(rm, index)), typename ARCH::S8(1), /* round */ false, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmull_dsvsi(CodeType code, uint64_t addr)
{
	return new OpSqdmull_dsvsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmull_shh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmull\t" << DisasmS(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}
template <	typename	ARCH>
void OpSqdmull_shh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		cpu.SetVS32(rd, NeonSHL(cpu, S32(cpu.GetVS16(rn, 0)) * S32(cpu.GetVS16(rm, 0)), typename ARCH::S8(1), /* round */ false, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmull_shh(CodeType code, uint64_t addr)
{
	return new OpSqdmull_shh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmull_shvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmull\t" << DisasmS(rd) << ", " << DisasmH(rn) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqdmull_shvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		cpu.SetVS32(rd, NeonSHL(cpu, S32(cpu.GetVS16(rn, 0)) * S32(cpu.GetVS16(rm, index)), typename ARCH::S8(1), /* round */ false, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmull_shvhi(CodeType code, uint64_t addr)
{
	return new OpSqdmull_shvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmull_v2dv2sv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmull\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 2, 2);
}}
template <	typename	ARCH>
void OpSqdmull_v2dv2sv2s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = NeonSHL(cpu, DST(cpu.GetVS32(rm, idx)) * DST(cpu.GetVS32(rn, idx)), typename ARCH::S8(1), /* round */ false, /* sat */ true);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmull_v2dv2sv2s(CodeType code, uint64_t addr)
{
	return new OpSqdmull_v2dv2sv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmull_v2dv2svsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmull\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqdmull_v2dv2svsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		DST element(cpu.GetVS32(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = NeonSHL(cpu, DST(cpu.GetVS32(rn, idx)) * element, typename ARCH::S8(1), /* round */ false, /* sat */ true);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmull_v2dv2svsi(CodeType code, uint64_t addr)
{
	return new OpSqdmull_v2dv2svsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmull_v4sv4hv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmull\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 4, 1);
}}
template <	typename	ARCH>
void OpSqdmull_v4sv4hv4h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = NeonSHL(cpu, DST(cpu.GetVS16(rm, idx)) * DST(cpu.GetVS16(rn, idx)), typename ARCH::S8(1), /* round */ false, /* sat */ true);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmull_v4sv4hv4h(CodeType code, uint64_t addr)
{
	return new OpSqdmull_v4sv4hv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmull_v4sv4hvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmull\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqdmull_v4sv4hvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		DST element(cpu.GetVS16(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = NeonSHL(cpu, DST(cpu.GetVS16(rn, idx)) * element, typename ARCH::S8(1), /* round */ false, /* sat */ true);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmull_v4sv4hvhi(CodeType code, uint64_t addr)
{
	return new OpSqdmull_v4sv4hvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqneg_bb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqneg\t" << DisasmB(rd) << ", " << DisasmB(rn);
}}
template <	typename	ARCH>
void OpSqneg_bb<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS8(rd, Neg(cpu, cpu.GetVS8(rn, 0), /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqneg_bb(CodeType code, uint64_t addr)
{
	return new OpSqneg_bb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqneg_dd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqneg\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}
template <	typename	ARCH>
void OpSqneg_dd<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS64(rd, Neg(cpu, cpu.GetVS64(rn, 0), /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqneg_dd(CodeType code, uint64_t addr)
{
	return new OpSqneg_dd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqneg_hh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqneg\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}
template <	typename	ARCH>
void OpSqneg_hh<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS16(rd, Neg(cpu, cpu.GetVS16(rn, 0), /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqneg_hh(CodeType code, uint64_t addr)
{
	return new OpSqneg_hh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqneg_ss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqneg\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}
template <	typename	ARCH>
void OpSqneg_ss<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS32(rd, Neg(cpu, cpu.GetVS32(rn, 0), /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqneg_ss(CodeType code, uint64_t addr)
{
	return new OpSqneg_ss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqneg_v2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqneg\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3);
}}
template <	typename	ARCH>
void OpSqneg_v2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 2;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVS64(rd, e, Neg(cpu, cpu.GetVS64(rn, e), /* sat */ true));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqneg_v2dv2d(CodeType code, uint64_t addr)
{
	return new OpSqneg_v2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrdmulh_hhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrdmulh\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}
template <	typename	ARCH>
void OpSqrdmulh_hhh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S32 S32;
		cpu.SetVS16(rd, SatNarrow<S16>(cpu, NeonSHL(cpu, S32(cpu.GetVS16(rm, 0)) * S32(cpu.GetVS16(rn, 0)), typename ARCH::S8(-15), /* round */ true, /* sat */ false)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrdmulh_hhh(CodeType code, uint64_t addr)
{
	return new OpSqrdmulh_hhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrdmulh_hhvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrdmulh\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqrdmulh_hhvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S16 S16;
		cpu.SetVS16(rd, SatNarrow<S16>(cpu, NeonSHL(cpu, S32(cpu.GetVS16(rn, 0)) * S32(cpu.GetVS16(rm, index)), typename ARCH::S8(-15), /* round */ true, /* sat */ false)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrdmulh_hhvhi(CodeType code, uint64_t addr)
{
	return new OpSqrdmulh_hhvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrdmulh_sss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrdmulh\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}
template <	typename	ARCH>
void OpSqrdmulh_sss<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		cpu.SetVS32(rd, SatNarrow<S32>(cpu, NeonSHL(cpu, S64(cpu.GetVS32(rm, 0)) * S64(cpu.GetVS32(rn, 0)), typename ARCH::S8(-31), /* round */ true, /* sat */ false)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrdmulh_sss(CodeType code, uint64_t addr)
{
	return new OpSqrdmulh_sss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrdmulh_ssvsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrdmulh\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqrdmulh_ssvsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::S32 S32;
		cpu.SetVS32(rd, SatNarrow<S32>(cpu, NeonSHL(cpu, S64(cpu.GetVS32(rn, 0)) * S64(cpu.GetVS32(rm, index)), typename ARCH::S8(-31), /* round */ true, /* sat */ false)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrdmulh_ssvsi(CodeType code, uint64_t addr)
{
	return new OpSqrdmulh_ssvsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshl_bbb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshl\t" << DisasmB(rd) << ", " << DisasmB(rn) << ", " << DisasmB(rm);
}}
template <	typename	ARCH>
void OpSqrshl_bbb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		cpu.SetVS8(rd, NeonSHL(cpu, cpu.GetVS8(rn, 0), S8(cpu.GetVS8(rm, 0)), /* round */ true, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshl_bbb(CodeType code, uint64_t addr)
{
	return new OpSqrshl_bbb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshl_ddd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshl\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}
template <	typename	ARCH>
void OpSqrshl_ddd<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		cpu.SetVS64(rd, NeonSHL(cpu, cpu.GetVS64(rn, 0), S8(cpu.GetVS64(rm, 0)), /* round */ true, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshl_ddd(CodeType code, uint64_t addr)
{
	return new OpSqrshl_ddd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshl_hhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshl\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}
template <	typename	ARCH>
void OpSqrshl_hhh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		cpu.SetVS16(rd, NeonSHL(cpu, cpu.GetVS16(rn, 0), S8(cpu.GetVS8(rm, 0)), /* round */ true, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshl_hhh(CodeType code, uint64_t addr)
{
	return new OpSqrshl_hhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshl_sss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshl\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}
template <	typename	ARCH>
void OpSqrshl_sss<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		cpu.SetVS32(rd, NeonSHL(cpu, cpu.GetVS32(rn, 0), S8(cpu.GetVS8(rm, 0)), /* round */ true, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshl_sss(CodeType code, uint64_t addr)
{
	return new OpSqrshl_sss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshl_v2dv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshl\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpSqrshl_v2dv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		for (unsigned idx = 0, end = 2; idx < end; ++idx)
		{
			cpu.SetVS64(rd, idx, NeonSHL(cpu, cpu.GetVS64(rn, idx), S8(cpu.GetVS64(rm, idx)), /* round */ true, /* sat */ true));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshl_v2dv2dv2d(CodeType code, uint64_t addr)
{
	return new OpSqrshl_v2dv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshrn2_v16b8hi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshrn2\t" << DisasmTV(rd, 16, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqrshrn2_v16b8hi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS16(rn, idx), typename ARCH::S8(-shift), /* round */ true, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS8(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshrn2_v16b8hi(CodeType code, uint64_t addr)
{
	return new OpSqrshrn2_v16b8hi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshrn2_v4s2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshrn2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqrshrn2_v4s2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS64(rn, idx), typename ARCH::S8(-shift), /* round */ true, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshrn2_v4s2di(CodeType code, uint64_t addr)
{
	return new OpSqrshrn2_v4s2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshrn2_v8h4si<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshrn2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqrshrn2_v8h4si<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS32(rn, idx), typename ARCH::S8(-shift), /* round */ true, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshrn2_v8h4si(CodeType code, uint64_t addr)
{
	return new OpSqrshrn2_v8h4si<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshrn_bhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshrn\t" << DisasmB(rd) << ", " << DisasmH(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqrshrn_bhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS8(rd, SatNarrow<typename ARCH::S8>(cpu, NeonSHL(cpu, cpu.GetVS16(rn, 0), typename ARCH::S8(-shift), /* round */ true, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshrn_bhi(CodeType code, uint64_t addr)
{
	return new OpSqrshrn_bhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshrn_hsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshrn\t" << DisasmH(rd) << ", " << DisasmS(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqrshrn_hsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS16(rd, SatNarrow<typename ARCH::S16>(cpu, NeonSHL(cpu, cpu.GetVS32(rn, 0), typename ARCH::S8(-shift), /* round */ true, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshrn_hsi(CodeType code, uint64_t addr)
{
	return new OpSqrshrn_hsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshrn_sdi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshrn\t" << DisasmS(rd) << ", " << DisasmD(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqrshrn_sdi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS32(rd, SatNarrow<typename ARCH::S32>(cpu, NeonSHL(cpu, cpu.GetVS64(rn, 0), typename ARCH::S8(-shift), /* round */ true, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshrn_sdi(CodeType code, uint64_t addr)
{
	return new OpSqrshrn_sdi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshrn_v2s2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshrn\t" << DisasmTV(rd, 2, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqrshrn_v2s2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS64(rn, idx), typename ARCH::S8(-shift), /* round */ true, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshrn_v2s2di(CodeType code, uint64_t addr)
{
	return new OpSqrshrn_v2s2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshrn_v4h4si<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshrn\t" << DisasmTV(rd, 4, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqrshrn_v4h4si<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS32(rn, idx), typename ARCH::S8(-shift), /* round */ true, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshrn_v4h4si(CodeType code, uint64_t addr)
{
	return new OpSqrshrn_v4h4si<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshrn_v8b8hi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshrn\t" << DisasmTV(rd, 8, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqrshrn_v8b8hi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS16(rn, idx), typename ARCH::S8(-shift), /* round */ true, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS8(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshrn_v8b8hi(CodeType code, uint64_t addr)
{
	return new OpSqrshrn_v8b8hi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshrun2_v16b8hi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshrun2\t" << DisasmTV(rd, 16, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqrshrun2_v16b8hi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS16(rn, idx), typename ARCH::S8(-shift), /* round */ true, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshrun2_v16b8hi(CodeType code, uint64_t addr)
{
	return new OpSqrshrun2_v16b8hi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshrun2_v4s2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshrun2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqrshrun2_v4s2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS64(rn, idx), typename ARCH::S8(-shift), /* round */ true, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshrun2_v4s2di(CodeType code, uint64_t addr)
{
	return new OpSqrshrun2_v4s2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshrun2_v8h4si<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshrun2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqrshrun2_v8h4si<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS32(rn, idx), typename ARCH::S8(-shift), /* round */ true, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshrun2_v8h4si(CodeType code, uint64_t addr)
{
	return new OpSqrshrun2_v8h4si<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshrun_bhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshrun\t" << DisasmB(rd) << ", " << DisasmH(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqrshrun_bhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU8(rd, SatNarrow<typename ARCH::U8>(cpu, NeonSHL(cpu, cpu.GetVS16(rn, 0), typename ARCH::S8(-shift), /* round */ true, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshrun_bhi(CodeType code, uint64_t addr)
{
	return new OpSqrshrun_bhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshrun_hsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshrun\t" << DisasmH(rd) << ", " << DisasmS(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqrshrun_hsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU16(rd, SatNarrow<typename ARCH::U16>(cpu, NeonSHL(cpu, cpu.GetVS32(rn, 0), typename ARCH::S8(-shift), /* round */ true, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshrun_hsi(CodeType code, uint64_t addr)
{
	return new OpSqrshrun_hsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshrun_sdi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshrun\t" << DisasmS(rd) << ", " << DisasmD(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqrshrun_sdi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU32(rd, SatNarrow<typename ARCH::U32>(cpu, NeonSHL(cpu, cpu.GetVS64(rn, 0), typename ARCH::S8(-shift), /* round */ true, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshrun_sdi(CodeType code, uint64_t addr)
{
	return new OpSqrshrun_sdi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshrun_v2s2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshrun\t" << DisasmTV(rd, 2, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqrshrun_v2s2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS64(rn, idx), typename ARCH::S8(-shift), /* round */ true, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshrun_v2s2di(CodeType code, uint64_t addr)
{
	return new OpSqrshrun_v2s2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshrun_v4h4si<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshrun\t" << DisasmTV(rd, 4, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqrshrun_v4h4si<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS32(rn, idx), typename ARCH::S8(-shift), /* round */ true, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshrun_v4h4si(CodeType code, uint64_t addr)
{
	return new OpSqrshrun_v4h4si<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshrun_v8b8hi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshrun\t" << DisasmTV(rd, 8, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqrshrun_v8b8hi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS16(rn, idx), typename ARCH::S8(-shift), /* round */ true, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshrun_v8b8hi(CodeType code, uint64_t addr)
{
	return new OpSqrshrun_v8b8hi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshl_bbb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshl\t" << DisasmB(rd) << ", " << DisasmB(rn) << ", " << DisasmB(rm);
}}
template <	typename	ARCH>
void OpSqshl_bbb<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS8(rd, NeonSHL(cpu, cpu.GetVS8(rn, 0), typename ARCH::S8(cpu.GetVU8(rm, 0)), /* round */ false, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshl_bbb(CodeType code, uint64_t addr)
{
	return new OpSqshl_bbb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshl_bbi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshl\t" << DisasmB(rd) << ", " << DisasmB(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshl_bbi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS8(rd, NeonSHL(cpu, cpu.GetVS8(rn, 0), typename ARCH::S8(shift), /* round */ false, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshl_bbi(CodeType code, uint64_t addr)
{
	return new OpSqshl_bbi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshl_ddd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshl\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}
template <	typename	ARCH>
void OpSqshl_ddd<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS64(rd, NeonSHL(cpu, cpu.GetVS64(rn, 0), typename ARCH::S8(cpu.GetVU8(rm, 0)), /* round */ false, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshl_ddd(CodeType code, uint64_t addr)
{
	return new OpSqshl_ddd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshl_ddi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshl\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshl_ddi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS64(rd, NeonSHL(cpu, cpu.GetVS64(rn, 0), typename ARCH::S8(shift), /* round */ false, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshl_ddi(CodeType code, uint64_t addr)
{
	return new OpSqshl_ddi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshl_hhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshl\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}
template <	typename	ARCH>
void OpSqshl_hhh<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS16(rd, NeonSHL(cpu, cpu.GetVS16(rn, 0), typename ARCH::S8(cpu.GetVU8(rm, 0)), /* round */ false, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshl_hhh(CodeType code, uint64_t addr)
{
	return new OpSqshl_hhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshl_hhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshl\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshl_hhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS16(rd, NeonSHL(cpu, cpu.GetVS16(rn, 0), typename ARCH::S8(shift), /* round */ false, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshl_hhi(CodeType code, uint64_t addr)
{
	return new OpSqshl_hhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshl_ssi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshl\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshl_ssi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS32(rd, NeonSHL(cpu, cpu.GetVS32(rn, 0), typename ARCH::S8(shift), /* round */ false, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshl_ssi(CodeType code, uint64_t addr)
{
	return new OpSqshl_ssi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshl_sss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshl\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}
template <	typename	ARCH>
void OpSqshl_sss<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS32(rd, NeonSHL(cpu, cpu.GetVS32(rn, 0), typename ARCH::S8(cpu.GetVU8(rm, 0)), /* round */ false, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshl_sss(CodeType code, uint64_t addr)
{
	return new OpSqshl_sss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshl_v2d2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshl\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpSqshl_v2d2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		for (unsigned idx = 0, end = 2; idx < end; ++idx)
		{
			cpu.SetVS64(rd, idx, NeonSHL(cpu, cpu.GetVS64(rn, idx), S8(imm), /* round */ false, /* sat */ true));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshl_v2d2di(CodeType code, uint64_t addr)
{
	return new OpSqshl_v2d2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshl_v2dv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshl\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpSqshl_v2dv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		for (unsigned idx = 0, end = 2; idx < end; ++idx)
		{
			cpu.SetVS64(rd, idx, NeonSHL(cpu, cpu.GetVS64(rn, idx), S8(cpu.GetVS64(rm, idx)), /* round */ false, /* sat */ true));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshl_v2dv2dv2d(CodeType code, uint64_t addr)
{
	return new OpSqshl_v2dv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshlu_bbi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshlu\t" << DisasmB(rd) << ", " << DisasmB(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshlu_bbi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::U8 U8;

		S8 op = cpu.GetVS8(rn, 0);
		U8 res(0);
		if (cpu.Test(op < S8(0)))
		{
			cpu.SetQC();
		}
		else
		{
			res = NeonSHL(cpu, U8(op), S8(shift), /* round */ false, /* sat */ true);
		}

		cpu.SetVU8(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshlu_bbi(CodeType code, uint64_t addr)
{
	return new OpSqshlu_bbi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshlu_ddi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshlu\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshlu_ddi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S8 S8;

		S64 op = cpu.GetVS64(rn, 0);
		U64 res(0);
		if (cpu.Test(op < S64(0)))
		{
			cpu.SetQC();
		}
		else
		{
			res = NeonSHL(cpu, U64(op), S8(shift), /* round */ false, /* sat */ true);
		}

		cpu.SetVU64(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshlu_ddi(CodeType code, uint64_t addr)
{
	return new OpSqshlu_ddi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshlu_hhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshlu\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshlu_hhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::S8 S8;

		S16 op = cpu.GetVS16(rn, 0);
		U16 res(0);
		if (cpu.Test(op < S16(0)))
		{
			cpu.SetQC();
		}
		else
		{
			res = NeonSHL(cpu, U16(op), S8(shift), /* round */ false, /* sat */ true);
		}

		cpu.SetVU16(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshlu_hhi(CodeType code, uint64_t addr)
{
	return new OpSqshlu_hhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshlu_ssi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshlu\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshlu_ssi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S8 S8;

		S32 op = cpu.GetVS32(rn, 0);
		U32 res(0);
		if (cpu.Test(op < S32(0)))
		{
			cpu.SetQC();
		}
		else
		{
			res = NeonSHL(cpu, U32(op), S8(shift), /* round */ false, /* sat */ true);
		}

		cpu.SetVU32(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshlu_ssi(CodeType code, uint64_t addr)
{
	return new OpSqshlu_ssi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshlu_v2d2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshlu\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshlu_v2d2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S8 S8;

		for (unsigned idx = 0, end = 2; idx < end; ++idx)
		{
			S64 op = cpu.GetVS64(rn, idx);
			U64 res(0);
			if (cpu.Test(op < S64(0)))
			{
				cpu.SetQC();
			}
			else
			{
				res = NeonSHL(cpu, U64(op), S8(shift), /* round */ false, /* sat */ true);
			}

			cpu.SetVU64(rd, idx, res);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshlu_v2d2di(CodeType code, uint64_t addr)
{
	return new OpSqshlu_v2d2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshrn2_v16b8hi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshrn2\t" << DisasmTV(rd, 16, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshrn2_v16b8hi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS16(rn, idx), typename ARCH::S8(-shift), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS8(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshrn2_v16b8hi(CodeType code, uint64_t addr)
{
	return new OpSqshrn2_v16b8hi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshrn2_v4s2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshrn2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshrn2_v4s2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS64(rn, idx), typename ARCH::S8(-shift), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshrn2_v4s2di(CodeType code, uint64_t addr)
{
	return new OpSqshrn2_v4s2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshrn2_v8h4si<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshrn2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshrn2_v8h4si<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS32(rn, idx), typename ARCH::S8(-shift), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshrn2_v8h4si(CodeType code, uint64_t addr)
{
	return new OpSqshrn2_v8h4si<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshrn_bhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshrn\t" << DisasmB(rd) << ", " << DisasmH(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshrn_bhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS8(rd, SatNarrow<typename ARCH::S8>(cpu, NeonSHL(cpu, cpu.GetVS16(rn, 0), typename ARCH::S8(-shift), /* round */ false, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshrn_bhi(CodeType code, uint64_t addr)
{
	return new OpSqshrn_bhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshrn_hsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshrn\t" << DisasmH(rd) << ", " << DisasmS(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshrn_hsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS16(rd, SatNarrow<typename ARCH::S16>(cpu, NeonSHL(cpu, cpu.GetVS32(rn, 0), typename ARCH::S8(-shift), /* round */ false, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshrn_hsi(CodeType code, uint64_t addr)
{
	return new OpSqshrn_hsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshrn_sdi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshrn\t" << DisasmS(rd) << ", " << DisasmD(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshrn_sdi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS32(rd, SatNarrow<typename ARCH::S32>(cpu, NeonSHL(cpu, cpu.GetVS64(rn, 0), typename ARCH::S8(-shift), /* round */ false, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshrn_sdi(CodeType code, uint64_t addr)
{
	return new OpSqshrn_sdi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshrn_v2s2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshrn\t" << DisasmTV(rd, 2, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshrn_v2s2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS64(rn, idx), typename ARCH::S8(-shift), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshrn_v2s2di(CodeType code, uint64_t addr)
{
	return new OpSqshrn_v2s2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshrn_v4h4si<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshrn\t" << DisasmTV(rd, 4, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshrn_v4h4si<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS32(rn, idx), typename ARCH::S8(-shift), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshrn_v4h4si(CodeType code, uint64_t addr)
{
	return new OpSqshrn_v4h4si<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshrn_v8b8hi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshrn\t" << DisasmTV(rd, 8, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshrn_v8b8hi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS16(rn, idx), typename ARCH::S8(-shift), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS8(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshrn_v8b8hi(CodeType code, uint64_t addr)
{
	return new OpSqshrn_v8b8hi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshrun2_v16b8hi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshrun2\t" << DisasmTV(rd, 16, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshrun2_v16b8hi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS16(rn, idx), typename ARCH::S8(-shift), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshrun2_v16b8hi(CodeType code, uint64_t addr)
{
	return new OpSqshrun2_v16b8hi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshrun2_v4s2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshrun2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshrun2_v4s2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS64(rn, idx), typename ARCH::S8(-shift), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshrun2_v4s2di(CodeType code, uint64_t addr)
{
	return new OpSqshrun2_v4s2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshrun2_v8h4si<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshrun2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshrun2_v8h4si<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS32(rn, idx), typename ARCH::S8(-shift), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshrun2_v8h4si(CodeType code, uint64_t addr)
{
	return new OpSqshrun2_v8h4si<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshrun_bhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshrun\t" << DisasmB(rd) << ", " << DisasmH(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshrun_bhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU8(rd, SatNarrow<typename ARCH::U8>(cpu, NeonSHL(cpu, cpu.GetVS16(rn, 0), typename ARCH::S8(-shift), /* round */ false, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshrun_bhi(CodeType code, uint64_t addr)
{
	return new OpSqshrun_bhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshrun_hsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshrun\t" << DisasmH(rd) << ", " << DisasmS(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshrun_hsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU16(rd, SatNarrow<typename ARCH::U16>(cpu, NeonSHL(cpu, cpu.GetVS32(rn, 0), typename ARCH::S8(-shift), /* round */ false, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshrun_hsi(CodeType code, uint64_t addr)
{
	return new OpSqshrun_hsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshrun_sdi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshrun\t" << DisasmS(rd) << ", " << DisasmD(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshrun_sdi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU32(rd, SatNarrow<typename ARCH::U32>(cpu, NeonSHL(cpu, cpu.GetVS64(rn, 0), typename ARCH::S8(-shift), /* round */ false, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshrun_sdi(CodeType code, uint64_t addr)
{
	return new OpSqshrun_sdi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshrun_v2s2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshrun\t" << DisasmTV(rd, 2, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshrun_v2s2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS64(rn, idx), typename ARCH::S8(-shift), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshrun_v2s2di(CodeType code, uint64_t addr)
{
	return new OpSqshrun_v2s2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshrun_v4h4si<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshrun\t" << DisasmTV(rd, 4, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshrun_v4h4si<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS32(rn, idx), typename ARCH::S8(-shift), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshrun_v4h4si(CodeType code, uint64_t addr)
{
	return new OpSqshrun_v4h4si<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshrun_v8b8hi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshrun\t" << DisasmTV(rd, 8, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshrun_v8b8hi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVS16(rn, idx), typename ARCH::S8(-shift), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshrun_v8b8hi(CodeType code, uint64_t addr)
{
	return new OpSqshrun_v8b8hi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqsub_bbb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqsub\t" << DisasmB(rd) << ", " << DisasmB(rn) << ", " << DisasmB(rm);
}}
template <	typename	ARCH>
void OpSqsub_bbb<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS8(rd, SatSub(cpu, cpu.GetVS8(rn, 0), cpu.GetVS8(rm, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqsub_bbb(CodeType code, uint64_t addr)
{
	return new OpSqsub_bbb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqsub_ddd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqsub\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}
template <	typename	ARCH>
void OpSqsub_ddd<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS64(rd, SatSub(cpu, cpu.GetVS64(rn, 0), cpu.GetVS64(rm, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqsub_ddd(CodeType code, uint64_t addr)
{
	return new OpSqsub_ddd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqsub_hhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqsub\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}
template <	typename	ARCH>
void OpSqsub_hhh<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS16(rd, SatSub(cpu, cpu.GetVS16(rn, 0), cpu.GetVS16(rm, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqsub_hhh(CodeType code, uint64_t addr)
{
	return new OpSqsub_hhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqsub_sss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqsub\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}
template <	typename	ARCH>
void OpSqsub_sss<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS32(rd, SatSub(cpu, cpu.GetVS32(rn, 0), cpu.GetVS32(rm, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqsub_sss(CodeType code, uint64_t addr)
{
	return new OpSqsub_sss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqsub_v2dv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqsub\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpSqsub_v2dv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0; idx < 2; ++idx)
		{
			cpu.SetVS64(rd, idx, SatSub(cpu, cpu.GetVS64(rn, idx), cpu.GetVS64(rm, idx)));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqsub_v2dv2dv2d(CodeType code, uint64_t addr)
{
	return new OpSqsub_v2dv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqxtn2_v16b8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqxtn2\t" << DisasmTV(rd, 16, 0) << ", " << DisasmTV(rn, 8, 1);
}}
template <	typename	ARCH>
void OpSqxtn2_v16b8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, cpu.GetVS16(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS8(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqxtn2_v16b8h(CodeType code, uint64_t addr)
{
	return new OpSqxtn2_v16b8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqxtn2_v4s2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqxtn2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 2, 3);
}}
template <	typename	ARCH>
void OpSqxtn2_v4s2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu , cpu.GetVS64(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqxtn2_v4s2d(CodeType code, uint64_t addr)
{
	return new OpSqxtn2_v4s2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqxtn2_v8h4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqxtn2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 4, 2);
}}
template <	typename	ARCH>
void OpSqxtn2_v8h4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, cpu.GetVS32(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqxtn2_v8h4s(CodeType code, uint64_t addr)
{
	return new OpSqxtn2_v8h4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqxtn_bh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqxtn\t" << DisasmB(rd) << ", " << DisasmH(rn);
}}
template <	typename	ARCH>
void OpSqxtn_bh<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS8(rd, SatNarrow<typename ARCH::S8>(cpu, cpu.GetVS16(rn, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqxtn_bh(CodeType code, uint64_t addr)
{
	return new OpSqxtn_bh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqxtn_hs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqxtn\t" << DisasmH(rd) << ", " << DisasmS(rn);
}}
template <	typename	ARCH>
void OpSqxtn_hs<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS16(rd, SatNarrow<typename ARCH::S16>(cpu, cpu.GetVS32(rn, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqxtn_hs(CodeType code, uint64_t addr)
{
	return new OpSqxtn_hs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqxtn_sd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqxtn\t" << DisasmS(rd) << ", " << DisasmD(rn);
}}
template <	typename	ARCH>
void OpSqxtn_sd<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS32(rd, SatNarrow<typename ARCH::S32>(cpu, cpu.GetVS64(rn, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqxtn_sd(CodeType code, uint64_t addr)
{
	return new OpSqxtn_sd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqxtn_v2s2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqxtn\t" << DisasmTV(rd, 2, 2) << ", " << DisasmTV(rn, 2, 3);
}}
template <	typename	ARCH>
void OpSqxtn_v2s2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, cpu.GetVS64(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqxtn_v2s2d(CodeType code, uint64_t addr)
{
	return new OpSqxtn_v2s2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqxtn_v4h4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqxtn\t" << DisasmTV(rd, 4, 1) << ", " << DisasmTV(rn, 4, 2);
}}
template <	typename	ARCH>
void OpSqxtn_v4h4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, cpu.GetVS32(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqxtn_v4h4s(CodeType code, uint64_t addr)
{
	return new OpSqxtn_v4h4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqxtn_v8b8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqxtn\t" << DisasmTV(rd, 8, 0) << ", " << DisasmTV(rn, 8, 1);
}}
template <	typename	ARCH>
void OpSqxtn_v8b8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, cpu.GetVS16(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS8(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqxtn_v8b8h(CodeType code, uint64_t addr)
{
	return new OpSqxtn_v8b8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqxtun2_v16b8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqxtun2\t" << DisasmTV(rd, 16, 0) << ", " << DisasmTV(rn, 8, 1);
}}
template <	typename	ARCH>
void OpSqxtun2_v16b8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, cpu.GetVS16(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqxtun2_v16b8h(CodeType code, uint64_t addr)
{
	return new OpSqxtun2_v16b8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqxtun2_v4s2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqxtun2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 2, 3);
}}
template <	typename	ARCH>
void OpSqxtun2_v4s2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu , cpu.GetVS64(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqxtun2_v4s2d(CodeType code, uint64_t addr)
{
	return new OpSqxtun2_v4s2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqxtun2_v8h4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqxtun2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 4, 2);
}}
template <	typename	ARCH>
void OpSqxtun2_v8h4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, cpu.GetVS32(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqxtun2_v8h4s(CodeType code, uint64_t addr)
{
	return new OpSqxtun2_v8h4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqxtun_bh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqxtun\t" << DisasmB(rd) << ", " << DisasmH(rn);
}}
template <	typename	ARCH>
void OpSqxtun_bh<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU8(rd, SatNarrow<typename ARCH::U8>(cpu, cpu.GetVS16(rn, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqxtun_bh(CodeType code, uint64_t addr)
{
	return new OpSqxtun_bh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqxtun_hs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqxtun\t" << DisasmH(rd) << ", " << DisasmS(rn);
}}
template <	typename	ARCH>
void OpSqxtun_hs<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU16(rd, SatNarrow<typename ARCH::U16>(cpu, cpu.GetVS32(rn, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqxtun_hs(CodeType code, uint64_t addr)
{
	return new OpSqxtun_hs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqxtun_sd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqxtun\t" << DisasmS(rd) << ", " << DisasmD(rn);
}}
template <	typename	ARCH>
void OpSqxtun_sd<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU32(rd, SatNarrow<typename ARCH::U32>(cpu, cpu.GetVS64(rn, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqxtun_sd(CodeType code, uint64_t addr)
{
	return new OpSqxtun_sd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqxtun_v2s2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqxtun\t" << DisasmTV(rd, 2, 2) << ", " << DisasmTV(rn, 2, 3);
}}
template <	typename	ARCH>
void OpSqxtun_v2s2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, cpu.GetVS64(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqxtun_v2s2d(CodeType code, uint64_t addr)
{
	return new OpSqxtun_v2s2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqxtun_v4h4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqxtun\t" << DisasmTV(rd, 4, 1) << ", " << DisasmTV(rn, 4, 2);
}}
template <	typename	ARCH>
void OpSqxtun_v4h4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, cpu.GetVS32(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqxtun_v4h4s(CodeType code, uint64_t addr)
{
	return new OpSqxtun_v4h4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqxtun_v8b8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqxtun\t" << DisasmTV(rd, 8, 0) << ", " << DisasmTV(rn, 8, 1);
}}
template <	typename	ARCH>
void OpSqxtun_v8b8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, cpu.GetVS16(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqxtun_v8b8h(CodeType code, uint64_t addr)
{
	return new OpSqxtun_v8b8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSri_ddi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sri\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSri_ddi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S8 S8;

		U64 mask(~NeonSHL(cpu, U64(~U64(0)), -S8(shift)));
		U64 op1(cpu.GetVU64(rd, 0)), op2(cpu.GetVU64(rn, 0)), res(U64(op1 & mask) | NeonSHL(cpu, op2, -S8(shift)));
		cpu.SetVU64(rd, res);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSri_ddi(CodeType code, uint64_t addr)
{
	return new OpSri_ddi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSri_v2d2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sri\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSri_v2d2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S8 S8;

		unsigned const elements = 2;
		U64 mask(~NeonSHL(cpu, ~U64(0), -S8(shift)));

		for (unsigned idx = 0; idx < elements; ++idx)
		{
			U64 op1(cpu.GetVU64(rd, idx)), op2(cpu.GetVU64(rn, idx)), res((op1 & mask) | NeonSHL(cpu, op2, -S8(shift)));
			cpu.SetVU64(rd, idx, res);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSri_v2d2di(CodeType code, uint64_t addr)
{
	return new OpSri_v2d2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSrshl_ddd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "srshl\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}
template <	typename	ARCH>
void OpSrshl_ddd<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		cpu.SetVS64(rd, NeonSHL(cpu, cpu.GetVS64(rn, 0), S8(cpu.GetVS64(rm, 0)), /* round */ true, /* sat */ false));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSrshl_ddd(CodeType code, uint64_t addr)
{
	return new OpSrshl_ddd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSrshl_v2dv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "srshl\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpSrshl_v2dv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		for (unsigned idx = 0, end = 2; idx < end; ++idx)
		{
			cpu.SetVS64(rd, idx, NeonSHL(cpu, cpu.GetVS64(rn, idx), S8(cpu.GetVS64(rm, idx)), /* round */ true, /* sat */ false));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSrshl_v2dv2dv2d(CodeType code, uint64_t addr)
{
	return new OpSrshl_v2dv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSrshr_ddi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "srshr\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSrshr_ddi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS64(rd, NeonSHL(cpu, cpu.GetVS64(rn, 0), typename ARCH::S8(-shift), /* round */ true, /* sat */ false));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSrshr_ddi(CodeType code, uint64_t addr)
{
	return new OpSrshr_ddi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSrsra_ddi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "srsra\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSrsra_ddi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS64(rd, cpu.GetVS64(rd, 0) + NeonSHL(cpu, cpu.GetVS64(rn, 0), typename ARCH::S8(-shift), /* round */ true, /* sat */ false));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSrsra_ddi(CodeType code, uint64_t addr)
{
	return new OpSrsra_ddi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSshl_ddd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sshl\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}
template <	typename	ARCH>
void OpSshl_ddd<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS64(rd, NeonSHL(cpu, cpu.GetVS64(rn, 0), typename ARCH::S8(cpu.GetVU8(rm, 0))));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSshl_ddd(CodeType code, uint64_t addr)
{
	return new OpSshl_ddd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSshl_v2dv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sshl\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpSshl_v2dv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 2;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVS64(rd, e, NeonSHL(cpu, cpu.GetVS64(rn, e), typename ARCH::S8(cpu.GetVS64(rm, e))));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSshl_v2dv2dv2d(CodeType code, uint64_t addr)
{
	return new OpSshl_v2dv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSshll_v8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << (imm ? "sshll" : "sxtl") << (q ? "2" : "") << '\t' << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8<<q, 0);
		if (imm) { sink << ", " << DisasmI(imm); }
}}
template <	typename	ARCH>
void OpSshll_v8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;

		unsigned const elements = 8, srcidx = elements*q;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVS8(rn, srcidx + idx)) << imm;
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSshll_v8h(CodeType code, uint64_t addr)
{
	return new OpSshll_v8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSshll_v4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << (imm ? "sshll" : "sxtl") << (q ? "2" : "") << '\t' << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4<<q, 1);
		if (imm) { sink << ", " << DisasmI(imm); }
}}
template <	typename	ARCH>
void OpSshll_v4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;

		unsigned const elements = 4, srcidx = elements*q;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVS16(rn, srcidx + idx)) << imm;
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSshll_v4s(CodeType code, uint64_t addr)
{
	return new OpSshll_v4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSshll_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << (imm ? "sshll" : "sxtl") << (q ? "2" : "") << '\t' << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2<<q, 2);
		if (imm) { sink << ", " << DisasmI(imm); }
}}
template <	typename	ARCH>
void OpSshll_v2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;

		unsigned const elements = 2, srcidx = elements*q;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVS32(rn, srcidx + idx)) << imm;
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSshll_v2d(CodeType code, uint64_t addr)
{
	return new OpSshll_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSshr_ddi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sshr\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSshr_ddi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS64(rd, NeonSHL(cpu, cpu.GetVS64(rn, 0), typename ARCH::S8(-shift)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSshr_ddi(CodeType code, uint64_t addr)
{
	return new OpSshr_ddi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSsra_ddi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ssra\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSsra_ddi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS64(rd, cpu.GetVS64(rd, 0) + NeonSHL(cpu, cpu.GetVS64(rn, 0), typename ARCH::S8(-shift)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSsra_ddi(CodeType code, uint64_t addr)
{
	return new OpSsra_ddi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSsubl2_v2dv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ssubl2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpSsubl2_v2dv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		typedef typename ARCH::S64 S64;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = S64(cpu.GetVS32(rn, elements + idx)) - S64(cpu.GetVS32(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSsubl2_v2dv4sv4s(CodeType code, uint64_t addr)
{
	return new OpSsubl2_v2dv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSsubl2_v4sv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ssubl2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpSsubl2_v4sv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		typedef typename ARCH::S32 S32;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = S32(cpu.GetVS16(rn, elements + idx)) - S32(cpu.GetVS16(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSsubl2_v4sv8hv8h(CodeType code, uint64_t addr)
{
	return new OpSsubl2_v4sv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSsubl2_v8hv16bv16b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ssubl2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 16, 0) << ", " << DisasmTV(rm, 16, 0);
}}
template <	typename	ARCH>
void OpSsubl2_v8hv16bv16b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		typedef typename ARCH::S16 S16;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = S16(cpu.GetVS8(rn, elements + idx)) - S16(cpu.GetVS8(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSsubl2_v8hv16bv16b(CodeType code, uint64_t addr)
{
	return new OpSsubl2_v8hv16bv16b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSsubl_v2dv2sv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ssubl\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 2, 2);
}}
template <	typename	ARCH>
void OpSsubl_v2dv2sv2s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		for (unsigned idx = 0; idx < 2; ++idx)
		{
			cpu.SetVS64(rd, idx, S64(cpu.GetVS32(rn, idx)) - S64(cpu.GetVS32(rm, idx)));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSsubl_v2dv2sv2s(CodeType code, uint64_t addr)
{
	return new OpSsubl_v2dv2sv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSsubl_v4sv4hv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ssubl\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 4, 1);
}}
template <	typename	ARCH>
void OpSsubl_v4sv4hv4h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		for (unsigned idx = 0; idx < 4; ++idx)
		{
			cpu.SetVS32(rd, idx, S32(cpu.GetVS16(rn, idx)) - S32(cpu.GetVS16(rm, idx)));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSsubl_v4sv4hv4h(CodeType code, uint64_t addr)
{
	return new OpSsubl_v4sv4hv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSsubl_v8hv8bv8b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ssubl\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8, 0) << ", " << DisasmTV(rm, 8, 0);
}}
template <	typename	ARCH>
void OpSsubl_v8hv8bv8b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		for (unsigned idx = 0; idx < 8; ++idx)
		{
			cpu.SetVS16(rd, idx, S16(cpu.GetVS8(rn, idx)) - S16(cpu.GetVS8(rm, idx)));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSsubl_v8hv8bv8b(CodeType code, uint64_t addr)
{
	return new OpSsubl_v8hv8bv8b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSsubw2_v2dv2dv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ssubw2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpSsubw2_v2dv2dv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS64(rn, idx) - DST(cpu.GetVS32(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSsubw2_v2dv2dv4s(CodeType code, uint64_t addr)
{
	return new OpSsubw2_v2dv2dv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSsubw2_v4sv4sv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ssubw2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpSsubw2_v4sv4sv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS32(rn, idx) - DST(cpu.GetVS16(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSsubw2_v4sv4sv8h(CodeType code, uint64_t addr)
{
	return new OpSsubw2_v4sv4sv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSsubw2_v8hv8hv16b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ssubw2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 16, 0);
}}
template <	typename	ARCH>
void OpSsubw2_v8hv8hv16b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS16(rn, idx) - DST(cpu.GetVS8(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSsubw2_v8hv8hv16b(CodeType code, uint64_t addr)
{
	return new OpSsubw2_v8hv8hv16b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSsubw_v2dv2dv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ssubw\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 2);
}}
template <	typename	ARCH>
void OpSsubw_v2dv2dv2s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS64(rn, idx) - DST(cpu.GetVS32(rm, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSsubw_v2dv2dv2s(CodeType code, uint64_t addr)
{
	return new OpSsubw_v2dv2dv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSsubw_v4sv4sv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ssubw\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 1);
}}
template <	typename	ARCH>
void OpSsubw_v4sv4sv4h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS32(rn, idx) - DST(cpu.GetVS16(rm, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSsubw_v4sv4sv4h(CodeType code, uint64_t addr)
{
	return new OpSsubw_v4sv4sv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSsubw_v8hv8hv8b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ssubw\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 0);
}}
template <	typename	ARCH>
void OpSsubw_v8hv8hv8b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS16(rn, idx) - DST(cpu.GetVS8(rm, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSsubw_v8hv8hv8b(CodeType code, uint64_t addr)
{
	return new OpSsubw_v8hv8hv8b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStp_so<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << (am ? "" : "n") << "p\t" << DisasmS(rt) << ", " << DisasmS(rt2) << ", " << DisasmMemoryRI(rn, imm, am);
}}
template <	typename	ARCH>
void OpStp_so<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* TODO: catch Non-temporal hint (am == 0) */
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U32 data0( cpu.GetVU32(rt, 0) ), data1( cpu.GetVU32(rt2, 0) );
		cpu.MemWrite32( addr + U64(0), data0 );
		cpu.MemWrite32( addr + U64(4), data1 );
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStp_so(CodeType code, uint64_t addr)
{
	return new OpStp_so<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStp_do<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << (am ? "" : "n") << "p\t" << DisasmD(rt) << ", " << DisasmD(rt2) << ", " << DisasmMemoryRI(rn, imm, am);
}}
template <	typename	ARCH>
void OpStp_do<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* TODO: catch Non-temporal hint (am == 0) */
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U64 data0( cpu.GetVU64(rt, 0) ), data1( cpu.GetVU64(rt2, 0) );
		cpu.MemWrite64( addr + U64(0), data0 );
		cpu.MemWrite64( addr + U64(8), data1 );
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStp_do(CodeType code, uint64_t addr)
{
	return new OpStp_do<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStp_qo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << (am ? "" : "n") << "p\t" << DisasmQ(rt) << ", " << DisasmQ(rt2) << ", " << DisasmMemoryRI(rn, imm, am);
}}
template <	typename	ARCH>
void OpStp_qo<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* TODO: catch Non-temporal hint (am == 0) */
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U64 data0( cpu.GetVU64(rt, 0) ),
		data1( cpu.GetVU64(rt, 1) ),
		data2( cpu.GetVU64(rt2, 0) ),
		data3( cpu.GetVU64(rt2, 1) );
		cpu.MemWrite64( addr + U64( 0), data0 );
		cpu.MemWrite64( addr + U64( 8), data1 );
		cpu.MemWrite64( addr + U64(16), data2 );
		cpu.MemWrite64( addr + U64(24), data3 );
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStp_qo(CodeType code, uint64_t addr)
{
	return new OpStp_qo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_bxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << (am ? "" : "u") << "r\t" << DisasmB(rt) << ", " << DisasmMemoryRI(rn, imm, am);
}}
template <	typename	ARCH>
void OpStr_bxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U8 data( cpu.GetVU8(rt, 0) );
		cpu.MemWrite8(addr, data);
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_bxi(CodeType code, uint64_t addr)
{
	return new OpStr_bxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_buo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmB(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpStr_buo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U8 data( cpu.GetVU8(rt, 0) );
		cpu.MemWrite8(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_buo(CodeType code, uint64_t addr)
{
	return new OpStr_buo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_hxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << (am ? "" : "u") << "r\t" << DisasmH(rt) << ", " << DisasmMemoryRI(rn, imm, am);
}}
template <	typename	ARCH>
void OpStr_hxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U16 data( cpu.GetVU16(rt, 0) );
		cpu.MemWrite16(addr, data);
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_hxi(CodeType code, uint64_t addr)
{
	return new OpStr_hxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_huo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmH(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpStr_huo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U16 data( cpu.GetVU16(rt, 0) );
		cpu.MemWrite16(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_huo(CodeType code, uint64_t addr)
{
	return new OpStr_huo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_sxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << (am ? "" : "u") << "r\t" << DisasmS(rt) << ", " << DisasmMemoryRI(rn, imm, am);
}}
template <	typename	ARCH>
void OpStr_sxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U32 data( cpu.GetVU32(rt, 0) );
		cpu.MemWrite32(addr, data);
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_sxi(CodeType code, uint64_t addr)
{
	return new OpStr_sxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_suo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmS(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpStr_suo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U32 data( cpu.GetVU32(rt, 0) );
		cpu.MemWrite32(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_suo(CodeType code, uint64_t addr)
{
	return new OpStr_suo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_dxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << (am ? "" : "u") << "r\t" << DisasmD(rt) << ", " << DisasmMemoryRI(rn, imm, am);
}}
template <	typename	ARCH>
void OpStr_dxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U64 data( cpu.GetVU64(rt, 0) );
		cpu.MemWrite64(addr, data);
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_dxi(CodeType code, uint64_t addr)
{
	return new OpStr_dxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_duo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmD(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpStr_duo<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U64 data( cpu.GetVU64(rt, 0) );
		cpu.MemWrite64(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_duo(CodeType code, uint64_t addr)
{
	return new OpStr_duo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_qxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << (am ? "" : "u") << "r\t" << DisasmQ(rt) << ", " << DisasmMemoryRI(rn, imm, am);
}}
template <	typename	ARCH>
void OpStr_qxi<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* XXX: handling of quad vector */
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) ), oaddr( addr + U64(imm) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = (am == 1 ? addr : oaddr);
		U64 data0( cpu.GetVU64(rt, 0) ), data1( cpu.GetVU64(rt, 1) );
		cpu.MemWrite64(addr + U64(0), data0);
		cpu.MemWrite64(addr + U64(8), data1);
		if (am & 1)
		cpu.SetGSR(rn, oaddr);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_qxi(CodeType code, uint64_t addr)
{
	return new OpStr_qxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_quo<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmQ(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmI(imm) << "]";
}}
template <	typename	ARCH>
void OpStr_quo<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* XXX: handling of quad vector */
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + U64(imm);
		U64 data0( cpu.GetVU64(rt, 0) ), data1( cpu.GetVU64(rt, 1) );
		cpu.MemWrite64(addr + U64(0), data0);
		cpu.MemWrite64(addr + U64(8), data1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_quo(CodeType code, uint64_t addr)
{
	return new OpStr_quo<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_bxwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmB(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_bxwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::U8 U8;

		U64 offset( U64(U32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U8 data( cpu.GetVU8(rt, 0) );
		cpu.MemWrite8(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_bxwu(CodeType code, uint64_t addr)
{
	return new OpStr_bxwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_bxxu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmB(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_bxxu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::U8 U8;

		U64 offset( U64(U64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U8 data( cpu.GetVU8(rt, 0) );
		cpu.MemWrite8(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_bxxu(CodeType code, uint64_t addr)
{
	return new OpStr_bxxu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_bxws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmB(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_bxws<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::U8 U8;

		U64 offset( U64(S32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U8 data( cpu.GetVU8(rt, 0) );
		cpu.MemWrite8(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_bxws(CodeType code, uint64_t addr)
{
	return new OpStr_bxws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_bxxs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmB(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", sxtx" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_bxxs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::U8 U8;

		U64 offset( U64(S64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U8 data( cpu.GetVU8(rt, 0) );
		cpu.MemWrite8(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_bxxs(CodeType code, uint64_t addr)
{
	return new OpStr_bxxs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_hxwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmH(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_hxwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U16 data( cpu.GetVU16(rt, 0) );
		cpu.MemWrite16(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_hxwu(CodeType code, uint64_t addr)
{
	return new OpStr_hxwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_hxxu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmH(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_hxxu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U16 data( cpu.GetVU16(rt, 0) );
		cpu.MemWrite16(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_hxxu(CodeType code, uint64_t addr)
{
	return new OpStr_hxxu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_hxws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmH(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_hxws<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(S32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U16 data( cpu.GetVU16(rt, 0) );
		cpu.MemWrite16(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_hxws(CodeType code, uint64_t addr)
{
	return new OpStr_hxws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_hxxs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmH(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", sxtx" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_hxxs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(S64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U16 data( cpu.GetVU16(rt, 0) );
		cpu.MemWrite16(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_hxxs(CodeType code, uint64_t addr)
{
	return new OpStr_hxxs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_sxwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmS(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_sxwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.GetVU32(rt, 0) );
		cpu.MemWrite32(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_sxwu(CodeType code, uint64_t addr)
{
	return new OpStr_sxwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_sxxu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmS(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_sxxu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.GetVU32(rt, 0) );
		cpu.MemWrite32(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_sxxu(CodeType code, uint64_t addr)
{
	return new OpStr_sxxu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_sxws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmS(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_sxws<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(S32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.GetVU32(rt, 0) );
		cpu.MemWrite32(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_sxws(CodeType code, uint64_t addr)
{
	return new OpStr_sxws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_sxxs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmS(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", sxtx" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_sxxs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(S64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U32 data( cpu.GetVU32(rt, 0) );
		cpu.MemWrite32(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_sxxs(CodeType code, uint64_t addr)
{
	return new OpStr_sxxs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_dxwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmD(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_dxwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( cpu.GetVU64(rt, 0) );
		cpu.MemWrite64(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_dxwu(CodeType code, uint64_t addr)
{
	return new OpStr_dxwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_dxxu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmD(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_dxxu<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( cpu.GetVU64(rt, 0) );
		cpu.MemWrite64(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_dxxu(CodeType code, uint64_t addr)
{
	return new OpStr_dxxu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_dxws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmD(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_dxws<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(S32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( cpu.GetVU64(rt, 0) );
		cpu.MemWrite64(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_dxws(CodeType code, uint64_t addr)
{
	return new OpStr_dxws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_dxxs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmD(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", sxtx" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_dxxs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(S64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data( cpu.GetVU64(rt, 0) );
		cpu.MemWrite64(addr, data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_dxxs(CodeType code, uint64_t addr)
{
	return new OpStr_dxxs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_qxwu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmQ(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", uxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_qxwu<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* XXX: handling of quad vector */
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data0( cpu.GetVU64(rt, 0) ), data1( cpu.GetVU64(rt, 1) );
		cpu.MemWrite64(addr + U64(0), data0);
		cpu.MemWrite64(addr + U64(8), data1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_qxwu(CodeType code, uint64_t addr)
{
	return new OpStr_qxwu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_qxxu<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmQ(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << DisasmINZ(", lsl ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_qxxu<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* XXX: handling of quad vector */
		typedef typename ARCH::U64 U64;

		U64 offset( U64(U64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data0( cpu.GetVU64(rt, 0) ), data1( cpu.GetVU64(rt, 1) );
		cpu.MemWrite64(addr + U64(0), data0);
		cpu.MemWrite64(addr + U64(8), data1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_qxxu(CodeType code, uint64_t addr)
{
	return new OpStr_qxxu<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_qxws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmQ(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZWR(rm) << ", sxtw" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_qxws<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* XXX: handling of quad vector */
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(S32(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data0( cpu.GetVU64(rt, 0) ), data1( cpu.GetVU64(rt, 1) );
		cpu.MemWrite64(addr + U64(0), data0);
		cpu.MemWrite64(addr + U64(8), data1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_qxws(CodeType code, uint64_t addr)
{
	return new OpStr_qxws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStr_qxxs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "str\t" << DisasmQ(rt) << ", [" << DisasmGSXR(rn) << ", " << DisasmGZXR(rm) << ", sxtx" << DisasmINZ(" ", shift) << "]";
}}
template <	typename	ARCH>
void OpStr_qxxs<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* XXX: handling of quad vector */
		typedef typename ARCH::S64 S64;
		typedef typename ARCH::U64 U64;

		U64 offset( U64(S64(cpu.GetGZR(rm))) << shift ), addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);
		addr = addr + offset;
		U64 data0( cpu.GetVU64(rt, 0) ), data1( cpu.GetVU64(rt, 1) );
		cpu.MemWrite64(addr + U64(0), data0);
		cpu.MemWrite64(addr + U64(8), data1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStr_qxxs(CodeType code, uint64_t addr)
{
	return new OpStr_qxxs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_ddd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sub\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}
template <	typename	ARCH>
void OpSub_ddd<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU64(rd, cpu.GetVU64(rn, 0) - cpu.GetVU64(rm, 0));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_ddd(CodeType code, uint64_t addr)
{
	return new OpSub_ddd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_v2dv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sub\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpSub_v2dv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0; idx < 2; ++idx)
		cpu.SetVU64(rd, idx, cpu.GetVU64(rn, idx) - cpu.GetVU64(rm, idx));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_v2dv2dv2d(CodeType code, uint64_t addr)
{
	return new OpSub_v2dv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubhn2_v16bv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "subhn2\t" << DisasmTV(rd, 16, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpSubhn2_v16bv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		for (unsigned idx = 0, end = 8; idx < end; ++idx)
		{
			cpu.SetVU8(rd, idx + end, DST((cpu.GetVU16(rn, idx) - cpu.GetVU16(rm, idx)) >> 8));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubhn2_v16bv8hv8h(CodeType code, uint64_t addr)
{
	return new OpSubhn2_v16bv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubhn2_v4sv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "subhn2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpSubhn2_v4sv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		for (unsigned idx = 0, end = 2; idx < end; ++idx)
		{
			cpu.SetVU32(rd, idx + end, DST((cpu.GetVU64(rn, idx) - cpu.GetVU64(rm, idx)) >> 32));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubhn2_v4sv2dv2d(CodeType code, uint64_t addr)
{
	return new OpSubhn2_v4sv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubhn2_v8hv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "subhn2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpSubhn2_v8hv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		for (unsigned idx = 0, end = 4; idx < end; ++idx)
		{
			cpu.SetVU16(rd, idx + end, DST((cpu.GetVU32(rn, idx) - cpu.GetVU32(rm, idx)) >> 16));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubhn2_v8hv4sv4s(CodeType code, uint64_t addr)
{
	return new OpSubhn2_v8hv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubhn_v2sv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "subhn\t" << DisasmTV(rd, 2, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpSubhn_v2sv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		for (unsigned idx = 0, end = 2; idx < end; ++idx)
		{
			cpu.SetVU32(rd, idx, DST((cpu.GetVU64(rn, idx) - cpu.GetVU64(rm, idx)) >> 32));
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubhn_v2sv2dv2d(CodeType code, uint64_t addr)
{
	return new OpSubhn_v2sv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubhn_v4hv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "subhn\t" << DisasmTV(rd, 4, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpSubhn_v4hv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		for (unsigned idx = 0, end = 4; idx < end; ++idx)
		{
			cpu.SetVU16(rd, idx, DST((cpu.GetVU32(rn, idx) - cpu.GetVU32(rm, idx)) >> 16));
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubhn_v4hv4sv4s(CodeType code, uint64_t addr)
{
	return new OpSubhn_v4hv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSubhn_v8bv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "subhn\t" << DisasmTV(rd, 8, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpSubhn_v8bv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		for (unsigned idx = 0, end = 8; idx < end; ++idx)
		{
			cpu.SetVU8(rd, idx, DST((cpu.GetVU16(rn, idx) - cpu.GetVU16(rm, idx)) >> 8));
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSubhn_v8bv8hv8h(CodeType code, uint64_t addr)
{
	return new OpSubhn_v8bv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSuqadd_bb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "suqadd\t" << DisasmB(rd) << ", " << DisasmB(rn);
}}
template <	typename	ARCH>
void OpSuqadd_bb<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS8(rd, SatAdd(cpu, cpu.GetVS8(rd, 0), cpu.GetVU8(rn, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSuqadd_bb(CodeType code, uint64_t addr)
{
	return new OpSuqadd_bb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSuqadd_dd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "suqadd\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}
template <	typename	ARCH>
void OpSuqadd_dd<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS64(rd, SatAdd(cpu, cpu.GetVS64(rd, 0), cpu.GetVU64(rn, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSuqadd_dd(CodeType code, uint64_t addr)
{
	return new OpSuqadd_dd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSuqadd_hh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "suqadd\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}
template <	typename	ARCH>
void OpSuqadd_hh<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS16(rd, SatAdd(cpu, cpu.GetVS16(rd, 0), cpu.GetVU16(rn, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSuqadd_hh(CodeType code, uint64_t addr)
{
	return new OpSuqadd_hh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSuqadd_ss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "suqadd\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}
template <	typename	ARCH>
void OpSuqadd_ss<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS32(rd, SatAdd(cpu, cpu.GetVS32(rd, 0), cpu.GetVU32(rn, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSuqadd_ss(CodeType code, uint64_t addr)
{
	return new OpSuqadd_ss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSuqadd_v2d2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "suqadd\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3);
}}
template <	typename	ARCH>
void OpSuqadd_v2d2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0; idx < 2; ++idx)
		{
			cpu.SetVS64(rd, idx, SatAdd(cpu, cpu.GetVS64(rd, idx), cpu.GetVU64(rn, idx)));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSuqadd_v2d2d(CodeType code, uint64_t addr)
{
	return new OpSuqadd_v2d2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUabal2_v2dv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uabal2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpUabal2_v2dv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU64(rd, idx) + U64(Abs(cpu, S64(U64(cpu.GetVU32(rn, elements + idx)) - U64(cpu.GetVU32(rm, elements + idx)))));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUabal2_v2dv4sv4s(CodeType code, uint64_t addr)
{
	return new OpUabal2_v2dv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUabal2_v4sv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uabal2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpUabal2_v4sv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU32(rd, idx) + U32(Abs(cpu, S32(U32(cpu.GetVU16(rn, elements + idx)) - U32(cpu.GetVU16(rm, elements + idx)))));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUabal2_v4sv8hv8h(CodeType code, uint64_t addr)
{
	return new OpUabal2_v4sv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUabal2_v8hv16bv16b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uabal2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 16, 0) << ", " << DisasmTV(rm, 16, 0);
}}
template <	typename	ARCH>
void OpUabal2_v8hv16bv16b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::S16 S16;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU16(rd, idx) + U16(Abs(cpu, S16(U16(cpu.GetVU8(rn, elements + idx)) - U16(cpu.GetVU8(rm, elements + idx)))));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUabal2_v8hv16bv16b(CodeType code, uint64_t addr)
{
	return new OpUabal2_v8hv16bv16b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUabal_v2dv2sv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uabal\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 2, 2);
}}
template <	typename	ARCH>
void OpUabal_v2dv2sv2s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;
		for (unsigned idx = 0; idx < 2; ++idx)
		{
			cpu.SetVU64(rd, idx, cpu.GetVU64(rd, idx) + U64(Abs(cpu, S64(U64(cpu.GetVU32(rn, idx)) - U64(cpu.GetVU32(rm, idx))))));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUabal_v2dv2sv2s(CodeType code, uint64_t addr)
{
	return new OpUabal_v2dv2sv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUabal_v4sv4hv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uabal\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 4, 1);
}}
template <	typename	ARCH>
void OpUabal_v4sv4hv4h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;
		for (unsigned idx = 0; idx < 4; ++idx)
		{
			cpu.SetVU32(rd, idx, cpu.GetVU32(rd, idx) + U32(Abs(cpu, S32(cpu.GetVU16(rn, idx)) - S32(cpu.GetVU16(rm, idx)))));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUabal_v4sv4hv4h(CodeType code, uint64_t addr)
{
	return new OpUabal_v4sv4hv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUabal_v8hv8bv8b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uabal\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8, 0) << ", " << DisasmTV(rm, 8, 0);
}}
template <	typename	ARCH>
void OpUabal_v8hv8bv8b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::S16 S16;
		for (unsigned idx = 0; idx < 8; ++idx)
		{
			cpu.SetVU16(rd, idx, cpu.GetVU16(rd, idx) + U16(Abs(cpu, S16(cpu.GetVU8(rn, idx)) - S16(cpu.GetVU8(rm, idx)))));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUabal_v8hv8bv8b(CodeType code, uint64_t addr)
{
	return new OpUabal_v8hv8bv8b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUabdl2_v2dv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uabdl2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpUabdl2_v2dv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = U64(Abs(cpu, S64(U64(cpu.GetVU32(rn, elements + idx))) - S64(U64(cpu.GetVU32(rm, elements + idx)))));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUabdl2_v2dv4sv4s(CodeType code, uint64_t addr)
{
	return new OpUabdl2_v2dv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUabdl2_v4sv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uabdl2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpUabdl2_v4sv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = U32(Abs(cpu, S32(U32(cpu.GetVU16(rn, elements + idx))) - S32(U32(cpu.GetVU16(rm, elements + idx)))));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUabdl2_v4sv8hv8h(CodeType code, uint64_t addr)
{
	return new OpUabdl2_v4sv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUabdl2_v8hv16bv16b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uabdl2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 16, 0) << ", " << DisasmTV(rm, 16, 0);
}}
template <	typename	ARCH>
void OpUabdl2_v8hv16bv16b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::S16 S16;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = U16(Abs(cpu, S16(U16(cpu.GetVU8(rn, elements + idx))) - S16(U16(cpu.GetVU8(rm, elements + idx)))));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUabdl2_v8hv16bv16b(CodeType code, uint64_t addr)
{
	return new OpUabdl2_v8hv16bv16b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUabdl_v2dv2sv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uabdl\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 2, 2);
}}
template <	typename	ARCH>
void OpUabdl_v2dv2sv2s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;
		for (unsigned idx = 0; idx < 2; ++idx)
		{
			cpu.SetVU64(rd, idx, U64(Abs(cpu, S64(U64(cpu.GetVU32(rn, idx))) - S64(U64(cpu.GetVU32(rm, idx))))));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUabdl_v2dv2sv2s(CodeType code, uint64_t addr)
{
	return new OpUabdl_v2dv2sv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUabdl_v4sv4hv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uabdl\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 4, 1);
}}
template <	typename	ARCH>
void OpUabdl_v4sv4hv4h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;
		for (unsigned idx = 0; idx < 4; ++idx)
		{
			cpu.SetVU32(rd, idx, U32(Abs(cpu, S32(U32(cpu.GetVU16(rn, idx))) - S32(U32(cpu.GetVU16(rm, idx))))));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUabdl_v4sv4hv4h(CodeType code, uint64_t addr)
{
	return new OpUabdl_v4sv4hv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUabdl_v8hv8bv8b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uabdl\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8, 0) << ", " << DisasmTV(rm, 8, 0);
}}
template <	typename	ARCH>
void OpUabdl_v8hv8bv8b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::S16 S16;
		for (unsigned idx = 0; idx < 8; ++idx)
		{
			cpu.SetVU16(rd, idx, U16(Abs(cpu, S16(U16(cpu.GetVU8(rn, idx))) - S16(U16(cpu.GetVU8(rm, idx))))));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUabdl_v8hv8bv8b(CodeType code, uint64_t addr)
{
	return new OpUabdl_v8hv8bv8b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUaddl2_v2dv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uaddl2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpUaddl2_v2dv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;
		typedef typename ARCH::U64 U64;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = U64(cpu.GetVU32(rn, elements + idx)) + U64(cpu.GetVU32(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUaddl2_v2dv4sv4s(CodeType code, uint64_t addr)
{
	return new OpUaddl2_v2dv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUaddl2_v4sv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uaddl2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpUaddl2_v4sv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		typedef typename ARCH::U32 U32;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = U32(cpu.GetVU16(rn, elements + idx)) + U32(cpu.GetVU16(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUaddl2_v4sv8hv8h(CodeType code, uint64_t addr)
{
	return new OpUaddl2_v4sv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUaddl2_v8hv16bv16b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uaddl2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 16, 0) << ", " << DisasmTV(rm, 16, 0);
}}
template <	typename	ARCH>
void OpUaddl2_v8hv16bv16b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		typedef typename ARCH::U16 U16;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = U16(cpu.GetVU8(rn, elements + idx)) + U16(cpu.GetVU8(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUaddl2_v8hv16bv16b(CodeType code, uint64_t addr)
{
	return new OpUaddl2_v8hv16bv16b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUaddl_v2dv2sv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uaddl\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 2, 2);
}}
template <	typename	ARCH>
void OpUaddl_v2dv2sv2s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		for (unsigned idx = 0; idx < 2; ++idx)
		{
			cpu.SetVU64(rd, idx, U64(cpu.GetVU32(rn, idx)) + U64(cpu.GetVU32(rm, idx)));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUaddl_v2dv2sv2s(CodeType code, uint64_t addr)
{
	return new OpUaddl_v2dv2sv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUaddl_v4sv4hv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uaddl\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 4, 1);
}}
template <	typename	ARCH>
void OpUaddl_v4sv4hv4h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		for (unsigned idx = 0; idx < 4; ++idx)
		{
			cpu.SetVU32(rd, idx, U32(cpu.GetVU16(rn, idx)) + U32(cpu.GetVU16(rm, idx)));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUaddl_v4sv4hv4h(CodeType code, uint64_t addr)
{
	return new OpUaddl_v4sv4hv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUaddl_v8hv8bv8b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uaddl\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8, 0) << ", " << DisasmTV(rm, 8, 0);
}}
template <	typename	ARCH>
void OpUaddl_v8hv8bv8b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		for (unsigned idx = 0; idx < 8; ++idx)
		{
			cpu.SetVU16(rd, idx, U16(cpu.GetVU8(rn, idx)) + U16(cpu.GetVU8(rm, idx)));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUaddl_v8hv8bv8b(CodeType code, uint64_t addr)
{
	return new OpUaddl_v8hv8bv8b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUaddlv_dv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uaddlv\t" << DisasmD(rd) << ", " << DisasmTV(rn, 4, 2);
}}
template <	typename	ARCH>
void OpUaddlv_dv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 4;
		typedef typename ARCH::U64 U64;

		U64 sum = U64(cpu.GetVU32(rn, 0));
		for (unsigned e=1; e < elements; e += 1)
		{
			sum += U64(cpu.GetVU32(rn, e));
		}

		cpu.SetVU64(rd, sum);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUaddlv_dv4s(CodeType code, uint64_t addr)
{
	return new OpUaddlv_dv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUaddw2_v2dv2dv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uaddw2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpUaddw2_v2dv2dv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU64(rn, idx) + DST(cpu.GetVU32(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUaddw2_v2dv2dv4s(CodeType code, uint64_t addr)
{
	return new OpUaddw2_v2dv2dv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUaddw2_v4sv4sv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uaddw2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpUaddw2_v4sv4sv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU32(rn, idx) + DST(cpu.GetVU16(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUaddw2_v4sv4sv8h(CodeType code, uint64_t addr)
{
	return new OpUaddw2_v4sv4sv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUaddw2_v8hv8hv16b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uaddw2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 16, 0);
}}
template <	typename	ARCH>
void OpUaddw2_v8hv8hv16b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU16(rn, idx) + DST(cpu.GetVU8(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUaddw2_v8hv8hv16b(CodeType code, uint64_t addr)
{
	return new OpUaddw2_v8hv8hv16b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUaddw_v2dv2dv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uaddw\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 2);
}}
template <	typename	ARCH>
void OpUaddw_v2dv2dv2s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU64(rn, idx) + DST(cpu.GetVU32(rm, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUaddw_v2dv2dv2s(CodeType code, uint64_t addr)
{
	return new OpUaddw_v2dv2dv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUaddw_v4sv4sv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uaddw\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 1);
}}
template <	typename	ARCH>
void OpUaddw_v4sv4sv4h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU32(rn, idx) + DST(cpu.GetVU16(rm, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUaddw_v4sv4sv4h(CodeType code, uint64_t addr)
{
	return new OpUaddw_v4sv4sv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUaddw_v8hv8hv8b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uaddw\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 0);
}}
template <	typename	ARCH>
void OpUaddw_v8hv8hv8b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU16(rn, idx) + DST(cpu.GetVU8(rm, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUaddw_v8hv8hv8b(CodeType code, uint64_t addr)
{
	return new OpUaddw_v8hv8hv8b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmlal2_v2dv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umlal2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpUmlal2_v2dv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU64(rd, idx) + (DST(cpu.GetVU32(rn, elements + idx)) * DST(cpu.GetVU32(rm, elements + idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmlal2_v2dv4sv4s(CodeType code, uint64_t addr)
{
	return new OpUmlal2_v2dv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmlal2_v2dv4svsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umlal2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpUmlal2_v2dv4svsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;
		unsigned const elements = 2;
		DST res[elements];
		DST element(cpu.GetVU32(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU64(rd, idx) + (DST(cpu.GetVU32(rn, elements + idx)) * element);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmlal2_v2dv4svsi(CodeType code, uint64_t addr)
{
	return new OpUmlal2_v2dv4svsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmlal2_v4sv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umlal2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpUmlal2_v4sv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU32(rd, idx) + (DST(cpu.GetVU16(rn, elements + idx)) * DST(cpu.GetVU16(rm, elements + idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmlal2_v4sv8hv8h(CodeType code, uint64_t addr)
{
	return new OpUmlal2_v4sv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmlal2_v4sv8hvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umlal2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpUmlal2_v4sv8hvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 4;
		DST res[elements];
		DST element(cpu.GetVU16(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU32(rd, idx) + (DST(cpu.GetVU16(rn, elements + idx)) * element);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmlal2_v4sv8hvhi(CodeType code, uint64_t addr)
{
	return new OpUmlal2_v4sv8hvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmlal2_v8hv16bv16b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umlal2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 16, 0) << ", " << DisasmTV(rm, 16, 0);
}}
template <	typename	ARCH>
void OpUmlal2_v8hv16bv16b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU16(rd, idx) + (DST(cpu.GetVU8(rn, elements + idx)) * DST(cpu.GetVU8(rm, elements + idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmlal2_v8hv16bv16b(CodeType code, uint64_t addr)
{
	return new OpUmlal2_v8hv16bv16b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmlal_v2dv2sv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umlal\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 2, 2);
}}
template <	typename	ARCH>
void OpUmlal_v2dv2sv2s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU64(rd, idx) + (DST(cpu.GetVU32(rn, idx)) * DST(cpu.GetVU32(rm, idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmlal_v2dv2sv2s(CodeType code, uint64_t addr)
{
	return new OpUmlal_v2dv2sv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmlal_v2dv2svsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umlal\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpUmlal_v2dv2svsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;
		unsigned const elements = 2;
		DST res[elements];
		DST element(cpu.GetVU32(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU64(rd, idx) + (DST(cpu.GetVU32(rn, idx)) * element);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmlal_v2dv2svsi(CodeType code, uint64_t addr)
{
	return new OpUmlal_v2dv2svsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmlal_v4sv4hv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umlal\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 4, 1);
}}
template <	typename	ARCH>
void OpUmlal_v4sv4hv4h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU32(rd, idx) + (DST(cpu.GetVU16(rn, idx)) * DST(cpu.GetVU16(rm, idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmlal_v4sv4hv4h(CodeType code, uint64_t addr)
{
	return new OpUmlal_v4sv4hv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmlal_v4sv4hvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umlal\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpUmlal_v4sv4hvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 4;
		DST res[elements];
		DST element(cpu.GetVU16(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU32(rd, idx) + (DST(cpu.GetVU16(rn, idx)) * element);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmlal_v4sv4hvhi(CodeType code, uint64_t addr)
{
	return new OpUmlal_v4sv4hvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmlal_v8hv8bv8b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umlal\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8, 0) << ", " << DisasmTV(rm, 8, 0);
}}
template <	typename	ARCH>
void OpUmlal_v8hv8bv8b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU16(rd, idx) + (DST(cpu.GetVU8(rn, idx)) * DST(cpu.GetVU8(rm, idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmlal_v8hv8bv8b(CodeType code, uint64_t addr)
{
	return new OpUmlal_v8hv8bv8b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmlsl2_v2dv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umlsl2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpUmlsl2_v2dv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU64(rd, idx) - (DST(cpu.GetVU32(rn, elements + idx)) * DST(cpu.GetVU32(rm, elements + idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmlsl2_v2dv4sv4s(CodeType code, uint64_t addr)
{
	return new OpUmlsl2_v2dv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmlsl2_v2dv4svsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umlsl2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpUmlsl2_v2dv4svsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;
		unsigned const elements = 2;
		DST res[elements];
		DST element(cpu.GetVU32(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU64(rd, idx) - (DST(cpu.GetVU32(rn, elements + idx)) * element);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmlsl2_v2dv4svsi(CodeType code, uint64_t addr)
{
	return new OpUmlsl2_v2dv4svsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmlsl2_v4sv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umlsl2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpUmlsl2_v4sv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU32(rd, idx) - (DST(cpu.GetVU16(rn, elements + idx)) * DST(cpu.GetVU16(rm, elements + idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmlsl2_v4sv8hv8h(CodeType code, uint64_t addr)
{
	return new OpUmlsl2_v4sv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmlsl2_v4sv8hvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umlsl2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpUmlsl2_v4sv8hvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 4;
		DST res[elements];
		DST element(cpu.GetVU16(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU32(rd, idx) - (DST(cpu.GetVU16(rn, elements + idx)) * element);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmlsl2_v4sv8hvhi(CodeType code, uint64_t addr)
{
	return new OpUmlsl2_v4sv8hvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmlsl2_v8hv16bv16b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umlsl2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 16, 0) << ", " << DisasmTV(rm, 16, 0);
}}
template <	typename	ARCH>
void OpUmlsl2_v8hv16bv16b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU16(rd, idx) - (DST(cpu.GetVU8(rn, elements + idx)) * DST(cpu.GetVU8(rm, elements + idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmlsl2_v8hv16bv16b(CodeType code, uint64_t addr)
{
	return new OpUmlsl2_v8hv16bv16b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmlsl_v2dv2sv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umlsl\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 2, 2);
}}
template <	typename	ARCH>
void OpUmlsl_v2dv2sv2s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU64(rd, idx) - (DST(cpu.GetVU32(rn, idx)) * DST(cpu.GetVU32(rm, idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmlsl_v2dv2sv2s(CodeType code, uint64_t addr)
{
	return new OpUmlsl_v2dv2sv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmlsl_v2dv2svsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umlsl\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpUmlsl_v2dv2svsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;
		unsigned const elements = 2;
		DST res[elements];
		DST element(cpu.GetVU32(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU64(rd, idx) - (DST(cpu.GetVU32(rn, idx)) * element);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmlsl_v2dv2svsi(CodeType code, uint64_t addr)
{
	return new OpUmlsl_v2dv2svsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmlsl_v4sv4hv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umlsl\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 4, 1);
}}
template <	typename	ARCH>
void OpUmlsl_v4sv4hv4h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU32(rd, idx) - (DST(cpu.GetVU16(rn, idx)) * DST(cpu.GetVU16(rm, idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmlsl_v4sv4hv4h(CodeType code, uint64_t addr)
{
	return new OpUmlsl_v4sv4hv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmlsl_v4sv4hvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umlsl\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpUmlsl_v4sv4hvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 4;
		DST res[elements];
		DST element(cpu.GetVU16(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU32(rd, idx) - (DST(cpu.GetVU16(rn, idx)) * element);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmlsl_v4sv4hvhi(CodeType code, uint64_t addr)
{
	return new OpUmlsl_v4sv4hvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmlsl_v8hv8bv8b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umlsl\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8, 0) << ", " << DisasmTV(rm, 8, 0);
}}
template <	typename	ARCH>
void OpUmlsl_v8hv8bv8b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU16(rd, idx) - (DST(cpu.GetVU8(rn, idx)) * DST(cpu.GetVU8(rm, idx)));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmlsl_v8hv8bv8b(CodeType code, uint64_t addr)
{
	return new OpUmlsl_v8hv8bv8b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmov_wvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umov\t" << DisasmGZWR(rd) << ", " << DisasmTV(rn, 0, 0) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpUmov_wvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetGZR(rd, typename ARCH::U32( cpu.GetVU8(rn, index) ) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmov_wvb(CodeType code, uint64_t addr)
{
	return new OpUmov_wvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmov_wvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umov\t" << DisasmGZWR(rd) << ", " << DisasmTV(rn, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpUmov_wvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetGZR(rd, typename ARCH::U32( cpu.GetVU16(rn, index) ) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmov_wvh(CodeType code, uint64_t addr)
{
	return new OpUmov_wvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmov_wvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mov\t" << DisasmGZWR(rd) << ", " << DisasmTV(rn, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpUmov_wvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetGZR(rd, typename ARCH::U32( cpu.GetVU32(rn, index) ) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmov_wvs(CodeType code, uint64_t addr)
{
	return new OpUmov_wvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmov_xvd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mov\t" << DisasmGZXR(rd) << ", " << DisasmTV(rn, 0, 3) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpUmov_xvd<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetGZR(rd, cpu.GetVU64(rn, index) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmov_xvd(CodeType code, uint64_t addr)
{
	return new OpUmov_xvd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmull2_v2dv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umull2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpUmull2_v2dv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU32(rm, elements + idx)) * DST(cpu.GetVU32(rn, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmull2_v2dv4sv4s(CodeType code, uint64_t addr)
{
	return new OpUmull2_v2dv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmull2_v2dv4svsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umull2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpUmull2_v2dv4svsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;
		unsigned const elements = 2;
		DST res[elements];
		DST element(cpu.GetVU32(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU32(rn, elements + idx)) * element;
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmull2_v2dv4svsi(CodeType code, uint64_t addr)
{
	return new OpUmull2_v2dv4svsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmull2_v4sv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umull2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpUmull2_v4sv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU16(rm, elements + idx)) * DST(cpu.GetVU16(rn, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmull2_v4sv8hv8h(CodeType code, uint64_t addr)
{
	return new OpUmull2_v4sv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmull2_v4sv8hvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umull2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpUmull2_v4sv8hvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 4;
		DST res[elements];
		DST element(cpu.GetVU16(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU16(rn, elements + idx)) * element;
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmull2_v4sv8hvhi(CodeType code, uint64_t addr)
{
	return new OpUmull2_v4sv8hvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmull2_v8hv16bv16b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umull2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 16, 0) << ", " << DisasmTV(rm, 16, 0);
}}
template <	typename	ARCH>
void OpUmull2_v8hv16bv16b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU8(rm, elements + idx)) * DST(cpu.GetVU8(rn, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmull2_v8hv16bv16b(CodeType code, uint64_t addr)
{
	return new OpUmull2_v8hv16bv16b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmull_v2dv2sv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umull\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 2, 2);
}}
template <	typename	ARCH>
void OpUmull_v2dv2sv2s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU32(rm, idx)) * DST(cpu.GetVU32(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmull_v2dv2sv2s(CodeType code, uint64_t addr)
{
	return new OpUmull_v2dv2sv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmull_v2dv2svsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umull\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpUmull_v2dv2svsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;
		unsigned const elements = 2;
		DST res[elements];
		DST element(cpu.GetVU32(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU32(rn, idx)) * element;
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmull_v2dv2svsi(CodeType code, uint64_t addr)
{
	return new OpUmull_v2dv2svsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmull_v4sv4hv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umull\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 4, 1);
}}
template <	typename	ARCH>
void OpUmull_v4sv4hv4h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU16(rm, idx)) * DST(cpu.GetVU16(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmull_v4sv4hv4h(CodeType code, uint64_t addr)
{
	return new OpUmull_v4sv4hv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmull_v4sv4hvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umull\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpUmull_v4sv4hvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 4;
		DST res[elements];
		DST element(cpu.GetVU16(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU16(rn, idx)) * element;
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmull_v4sv4hvhi(CodeType code, uint64_t addr)
{
	return new OpUmull_v4sv4hvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmull_v8hv8bv8b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umull\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8, 0) << ", " << DisasmTV(rm, 8, 0);
}}
template <	typename	ARCH>
void OpUmull_v8hv8bv8b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU8(rm, idx)) * DST(cpu.GetVU8(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmull_v8hv8bv8b(CodeType code, uint64_t addr)
{
	return new OpUmull_v8hv8bv8b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqadd_bbb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqadd\t" << DisasmB(rd) << ", " << DisasmB(rn) << ", " << DisasmB(rm);
}}
template <	typename	ARCH>
void OpUqadd_bbb<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU8(rd, SatAdd(cpu, cpu.GetVU8(rn, 0), cpu.GetVU8(rm, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqadd_bbb(CodeType code, uint64_t addr)
{
	return new OpUqadd_bbb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqadd_ddd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqadd\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}
template <	typename	ARCH>
void OpUqadd_ddd<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU64(rd, SatAdd(cpu, cpu.GetVU64(rn, 0), cpu.GetVU64(rm, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqadd_ddd(CodeType code, uint64_t addr)
{
	return new OpUqadd_ddd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqadd_hhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqadd\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}
template <	typename	ARCH>
void OpUqadd_hhh<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU16(rd, SatAdd(cpu, cpu.GetVU16(rn, 0), cpu.GetVU16(rm, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqadd_hhh(CodeType code, uint64_t addr)
{
	return new OpUqadd_hhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqadd_sss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqadd\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}
template <	typename	ARCH>
void OpUqadd_sss<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU32(rd, SatAdd(cpu, cpu.GetVU32(rn, 0), cpu.GetVU32(rm, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqadd_sss(CodeType code, uint64_t addr)
{
	return new OpUqadd_sss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqadd_v2dv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqadd\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpUqadd_v2dv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0; idx < 2; ++idx)
		{
			cpu.SetVU64(rd, idx, SatAdd(cpu, cpu.GetVU64(rn, idx), cpu.GetVU64(rm, idx)));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqadd_v2dv2dv2d(CodeType code, uint64_t addr)
{
	return new OpUqadd_v2dv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqrshl_bbb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqrshl\t" << DisasmB(rd) << ", " << DisasmB(rn) << ", " << DisasmB(rm);
}}
template <	typename	ARCH>
void OpUqrshl_bbb<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU8(rd, NeonSHL(cpu, cpu.GetVU8(rn, 0), cpu.GetVS8(rm, 0), /* round */ true, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqrshl_bbb(CodeType code, uint64_t addr)
{
	return new OpUqrshl_bbb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqrshl_ddd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqrshl\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}
template <	typename	ARCH>
void OpUqrshl_ddd<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU64(rd, NeonSHL(cpu, cpu.GetVU64(rn, 0), typename ARCH::S8(cpu.GetVS64(rm, 0)), /* round */ true, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqrshl_ddd(CodeType code, uint64_t addr)
{
	return new OpUqrshl_ddd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqrshl_hhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqrshl\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}
template <	typename	ARCH>
void OpUqrshl_hhh<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU16(rd, NeonSHL(cpu, cpu.GetVU16(rn, 0), typename ARCH::S8(cpu.GetVS16(rm, 0)), /* round */ true, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqrshl_hhh(CodeType code, uint64_t addr)
{
	return new OpUqrshl_hhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqrshl_sss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqrshl\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}
template <	typename	ARCH>
void OpUqrshl_sss<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU32(rd, NeonSHL(cpu, cpu.GetVU32(rn, 0), typename ARCH::S8(cpu.GetVS32(rm, 0)), /* round */ true, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqrshl_sss(CodeType code, uint64_t addr)
{
	return new OpUqrshl_sss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqrshl_v2dv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqrshl\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpUqrshl_v2dv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;

		for (unsigned idx = 0, end = 2; idx < end; ++idx)
		{
			cpu.SetVU64(rd, idx, NeonSHL(cpu, cpu.GetVU64(rn, idx), S8(cpu.GetVS64(rm, idx)), /* round */ true, /* sat */ true));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqrshl_v2dv2dv2d(CodeType code, uint64_t addr)
{
	return new OpUqrshl_v2dv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqrshrn2_v16b8hi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqrshrn2\t" << DisasmTV(rd, 16, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUqrshrn2_v16b8hi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVU16(rn, idx), typename ARCH::S8(-shift), /* round */ true, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqrshrn2_v16b8hi(CodeType code, uint64_t addr)
{
	return new OpUqrshrn2_v16b8hi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqrshrn2_v4s2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqrshrn2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUqrshrn2_v4s2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVU64(rn, idx), typename ARCH::S8(-shift), /* round */ true, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqrshrn2_v4s2di(CodeType code, uint64_t addr)
{
	return new OpUqrshrn2_v4s2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqrshrn2_v8h4si<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqrshrn2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUqrshrn2_v8h4si<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVU32(rn, idx), typename ARCH::S8(-shift), /* round */ true, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqrshrn2_v8h4si(CodeType code, uint64_t addr)
{
	return new OpUqrshrn2_v8h4si<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqrshrn_bhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqrshrn\t" << DisasmB(rd) << ", " << DisasmH(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUqrshrn_bhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU8(rd, SatNarrow<typename ARCH::U8>(cpu, NeonSHL(cpu, cpu.GetVU16(rn, 0), typename ARCH::S8(-shift), /* round */ true, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqrshrn_bhi(CodeType code, uint64_t addr)
{
	return new OpUqrshrn_bhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqrshrn_hsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqrshrn\t" << DisasmH(rd) << ", " << DisasmS(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUqrshrn_hsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU16(rd, SatNarrow<typename ARCH::U16>(cpu, NeonSHL(cpu, cpu.GetVU32(rn, 0), typename ARCH::S8(-shift), /* round */ true, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqrshrn_hsi(CodeType code, uint64_t addr)
{
	return new OpUqrshrn_hsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqrshrn_sdi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqrshrn\t" << DisasmS(rd) << ", " << DisasmD(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUqrshrn_sdi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU32(rd, SatNarrow<typename ARCH::U32>(cpu, NeonSHL(cpu, cpu.GetVU64(rn, 0), typename ARCH::S8(-shift), /* round */ true, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqrshrn_sdi(CodeType code, uint64_t addr)
{
	return new OpUqrshrn_sdi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqrshrn_v2s2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqrshrn\t" << DisasmTV(rd, 2, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUqrshrn_v2s2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVU64(rn, idx), typename ARCH::S8(-shift), /* round */ true, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqrshrn_v2s2di(CodeType code, uint64_t addr)
{
	return new OpUqrshrn_v2s2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqrshrn_v4h4si<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqrshrn\t" << DisasmTV(rd, 4, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUqrshrn_v4h4si<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVU32(rn, idx), typename ARCH::S8(-shift), /* round */ true, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqrshrn_v4h4si(CodeType code, uint64_t addr)
{
	return new OpUqrshrn_v4h4si<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqrshrn_v8b8hi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqrshrn\t" << DisasmTV(rd, 8, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUqrshrn_v8b8hi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVU16(rn, idx), typename ARCH::S8(-shift), /* round */ true, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqrshrn_v8b8hi(CodeType code, uint64_t addr)
{
	return new OpUqrshrn_v8b8hi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshl_bbb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshl\t" << DisasmB(rd) << ", " << DisasmB(rn) << ", " << DisasmB(rm);
}}
template <	typename	ARCH>
void OpUqshl_bbb<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU8(rd, NeonSHL(cpu, cpu.GetVU8(rn, 0), cpu.GetVS8(rm, 0), /* round */ false, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshl_bbb(CodeType code, uint64_t addr)
{
	return new OpUqshl_bbb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshl_bbi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshl\t" << DisasmB(rd) << ", " << DisasmB(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUqshl_bbi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU8(rd, NeonSHL(cpu, cpu.GetVU8(rn, 0), typename ARCH::S8(shift), /* round */ false, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshl_bbi(CodeType code, uint64_t addr)
{
	return new OpUqshl_bbi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshl_ddd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshl\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}
template <	typename	ARCH>
void OpUqshl_ddd<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU64(rd, NeonSHL(cpu, cpu.GetVU64(rn, 0), typename ARCH::S8(cpu.GetVS64(rm, 0)), /* round */ false, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshl_ddd(CodeType code, uint64_t addr)
{
	return new OpUqshl_ddd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshl_ddi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshl\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUqshl_ddi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU64(rd, NeonSHL(cpu, cpu.GetVU64(rn, 0), typename ARCH::S8(shift), /* round */ false, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshl_ddi(CodeType code, uint64_t addr)
{
	return new OpUqshl_ddi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshl_hhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshl\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}
template <	typename	ARCH>
void OpUqshl_hhh<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU16(rd, NeonSHL(cpu, cpu.GetVU16(rn, 0), typename ARCH::S8(cpu.GetVS16(rm, 0)), /* round */ false, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshl_hhh(CodeType code, uint64_t addr)
{
	return new OpUqshl_hhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshl_hhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshl\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUqshl_hhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU16(rd, NeonSHL(cpu, cpu.GetVU16(rn, 0), typename ARCH::S8(shift), /* round */ false, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshl_hhi(CodeType code, uint64_t addr)
{
	return new OpUqshl_hhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshl_ssi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshl\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUqshl_ssi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU32(rd, NeonSHL(cpu, cpu.GetVU32(rn, 0), typename ARCH::S8(shift), /* round */ false, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshl_ssi(CodeType code, uint64_t addr)
{
	return new OpUqshl_ssi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshl_sss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshl\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}
template <	typename	ARCH>
void OpUqshl_sss<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU32(rd, NeonSHL(cpu, cpu.GetVU32(rn, 0), typename ARCH::S8(cpu.GetVS32(rm, 0)), /* round */ false, /* sat */ true));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshl_sss(CodeType code, uint64_t addr)
{
	return new OpUqshl_sss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshl_v2d2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshl\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpUqshl_v2d2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		for (unsigned idx = 0, end = 2; idx < end; ++idx)
		{
			cpu.SetVU64(rd, idx, NeonSHL(cpu, cpu.GetVU64(rn, idx), S8(imm), /* round */ false, /* sat */ true));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshl_v2d2di(CodeType code, uint64_t addr)
{
	return new OpUqshl_v2d2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshl_v2dv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshl\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpUqshl_v2dv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		for (unsigned idx = 0, end = 2; idx < end; ++idx)
		{
			cpu.SetVU64(rd, idx, NeonSHL(cpu, cpu.GetVU64(rn, idx), S8(cpu.GetVS64(rm, idx)), /* round */ false, /* sat */ true));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshl_v2dv2dv2d(CodeType code, uint64_t addr)
{
	return new OpUqshl_v2dv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshrn2_v16b8hi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshrn2\t" << DisasmTV(rd, 16, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUqshrn2_v16b8hi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVU16(rn, idx), typename ARCH::S8(-shift), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshrn2_v16b8hi(CodeType code, uint64_t addr)
{
	return new OpUqshrn2_v16b8hi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshrn2_v4s2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshrn2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUqshrn2_v4s2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVU64(rn, idx), typename ARCH::S8(-shift), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshrn2_v4s2di(CodeType code, uint64_t addr)
{
	return new OpUqshrn2_v4s2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshrn2_v8h4si<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshrn2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUqshrn2_v8h4si<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVU32(rn, idx), typename ARCH::S8(-shift), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshrn2_v8h4si(CodeType code, uint64_t addr)
{
	return new OpUqshrn2_v8h4si<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshrn_bhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshrn\t" << DisasmB(rd) << ", " << DisasmH(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUqshrn_bhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU8(rd, SatNarrow<typename ARCH::U8>(cpu, NeonSHL(cpu, cpu.GetVU16(rn, 0), typename ARCH::S8(-shift), /* round */ false, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshrn_bhi(CodeType code, uint64_t addr)
{
	return new OpUqshrn_bhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshrn_hsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshrn\t" << DisasmH(rd) << ", " << DisasmS(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUqshrn_hsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU16(rd, SatNarrow<typename ARCH::U16>(cpu, NeonSHL(cpu, cpu.GetVU32(rn, 0), typename ARCH::S8(-shift), /* round */ false, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshrn_hsi(CodeType code, uint64_t addr)
{
	return new OpUqshrn_hsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshrn_sdi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshrn\t" << DisasmS(rd) << ", " << DisasmD(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUqshrn_sdi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU32(rd, SatNarrow<typename ARCH::U32>(cpu, NeonSHL(cpu, cpu.GetVU64(rn, 0), typename ARCH::S8(-shift), /* round */ false, /* sat */ true)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshrn_sdi(CodeType code, uint64_t addr)
{
	return new OpUqshrn_sdi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshrn_v2s2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshrn\t" << DisasmTV(rd, 2, 2) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUqshrn_v2s2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVU64(rn, idx), typename ARCH::S8(-shift), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshrn_v2s2di(CodeType code, uint64_t addr)
{
	return new OpUqshrn_v2s2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshrn_v4h4si<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshrn\t" << DisasmTV(rd, 4, 1) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUqshrn_v4h4si<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVU32(rn, idx), typename ARCH::S8(-shift), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshrn_v4h4si(CodeType code, uint64_t addr)
{
	return new OpUqshrn_v4h4si<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshrn_v8b8hi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshrn\t" << DisasmTV(rd, 8, 0) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUqshrn_v8b8hi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, cpu.GetVU16(rn, idx), typename ARCH::S8(-shift), /* round */ false, /* sat */ true));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshrn_v8b8hi(CodeType code, uint64_t addr)
{
	return new OpUqshrn_v8b8hi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqsub_bbb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqsub\t" << DisasmB(rd) << ", " << DisasmB(rn) << ", " << DisasmB(rm);
}}
template <	typename	ARCH>
void OpUqsub_bbb<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU8(rd, SatSub(cpu, cpu.GetVU8(rn, 0), cpu.GetVU8(rm, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqsub_bbb(CodeType code, uint64_t addr)
{
	return new OpUqsub_bbb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqsub_ddd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqsub\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}
template <	typename	ARCH>
void OpUqsub_ddd<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU64(rd, SatSub(cpu, cpu.GetVU64(rn, 0), cpu.GetVU64(rm, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqsub_ddd(CodeType code, uint64_t addr)
{
	return new OpUqsub_ddd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqsub_hhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqsub\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}
template <	typename	ARCH>
void OpUqsub_hhh<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU16(rd, SatSub(cpu, cpu.GetVU16(rn, 0), cpu.GetVU16(rm, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqsub_hhh(CodeType code, uint64_t addr)
{
	return new OpUqsub_hhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqsub_sss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqsub\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}
template <	typename	ARCH>
void OpUqsub_sss<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU32(rd, SatSub(cpu, cpu.GetVU32(rn, 0), cpu.GetVU32(rm, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqsub_sss(CodeType code, uint64_t addr)
{
	return new OpUqsub_sss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqsub_v2dv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqsub\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpUqsub_v2dv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0; idx < 2; ++idx)
		{
			cpu.SetVU64(rd, idx, SatSub(cpu, cpu.GetVU64(rn, idx), cpu.GetVU64(rm, idx)));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqsub_v2dv2dv2d(CodeType code, uint64_t addr)
{
	return new OpUqsub_v2dv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqxtn2_v16b8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqxtn2\t" << DisasmTV(rd, 16, 0) << ", " << DisasmTV(rn, 8, 1);
}}
template <	typename	ARCH>
void OpUqxtn2_v16b8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, cpu.GetVU16(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqxtn2_v16b8h(CodeType code, uint64_t addr)
{
	return new OpUqxtn2_v16b8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqxtn2_v4s2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqxtn2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 2, 3);
}}
template <	typename	ARCH>
void OpUqxtn2_v4s2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu , cpu.GetVU64(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqxtn2_v4s2d(CodeType code, uint64_t addr)
{
	return new OpUqxtn2_v4s2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqxtn2_v8h4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqxtn2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 4, 2);
}}
template <	typename	ARCH>
void OpUqxtn2_v8h4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, cpu.GetVU32(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqxtn2_v8h4s(CodeType code, uint64_t addr)
{
	return new OpUqxtn2_v8h4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqxtn_bh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqxtn\t" << DisasmB(rd) << ", " << DisasmH(rn);
}}
template <	typename	ARCH>
void OpUqxtn_bh<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU8(rd, SatNarrow<typename ARCH::U8>(cpu, cpu.GetVU16(rn, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqxtn_bh(CodeType code, uint64_t addr)
{
	return new OpUqxtn_bh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqxtn_hs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqxtn\t" << DisasmH(rd) << ", " << DisasmS(rn);
}}
template <	typename	ARCH>
void OpUqxtn_hs<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU16(rd, SatNarrow<typename ARCH::U16>(cpu, cpu.GetVU32(rn, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqxtn_hs(CodeType code, uint64_t addr)
{
	return new OpUqxtn_hs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqxtn_sd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqxtn\t" << DisasmS(rd) << ", " << DisasmD(rn);
}}
template <	typename	ARCH>
void OpUqxtn_sd<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU32(rd, SatNarrow<typename ARCH::U32>(cpu, cpu.GetVU64(rn, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqxtn_sd(CodeType code, uint64_t addr)
{
	return new OpUqxtn_sd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqxtn_v2s2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqxtn\t" << DisasmTV(rd, 2, 2) << ", " << DisasmTV(rn, 2, 3);
}}
template <	typename	ARCH>
void OpUqxtn_v2s2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, cpu.GetVU64(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqxtn_v2s2d(CodeType code, uint64_t addr)
{
	return new OpUqxtn_v2s2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqxtn_v4h4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqxtn\t" << DisasmTV(rd, 4, 1) << ", " << DisasmTV(rn, 4, 2);
}}
template <	typename	ARCH>
void OpUqxtn_v4h4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, cpu.GetVU32(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqxtn_v4h4s(CodeType code, uint64_t addr)
{
	return new OpUqxtn_v4h4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqxtn_v8b8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqxtn\t" << DisasmTV(rd, 8, 0) << ", " << DisasmTV(rn, 8, 1);
}}
template <	typename	ARCH>
void OpUqxtn_v8b8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, cpu.GetVU16(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqxtn_v8b8h(CodeType code, uint64_t addr)
{
	return new OpUqxtn_v8b8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUrshl_ddd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "urshl\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}
template <	typename	ARCH>
void OpUrshl_ddd<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		cpu.SetVU64(rd, NeonSHL(cpu, cpu.GetVU64(rn, 0), S8(cpu.GetVS64(rm, 0)), /* round */ true, /* sat */ false));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUrshl_ddd(CodeType code, uint64_t addr)
{
	return new OpUrshl_ddd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUrshl_v2dv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "urshl\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpUrshl_v2dv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		for (unsigned idx = 0, end = 2; idx < end; ++idx)
		{
			cpu.SetVU64(rd, idx, NeonSHL(cpu, cpu.GetVU64(rn, idx), S8(cpu.GetVS64(rm, idx)), /* round */ true, /* sat */ false));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUrshl_v2dv2dv2d(CodeType code, uint64_t addr)
{
	return new OpUrshl_v2dv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUrshr_ddi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "urshr\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUrshr_ddi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU64(rd, NeonSHL(cpu, cpu.GetVU64(rn, 0), typename ARCH::S8(-shift), /* round */ true, /* sat */ false));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUrshr_ddi(CodeType code, uint64_t addr)
{
	return new OpUrshr_ddi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUrsra_ddi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ursra\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUrsra_ddi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU64(rd, cpu.GetVU64(rd, 0) + NeonSHL(cpu, cpu.GetVU64(rn, 0), typename ARCH::S8(-shift), /* round */ true, /* sat */ false));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUrsra_ddi(CodeType code, uint64_t addr)
{
	return new OpUrsra_ddi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUshr_ddi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ushr\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUshr_ddi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU64(rd, NeonSHL(cpu, cpu.GetVU64(rn, 0), typename ARCH::S8(-shift)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUshr_ddi(CodeType code, uint64_t addr)
{
	return new OpUshr_ddi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUsqadd_bb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "usqadd\t" << DisasmB(rd) << ", " << DisasmB(rn);
}}
template <	typename	ARCH>
void OpUsqadd_bb<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU8(rd, SatAdd(cpu, cpu.GetVU8(rd, 0), cpu.GetVS8(rn, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUsqadd_bb(CodeType code, uint64_t addr)
{
	return new OpUsqadd_bb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUsqadd_dd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "usqadd\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}
template <	typename	ARCH>
void OpUsqadd_dd<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU64(rd, SatAdd(cpu, cpu.GetVU64(rd, 0), cpu.GetVS64(rn, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUsqadd_dd(CodeType code, uint64_t addr)
{
	return new OpUsqadd_dd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUsqadd_hh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "usqadd\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}
template <	typename	ARCH>
void OpUsqadd_hh<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU16(rd, SatAdd(cpu, cpu.GetVU16(rd, 0), cpu.GetVS16(rn, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUsqadd_hh(CodeType code, uint64_t addr)
{
	return new OpUsqadd_hh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUsqadd_ss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "usqadd\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}
template <	typename	ARCH>
void OpUsqadd_ss<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU32(rd, SatAdd(cpu, cpu.GetVU32(rd, 0), cpu.GetVS32(rn, 0)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUsqadd_ss(CodeType code, uint64_t addr)
{
	return new OpUsqadd_ss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUsqadd_v2d2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "usqadd\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3);
}}
template <	typename	ARCH>
void OpUsqadd_v2d2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0; idx < 2; ++idx)
		{
			cpu.SetVU64(rd, idx, SatAdd(cpu, cpu.GetVU64(rd, idx), cpu.GetVS64(rn, idx)));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUsqadd_v2d2d(CodeType code, uint64_t addr)
{
	return new OpUsqadd_v2d2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUsra_ddi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "usra\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUsra_ddi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU64(rd, cpu.GetVU64(rd, 0) + NeonSHL(cpu, cpu.GetVU64(rn, 0), typename ARCH::S8(-shift)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUsra_ddi(CodeType code, uint64_t addr)
{
	return new OpUsra_ddi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUsubl2_v2dv4sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "usubl2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpUsubl2_v2dv4sv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;
		typedef typename ARCH::U64 U64;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = U64(cpu.GetVU32(rn, elements + idx)) - U64(cpu.GetVU32(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUsubl2_v2dv4sv4s(CodeType code, uint64_t addr)
{
	return new OpUsubl2_v2dv4sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUsubl2_v4sv8hv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "usubl2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpUsubl2_v4sv8hv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		typedef typename ARCH::U32 U32;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = U32(cpu.GetVU16(rn, elements + idx)) - U32(cpu.GetVU16(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUsubl2_v4sv8hv8h(CodeType code, uint64_t addr)
{
	return new OpUsubl2_v4sv8hv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUsubl2_v8hv16bv16b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "usubl2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 16, 0) << ", " << DisasmTV(rm, 16, 0);
}}
template <	typename	ARCH>
void OpUsubl2_v8hv16bv16b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		typedef typename ARCH::U16 U16;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = U16(cpu.GetVU8(rn, elements + idx)) - U16(cpu.GetVU8(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUsubl2_v8hv16bv16b(CodeType code, uint64_t addr)
{
	return new OpUsubl2_v8hv16bv16b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUsubl_v2dv2sv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "usubl\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 2) << ", " << DisasmTV(rm, 2, 2);
}}
template <	typename	ARCH>
void OpUsubl_v2dv2sv2s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		for (unsigned idx = 0; idx < 2; ++idx)
		{
			cpu.SetVU64(rd, idx, U64(cpu.GetVU32(rn, idx)) - U64(cpu.GetVU32(rm, idx)));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUsubl_v2dv2sv2s(CodeType code, uint64_t addr)
{
	return new OpUsubl_v2dv2sv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUsubl_v4sv4hv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "usubl\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 1) << ", " << DisasmTV(rm, 4, 1);
}}
template <	typename	ARCH>
void OpUsubl_v4sv4hv4h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		for (unsigned idx = 0; idx < 4; ++idx)
		{
			cpu.SetVU32(rd, idx, U32(cpu.GetVU16(rn, idx)) - U32(cpu.GetVU16(rm, idx)));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUsubl_v4sv4hv4h(CodeType code, uint64_t addr)
{
	return new OpUsubl_v4sv4hv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUsubl_v8hv8bv8b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "usubl\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8, 0) << ", " << DisasmTV(rm, 8, 0);
}}
template <	typename	ARCH>
void OpUsubl_v8hv8bv8b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		for (unsigned idx = 0; idx < 8; ++idx)
		{
			cpu.SetVU16(rd, idx, U16(cpu.GetVU8(rn, idx)) - U16(cpu.GetVU8(rm, idx)));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUsubl_v8hv8bv8b(CodeType code, uint64_t addr)
{
	return new OpUsubl_v8hv8bv8b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUsubw2_v2dv2dv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "usubw2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 4, 2);
}}
template <	typename	ARCH>
void OpUsubw2_v2dv2dv4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU64(rn, idx) - DST(cpu.GetVU32(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUsubw2_v2dv2dv4s(CodeType code, uint64_t addr)
{
	return new OpUsubw2_v2dv2dv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUsubw2_v4sv4sv8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "usubw2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 8, 1);
}}
template <	typename	ARCH>
void OpUsubw2_v4sv4sv8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU32(rn, idx) - DST(cpu.GetVU16(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUsubw2_v4sv4sv8h(CodeType code, uint64_t addr)
{
	return new OpUsubw2_v4sv4sv8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUsubw2_v8hv8hv16b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "usubw2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 16, 0);
}}
template <	typename	ARCH>
void OpUsubw2_v8hv8hv16b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU16(rn, idx) - DST(cpu.GetVU8(rm, elements + idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUsubw2_v8hv8hv16b(CodeType code, uint64_t addr)
{
	return new OpUsubw2_v8hv8hv16b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUsubw_v2dv2dv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "usubw\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 2);
}}
template <	typename	ARCH>
void OpUsubw_v2dv2dv2s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU64(rn, idx) - DST(cpu.GetVU32(rm, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUsubw_v2dv2dv2s(CodeType code, uint64_t addr)
{
	return new OpUsubw_v2dv2dv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUsubw_v4sv4sv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "usubw\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4, 2) << ", " << DisasmTV(rm, 4, 1);
}}
template <	typename	ARCH>
void OpUsubw_v4sv4sv4h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU32(rn, idx) - DST(cpu.GetVU16(rm, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUsubw_v4sv4sv4h(CodeType code, uint64_t addr)
{
	return new OpUsubw_v4sv4sv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUsubw_v8hv8hv8b<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "usubw\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8, 1) << ", " << DisasmTV(rm, 8, 0);
}}
template <	typename	ARCH>
void OpUsubw_v8hv8hv8b<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU16(rn, idx) - DST(cpu.GetVU8(rm, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUsubw_v8hv8hv8b(CodeType code, uint64_t addr)
{
	return new OpUsubw_v8hv8hv8b<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUzp1_v2dv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uzp1\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpUzp1_v2dv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;

		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0, srcidx = 0; idx < (elements/2); ++idx, srcidx += 2)
		{
			res[idx] = cpu.GetVU64(rn, srcidx);
		}
		for (unsigned idx = elements/2, srcidx = 0; idx < elements; ++idx, srcidx += 2)
		{
			res[idx] = cpu.GetVU64(rm, srcidx);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUzp1_v2dv2dv2d(CodeType code, uint64_t addr)
{
	return new OpUzp1_v2dv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUzp2_v2dv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uzp2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpUzp2_v2dv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;

		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0, srcidx = 1; idx < (elements/2); ++idx, srcidx += 2)
		{
			res[idx] = cpu.GetVU64(rn, srcidx);
		}
		for (unsigned idx = elements/2, srcidx = 1; idx < elements; ++idx, srcidx += 2)
		{
			res[idx] = cpu.GetVU64(rm, srcidx);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUzp2_v2dv2dv2d(CodeType code, uint64_t addr)
{
	return new OpUzp2_v2dv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUzp2_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uzp2\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpUzp2_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;

		unsigned const elements = 4<<q;
		DST res[elements];
		for (unsigned idx = 0, srcidx = 1; idx < (elements/2); ++idx, srcidx += 2)
		{
			res[idx] = cpu.GetVU16(rn, srcidx);
		}
		for (unsigned idx = elements/2, srcidx = 1; idx < elements; ++idx, srcidx += 2)
		{
			res[idx] = cpu.GetVU16(rm, srcidx);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUzp2_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpUzp2_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpXtn2_v16b8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "xtn2\t" << DisasmTV(rd, 16, 0) << ", " << DisasmTV(rn, 8, 1);
}}
template <	typename	ARCH>
void OpXtn2_v16b8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU16(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpXtn2_v16b8h(CodeType code, uint64_t addr)
{
	return new OpXtn2_v16b8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpXtn2_v8h4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "xtn2\t" << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 4, 2);
}}
template <	typename	ARCH>
void OpXtn2_v8h4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU32(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpXtn2_v8h4s(CodeType code, uint64_t addr)
{
	return new OpXtn2_v8h4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpXtn2_v4s2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "xtn2\t" << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 2, 3);
}}
template <	typename	ARCH>
void OpXtn2_v4s2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU64(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, elements + idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpXtn2_v4s2d(CodeType code, uint64_t addr)
{
	return new OpXtn2_v4s2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpXtn_v2s2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "xtn\t" << DisasmTV(rd, 2, 2) << ", " << DisasmTV(rn, 2, 3);
}}
template <	typename	ARCH>
void OpXtn_v2s2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		unsigned const elements = 2;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU64(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpXtn_v2s2d(CodeType code, uint64_t addr)
{
	return new OpXtn_v2s2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpXtn_v4h4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "xtn\t" << DisasmTV(rd, 4, 1) << ", " << DisasmTV(rn, 4, 2);
}}
template <	typename	ARCH>
void OpXtn_v4h4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		unsigned const elements = 4;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU32(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpXtn_v4h4s(CodeType code, uint64_t addr)
{
	return new OpXtn_v4h4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpXtn_v8b8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "xtn\t" << DisasmTV(rd, 8, 0) << ", " << DisasmTV(rn, 8, 1);
}}
template <	typename	ARCH>
void OpXtn_v8b8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;
		unsigned const elements = 8;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU16(rn, idx));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpXtn_v8b8h(CodeType code, uint64_t addr)
{
	return new OpXtn_v8b8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpZip1_v2dv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "zip1\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpZip1_v2dv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;

		unsigned const elements = 2;
		DST res[elements];
		for( unsigned idx = 0; idx < elements; ++idx)
		{
			unsigned srcidx = idx / 2;
			res[idx] = cpu.GetVU64((idx & 1) ? rm : rn, srcidx);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpZip1_v2dv2dv2d(CodeType code, uint64_t addr)
{
	return new OpZip1_v2dv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpZip2_v2dv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "zip2\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpZip2_v2dv2dv2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;

		unsigned const elements = 2;
		DST res[elements];
		for( unsigned idx = 0; idx < elements; ++idx)
		{
			unsigned srcidx = (idx / 2) + (elements / 2);
			res[idx] = cpu.GetVU64((idx & 1) ? rm : rn, srcidx);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpZip2_v2dv2dv2d(CodeType code, uint64_t addr)
{
	return new OpZip2_v2dv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpOrr_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		if (rn == rm)
		sink << "mov\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0);
		else
		sink << "orr\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpOrr_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end=8<<q; idx < end; ++idx)
		cpu.SetVU8(rd, idx, cpu.GetVU8(rn, idx) | cpu.GetVU8(rm, idx));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpOrr_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpOrr_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpAnd_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "and\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpAnd_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		cpu.SetVU8(rd, idx, cpu.GetVU8(rn, idx) & cpu.GetVU8(rm, idx));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpAnd_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpAnd_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBic_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bic\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpBic_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		cpu.SetVU8(rd, idx, cpu.GetVU8(rn, idx) & ~cpu.GetVU8(rm, idx));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBic_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpBic_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBic_vhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bic\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmI(int16_t(imm >> sh)) << ", lsl #" << +sh;
}}
template <	typename	ARCH>
void OpBic_vhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		cpu.SetVU16(rd, idx, cpu.GetVU16(rd, idx) & typename ARCH::U16(~imm));

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBic_vhi(CodeType code, uint64_t addr)
{
	return new OpBic_vhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBic_vsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bic\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmI(int32_t(imm >> sh)) << ", lsl #" << +sh;
}}
template <	typename	ARCH>
void OpBic_vsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		cpu.SetVU32(rd, idx, cpu.GetVU32(rd, idx) & typename ARCH::U32(~imm));

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBic_vsi(CodeType code, uint64_t addr)
{
	return new OpBic_vsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBit<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bit\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpBit<	ARCH>::execute( ARCH & cpu) const
{
	{
		// Working on 64 bits since the byte nature is irrelevant (TODO: respect the native type ? ... bitvector ?)
		for (unsigned e=0, end=1<<q; e < end; ++e)
		{
			typename ARCH::U64 sel = cpu.GetVU64(rm, e);
			cpu.SetVU64(rd, e, (cpu.GetVU64(rn, e) & sel) | (cpu.GetVU64(rd, e) & ~sel));
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBit(CodeType code, uint64_t addr)
{
	return new OpBit<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBif<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bif\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpBif<	ARCH>::execute( ARCH & cpu) const
{
	{
		// Working on 64 bits since the byte nature is irrelevant (TODO: respect the native type ? ... bitvector ?)
		for (unsigned e=0, end=1<<q; e < end; ++e)
		{
			typename ARCH::U64 sel = cpu.GetVU64(rm, e);
			cpu.SetVU64(rd, e, (cpu.GetVU64(rd, e) & sel) | (cpu.GetVU64(rn, e) & ~sel));
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBif(CodeType code, uint64_t addr)
{
	return new OpBif<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpBsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "bsl\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpBsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		// Working on 64 bits since the byte nature is irrelevant (TODO: respect the native type ? ... bitvector ?)
		for (unsigned e=0, end=1<<q; e < end; ++e)
		{
			typename ARCH::U64 sel = cpu.GetVU64(rd, e);
			cpu.SetVU64(rd, e, (cpu.GetVU64(rn, e) & sel) | (cpu.GetVU64(rm, e) & ~sel));
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpBsl(CodeType code, uint64_t addr)
{
	return new OpBsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCls_vbb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cls\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpCls_vbb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::S8 S8;

		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			U8 val( cpu.GetVU8(rn, idx) );
			val = val ^ U8(S8(val) >> 1);

			if (cpu.Test( val == U8(0) ))
			val = U8(7);
			else
			val = U8(6) - BitScanReverse( val );

			cpu.SetVU8(rd, idx, val);
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCls_vbb(CodeType code, uint64_t addr)
{
	return new OpCls_vbb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCls_vhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cls\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}
template <	typename	ARCH>
void OpCls_vhh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::S16 S16;

		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			U16 val( cpu.GetVU16(rn, idx) );
			val = val ^ U16(S16(val) >> 1);

			if (cpu.Test( val == U16(0) ))
			val = U16(15);
			else
			val = U16(14) - BitScanReverse( val );

			cpu.SetVU16(rd, idx, val);
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCls_vhh(CodeType code, uint64_t addr)
{
	return new OpCls_vhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCls_vss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cls\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}
template <	typename	ARCH>
void OpCls_vss<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;

		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			U32 val( cpu.GetVU32(rn, idx) );
			val = val ^ U32(S32(val) >> 1);

			if (cpu.Test( val == U32(0) ))
			val = U32(31);
			else
			val = U32(30) - BitScanReverse( val );

			cpu.SetVU32(rd, idx, val);
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCls_vss(CodeType code, uint64_t addr)
{
	return new OpCls_vss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpClz_vbb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "clz\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpClz_vbb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;

		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			U8 val( cpu.GetVU8(rn, idx) );
			if (cpu.Test( val == U8(0) ))
			val = U8(8);
			else
			val = U8(7) - BitScanReverse( val );

			cpu.SetVU8(rd, idx, val);
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpClz_vbb(CodeType code, uint64_t addr)
{
	return new OpClz_vbb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpClz_vhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "clz\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}
template <	typename	ARCH>
void OpClz_vhh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;

		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			U16 val( cpu.GetVU16(rn, idx) );
			if (cpu.Test( val == U16(0) ))
			val = U16(16);
			else
			val = U16(15) - BitScanReverse( val );

			cpu.SetVU16(rd, idx, val);
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpClz_vhh(CodeType code, uint64_t addr)
{
	return new OpClz_vhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpClz_vss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "clz\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}
template <	typename	ARCH>
void OpClz_vss<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			U32 val( cpu.GetVU32(rn, idx) );
			if (cpu.Test( val == U32(0) ))
			val = U32(32);
			else
			val = U32(31) - BitScanReverse( val );

			cpu.SetVU32(rd, idx, val);
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpClz_vss(CodeType code, uint64_t addr)
{
	return new OpClz_vss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmtst_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmtst\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpCmtst_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;

		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			U8 val( cpu.GetVU8(rn, idx) & cpu.GetVU8(rm, idx) );
			cpu.SetVU8(rd, idx, cpu.Test(val != U8(0)) ? ~U8(0) : U8(0));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmtst_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpCmtst_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmtst_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmtst\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpCmtst_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;

		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			U16 val( cpu.GetVU16(rn, idx) & cpu.GetVU16(rm, idx) );
			cpu.SetVU16(rd, idx, cpu.Test(val != U16(0)) ? ~U16(0) : U16(0));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmtst_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpCmtst_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCmtst_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cmtst\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpCmtst_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			U32 val( cpu.GetVU32(rn, idx) & cpu.GetVU32(rm, idx) );
			cpu.SetVU32(rd, idx, cpu.Test(val != U32(0)) ? ~U32(0) : U32(0));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCmtst_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpCmtst_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpCnt_vbb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "cnt\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpCnt_vbb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;

		for (unsigned idx = 0, end=8<<q; idx < end; ++idx)
		{
			cpu.SetVU8(rd, idx, U8(PopCount(cpu.GetVU8(rn, idx))));
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpCnt_vbb(CodeType code, uint64_t addr)
{
	return new OpCnt_vbb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMov_bvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mov\t" << DisasmB(rd) << ", " << DisasmTV(rn, 0, 0) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpMov_bvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU8(rd, 0, cpu.GetVU8(rn, index));
		cpu.ClearHighV(rd, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMov_bvb(CodeType code, uint64_t addr)
{
	return new OpMov_bvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMov_hvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mov\t" << DisasmH(rd) << ", " << DisasmTV(rn, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpMov_hvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU16(rd, 0, cpu.GetVU16(rn, index));
		cpu.ClearHighV(rd, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMov_hvh(CodeType code, uint64_t addr)
{
	return new OpMov_hvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMov_svs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mov\t" << DisasmS(rd) << ", " << DisasmTV(rn, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpMov_svs<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU32(rd, 0, cpu.GetVU32(rn, index));
		cpu.ClearHighV(rd, 4);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMov_svs(CodeType code, uint64_t addr)
{
	return new OpMov_svs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMov_dvd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mov\t" << DisasmD(rd) << ", " << DisasmTV(rn, 0, 3) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpMov_dvd<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU64(rd, cpu.GetVU64(rn, index));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMov_dvd(CodeType code, uint64_t addr)
{
	return new OpMov_dvd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpDup_vbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "dup\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 0, 0) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpDup_vbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typename ARCH::U8 element( cpu.GetVU8(rn, index) );
		for (unsigned e=0, end=8<<q; e < end; ++e)
		cpu.SetVU8(rd, e, element);
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpDup_vbvb(CodeType code, uint64_t addr)
{
	return new OpDup_vbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpDup_vhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "dup\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpDup_vhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typename ARCH::U16 element( cpu.GetVU16(rn, index) );
		for (unsigned e=0, end=4<<q; e < end; ++e)
		cpu.SetVU16(rd, e, element);
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpDup_vhvh(CodeType code, uint64_t addr)
{
	return new OpDup_vhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpDup_vsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "dup\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpDup_vsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typename ARCH::U32 element( cpu.GetVU32(rn, index) );
		for (unsigned e=0, end=2<<q; e < end; ++e)
		cpu.SetVU32(rd, e, element);
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpDup_vsvs(CodeType code, uint64_t addr)
{
	return new OpDup_vsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpDup_v2dvd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "dup\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 0, 3) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpDup_v2dvd<	ARCH>::execute( ARCH & cpu) const
{
	{
		typename ARCH::U64 element( cpu.GetVU64(rn, index) );
		for (unsigned e=0, end=1<<1; e < end; ++e)
		cpu.SetVU64(rd, e, element);
		cpu.ClearHighV(rd, 8<<1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpDup_v2dvd(CodeType code, uint64_t addr)
{
	return new OpDup_v2dvd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpDup_vb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "dup\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmGZWR(rn);
}}
template <	typename	ARCH>
void OpDup_vb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typename ARCH::U8 element( cpu.GetGZR(rn) );
		for (unsigned e=0, end=8<<q; e < end; ++e)
		cpu.SetVU8(rd, e, element);
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpDup_vb(CodeType code, uint64_t addr)
{
	return new OpDup_vb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpDup_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "dup\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmGZWR(rn);
}}
template <	typename	ARCH>
void OpDup_vh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typename ARCH::U16 element( cpu.GetGZR(rn) );
		for (unsigned e=0, end=4<<q; e < end; ++e)
		cpu.SetVU16(rd, e, element);
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpDup_vh(CodeType code, uint64_t addr)
{
	return new OpDup_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpDup_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "dup\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmGZWR(rn);
}}
template <	typename	ARCH>
void OpDup_vs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typename ARCH::U32 element( cpu.GetGZR(rn) );
		for (unsigned e=0, end=2<<q; e < end; ++e)
		cpu.SetVU32(rd, e, element);
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpDup_vs(CodeType code, uint64_t addr)
{
	return new OpDup_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpDup_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "dup\t" << DisasmTV(rd, 2, 3) << ", " << DisasmGZXR(rn);
}}
template <	typename	ARCH>
void OpDup_v2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typename ARCH::U64 element( cpu.GetGZR(rn) );
		for (unsigned idx = 0; idx < 2; ++idx)
		cpu.SetVU64(rd, idx, element);
		cpu.ClearHighV(rd, 16);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpDup_v2d(CodeType code, uint64_t addr)
{
	return new OpDup_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpEor_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "eor\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpEor_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end=8<<q; idx < end; ++idx)
		cpu.SetVU8(rd, idx, cpu.GetVU8(rn, idx) ^ cpu.GetVU8(rm, idx));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpEor_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpEor_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpExt_vb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ext\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0) << ", " << DisasmI(index);
}}
template <	typename	ARCH>
void OpExt_vb<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned ed = 0, end = 8<<q;
		for (unsigned es = index; es < end; ++es, ++ed)
		cpu.SetVU8(rd, ed, cpu.GetVU8(rn, es));
		for (unsigned es = 0; ed < end; ++es, ++ed)
		cpu.SetVU8(rd, ed, cpu.GetVU8(rm, es));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpExt_vb(CodeType code, uint64_t addr)
{
	return new OpExt_vb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMla_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mla\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpMla_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			U8 res( cpu.GetVU8(rd, idx) + (cpu.GetVU8(rn, idx) * cpu.GetVU8(rm, idx)) );
			cpu.SetVU8(rd, idx, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMla_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpMla_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMla_vhvhvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mla\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpMla_vhvhvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		U16 element( cpu.GetVU16(rm, index) );
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			U16 res( cpu.GetVU16(rd, idx) + (cpu.GetVU16(rn, idx) * element) );
			cpu.SetVU16(rd, idx, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMla_vhvhvhi(CodeType code, uint64_t addr)
{
	return new OpMla_vhvhvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMla_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mla\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpMla_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			U16 res( cpu.GetVU16(rd, idx) + (cpu.GetVU16(rn, idx) * cpu.GetVU16(rm, idx)) );
			cpu.SetVU16(rd, idx, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMla_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpMla_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMla_vsvsvsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mla\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpMla_vsvsvsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		U32 element( cpu.GetVU32(rm, index) );
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			U32 res( cpu.GetVU32(rd, idx) + (cpu.GetVU32(rn, idx) * element) );
			cpu.SetVU32(rd, idx, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMla_vsvsvsi(CodeType code, uint64_t addr)
{
	return new OpMla_vsvsvsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMla_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mla\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpMla_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			U32 res( cpu.GetVU32(rd, idx) + (cpu.GetVU32(rn, idx) * cpu.GetVU32(rm, idx)) );
			cpu.SetVU32(rd, idx, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMla_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpMla_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMls_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mls\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpMls_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			U8 res( cpu.GetVU8(rd, idx) - (cpu.GetVU8(rn, idx) * cpu.GetVU8(rm, idx)) );
			cpu.SetVU8(rd, idx, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMls_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpMls_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMls_vhvhvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mls\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpMls_vhvhvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		U16 element( cpu.GetVU16(rm, index) );
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			U16 res( cpu.GetVU16(rd, idx) - (cpu.GetVU16(rn, idx) * element) );
			cpu.SetVU16(rd, idx, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMls_vhvhvhi(CodeType code, uint64_t addr)
{
	return new OpMls_vhvhvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMls_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mls\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpMls_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			U16 res( cpu.GetVU16(rd, idx) - (cpu.GetVU16(rn, idx) * cpu.GetVU16(rm, idx)) );
			cpu.SetVU16(rd, idx, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMls_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpMls_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMls_vsvsvsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mls\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpMls_vsvsvsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		U32 element( cpu.GetVU32(rm, index) );
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			U32 res( cpu.GetVU32(rd, idx) - (cpu.GetVU32(rn, idx) * element) );
			cpu.SetVU32(rd, idx, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMls_vsvsvsi(CodeType code, uint64_t addr)
{
	return new OpMls_vsvsvsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMls_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mls\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpMls_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			U32 res( cpu.GetVU32(rd, idx) - (cpu.GetVU32(rn, idx) * cpu.GetVU32(rm, idx)) );
			cpu.SetVU32(rd, idx, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMls_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpMls_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMovi_vbi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "movi\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmI(int8_t(imm));
}}
template <	typename	ARCH>
void OpMovi_vbi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;

		for (unsigned idx = 0, end=8<<q; idx < end; ++idx)
		cpu.SetVU8(rd, idx, U8(imm));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMovi_vbi(CodeType code, uint64_t addr)
{
	return new OpMovi_vbi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMovi_vhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "movi\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmI(int16_t(imm >> sh)) << ", lsl #" << +sh;
}}
template <	typename	ARCH>
void OpMovi_vhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;

		for (unsigned idx = 0, end=4<<q; idx < end; ++idx)
		cpu.SetVU16(rd, idx, U16(imm));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMovi_vhi(CodeType code, uint64_t addr)
{
	return new OpMovi_vhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMovi_vsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "movi\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmI(int32_t(imm >> sh)) << ", lsl #" << +sh;
}}
template <	typename	ARCH>
void OpMovi_vsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		for (unsigned idx = 0, end=2<<q; idx < end; ++idx)
		cpu.SetVU32(rd, idx, U32(imm));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMovi_vsi(CodeType code, uint64_t addr)
{
	return new OpMovi_vsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMovi_di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "movi\t" << DisasmD(rd) << ", " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpMovi_di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		cpu.SetVU64(rd, U64(imm));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMovi_di(CodeType code, uint64_t addr)
{
	return new OpMovi_di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMovi_v2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "movi\t" << DisasmTV(rd, 2, 3) << ", " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpMovi_v2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		for (unsigned idx = 0; idx < 2; ++idx)
		cpu.SetVU64(rd, idx, U64(imm));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMovi_v2di(CodeType code, uint64_t addr)
{
	return new OpMovi_v2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMovi_vsmsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "movi\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmI(int32_t(uint32_t(imm1|imm0) >> 16)) << ", msl #" << (sh ? "16" : "8");
}}
template <	typename	ARCH>
void OpMovi_vsmsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		for (unsigned idx = 0, end=2<<q; idx < end; ++idx)
		cpu.SetVU32(rd, idx, U32(imm));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMovi_vsmsl(CodeType code, uint64_t addr)
{
	return new OpMovi_vsmsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMul_vb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mul\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpMul_vb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		cpu.SetVU8(rd, idx, cpu.GetVU8(rn, idx) * cpu.GetVU8(rm, idx));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMul_vb(CodeType code, uint64_t addr)
{
	return new OpMul_vb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMul_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mul\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpMul_vh<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		cpu.SetVU16(rd, idx, cpu.GetVU16(rn, idx) * cpu.GetVU16(rm, idx));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMul_vh(CodeType code, uint64_t addr)
{
	return new OpMul_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMul_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mul\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpMul_vs<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		cpu.SetVU32(rd, idx, cpu.GetVU32(rn, idx) * cpu.GetVU32(rm, idx));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMul_vs(CodeType code, uint64_t addr)
{
	return new OpMul_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMul_vhvhvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mul\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpMul_vhvhvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		U16 element( cpu.GetVU16(rm, index) );
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		cpu.SetVU16(rd, idx, cpu.GetVU16(rn, idx) * element);
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMul_vhvhvhi(CodeType code, uint64_t addr)
{
	return new OpMul_vhvhvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMul_vsvsvsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mul\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpMul_vsvsvsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		U32 element( cpu.GetVU32(rm, index) );
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		cpu.SetVU32(rd, idx, cpu.GetVU32(rn, idx) * element);
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMul_vsvsvsi(CodeType code, uint64_t addr)
{
	return new OpMul_vsvsvsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMvn_vb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mvn\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpMvn_vb<	ARCH>::execute( ARCH & cpu) const
{
	{
		/* Using a U64 arrangement (by convention arm exhibit a U8 arrangement) */
		for (unsigned idx = 0, end=1<<q; idx < end; ++idx)
		cpu.SetVU64(rd, idx, ~cpu.GetVU64(rn, idx));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMvn_vb(CodeType code, uint64_t addr)
{
	return new OpMvn_vb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMvni_vhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mvni\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmI(imm, 16);
}}
template <	typename	ARCH>
void OpMvni_vhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;

		for (unsigned idx = 0, end=4<<q; idx < end; ++idx)
		cpu.SetVU16(rd, idx, U16(~imm));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMvni_vhi(CodeType code, uint64_t addr)
{
	return new OpMvni_vhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMvni_vsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mvni\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmI(imm, 16);
}}
template <	typename	ARCH>
void OpMvni_vsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		for (unsigned idx = 0, end=2<<q; idx < end; ++idx)
		cpu.SetVU32(rd, idx, U32(~imm));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMvni_vsi(CodeType code, uint64_t addr)
{
	return new OpMvni_vsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpMvni_vsmsl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "mvni\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmI(imm, 16);
}}
template <	typename	ARCH>
void OpMvni_vsmsl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		for (unsigned idx = 0, end=2<<q; idx < end; ++idx)
		cpu.SetVU32(rd, idx, U32(~imm));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpMvni_vsmsl(CodeType code, uint64_t addr)
{
	return new OpMvni_vsmsl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpNeg_vb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "neg\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpNeg_vb<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 8<<q;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVS8(rd, e, -cpu.GetVS8(rn, e));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpNeg_vb(CodeType code, uint64_t addr)
{
	return new OpNeg_vb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpNeg_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "neg\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}
template <	typename	ARCH>
void OpNeg_vh<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 4<<q;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVS16(rd, e, -cpu.GetVS16(rn, e));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpNeg_vh(CodeType code, uint64_t addr)
{
	return new OpNeg_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpNeg_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "neg\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}
template <	typename	ARCH>
void OpNeg_vs<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 2<<q;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVS32(rd, e, -cpu.GetVS32(rn, e));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpNeg_vs(CodeType code, uint64_t addr)
{
	return new OpNeg_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpNeg_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "neg\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3);
}}
template <	typename	ARCH>
void OpNeg_v2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 2;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVS64(rd, e, -cpu.GetVS64(rn, e));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpNeg_v2d(CodeType code, uint64_t addr)
{
	return new OpNeg_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpNeg_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "neg\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}
template <	typename	ARCH>
void OpNeg_d<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVS64(rd, -cpu.GetVS64(rn, 0));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpNeg_d(CodeType code, uint64_t addr)
{
	return new OpNeg_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpOrn_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "orn\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpOrn_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end=8<<q; idx < end; ++idx)
		cpu.SetVU8(rd, idx, cpu.GetVU8(rn, idx) | ~cpu.GetVU8(rm, idx));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpOrn_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpOrn_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpOrr_vhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "orr\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmI(imm, 16);
}}
template <	typename	ARCH>
void OpOrr_vhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		cpu.SetVU16(rd, idx, cpu.GetVU16(rd, idx) | typename ARCH::U16(imm));

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpOrr_vhi(CodeType code, uint64_t addr)
{
	return new OpOrr_vhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpOrr_vsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "orr\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmI(imm, 16);
}}
template <	typename	ARCH>
void OpOrr_vsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		cpu.SetVU32(rd, idx, cpu.GetVU32(rd, idx) | typename ARCH::U32(imm));

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpOrr_vsi(CodeType code, uint64_t addr)
{
	return new OpOrr_vsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpPmul_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "pmul\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpPmul_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;

		for (unsigned idx = 0, end=8<<q; idx < end; ++idx)
		{
			U8 op1(cpu.GetVU8(rn, idx)), op2(cpu.GetVU8(rm, idx)), res(0);
			for (unsigned bit = 0; bit < 8; ++bit)
			res = res ^ (op2*(op1 & U8(1<<bit)));
			cpu.SetVU8(rd, idx, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpPmul_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpPmul_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRbit_vbb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rbit\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpRbit_vbb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		unsigned const elements = 8<<q;

		for (unsigned e = 0; e < elements; ++e)
		{
			U8 res( cpu.GetVU8(rn, e) );
			U8 const masks[] = { U8(0x55), U8(0x33), U8(0x0f) };

			for (unsigned i = 0; i < 3; ++i)
			{
				unsigned shift = (1<<i);
				U8 mask = U8(masks[i]);
				res = ((res >> shift) & mask) | ((res & mask) << shift);
			}

			cpu.SetVU8(rd, e, res);
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRbit_vbb(CodeType code, uint64_t addr)
{
	return new OpRbit_vbb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRev16_vbb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rev16\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpRev16_vbb<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 8<<q;
		typename ARCH::U8 res[elements];
		for (unsigned e=0; e < elements; e += 1)
		res[e] = cpu.GetVU8(rn, e^1);
		for (unsigned e=0; e < elements; e += 1)
		cpu.SetVU8(rd, e, res[e]);
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRev16_vbb(CodeType code, uint64_t addr)
{
	return new OpRev16_vbb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRev32_vbb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rev32\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpRev32_vbb<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 8<<q;
		typename ARCH::U8 res[elements];
		for (unsigned e=0; e < elements; e += 1)
		res[e] = cpu.GetVU8(rn, e^3);
		for (unsigned e=0; e < elements; e += 1)
		cpu.SetVU8(rd, e, res[e]);
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRev32_vbb(CodeType code, uint64_t addr)
{
	return new OpRev32_vbb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRev32_vhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rev32\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}
template <	typename	ARCH>
void OpRev32_vhh<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 4<<q;
		typename ARCH::U16 res[elements];
		for (unsigned e=0; e < elements; e += 1)
		res[e] = cpu.GetVU16(rn, e^1);
		for (unsigned e=0; e < elements; e += 1)
		cpu.SetVU16(rd, e, res[e]);
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRev32_vhh(CodeType code, uint64_t addr)
{
	return new OpRev32_vhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRev64_vbb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rev64\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpRev64_vbb<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 8<<q;
		typename ARCH::U8 res[elements];
		for (unsigned e=0; e < elements; e += 1)
		res[e] = cpu.GetVU8(rn, e^7);
		for (unsigned e=0; e < elements; e += 1)
		cpu.SetVU8(rd, e, res[e]);
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRev64_vbb(CodeType code, uint64_t addr)
{
	return new OpRev64_vbb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRev64_vhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rev64\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}
template <	typename	ARCH>
void OpRev64_vhh<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 4<<q;
		typename ARCH::U16 res[elements];
		for (unsigned e=0; e < elements; e += 1)
		res[e] = cpu.GetVU16(rn, e^3);
		for (unsigned e=0; e < elements; e += 1)
		cpu.SetVU16(rd, e, res[e]);
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRev64_vhh(CodeType code, uint64_t addr)
{
	return new OpRev64_vhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpRev64_vss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "rev64\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}
template <	typename	ARCH>
void OpRev64_vss<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 2<<q;
		typename ARCH::U32 res[elements];
		for (unsigned e=0; e < elements; e += 1)
		res[e] = cpu.GetVU32(rn, e^1);
		for (unsigned e=0; e < elements; e += 1)
		cpu.SetVU32(rd, e, res[e]);
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpRev64_vss(CodeType code, uint64_t addr)
{
	return new OpRev64_vss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSaba_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "saba\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpSaba_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::S16 S16;
		unsigned const elements = 8<<q;
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS8(rd, idx, cpu.GetVS8(rd, idx) + S8(Abs(cpu, S16(cpu.GetVS8(rn, idx)) - S16(cpu.GetVS8(rm, idx)))));
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSaba_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpSaba_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSaba_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "saba\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpSaba_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S32 S32;
		unsigned const elements = 4<<q;
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, cpu.GetVS16(rd, idx) + S16(Abs(cpu, S32(cpu.GetVS16(rn, idx)) - S32(cpu.GetVS16(rm, idx)))));
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSaba_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpSaba_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSaba_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "saba\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpSaba_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		unsigned const elements = 2<<q;
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, cpu.GetVS32(rd, idx) + S32(Abs(cpu, S64(cpu.GetVS32(rn, idx)) - S64(cpu.GetVS32(rm, idx)))));
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSaba_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpSaba_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSabd_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sabd\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpSabd_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::S16 S16;
		unsigned const elements = 8<<q;
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS8(rd, idx, S8(Abs(cpu, S16(cpu.GetVS8(rn, idx)) - S16(cpu.GetVS8(rm, idx)))));
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSabd_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpSabd_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSabd_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sabd\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpSabd_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S32 S32;
		unsigned const elements = 4<<q;
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, S16(Abs(cpu, S32(cpu.GetVS16(rn, idx)) - S32(cpu.GetVS16(rm, idx)))));
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSabd_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpSabd_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSabd_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sabd\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpSabd_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		unsigned const elements = 2<<q;
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, S32(Abs(cpu, S64(cpu.GetVS32(rn, idx)) - S64(cpu.GetVS32(rm, idx)))));
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSabd_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpSabd_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSadalp_vhb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sadalp\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpSadalp_vhb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		typedef typename ARCH::S16 S16;
		unsigned const elements = 4<<q;

		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS16(rd, idx) + S16(cpu.GetVS8(rn, 2*idx)) + S16(cpu.GetVS8(rn, (2*idx)+1));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, res[idx]);
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSadalp_vhb(CodeType code, uint64_t addr)
{
	return new OpSadalp_vhb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSadalp_vsh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sadalp\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 4<<q, 1);
}}
template <	typename	ARCH>
void OpSadalp_vsh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		typedef typename ARCH::S32 S32;
		unsigned const elements = 2<<q;

		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS32(rd, idx) + S32(cpu.GetVS16(rn, 2*idx)) + S32(cpu.GetVS16(rn, (2*idx)+1));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSadalp_vsh(CodeType code, uint64_t addr)
{
	return new OpSadalp_vsh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSadalp_vds<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sadalp\t" << DisasmTV(rd, 1<<q, 3) << ", " << DisasmTV(rn, 2<<q, 2);
}}
template <	typename	ARCH>
void OpSadalp_vds<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S64 DST;
		typedef typename ARCH::S64 S64;
		unsigned const elements = 1<<q;

		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVS64(rd, idx) + S64(cpu.GetVS32(rn, 2*idx)) + S64(cpu.GetVS32(rn, (2*idx)+1));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS64(rd, idx, res[idx]);
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSadalp_vds(CodeType code, uint64_t addr)
{
	return new OpSadalp_vds<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSaddlp_vhb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "saddlp\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpSaddlp_vhb<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 4<<q;
		typedef typename ARCH::S16 S16;

		for (unsigned e=0; e < elements; e += 1)
		{
			cpu.SetVS16(rd, e, S16(cpu.GetVS8(rn, 2*e+0)) + S16(cpu.GetVS8(rn, 2*e+1)) );
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSaddlp_vhb(CodeType code, uint64_t addr)
{
	return new OpSaddlp_vhb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSaddlp_vsh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "saddlp\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 4<<q, 1);
}}
template <	typename	ARCH>
void OpSaddlp_vsh<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 2<<q;
		typedef typename ARCH::S32 S32;

		for (unsigned e=0; e < elements; e += 1)
		{
			cpu.SetVS32(rd, e, S32(cpu.GetVS16(rn, 2*e+0)) + S32(cpu.GetVS16(rn, 2*e+1)) );
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSaddlp_vsh(CodeType code, uint64_t addr)
{
	return new OpSaddlp_vsh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSaddlp_vds<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "saddlp\t" << DisasmTV(rd, 1<<q, 3) << ", " << DisasmTV(rn, 2<<q, 2);
}}
template <	typename	ARCH>
void OpSaddlp_vds<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 1<<q;
		typedef typename ARCH::S64 S64;

		for (unsigned e=0; e < elements; e += 1)
		{
			cpu.SetVS64(rd, e, S64(cpu.GetVS32(rn, 2*e+0)) + S64(cpu.GetVS32(rn, 2*e+1)) );
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSaddlp_vds(CodeType code, uint64_t addr)
{
	return new OpSaddlp_vds<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSaddlv_hvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "saddlv\t" << DisasmH(rd) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpSaddlv_hvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 8<<q;
		typedef typename ARCH::S16 S16;

		S16 sum = S16(cpu.GetVS8(rn, 0));
		for (unsigned e=1; e < elements; e += 1)
		{
			sum += S16(cpu.GetVS8(rn, e));
		}

		cpu.SetVS16(rd, 0, sum);
		cpu.ClearHighV(rd, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSaddlv_hvb(CodeType code, uint64_t addr)
{
	return new OpSaddlv_hvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSaddlv_svh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "saddlv\t" << DisasmS(rd) << ", " << DisasmTV(rn, 4<<q, 1);
}}
template <	typename	ARCH>
void OpSaddlv_svh<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 4<<q;
		typedef typename ARCH::S32 S32;

		S32 sum = S32(cpu.GetVS16(rn, 0));
		for (unsigned e=1; e < elements; e += 1)
		{
			sum += S32(cpu.GetVS16(rn, e));
		}

		cpu.SetVS32(rd, 0, sum);
		cpu.ClearHighV(rd, 4);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSaddlv_svh(CodeType code, uint64_t addr)
{
	return new OpSaddlv_svh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpShadd_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "shadd\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpShadd_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::S16 S16;
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		cpu.SetVS8(rd, idx, S8((S16(cpu.GetVS8(rn, idx)) + S16(cpu.GetVS8(rm, idx))) >> 1));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpShadd_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpShadd_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpShadd_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "shadd\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpShadd_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S32 S32;
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		cpu.SetVS16(rd, idx, S16((S32(cpu.GetVS16(rn, idx)) + S32(cpu.GetVS16(rm, idx))) >> 1));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpShadd_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpShadd_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpShadd_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "shadd\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpShadd_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		cpu.SetVS32(rd, idx, S32((S64(cpu.GetVS32(rn, idx)) + S64(cpu.GetVS32(rm, idx))) >> 1));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpShadd_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpShadd_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpShl_ddi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "shl\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpShl_ddi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU64(rd, cpu.GetVU64(rn, 0) << shift);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpShl_ddi(CodeType code, uint64_t addr)
{
	return new OpShl_ddi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpShl_vbbi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "shl\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpShl_vbbi<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		cpu.SetVU8(rd, idx, cpu.GetVU8(rn, idx) << imm);
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpShl_vbbi(CodeType code, uint64_t addr)
{
	return new OpShl_vbbi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpShl_vhhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "shl\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpShl_vhhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		cpu.SetVU16(rd, idx, cpu.GetVU16(rn, idx) << imm);
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpShl_vhhi(CodeType code, uint64_t addr)
{
	return new OpShl_vhhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpShl_vssi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "shl\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpShl_vssi<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		cpu.SetVU32(rd, idx, cpu.GetVU32(rn, idx) << imm);
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpShl_vssi(CodeType code, uint64_t addr)
{
	return new OpShl_vssi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpShl_v2d2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "shl\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpShl_v2d2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0; idx < 2; ++idx)
		cpu.SetVU64(rd, idx, cpu.GetVU64(rn, idx) << imm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpShl_v2d2di(CodeType code, uint64_t addr)
{
	return new OpShl_v2d2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpShsub_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "shsub\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpShsub_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::S16 S16;
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		cpu.SetVS8(rd, idx, S8((S16(cpu.GetVS8(rn, idx)) - S16(cpu.GetVS8(rm, idx))) >> 1));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpShsub_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpShsub_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpShsub_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "shsub\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpShsub_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S32 S32;
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		cpu.SetVS16(rd, idx, S16((S32(cpu.GetVS16(rn, idx)) - S32(cpu.GetVS16(rm, idx))) >> 1));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpShsub_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpShsub_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpShsub_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "shsub\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpShsub_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		cpu.SetVS32(rd, idx, S32((S64(cpu.GetVS32(rn, idx)) - S64(cpu.GetVS32(rm, idx))) >> 1));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpShsub_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpShsub_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSli_ddi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sli\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSli_ddi<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU64(rd, (cpu.GetVU64(rn, 0) << shift) | (cpu.GetVU64(rd, 0) & typename ARCH::U64((1ull<<shift)-1)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSli_ddi(CodeType code, uint64_t addr)
{
	return new OpSli_ddi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSli_vbbi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sli\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSli_vbbi<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned e = 0, end = 8<<q; e < end; e += 1)
		cpu.SetVU8(rd, e, (cpu.GetVU8(rn, e) << shift) | (cpu.GetVU8(rd, e) & typename ARCH::U8((1<<shift)-1)));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSli_vbbi(CodeType code, uint64_t addr)
{
	return new OpSli_vbbi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSli_vhhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sli\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSli_vhhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned e = 0, end = 4<<q; e < end; e += 1)
		cpu.SetVU16(rd, e, (cpu.GetVU16(rn, e) << shift) | (cpu.GetVU16(rd, e) & typename ARCH::U16((1<<shift)-1)));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSli_vhhi(CodeType code, uint64_t addr)
{
	return new OpSli_vhhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSli_vssi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sli\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSli_vssi<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned e = 0, end = 2<<q; e < end; e += 1)
		cpu.SetVU32(rd, e, (cpu.GetVU32(rn, e) << shift) | (cpu.GetVU32(rd, e) & typename ARCH::U32((1<<shift)-1)));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSli_vssi(CodeType code, uint64_t addr)
{
	return new OpSli_vssi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSli_v2d2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sli\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSli_v2d2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned e = 0; e < 2; e += 1)
		cpu.SetVU64(rd, e, (cpu.GetVU64(rn, e) << shift) | (cpu.GetVU64(rd, e) & typename ARCH::U64((1ull<<shift)-1)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSli_v2d2di(CodeType code, uint64_t addr)
{
	return new OpSli_v2d2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmax_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smax\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpSmax_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			cpu.SetVS8(rd, idx, Maximum(cpu.GetVS8(rn, idx), cpu.GetVS8(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmax_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpSmax_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmax_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smax\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpSmax_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			cpu.SetVS16(rd, idx, Maximum(cpu.GetVS16(rn, idx), cpu.GetVS16(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmax_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpSmax_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmax_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smax\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpSmax_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			cpu.SetVS32(rd, idx, Maximum(cpu.GetVS32(rn, idx), cpu.GetVS32(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmax_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpSmax_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmaxp_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smaxp\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpSmaxp_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 8<<q;
		typename ARCH::S8 res[elements];

		for (unsigned e=0; e < elements; e += 2)
		{
			res[       (0+e)/2] = Maximum(cpu.GetVS8(rn, e), cpu.GetVS8(rn, e+1));
			res[(elements+e)/2] = Maximum(cpu.GetVS8(rm, e), cpu.GetVS8(rm, e+1));
		}

		for (unsigned e=0; e < elements; e += 1)
		cpu.SetVS8(rd, e, res[e]);

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmaxp_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpSmaxp_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmaxp_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smaxp\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpSmaxp_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 4<<q;
		typename ARCH::S16 res[elements];

		for (unsigned e=0; e < elements; e += 2)
		{
			res[       (0+e)/2] = Maximum(cpu.GetVS16(rn, e), cpu.GetVS16(rn, e+1));
			res[(elements+e)/2] = Maximum(cpu.GetVS16(rm, e), cpu.GetVS16(rm, e+1));
		}

		for (unsigned e=0; e < elements; e += 1)
		cpu.SetVS16(rd, e, res[e]);

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmaxp_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpSmaxp_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmaxp_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smaxp\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpSmaxp_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 2<<q;
		typename ARCH::S32 res[elements];

		for (unsigned e=0; e < elements; e += 2)
		{
			res[       (0+e)/2] = Maximum(cpu.GetVS32(rn, e), cpu.GetVS32(rn, e+1));
			res[(elements+e)/2] = Maximum(cpu.GetVS32(rm, e), cpu.GetVS32(rm, e+1));
		}

		for (unsigned e=0; e < elements; e += 1)
		cpu.SetVS32(rd, e, res[e]);

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmaxp_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpSmaxp_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmin_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smin\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpSmin_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			cpu.SetVS8(rd, idx, Minimum(cpu.GetVS8(rn, idx), cpu.GetVS8(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmin_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpSmin_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmin_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smin\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpSmin_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			cpu.SetVS16(rd, idx, Minimum(cpu.GetVS16(rn, idx), cpu.GetVS16(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmin_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpSmin_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSmin_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "smin\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpSmin_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			cpu.SetVS32(rd, idx, Minimum(cpu.GetVS32(rn, idx), cpu.GetVS32(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSmin_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpSmin_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSminp_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sminp\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpSminp_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 8<<q;
		typename ARCH::S8 res[elements];

		for (unsigned e=0; e < elements; e += 2)
		{
			res[       (0+e)/2] = Minimum(cpu.GetVS8(rn, e), cpu.GetVS8(rn, e+1));
			res[(elements+e)/2] = Minimum(cpu.GetVS8(rm, e), cpu.GetVS8(rm, e+1));
		}

		for (unsigned e=0; e < elements; e += 1)
		cpu.SetVS8(rd, e, res[e]);

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSminp_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpSminp_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSminp_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 4<<q;
		typename ARCH::S16 res[elements];

		for (unsigned e=0; e < elements; e += 2)
		{
			res[       (0+e)/2] = Minimum(cpu.GetVS16(rn, e), cpu.GetVS16(rn, e+1));
			res[(elements+e)/2] = Minimum(cpu.GetVS16(rm, e), cpu.GetVS16(rm, e+1));
		}

		for (unsigned e=0; e < elements; e += 1)
		cpu.SetVS16(rd, e, res[e]);

		cpu.ClearHighV(rd, 8<<q);
}}
template <	typename	ARCH>
void OpSminp_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sminp\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSminp_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpSminp_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSminp_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sminp\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpSminp_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 2<<q;
		typename ARCH::S32 res[elements];

		for (unsigned e=0; e < elements; e += 2)
		{
			res[       (0+e)/2] = Minimum(cpu.GetVS32(rn, e), cpu.GetVS32(rn, e+1));
			res[(elements+e)/2] = Minimum(cpu.GetVS32(rm, e), cpu.GetVS32(rm, e+1));
		}

		for (unsigned e=0; e < elements; e += 1)
		cpu.SetVS32(rd, e, res[e]);

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSminp_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpSminp_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqabs_vbb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqabs\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpSqabs_vbb<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 8<<q;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVS8(rd, e, Abs(cpu, cpu.GetVS8(rn, e), /* sat */ true));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqabs_vbb(CodeType code, uint64_t addr)
{
	return new OpSqabs_vbb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqabs_vhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqabs\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}
template <	typename	ARCH>
void OpSqabs_vhh<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 4<<q;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVS16(rd, e, Abs(cpu, cpu.GetVS16(rn, e), /* sat */ true));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqabs_vhh(CodeType code, uint64_t addr)
{
	return new OpSqabs_vhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqabs_vss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqabs\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}
template <	typename	ARCH>
void OpSqabs_vss<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 2<<q;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVS32(rd, e, Abs(cpu, cpu.GetVS32(rn, e), /* sat */ true));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqabs_vss(CodeType code, uint64_t addr)
{
	return new OpSqabs_vss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqadd_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqadd\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpSqadd_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			cpu.SetVS8(rd, idx, SatAdd(cpu, cpu.GetVS8(rn, idx), cpu.GetVS8(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqadd_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpSqadd_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqadd_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqadd\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpSqadd_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			cpu.SetVS16(rd, idx, SatAdd(cpu, cpu.GetVS16(rn, idx), cpu.GetVS16(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqadd_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpSqadd_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqadd_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqadd\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpSqadd_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			cpu.SetVS32(rd, idx, SatAdd(cpu, cpu.GetVS32(rn, idx), cpu.GetVS32(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqadd_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpSqadd_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmulh_vhvhvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmulh\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqdmulh_vhvhvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		typedef typename ARCH::S32 S32;
		unsigned const elements = 4<<q;
		DST res[elements];
		S32 element(cpu.GetVS16(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, S32(cpu.GetVS16(rn, idx)) * element, typename ARCH::S8(-15), /* round */ false, /* sat */ false));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmulh_vhvhvhi(CodeType code, uint64_t addr)
{
	return new OpSqdmulh_vhvhvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmulh_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmulh\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpSqdmulh_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		typedef typename ARCH::S32 S32;
		unsigned const elements = 4<<q;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, S32(cpu.GetVS16(rm, idx)) * S32(cpu.GetVS16(rn, idx)), typename ARCH::S8(-15), /* round */ false, /* sat */ false));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmulh_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpSqdmulh_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmulh_vsvsvsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmulh\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqdmulh_vsvsvsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		typedef typename ARCH::S64 S64;
		unsigned const elements = 2<<q;
		DST res[elements];
		S64 element(cpu.GetVS32(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, S64(cpu.GetVS32(rn, idx)) * element, typename ARCH::S8(-31), /* round */ false, /* sat */ false));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmulh_vsvsvsi(CodeType code, uint64_t addr)
{
	return new OpSqdmulh_vsvsvsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqdmulh_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqdmulh\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpSqdmulh_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		typedef typename ARCH::S64 S64;
		unsigned const elements = 2<<q;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, S64(cpu.GetVS32(rm, idx)) * S64(cpu.GetVS32(rn, idx)), typename ARCH::S8(-31), /* round */ false, /* sat */ false));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqdmulh_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpSqdmulh_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqneg_vbb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqneg\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpSqneg_vbb<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 8<<q;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVS8(rd, e, Neg(cpu, cpu.GetVS8(rn, e), /* sat */ true));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqneg_vbb(CodeType code, uint64_t addr)
{
	return new OpSqneg_vbb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqneg_vhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqneg\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}
template <	typename	ARCH>
void OpSqneg_vhh<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 4<<q;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVS16(rd, e, Neg(cpu, cpu.GetVS16(rn, e), /* sat */ true));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqneg_vhh(CodeType code, uint64_t addr)
{
	return new OpSqneg_vhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqneg_vss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqneg\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}
template <	typename	ARCH>
void OpSqneg_vss<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 2<<q;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVS32(rd, e, Neg(cpu, cpu.GetVS32(rn, e), /* sat */ true));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqneg_vss(CodeType code, uint64_t addr)
{
	return new OpSqneg_vss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrdmulh_vhvhvhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrdmulh\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqrdmulh_vhvhvhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		typedef typename ARCH::S32 S32;
		unsigned const elements = 4<<q;
		DST res[elements];
		S32 element(cpu.GetVS16(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, S32(cpu.GetVS16(rn, idx)) * element, typename ARCH::S8(-15), /* round */ true, /* sat */ false));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrdmulh_vhvhvhi(CodeType code, uint64_t addr)
{
	return new OpSqrdmulh_vhvhvhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrdmulh_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrdmulh\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpSqrdmulh_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 DST;
		typedef typename ARCH::S32 S32;
		unsigned const elements = 4<<q;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, S32(cpu.GetVS16(rm, idx)) * S32(cpu.GetVS16(rn, idx)), typename ARCH::S8(-15), /* round */ true, /* sat */ false));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS16(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrdmulh_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpSqrdmulh_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrdmulh_vsvsvsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrdmulh\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}
template <	typename	ARCH>
void OpSqrdmulh_vsvsvsi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		typedef typename ARCH::S64 S64;
		unsigned const elements = 2<<q;
		DST res[elements];
		S64 element(cpu.GetVS32(rm, index));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, S64(cpu.GetVS32(rn, idx)) * element, typename ARCH::S8(-31), /* round */ true, /* sat */ false));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrdmulh_vsvsvsi(CodeType code, uint64_t addr)
{
	return new OpSqrdmulh_vsvsvsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrdmulh_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrdmulh\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpSqrdmulh_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 DST;
		typedef typename ARCH::S64 S64;
		unsigned const elements = 2<<q;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = SatNarrow<DST>(cpu, NeonSHL(cpu, S64(cpu.GetVS32(rm, idx)) * S64(cpu.GetVS32(rn, idx)), typename ARCH::S8(-31), /* round */ true, /* sat */ false));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVS32(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrdmulh_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpSqrdmulh_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshl_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshl\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpSqrshl_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			cpu.SetVS8(rd, idx, NeonSHL(cpu, cpu.GetVS8(rn, idx), cpu.GetVS8(rm, idx), /* round */ true, /* sat */ true));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshl_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpSqrshl_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshl_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshl\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpSqrshl_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;

		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			cpu.SetVS16(rd, idx, NeonSHL(cpu, cpu.GetVS16(rn, idx), S8(cpu.GetVS16(rm, idx)), /* round */ true, /* sat */ true));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshl_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpSqrshl_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqrshl_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqrshl\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpSqrshl_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;

		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			cpu.SetVS32(rd, idx, NeonSHL(cpu, cpu.GetVS32(rn, idx), S8(cpu.GetVS32(rm, idx)), /* round */ true, /* sat */ true));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqrshl_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpSqrshl_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshl_vbbi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshl\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpSqshl_vbbi<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		cpu.SetVS8(rd, idx, NeonSHL(cpu, cpu.GetVS8(rn, idx), typename ARCH::S8(imm), /* round */ false, /* sat */ true));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshl_vbbi(CodeType code, uint64_t addr)
{
	return new OpSqshl_vbbi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshl_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshl\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpSqshl_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			cpu.SetVS8(rd, idx, NeonSHL(cpu, cpu.GetVS8(rn, idx), cpu.GetVS8(rm, idx), /* round */ false, /* sat */ true));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshl_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpSqshl_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshl_vhhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshl\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpSqshl_vhhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		cpu.SetVS16(rd, idx, NeonSHL(cpu, cpu.GetVS16(rn, idx), typename ARCH::S8(imm), /* round */ false, /* sat */ true));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshl_vhhi(CodeType code, uint64_t addr)
{
	return new OpSqshl_vhhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshl_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshl\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpSqshl_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;

		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			cpu.SetVS16(rd, idx, NeonSHL(cpu, cpu.GetVS16(rn, idx), S8(cpu.GetVS16(rm, idx)), /* round */ false, /* sat */ true));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshl_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpSqshl_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshl_vssi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshl\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpSqshl_vssi<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		cpu.SetVS32(rd, idx, NeonSHL(cpu, cpu.GetVS32(rn, idx), typename ARCH::S8(imm), /* round */ false, /* sat */ true));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshl_vssi(CodeType code, uint64_t addr)
{
	return new OpSqshl_vssi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshl_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshl\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpSqshl_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;

		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			cpu.SetVS32(rd, idx, NeonSHL(cpu, cpu.GetVS32(rn, idx), S8(cpu.GetVS32(rm, idx)), /* round */ false, /* sat */ true));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshl_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpSqshl_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshlu_vbbi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshlu\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshlu_vbbi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::U8 U8;

		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			S8 op = cpu.GetVS8(rn, idx);
			U8 res(0);
			if (cpu.Test(op < S8(0)))
			{
				cpu.SetQC();
			}
			else
			{
				res = NeonSHL(cpu, U8(op), S8(shift), /* round */ false, /* sat */ true);
			}

			cpu.SetVU8(rd, idx, res);
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshlu_vbbi(CodeType code, uint64_t addr)
{
	return new OpSqshlu_vbbi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshlu_vhhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshlu\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshlu_vhhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::U16 U16;

		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			S16 op = cpu.GetVS16(rn, idx);
			U16 res(0);
			if (cpu.Test(op < S16(0)))
			{
				cpu.SetQC();
			}
			else
			{
				res = NeonSHL(cpu, U16(op), S8(shift), /* round */ false, /* sat */ true);
			}

			cpu.SetVU16(rd, idx, res);
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshlu_vhhi(CodeType code, uint64_t addr)
{
	return new OpSqshlu_vhhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqshlu_vssi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqshlu\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSqshlu_vssi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::U32 U32;

		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			S32 op = cpu.GetVS32(rn, idx);
			U32 res(0);
			if (cpu.Test(op < S32(0)))
			{
				cpu.SetQC();
			}
			else
			{
				res = NeonSHL(cpu, U32(op), S8(shift), /* round */ false, /* sat */ true);
			}

			cpu.SetVU32(rd, idx, res);
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqshlu_vssi(CodeType code, uint64_t addr)
{
	return new OpSqshlu_vssi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqsub_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqsub\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpSqsub_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			cpu.SetVS8(rd, idx, SatSub(cpu, cpu.GetVS8(rn, idx), cpu.GetVS8(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqsub_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpSqsub_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqsub_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqsub\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpSqsub_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			cpu.SetVS16(rd, idx, SatSub(cpu, cpu.GetVS16(rn, idx), cpu.GetVS16(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqsub_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpSqsub_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSqsub_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sqsub\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpSqsub_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			cpu.SetVS32(rd, idx, SatSub(cpu, cpu.GetVS32(rn, idx), cpu.GetVS32(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSqsub_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpSqsub_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSrhadd_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "srhadd\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpSrhadd_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;
		typedef typename ARCH::S16 S16;
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		cpu.SetVS8(rd, idx, S8((S16(cpu.GetVS8(rn, idx)) + S16(cpu.GetVS8(rm, idx)) + S16(1)) >> 1));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSrhadd_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpSrhadd_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSrhadd_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "srhadd\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpSrhadd_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S16 S16;
		typedef typename ARCH::S32 S32;
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		cpu.SetVS16(rd, idx, S16((S32(cpu.GetVS16(rn, idx)) + S32(cpu.GetVS16(rm, idx)) + S32(1)) >> 1));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSrhadd_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpSrhadd_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSrhadd_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "srhadd\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpSrhadd_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S32 S32;
		typedef typename ARCH::S64 S64;
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		cpu.SetVS32(rd, idx, S32((S64(cpu.GetVS32(rn, idx)) + S64(cpu.GetVS32(rm, idx)) + S64(1)) >> 1));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSrhadd_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpSrhadd_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSri_vbbi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sri\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSri_vbbi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::S8 S8;
		unsigned const elements = 8<<q;

		U8 mask(~NeonSHL(cpu, U8(~U8(0)), -S8(shift)));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			U8 op1(cpu.GetVU8(rd, idx)), op2(cpu.GetVU8(rn, idx)), res(U8(op1 & mask) | NeonSHL(cpu, op2, -S8(shift)));
			cpu.SetVU8(rd, idx, res);
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSri_vbbi(CodeType code, uint64_t addr)
{
	return new OpSri_vbbi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSri_vhhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sri\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSri_vhhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::S8 S8;
		unsigned const elements = 4<<q;

		U16 mask(~NeonSHL(cpu, U16(~U16(0)), -S8(shift)));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			U16 op1(cpu.GetVU16(rd, idx)), op2(cpu.GetVU16(rn, idx)), res(U16(op1 & mask) | NeonSHL(cpu, op2, -S8(shift)));
			cpu.SetVU16(rd, idx, res);
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSri_vhhi(CodeType code, uint64_t addr)
{
	return new OpSri_vhhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSri_vssi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sri\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSri_vssi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S8 S8;
		unsigned const elements = 2<<q;

		U32 mask(~NeonSHL(cpu, U32(~U32(0)), -S8(shift)));
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			U32 op1(cpu.GetVU32(rd, idx)), op2(cpu.GetVU32(rn, idx)), res(U32(op1 & mask) | NeonSHL(cpu, op2, -S8(shift)));
			cpu.SetVU32(rd, idx, res);
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSri_vssi(CodeType code, uint64_t addr)
{
	return new OpSri_vssi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSrshl_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "srshl\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpSrshl_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			cpu.SetVS8(rd, idx, NeonSHL(cpu, cpu.GetVS8(rn, idx), cpu.GetVS8(rm, idx), /* round */ true, /* sat */ false));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSrshl_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpSrshl_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSrshl_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "srshl\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpSrshl_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;

		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			cpu.SetVS16(rd, idx, NeonSHL(cpu, cpu.GetVS16(rn, idx), S8(cpu.GetVS16(rm, idx)), /* round */ true, /* sat */ false));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSrshl_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpSrshl_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSrshl_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "srshl\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpSrshl_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;

		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			cpu.SetVS32(rd, idx, NeonSHL(cpu, cpu.GetVS32(rn, idx), S8(cpu.GetVS32(rm, idx)), /* round */ true, /* sat */ false));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSrshl_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpSrshl_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSshl_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sshl\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpSshl_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 8<<q;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVS8(rd, e, NeonSHL(cpu, cpu.GetVS8(rn, e), typename ARCH::S8(cpu.GetVS8(rm, e))));
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSshl_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpSshl_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSshl_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sshl\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpSshl_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 4<<q;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVS16(rd, e, NeonSHL(cpu, cpu.GetVS16(rn, e), typename ARCH::S8(cpu.GetVS16(rm, e))));
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSshl_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpSshl_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSshl_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sshl\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpSshl_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 2<<q;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVS32(rd, e, NeonSHL(cpu, cpu.GetVS32(rn, e), typename ARCH::S8(cpu.GetVS32(rm, e))));
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSshl_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpSshl_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSshr_vbbi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << (sm&2?"sr":"s") << (sm&1?"sra\t":"shr\t") << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSshr_vbbi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;

		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			U8 res(NeonSHL(cpu, cpu.GetVS8(rn, idx), typename ARCH::S8(-shift), /* round */ sm & 2, /* sat */ false));
			if (sm & 1)
			res += cpu.GetVU8(rd, idx);
			cpu.SetVU8(rd, idx, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSshr_vbbi(CodeType code, uint64_t addr)
{
	return new OpSshr_vbbi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSshr_vhhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << (sm&2?"sr":"s") << (sm&1?"sra\t":"shr\t") << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSshr_vhhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;

		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			U16 res( NeonSHL(cpu, cpu.GetVS16(rn, idx), typename ARCH::S8(-shift), /* round */ sm & 2, /* sat */ false) );
			if (sm & 1)
			res += cpu.GetVU16(rd, idx);
			cpu.SetVU16(rd, idx, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSshr_vhhi(CodeType code, uint64_t addr)
{
	return new OpSshr_vhhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSshr_vssi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << (sm&2?"sr":"s") << (sm&1?"sra\t":"shr\t") << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpSshr_vssi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;

		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			U32 res( NeonSHL(cpu, cpu.GetVS32(rn, idx), typename ARCH::S8(-shift), /* round */ sm & 2, /* sat */ false) );
			if (sm & 1)
			res += cpu.GetVU32(rd, idx);
			cpu.SetVU32(rd, idx, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSshr_vssi(CodeType code, uint64_t addr)
{
	return new OpSshr_vssi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSshr_v2d2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << (sm&2?"sr":"s") << (sm&1?"sra\t":"shr\t") << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(64-lro);
}}
template <	typename	ARCH>
void OpSshr_v2d2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		for (unsigned idx = 0, end = 2; idx < end; ++idx)
		{
			U64 res( NeonSHL(cpu, cpu.GetVS64(rn, idx), typename ARCH::S8(-shift), /* round */ sm & 2, /* sat */ false) );
			if (sm & 1)
			res += cpu.GetVU64(rd, idx);
			cpu.SetVU64(rd, idx, res);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSshr_v2d2di(CodeType code, uint64_t addr)
{
	return new OpSshr_v2d2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sub\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpSub_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		cpu.SetVU8(rd, idx, cpu.GetVU8(rn, idx) - cpu.GetVU8(rm, idx));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpSub_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sub\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpSub_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		cpu.SetVU16(rd, idx, cpu.GetVU16(rn, idx) - cpu.GetVU16(rm, idx));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpSub_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSub_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "sub\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpSub_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		cpu.SetVU32(rd, idx, cpu.GetVU32(rn, idx) - cpu.GetVU32(rm, idx));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSub_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpSub_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSuqadd_vbb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "suqadd\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpSuqadd_vbb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			cpu.SetVS8(rd, idx, SatAdd(cpu, cpu.GetVS8(rd, idx), cpu.GetVU8(rn, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSuqadd_vbb(CodeType code, uint64_t addr)
{
	return new OpSuqadd_vbb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSuqadd_vhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "suqadd\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}
template <	typename	ARCH>
void OpSuqadd_vhh<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			cpu.SetVS16(rd, idx, SatAdd(cpu, cpu.GetVS16(rd, idx), cpu.GetVU16(rn, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSuqadd_vhh(CodeType code, uint64_t addr)
{
	return new OpSuqadd_vhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpSuqadd_vss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "suqadd\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}
template <	typename	ARCH>
void OpSuqadd_vss<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			cpu.SetVS32(rd, idx, SatAdd(cpu, cpu.GetVS32(rd, idx), cpu.GetVU32(rn, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpSuqadd_vss(CodeType code, uint64_t addr)
{
	return new OpSuqadd_vss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpTbl<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "tbl\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmBunch(rn, len+1, 16, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpTbl<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		unsigned const elements = 8<<q, regs = len+1;

		U8 res[elements];
		for (unsigned e=0; e < elements; e += 1)
		res[e] = cpu.GetTVU8(rn, 16, regs, cpu.GetVU8(rm, e), U8(0));
		for (unsigned e=0; e < elements; e += 1)
		cpu.SetVU8(rd, e, res[e]);
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpTbl(CodeType code, uint64_t addr)
{
	return new OpTbl<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpTbx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "tbx\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmBunch(rn, len+1, 16, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpTbx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		unsigned const elements = 8<<q, regs = len+1;

		U8 res[elements];
		for (unsigned e=0; e < elements; e += 1)
		res[e] = cpu.GetTVU8(rn, 16, regs, cpu.GetVU8(rm, e), cpu.GetVU8(rd, e));
		for (unsigned e=0; e < elements; e += 1)
		cpu.SetVU8(rd, e, res[e]);
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpTbx(CodeType code, uint64_t addr)
{
	return new OpTbx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpTrn_vb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "trn" << int(op+1) << "\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpTrn_vb<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 8<<q;
		for (unsigned e=0; e < elements; e += 2)
		{
			typename ARCH::U8 op0 = cpu.GetVU8(rn, e|op), op1 = cpu.GetVU8(rm, e|op);
			cpu.SetVU8(rd, e|0, op0);
			cpu.SetVU8(rd, e|1, op1);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpTrn_vb(CodeType code, uint64_t addr)
{
	return new OpTrn_vb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpTrn_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "trn" << int(op+1) << "\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpTrn_vh<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 4<<q;
		for (unsigned e=0; e < elements; e += 2)
		{
			typename ARCH::U16 op0 = cpu.GetVU16(rn, e|op), op1 = cpu.GetVU16(rm, e|op);
			cpu.SetVU16(rd, e|0, op0);
			cpu.SetVU16(rd, e|1, op1);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpTrn_vh(CodeType code, uint64_t addr)
{
	return new OpTrn_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpTrn_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "trn" << int(op+1) << "\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpTrn_vs<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 2<<q;
		for (unsigned e=0; e < elements; e += 2)
		{
			typename ARCH::U32 op0 = cpu.GetVU32(rn, e|op), op1 = cpu.GetVU32(rm, e|op);
			cpu.SetVU32(rd, e|0, op0);
			cpu.SetVU32(rd, e|1, op1);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpTrn_vs(CodeType code, uint64_t addr)
{
	return new OpTrn_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpTrn_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "trn" << int(op+1) << "\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpTrn_v2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typename ARCH::U64 op0 = cpu.GetVU64(rn, op), op1 = cpu.GetVU64(rm, op);
		cpu.SetVU64(rd, 0, op0);
		cpu.SetVU64(rd, 1, op1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpTrn_v2d(CodeType code, uint64_t addr)
{
	return new OpTrn_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUaba_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uaba\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpUaba_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::S16 S16;
		unsigned const elements = 8<<q;
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, idx, cpu.GetVU8(rd, idx) + U8(Abs(cpu, S16(U16(cpu.GetVU8(rn, idx)) - U16(cpu.GetVU8(rm, idx))))));
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUaba_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpUaba_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUaba_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uaba\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpUaba_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;
		unsigned const elements = 4<<q;
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, cpu.GetVU16(rd, idx) + U16(Abs(cpu, S32(U32(cpu.GetVU16(rn, idx)) - U32(cpu.GetVU16(rm, idx))))));
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUaba_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpUaba_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUaba_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uaba\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpUaba_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;
		unsigned const elements = 2<<q;
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, cpu.GetVU32(rd, idx) + U32(Abs(cpu, S64(U64(cpu.GetVU32(rn, idx)) - U64(cpu.GetVU32(rm, idx))))));
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUaba_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpUaba_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUabd_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uabd\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpUabd_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::S16 S16;
		unsigned const elements = 8<<q;
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, idx, U8(Abs(cpu, S16(U16(cpu.GetVU8(rn, idx))) - S16(U16(cpu.GetVU8(rm, idx))))));
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUabd_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpUabd_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUabd_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uabd\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpUabd_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::S32 S32;
		unsigned const elements = 4<<q;
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, U16(Abs(cpu, S32(U32(cpu.GetVU16(rn, idx))) - S32(U32(cpu.GetVU16(rm, idx))))));
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUabd_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpUabd_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUabd_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uabd\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpUabd_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;
		typedef typename ARCH::S64 S64;
		unsigned const elements = 2<<q;
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, U32(Abs(cpu, S64(U64(cpu.GetVU32(rn, idx))) - S64(U64(cpu.GetVU32(rm, idx))))));
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUabd_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpUabd_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUadalp_vhb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uadalp\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpUadalp_vhb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;
		typedef typename ARCH::U16 U16;
		unsigned const elements = 4<<q;

		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU16(rd, idx) + U16(cpu.GetVU8(rn, 2*idx)) + U16(cpu.GetVU8(rn, (2*idx)+1));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUadalp_vhb(CodeType code, uint64_t addr)
{
	return new OpUadalp_vhb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUadalp_vsh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uadalp\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 4<<q, 1);
}}
template <	typename	ARCH>
void OpUadalp_vsh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;
		typedef typename ARCH::U32 U32;
		unsigned const elements = 2<<q;

		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU32(rd, idx) + U32(cpu.GetVU16(rn, 2*idx)) + U32(cpu.GetVU16(rn, (2*idx)+1));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUadalp_vsh(CodeType code, uint64_t addr)
{
	return new OpUadalp_vsh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUadalp_vds<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uadalp\t" << DisasmTV(rd, 1<<q, 3) << ", " << DisasmTV(rn, 2<<q, 2);
}}
template <	typename	ARCH>
void OpUadalp_vds<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;
		typedef typename ARCH::U64 U64;
		unsigned const elements = 1<<q;

		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = cpu.GetVU64(rd, idx) + U64(cpu.GetVU32(rn, 2*idx)) + U64(cpu.GetVU32(rn, (2*idx)+1));
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUadalp_vds(CodeType code, uint64_t addr)
{
	return new OpUadalp_vds<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUaddlp_vhb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uaddlp\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpUaddlp_vhb<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 4<<q;
		typedef typename ARCH::U16 U16;

		for (unsigned e=0; e < elements; e += 1)
		{
			cpu.SetVU16(rd, e, U16(cpu.GetVU8(rn, 2*e+0)) + U16(cpu.GetVU8(rn, 2*e+1)) );
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUaddlp_vhb(CodeType code, uint64_t addr)
{
	return new OpUaddlp_vhb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUaddlp_vsh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uaddlp\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 4<<q, 1);
}}
template <	typename	ARCH>
void OpUaddlp_vsh<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 2<<q;
		typedef typename ARCH::U32 U32;

		for (unsigned e=0; e < elements; e += 1)
		{
			cpu.SetVU32(rd, e, U32(cpu.GetVU16(rn, 2*e+0)) + U32(cpu.GetVU16(rn, 2*e+1)) );
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUaddlp_vsh(CodeType code, uint64_t addr)
{
	return new OpUaddlp_vsh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUaddlp_vds<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uaddlp\t" << DisasmTV(rd, 1<<q, 3) << ", " << DisasmTV(rn, 2<<q, 2);
}}
template <	typename	ARCH>
void OpUaddlp_vds<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 1<<q;
		typedef typename ARCH::U64 U64;

		for (unsigned e=0; e < elements; e += 1)
		{
			cpu.SetVU64(rd, e, U64(cpu.GetVU32(rn, 2*e+0)) + U64(cpu.GetVU32(rn, 2*e+1)) );
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUaddlp_vds(CodeType code, uint64_t addr)
{
	return new OpUaddlp_vds<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUaddlv_hvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uaddlv\t" << DisasmH(rd) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpUaddlv_hvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 8<<q;
		typedef typename ARCH::U16 U16;

		U16 sum = U16(cpu.GetVU8(rn, 0));
		for (unsigned e=1; e < elements; e += 1)
		{
			sum += U16(cpu.GetVU8(rn, e));
		}

		cpu.SetVU16(rd, 0, sum);
		cpu.ClearHighV(rd, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUaddlv_hvb(CodeType code, uint64_t addr)
{
	return new OpUaddlv_hvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUaddlv_svh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uaddlv\t" << DisasmS(rd) << ", " << DisasmTV(rn, 4<<q, 1);
}}
template <	typename	ARCH>
void OpUaddlv_svh<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 4<<q;
		typedef typename ARCH::U32 U32;

		U32 sum = U32(cpu.GetVU16(rn, 0));
		for (unsigned e=1; e < elements; e += 1)
		{
			sum += U32(cpu.GetVU16(rn, e));
		}

		cpu.SetVU32(rd, 0, sum);
		cpu.ClearHighV(rd, 4);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUaddlv_svh(CodeType code, uint64_t addr)
{
	return new OpUaddlv_svh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUhadd_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uhadd\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpUhadd_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U16 U16;
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		cpu.SetVU8(rd, idx, U8((U16(cpu.GetVU8(rn, idx)) + U16(cpu.GetVU8(rm, idx))) >> 1));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUhadd_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpUhadd_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUhadd_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uhadd\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpUhadd_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U32 U32;
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		cpu.SetVU16(rd, idx, U16((U32(cpu.GetVU16(rn, idx)) + U32(cpu.GetVU16(rm, idx))) >> 1));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUhadd_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpUhadd_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUhadd_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uhadd\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpUhadd_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		cpu.SetVU32(rd, idx, U32((U64(cpu.GetVU32(rn, idx)) + U64(cpu.GetVU32(rm, idx))) >> 1));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUhadd_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpUhadd_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUhsub_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uhsub\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpUhsub_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U16 U16;
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		cpu.SetVU8(rd, idx, U8((U16(cpu.GetVU8(rn, idx)) - U16(cpu.GetVU8(rm, idx))) >> 1));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUhsub_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpUhsub_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUhsub_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uhsub\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpUhsub_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U32 U32;
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		cpu.SetVU16(rd, idx, U16((U32(cpu.GetVU16(rn, idx)) - U32(cpu.GetVU16(rm, idx))) >> 1));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUhsub_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpUhsub_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUhsub_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uhsub\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpUhsub_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		cpu.SetVU32(rd, idx, U32((U64(cpu.GetVU32(rn, idx)) - U64(cpu.GetVU32(rm, idx))) >> 1));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUhsub_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpUhsub_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmax_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umax\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpUmax_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			cpu.SetVU8(rd, idx, Maximum(cpu.GetVU8(rn, idx), cpu.GetVU8(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmax_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpUmax_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmax_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umax\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpUmax_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			cpu.SetVU16(rd, idx, Maximum(cpu.GetVU16(rn, idx), cpu.GetVU16(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmax_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpUmax_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmax_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umax\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpUmax_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			cpu.SetVU32(rd, idx, Maximum(cpu.GetVU32(rn, idx), cpu.GetVU32(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmax_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpUmax_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmaxp_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umaxp\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpUmaxp_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 8<<q;
		typename ARCH::U8 res[elements];

		for (unsigned e=0; e < elements; e += 2)
		{
			res[       (0+e)/2] = Maximum(cpu.GetVU8(rn, e), cpu.GetVU8(rn, e+1));
			res[(elements+e)/2] = Maximum(cpu.GetVU8(rm, e), cpu.GetVU8(rm, e+1));
		}

		for (unsigned e=0; e < elements; e += 1)
		cpu.SetVU8(rd, e, res[e]);

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmaxp_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpUmaxp_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmaxp_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umaxp\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpUmaxp_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 4<<q;
		typename ARCH::U16 res[elements];

		for (unsigned e=0; e < elements; e += 2)
		{
			res[       (0+e)/2] = Maximum(cpu.GetVU16(rn, e), cpu.GetVU16(rn, e+1));
			res[(elements+e)/2] = Maximum(cpu.GetVU16(rm, e), cpu.GetVU16(rm, e+1));
		}

		for (unsigned e=0; e < elements; e += 1)
		cpu.SetVU16(rd, e, res[e]);

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmaxp_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpUmaxp_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmaxp_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umaxp\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpUmaxp_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 2<<q;
		typename ARCH::U32 res[elements];

		for (unsigned e=0; e < elements; e += 2)
		{
			res[       (0+e)/2] = Maximum(cpu.GetVU32(rn, e), cpu.GetVU32(rn, e+1));
			res[(elements+e)/2] = Maximum(cpu.GetVU32(rm, e), cpu.GetVU32(rm, e+1));
		}

		for (unsigned e=0; e < elements; e += 1)
		cpu.SetVU32(rd, e, res[e]);

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmaxp_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpUmaxp_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmin_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umin\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpUmin_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			cpu.SetVU8(rd, idx, Minimum(cpu.GetVU8(rn, idx), cpu.GetVU8(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmin_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpUmin_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmin_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umin\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpUmin_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			cpu.SetVU16(rd, idx, Minimum(cpu.GetVU16(rn, idx), cpu.GetVU16(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmin_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpUmin_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUmin_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "umin\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpUmin_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			cpu.SetVU32(rd, idx, Minimum(cpu.GetVU32(rn, idx), cpu.GetVU32(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUmin_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpUmin_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUminp_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uminp\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpUminp_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 8<<q;
		typename ARCH::U8 res[elements];

		for (unsigned e=0; e < elements; e += 2)
		{
			res[       (0+e)/2] = Minimum(cpu.GetVU8(rn, e), cpu.GetVU8(rn, e+1));
			res[(elements+e)/2] = Minimum(cpu.GetVU8(rm, e), cpu.GetVU8(rm, e+1));
		}

		for (unsigned e=0; e < elements; e += 1)
		cpu.SetVU8(rd, e, res[e]);

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUminp_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpUminp_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUminp_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uminp\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpUminp_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 4<<q;
		typename ARCH::U16 res[elements];

		for (unsigned e=0; e < elements; e += 2)
		{
			res[       (0+e)/2] = Minimum(cpu.GetVU16(rn, e), cpu.GetVU16(rn, e+1));
			res[(elements+e)/2] = Minimum(cpu.GetVU16(rm, e), cpu.GetVU16(rm, e+1));
		}

		for (unsigned e=0; e < elements; e += 1)
		cpu.SetVU16(rd, e, res[e]);

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUminp_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpUminp_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUminp_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uminp\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpUminp_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 2<<q;
		typename ARCH::U32 res[elements];

		for (unsigned e=0; e < elements; e += 2)
		{
			res[       (0+e)/2] = Minimum(cpu.GetVU32(rn, e), cpu.GetVU32(rn, e+1));
			res[(elements+e)/2] = Minimum(cpu.GetVU32(rm, e), cpu.GetVU32(rm, e+1));
		}

		for (unsigned e=0; e < elements; e += 1)
		cpu.SetVU32(rd, e, res[e]);

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUminp_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpUminp_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqadd_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqadd\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpUqadd_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			cpu.SetVU8(rd, idx, SatAdd(cpu, cpu.GetVU8(rn, idx), cpu.GetVU8(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqadd_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpUqadd_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqadd_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqadd\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpUqadd_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			cpu.SetVU16(rd, idx, SatAdd(cpu, cpu.GetVU16(rn, idx), cpu.GetVU16(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqadd_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpUqadd_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqadd_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqadd\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpUqadd_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			cpu.SetVU32(rd, idx, SatAdd(cpu, cpu.GetVU32(rn, idx), cpu.GetVU32(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqadd_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpUqadd_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqrshl_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqrshl\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpUqrshl_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			cpu.SetVU8(rd, idx, NeonSHL(cpu, cpu.GetVU8(rn, idx), cpu.GetVS8(rm, idx), /* round */ true, /* sat */ true));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqrshl_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpUqrshl_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqrshl_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqrshl\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpUqrshl_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;

		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			cpu.SetVU16(rd, idx, NeonSHL(cpu, cpu.GetVU16(rn, idx), S8(cpu.GetVS16(rm, idx)), /* round */ true, /* sat */ true));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqrshl_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpUqrshl_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqrshl_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqrshl\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpUqrshl_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;

		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			cpu.SetVU32(rd, idx, NeonSHL(cpu, cpu.GetVU32(rn, idx), S8(cpu.GetVS32(rm, idx)), /* round */ true, /* sat */ true));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqrshl_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpUqrshl_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshl_vbbi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshl\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpUqshl_vbbi<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		cpu.SetVU8(rd, idx, NeonSHL(cpu, cpu.GetVU8(rn, idx), typename ARCH::S8(imm), /* round */ false, /* sat */ true));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshl_vbbi(CodeType code, uint64_t addr)
{
	return new OpUqshl_vbbi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshl_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshl\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpUqshl_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			cpu.SetVU8(rd, idx, NeonSHL(cpu, cpu.GetVU8(rn, idx), cpu.GetVS8(rm, idx), /* round */ false, /* sat */ true));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshl_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpUqshl_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshl_vhhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshl\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpUqshl_vhhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		cpu.SetVU16(rd, idx, NeonSHL(cpu, cpu.GetVU16(rn, idx), typename ARCH::S8(imm), /* round */ false, /* sat */ true));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshl_vhhi(CodeType code, uint64_t addr)
{
	return new OpUqshl_vhhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshl_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshl\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpUqshl_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;

		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			cpu.SetVU16(rd, idx, NeonSHL(cpu, cpu.GetVU16(rn, idx), S8(cpu.GetVS16(rm, idx)), /* round */ false, /* sat */ true));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshl_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpUqshl_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshl_vssi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshl\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmI(imm);
}}
template <	typename	ARCH>
void OpUqshl_vssi<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		cpu.SetVU32(rd, idx, NeonSHL(cpu, cpu.GetVU32(rn, idx), typename ARCH::S8(imm), /* round */ false, /* sat */ true));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshl_vssi(CodeType code, uint64_t addr)
{
	return new OpUqshl_vssi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqshl_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqshl\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpUqshl_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;

		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			cpu.SetVU32(rd, idx, NeonSHL(cpu, cpu.GetVU32(rn, idx), S8(cpu.GetVS32(rm, idx)), /* round */ false, /* sat */ true));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqshl_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpUqshl_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqsub_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqsub\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpUqsub_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			cpu.SetVU8(rd, idx, SatSub(cpu, cpu.GetVU8(rn, idx), cpu.GetVU8(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqsub_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpUqsub_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqsub_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqsub\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpUqsub_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			cpu.SetVU16(rd, idx, SatSub(cpu, cpu.GetVU16(rn, idx), cpu.GetVU16(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqsub_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpUqsub_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUqsub_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uqsub\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpUqsub_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			cpu.SetVU32(rd, idx, SatSub(cpu, cpu.GetVU32(rn, idx), cpu.GetVU32(rm, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUqsub_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpUqsub_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUrecpe_vss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "urecpe\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUrecpe_vss(CodeType code, uint64_t addr)
{
	return new OpUrecpe_vss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUrhadd_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "urhadd\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpUrhadd_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U16 U16;
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		cpu.SetVU8(rd, idx, U8((U16(cpu.GetVU8(rn, idx)) + U16(cpu.GetVU8(rm, idx)) + U16(1)) >> 1));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUrhadd_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpUrhadd_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUrhadd_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "urhadd\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpUrhadd_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U32 U32;
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		cpu.SetVU16(rd, idx, U16((U32(cpu.GetVU16(rn, idx)) + U32(cpu.GetVU16(rm, idx)) + U32(1)) >> 1));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUrhadd_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpUrhadd_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUrhadd_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "urhadd\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpUrhadd_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		cpu.SetVU32(rd, idx, U32((U64(cpu.GetVU32(rn, idx)) + U64(cpu.GetVU32(rm, idx)) + U64(1)) >> 1));
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUrhadd_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpUrhadd_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUrshl_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "urshl\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpUrshl_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			cpu.SetVU8(rd, idx, NeonSHL(cpu, cpu.GetVU8(rn, idx), cpu.GetVS8(rm, idx), /* round */ true, /* sat */ false));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUrshl_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpUrshl_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUrshl_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "urshl\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpUrshl_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;

		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			cpu.SetVU16(rd, idx, NeonSHL(cpu, cpu.GetVU16(rn, idx), S8(cpu.GetVS16(rm, idx)), /* round */ true, /* sat */ false));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUrshl_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpUrshl_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUrshl_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "urshl\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpUrshl_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::S8 S8;

		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			cpu.SetVU32(rd, idx, NeonSHL(cpu, cpu.GetVU32(rn, idx), S8(cpu.GetVS32(rm, idx)), /* round */ true, /* sat */ false));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUrshl_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpUrshl_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUrsqrte_vss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ursqrte\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUrsqrte_vss(CodeType code, uint64_t addr)
{
	return new OpUrsqrte_vss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUshl_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ushl\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}
template <	typename	ARCH>
void OpUshl_d<	ARCH>::execute( ARCH & cpu) const
{
	{
		cpu.SetVU64(rd, NeonSHL(cpu, cpu.GetVU64(rn, 0), typename ARCH::S8(cpu.GetVU64(rm, 0))));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUshl_d(CodeType code, uint64_t addr)
{
	return new OpUshl_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUshl_vb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ushl\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpUshl_vb<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 8<<q;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVU8(rd, e, NeonSHL(cpu, cpu.GetVU8(rn, e), typename ARCH::S8(cpu.GetVU8(rm, e))));
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUshl_vb(CodeType code, uint64_t addr)
{
	return new OpUshl_vb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUshl_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ushl\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpUshl_vh<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 4<<q;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVU16(rd, e, NeonSHL(cpu, cpu.GetVU16(rn, e), typename ARCH::S8(cpu.GetVU16(rm, e))));
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUshl_vh(CodeType code, uint64_t addr)
{
	return new OpUshl_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUshl_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ushl\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpUshl_vs<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 2<<q;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVU32(rd, e, NeonSHL(cpu, cpu.GetVU32(rn, e), typename ARCH::S8(cpu.GetVU32(rm, e))));
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUshl_vs(CodeType code, uint64_t addr)
{
	return new OpUshl_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUshl_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ushl\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmTV(rm, 2, 3);
}}
template <	typename	ARCH>
void OpUshl_v2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		unsigned const elements = 2;

		for (unsigned e = 0; e < elements; ++e)
		{
			cpu.SetVU64(rd, e, NeonSHL(cpu, cpu.GetVU64(rn, e), typename ARCH::S8(cpu.GetVU64(rm, e))));
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUshl_v2d(CodeType code, uint64_t addr)
{
	return new OpUshl_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUshll_v8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << (imm ? "ushll" : "uxtl") << (q ? "2" : "") << '\t' << DisasmTV(rd, 8, 1) << ", " << DisasmTV(rn, 8<<q, 0);
		if (imm) { sink << ", " << DisasmI(imm); }
}}
template <	typename	ARCH>
void OpUshll_v8h<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;

		unsigned const elements = 8, srcidx = elements*q;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU8(rn, srcidx + idx)) << imm;
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUshll_v8h(CodeType code, uint64_t addr)
{
	return new OpUshll_v8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUshll_v4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << (imm ? "ushll" : "uxtl") << (q ? "2" : "") << '\t' << DisasmTV(rd, 4, 2) << ", " << DisasmTV(rn, 4<<q, 1);
		if (imm) { sink << ", " << DisasmI(imm); }
}}
template <	typename	ARCH>
void OpUshll_v4s<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;

		unsigned const elements = 4, srcidx = elements*q;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU16(rn, srcidx + idx)) << imm;
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUshll_v4s(CodeType code, uint64_t addr)
{
	return new OpUshll_v4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUshll_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << (imm ? "ushll" : "uxtl") << (q ? "2" : "") << '\t' << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2<<q, 2);
		if (imm) { sink << ", " << DisasmI(imm); }
}}
template <	typename	ARCH>
void OpUshll_v2d<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 DST;

		unsigned const elements = 2, srcidx = elements*q;
		DST res[elements];
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			res[idx] = DST(cpu.GetVU32(rn, srcidx + idx)) << imm;
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU64(rd, idx, res[idx]);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUshll_v2d(CodeType code, uint64_t addr)
{
	return new OpUshll_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUshr_vbbi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << (sm&2?"ur":"u") << (sm&1?"sra\t":"shr\t") << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUshr_vbbi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 U8;
		typedef typename ARCH::U16 U16;

		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			U8 res( (U16(cpu.GetVU8(rn, idx)) + U16(round)) >> shift );
			if (sm & 1)
			res += cpu.GetVU8(rd, idx);
			cpu.SetVU8(rd, idx, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUshr_vbbi(CodeType code, uint64_t addr)
{
	return new OpUshr_vbbi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUshr_vhhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ushr\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUshr_vhhi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		typedef typename ARCH::U32 U32;

		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			U16 res( (U32(cpu.GetVU16(rn, idx)) + U32(round)) >> shift );
			if (sm & 1)
			res += cpu.GetVU16(rd, idx);
			cpu.SetVU16(rd, idx, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUshr_vhhi(CodeType code, uint64_t addr)
{
	return new OpUshr_vhhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUshr_vssi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ushr\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmI(shift);
}}
template <	typename	ARCH>
void OpUshr_vssi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		typedef typename ARCH::U64 U64;

		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			U32 res( (U64(cpu.GetVU32(rn, idx)) + U64(round)) >> shift );
			if (sm & 1)
			res += cpu.GetVU32(rd, idx);
			cpu.SetVU32(rd, idx, res);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUshr_vssi(CodeType code, uint64_t addr)
{
	return new OpUshr_vssi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUshr_v2d2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ushr\t" << DisasmTV(rd, 2, 3) << ", " << DisasmTV(rn, 2, 3) << ", " << DisasmI(64-lro);
}}
template <	typename	ARCH>
void OpUshr_v2d2di<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		for (unsigned idx = 0, end = 2; idx < end; ++idx)
		{
			/* the weird, decomposed, computation is here to accomodate 64 right-shifts */
			U64 op( cpu.GetVU64(rn, idx) ), rb(op & U64(round)), res( ((op >> shift1) + (rb >> (shift1-1))) >> shift0 );
			if (sm & 1)
			res += cpu.GetVU64(rd, idx);
			cpu.SetVU64(rd, idx, res);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUshr_v2d2di(CodeType code, uint64_t addr)
{
	return new OpUshr_v2d2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUsqadd_vbb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "usqadd\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0);
}}
template <	typename	ARCH>
void OpUsqadd_vbb<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
		{
			cpu.SetVU8(rd, idx, SatAdd(cpu, cpu.GetVU8(rd, idx), cpu.GetVS8(rn, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUsqadd_vbb(CodeType code, uint64_t addr)
{
	return new OpUsqadd_vbb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUsqadd_vhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "usqadd\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}
template <	typename	ARCH>
void OpUsqadd_vhh<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
		{
			cpu.SetVU16(rd, idx, SatAdd(cpu, cpu.GetVU16(rd, idx), cpu.GetVS16(rn, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUsqadd_vhh(CodeType code, uint64_t addr)
{
	return new OpUsqadd_vhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUsqadd_vss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "usqadd\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}
template <	typename	ARCH>
void OpUsqadd_vss<	ARCH>::execute( ARCH & cpu) const
{
	{
		for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
		{
			cpu.SetVU32(rd, idx, SatAdd(cpu, cpu.GetVU32(rd, idx), cpu.GetVS32(rn, idx)));
		}

		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUsqadd_vss(CodeType code, uint64_t addr)
{
	return new OpUsqadd_vss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUzp1_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uzp1\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpUzp1_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;

		unsigned const elements = 8<<q;
		DST res[elements];
		for (unsigned idx = 0, srcidx = 0; idx < (elements/2); ++idx, srcidx += 2)
		{
			res[idx] = cpu.GetVU8(rn, srcidx);
		}
		for (unsigned idx = elements/2, srcidx = 0; idx < elements; ++idx, srcidx += 2)
		{
			res[idx] = cpu.GetVU8(rm, srcidx);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUzp1_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpUzp1_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUzp1_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uzp1\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpUzp1_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;

		unsigned const elements = 4<<q;
		DST res[elements];
		for (unsigned idx = 0, srcidx = 0; idx < (elements/2); ++idx, srcidx += 2)
		{
			res[idx] = cpu.GetVU16(rn, srcidx);
		}
		for (unsigned idx = elements/2, srcidx = 0; idx < elements; ++idx, srcidx += 2)
		{
			res[idx] = cpu.GetVU16(rm, srcidx);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUzp1_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpUzp1_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUzp1_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uzp1\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpUzp1_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;

		unsigned const elements = 2<<q;
		DST res[elements];
		for (unsigned idx = 0, srcidx = 0; idx < (elements/2); ++idx, srcidx += 2)
		{
			res[idx] = cpu.GetVU32(rn, srcidx);
		}
		for (unsigned idx = elements/2, srcidx = 0; idx < elements; ++idx, srcidx += 2)
		{
			res[idx] = cpu.GetVU32(rm, srcidx);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUzp1_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpUzp1_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUzp2_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uzp2\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpUzp2_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;

		unsigned const elements = 8<<q;
		DST res[elements];
		for (unsigned idx = 0, srcidx = 1; idx < (elements/2); ++idx, srcidx += 2)
		{
			res[idx] = cpu.GetVU8(rn, srcidx);
		}
		for (unsigned idx = elements/2, srcidx = 1; idx < elements; ++idx, srcidx += 2)
		{
			res[idx] = cpu.GetVU8(rm, srcidx);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUzp2_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpUzp2_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUzp2_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "uzp2\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpUzp2_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;

		unsigned const elements = 2<<q;
		DST res[elements];
		for (unsigned idx = 0, srcidx = 1; idx < (elements/2); ++idx, srcidx += 2)
		{
			res[idx] = cpu.GetVU32(rn, srcidx);
		}
		for (unsigned idx = elements/2, srcidx = 1; idx < elements; ++idx, srcidx += 2)
		{
			res[idx] = cpu.GetVU32(rm, srcidx);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUzp2_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpUzp2_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpZip1_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "zip1\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpZip1_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;

		unsigned const elements = 8<<q;
		DST res[elements];
		for( unsigned idx = 0; idx < elements; ++idx)
		{
			unsigned srcidx = idx / 2;
			res[idx] = cpu.GetVU8((idx & 1) ? rm : rn, srcidx);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpZip1_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpZip1_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpZip1_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "zip1\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpZip1_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;

		unsigned const elements = 4<<q;
		DST res[elements];
		for( unsigned idx = 0; idx < elements; ++idx)
		{
			unsigned srcidx = idx / 2;
			res[idx] = cpu.GetVU16((idx & 1) ? rm : rn, srcidx);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpZip1_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpZip1_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpZip1_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "zip1\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpZip1_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;

		unsigned const elements = 2<<q;
		DST res[elements];
		for( unsigned idx = 0; idx < elements; ++idx)
		{
			unsigned srcidx = idx / 2;
			res[idx] = cpu.GetVU32((idx & 1) ? rm : rn, srcidx);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpZip1_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpZip1_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpZip2_vbvbvb<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "zip2\t" << DisasmTV(rd, 8<<q, 0) << ", " << DisasmTV(rn, 8<<q, 0) << ", " << DisasmTV(rm, 8<<q, 0);
}}
template <	typename	ARCH>
void OpZip2_vbvbvb<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U8 DST;

		unsigned const elements = 8<<q;
		DST res[elements];
		for( unsigned idx = 0; idx < elements; ++idx)
		{
			unsigned srcidx = (idx / 2) + (elements / 2);
			res[idx] = cpu.GetVU8((idx & 1) ? rm : rn, srcidx);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU8(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpZip2_vbvbvb(CodeType code, uint64_t addr)
{
	return new OpZip2_vbvbvb<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpZip2_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "zip2\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}
template <	typename	ARCH>
void OpZip2_vhvhvh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 DST;

		unsigned const elements = 4<<q;
		DST res[elements];
		for( unsigned idx = 0; idx < elements; ++idx)
		{
			unsigned srcidx = (idx / 2) + (elements / 2);
			res[idx] = cpu.GetVU16((idx & 1) ? rm : rn, srcidx);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU16(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpZip2_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpZip2_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpZip2_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "zip2\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}
template <	typename	ARCH>
void OpZip2_vsvsvs<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 DST;

		unsigned const elements = 2<<q;
		DST res[elements];
		for( unsigned idx = 0; idx < elements; ++idx)
		{
			unsigned srcidx = (idx / 2) + (elements / 2);
			res[idx] = cpu.GetVU32((idx & 1) ? rm : rn, srcidx);
		}
		for (unsigned idx = 0; idx < elements; ++idx)
		{
			cpu.SetVU32(rd, idx, res[idx]);
		}
		cpu.ClearHighV(rd, 8<<q);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpZip2_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpZip2_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvms_bno<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>0, 0) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStvms_bno<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>0;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite8(addr + U64(1*idx), cpu.GetVU8((rt+idx/elements)%32, idx%elements));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite8(addr + U64(1*idx), cpu.GetVU8((rt+idx%vms.regs)%32, idx/vms.regs));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvms_bno(CodeType code, uint64_t addr)
{
	return new OpStvms_bno<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvms_bio<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>0, 0) << ", [" << DisasmGSXR(rn) << "]" << ", #" << (8*vms.regs << q);
}}
template <	typename	ARCH>
void OpStvms_bio<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>0;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite8(addr + U64(1*idx), cpu.GetVU8((rt+idx/elements)%32, idx%elements));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite8(addr + U64(1*idx), cpu.GetVU8((rt+idx%vms.regs)%32, idx/vms.regs));

		cpu.SetGSR(rn, addr + U64(8*vms.regs << q) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvms_bio(CodeType code, uint64_t addr)
{
	return new OpStvms_bio<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvms_hno<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>1, 1) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStvms_hno<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>1;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite16(addr + U64(2*idx), cpu.GetVU16((rt+idx/elements)%32, idx%elements));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite16(addr + U64(2*idx), cpu.GetVU16((rt+idx%vms.regs)%32, idx/vms.regs));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvms_hno(CodeType code, uint64_t addr)
{
	return new OpStvms_hno<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvms_hio<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>1, 1) << ", [" << DisasmGSXR(rn) << "]" << ", #" << (8*vms.regs << q);
}}
template <	typename	ARCH>
void OpStvms_hio<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>1;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite16(addr + U64(2*idx), cpu.GetVU16((rt+idx/elements)%32, idx%elements));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite16(addr + U64(2*idx), cpu.GetVU16((rt+idx%vms.regs)%32, idx/vms.regs));

		cpu.SetGSR(rn, addr + U64(8*vms.regs << q) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvms_hio(CodeType code, uint64_t addr)
{
	return new OpStvms_hio<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvms_sno<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>2, 2) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStvms_sno<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>2;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite32(addr + U64(4*idx), cpu.GetVU32((rt+idx/elements)%32, idx%elements));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite32(addr + U64(4*idx), cpu.GetVU32((rt+idx%vms.regs)%32, idx/vms.regs));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvms_sno(CodeType code, uint64_t addr)
{
	return new OpStvms_sno<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvms_sio<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>2, 2) << ", [" << DisasmGSXR(rn) << "]" << ", #" << (8*vms.regs << q);
}}
template <	typename	ARCH>
void OpStvms_sio<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>2;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite32(addr + U64(4*idx), cpu.GetVU32((rt+idx/elements)%32, idx%elements));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite32(addr + U64(4*idx), cpu.GetVU32((rt+idx%vms.regs)%32, idx/vms.regs));

		cpu.SetGSR(rn, addr + U64(8*vms.regs << q) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvms_sio(CodeType code, uint64_t addr)
{
	return new OpStvms_sio<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvms_dno<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>3, 3) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStvms_dno<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>3;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite64(addr + U64(8*idx), cpu.GetVU64((rt+idx/elements)%32, idx%elements));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite64(addr + U64(8*idx), cpu.GetVU64((rt+idx%vms.regs)%32, idx/vms.regs));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvms_dno(CodeType code, uint64_t addr)
{
	return new OpStvms_dno<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvms_dio<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>3, 3) << ", [" << DisasmGSXR(rn) << "]" << ", #" << (8*vms.regs << q);
}}
template <	typename	ARCH>
void OpStvms_dio<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>3;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite64(addr + U64(8*idx), cpu.GetVU64((rt+idx/elements)%32, idx%elements));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.MemWrite64(addr + U64(8*idx), cpu.GetVU64((rt+idx%vms.regs)%32, idx/vms.regs));

		cpu.SetGSR(rn, addr + U64(8*vms.regs << q) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvms_dio(CodeType code, uint64_t addr)
{
	return new OpStvms_dio<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvms_bno<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>0, 0) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdvms_bno<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>0;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU8((rt+idx/elements)%32, idx%elements, cpu.MemRead8(addr + U64(1*idx)));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU8((rt+idx%vms.regs)%32, idx/vms.regs, cpu.MemRead8(addr + U64(1*idx)));

		if (not q) for (unsigned idx = 0; idx < vms.regs; ++idx) cpu.ClearHighV((rt+idx)%32, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvms_bno(CodeType code, uint64_t addr)
{
	return new OpLdvms_bno<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvms_bio<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>0, 0) << ", [" << DisasmGSXR(rn) << "]" << ", #" << (8*vms.regs << q);
}}
template <	typename	ARCH>
void OpLdvms_bio<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>0;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU8((rt+idx/elements)%32, idx%elements, cpu.MemRead8(addr + U64(1*idx)));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU8((rt+idx%vms.regs)%32, idx/vms.regs, cpu.MemRead8(addr + U64(1*idx)));

		if (not q) for (unsigned idx = 0; idx < vms.regs; ++idx) cpu.ClearHighV((rt+idx)%32, 8);

		cpu.SetGSR(rn, addr + U64(8*vms.regs << q) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvms_bio(CodeType code, uint64_t addr)
{
	return new OpLdvms_bio<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvms_hno<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>1, 1) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdvms_hno<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>1;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU16((rt+idx/elements)%32, idx%elements, cpu.MemRead16(addr + U64(2*idx)));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU16((rt+idx%vms.regs)%32, idx/vms.regs, cpu.MemRead16(addr + U64(2*idx)));

		if (not q) for (unsigned idx = 0; idx < vms.regs; ++idx) cpu.ClearHighV((rt+idx)%32, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvms_hno(CodeType code, uint64_t addr)
{
	return new OpLdvms_hno<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvms_hio<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>1, 1) << ", [" << DisasmGSXR(rn) << "]" << ", #" << (8*vms.regs << q);
}}
template <	typename	ARCH>
void OpLdvms_hio<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>1;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU16((rt+idx/elements)%32, idx%elements, cpu.MemRead16(addr + U64(2*idx)));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU16((rt+idx%vms.regs)%32, idx/vms.regs, cpu.MemRead16(addr + U64(2*idx)));

		if (not q) for (unsigned idx = 0; idx < vms.regs; ++idx) cpu.ClearHighV((rt+idx)%32, 8);

		cpu.SetGSR(rn, addr + U64(8*vms.regs << q) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvms_hio(CodeType code, uint64_t addr)
{
	return new OpLdvms_hio<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvms_sno<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>2, 2) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdvms_sno<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>2;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU32((rt+idx/elements)%32, idx%elements, cpu.MemRead32(addr + U64(4*idx)));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU32((rt+idx%vms.regs)%32, idx/vms.regs, cpu.MemRead32(addr + U64(4*idx)));

		if (not q) for (unsigned idx = 0; idx < vms.regs; ++idx) cpu.ClearHighV((rt+idx)%32, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvms_sno(CodeType code, uint64_t addr)
{
	return new OpLdvms_sno<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvms_sio<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>2, 2) << ", [" << DisasmGSXR(rn) << "]" << ", #" << (8*vms.regs << q);
}}
template <	typename	ARCH>
void OpLdvms_sio<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>2;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU32((rt+idx/elements)%32, idx%elements, cpu.MemRead32(addr + U64(4*idx)));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU32((rt+idx%vms.regs)%32, idx/vms.regs, cpu.MemRead32(addr + U64(4*idx)));

		if (not q) for (unsigned idx = 0; idx < vms.regs; ++idx) cpu.ClearHighV((rt+idx)%32, 8);

		cpu.SetGSR(rn, addr + U64(8*vms.regs << q) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvms_sio(CodeType code, uint64_t addr)
{
	return new OpLdvms_sio<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvms_dno<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>3, 3) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdvms_dno<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>3;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU64((rt+idx/elements)%32, idx%elements, cpu.MemRead64(addr + U64(8*idx)));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU64((rt+idx%vms.regs)%32, idx/vms.regs, cpu.MemRead64(addr + U64(8*idx)));

		if (not q) for (unsigned idx = 0; idx < vms.regs; ++idx) cpu.ClearHighV((rt+idx)%32, 8);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvms_dno(CodeType code, uint64_t addr)
{
	return new OpLdvms_dno<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvms_dio<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld";
		sink << (vms.ses ? 1 : int(vms.regs));
		sink << '\t' << DisasmBunch(rt, vms.regs, (8<<q)>>3, 3) << ", [" << DisasmGSXR(rn) << "]" << ", #" << (8*vms.regs << q);
}}
template <	typename	ARCH>
void OpLdvms_dio<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		unsigned const elements = (8<<q)>>3;
		if (vms.ses)
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU64((rt+idx/elements)%32, idx%elements, cpu.MemRead64(addr + U64(8*idx)));
		else
		for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
		cpu.SetVU64((rt+idx%vms.regs)%32, idx/vms.regs, cpu.MemRead64(addr + U64(8*idx)));

		if (not q) for (unsigned idx = 0; idx < vms.regs; ++idx) cpu.ClearHighV((rt+idx)%32, 8);

		cpu.SetGSR(rn, addr + U64(8*vms.regs << q) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvms_dio(CodeType code, uint64_t addr)
{
	return new OpLdvms_dio<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvsl_bno<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << regs << '\t' << DisasmBunch(rt, regs, 0, 0) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStvsl_bno<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.MemWrite8(addr + U64(1*idx), cpu.GetVU8((rt+idx)%32, index));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvsl_bno(CodeType code, uint64_t addr)
{
	return new OpStvsl_bno<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvsl_bio<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << regs << '\t' << DisasmBunch(rt, regs, 0, 0) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]" << ", #" << (regs << 0);
}}
template <	typename	ARCH>
void OpStvsl_bio<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.MemWrite8(addr + U64(1*idx), cpu.GetVU8((rt+idx)%32, index));

		cpu.SetGSR(rn, addr + U64(regs << 0) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvsl_bio(CodeType code, uint64_t addr)
{
	return new OpStvsl_bio<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvsl_hno<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << regs << '\t' << DisasmBunch(rt, regs, 0, 1) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStvsl_hno<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.MemWrite16(addr + U64(2*idx), cpu.GetVU16((rt+idx)%32, index));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvsl_hno(CodeType code, uint64_t addr)
{
	return new OpStvsl_hno<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvsl_hio<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << regs << '\t' << DisasmBunch(rt, regs, 0, 1) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]" << ", #" << (regs << 1);
}}
template <	typename	ARCH>
void OpStvsl_hio<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.MemWrite16(addr + U64(2*idx), cpu.GetVU16((rt+idx)%32, index));

		cpu.SetGSR(rn, addr + U64(regs << 1) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvsl_hio(CodeType code, uint64_t addr)
{
	return new OpStvsl_hio<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvsl_sno<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << regs << '\t' << DisasmBunch(rt, regs, 0, 2) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStvsl_sno<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.MemWrite32(addr + U64(4*idx), cpu.GetVU32((rt+idx)%32, index));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvsl_sno(CodeType code, uint64_t addr)
{
	return new OpStvsl_sno<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvsl_sio<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << regs << '\t' << DisasmBunch(rt, regs, 0, 2) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]" << ", #" << (regs << 2);
}}
template <	typename	ARCH>
void OpStvsl_sio<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.MemWrite32(addr + U64(4*idx), cpu.GetVU32((rt+idx)%32, index));

		cpu.SetGSR(rn, addr + U64(regs << 2) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvsl_sio(CodeType code, uint64_t addr)
{
	return new OpStvsl_sio<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvsl_dno<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << regs << '\t' << DisasmBunch(rt, regs, 0, 3) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpStvsl_dno<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.MemWrite64(addr + U64(8*idx), cpu.GetVU64((rt+idx)%32, index));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvsl_dno(CodeType code, uint64_t addr)
{
	return new OpStvsl_dno<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpStvsl_dio<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "st" << regs << '\t' << DisasmBunch(rt, regs, 0, 3) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]" << ", #" << (regs << 3);
}}
template <	typename	ARCH>
void OpStvsl_dio<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.MemWrite64(addr + U64(8*idx), cpu.GetVU64((rt+idx)%32, index));

		cpu.SetGSR(rn, addr + U64(regs << 3) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpStvsl_dio(CodeType code, uint64_t addr)
{
	return new OpStvsl_dio<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvsl_bno<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << '\t' << DisasmBunch(rt, regs, 0, 0) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdvsl_bno<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.SetVU8((rt+idx)%32, index, cpu.MemRead8(addr + U64(1*idx)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvsl_bno(CodeType code, uint64_t addr)
{
	return new OpLdvsl_bno<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvsl_bio<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << '\t' << DisasmBunch(rt, regs, 0, 0) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]" << ", #" << (regs << 0);
}}
template <	typename	ARCH>
void OpLdvsl_bio<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.SetVU8((rt+idx)%32, index, cpu.MemRead8(addr + U64(1*idx)));

		cpu.SetGSR(rn, addr + U64(regs << 0) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvsl_bio(CodeType code, uint64_t addr)
{
	return new OpLdvsl_bio<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvsl_hno<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << '\t' << DisasmBunch(rt, regs, 0, 1) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdvsl_hno<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.SetVU16((rt+idx)%32, index, cpu.MemRead16(addr + U64(2*idx)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvsl_hno(CodeType code, uint64_t addr)
{
	return new OpLdvsl_hno<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvsl_hio<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << '\t' << DisasmBunch(rt, regs, 0, 1) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]" << ", #" << (regs << 1);
}}
template <	typename	ARCH>
void OpLdvsl_hio<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.SetVU16((rt+idx)%32, index, cpu.MemRead16(addr + U64(2*idx)));

		cpu.SetGSR(rn, addr + U64(regs << 1) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvsl_hio(CodeType code, uint64_t addr)
{
	return new OpLdvsl_hio<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvsl_sno<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << '\t' << DisasmBunch(rt, regs, 0, 2) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdvsl_sno<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.SetVU32((rt+idx)%32, index, cpu.MemRead32(addr + U64(4*idx)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvsl_sno(CodeType code, uint64_t addr)
{
	return new OpLdvsl_sno<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvsl_sio<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << '\t' << DisasmBunch(rt, regs, 0, 2) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]" << ", #" << (regs << 2);
}}
template <	typename	ARCH>
void OpLdvsl_sio<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.SetVU32((rt+idx)%32, index, cpu.MemRead32(addr + U64(4*idx)));

		cpu.SetGSR(rn, addr + U64(regs << 2) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvsl_sio(CodeType code, uint64_t addr)
{
	return new OpLdvsl_sio<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvsl_dno<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << '\t' << DisasmBunch(rt, regs, 0, 3) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdvsl_dno<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.SetVU64((rt+idx)%32, index, cpu.MemRead64(addr + U64(8*idx)));
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvsl_dno(CodeType code, uint64_t addr)
{
	return new OpLdvsl_dno<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvsl_dio<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << '\t' << DisasmBunch(rt, regs, 0, 3) << DisasmSubscript(index) << ", [" << DisasmGSXR(rn) << "]" << ", #" << (regs << 3);
}}
template <	typename	ARCH>
void OpLdvsl_dio<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned idx = 0, end = regs; idx < end; ++idx)
		cpu.SetVU64((rt+idx)%32, index, cpu.MemRead64(addr + U64(8*idx)));

		cpu.SetGSR(rn, addr + U64(regs << 3) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvsl_dio(CodeType code, uint64_t addr)
{
	return new OpLdvsl_dio<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvr_bno<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << "r\t" << DisasmBunch(rt, regs, 8<<q, 0) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdvr_bno<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned r = 0; r < regs; ++r)
		{
			typename ARCH::U8 val = cpu.MemRead8(addr + U64(1*r));
			unsigned reg = (rt+r)%32;
			for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
			cpu.SetVU8(reg, idx, val);
			cpu.ClearHighV(reg, 8<<q);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvr_bno(CodeType code, uint64_t addr)
{
	return new OpLdvr_bno<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvr_bio<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << "r\t" << DisasmBunch(rt, regs, 8<<q, 0) << ", [" << DisasmGSXR(rn) << "]" << ", #" << (regs << 0);
}}
template <	typename	ARCH>
void OpLdvr_bio<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned r = 0; r < regs; ++r)
		{
			typename ARCH::U8 val = cpu.MemRead8(addr + U64(1*r));
			unsigned reg = (rt+r)%32;
			for (unsigned idx = 0, end = 8<<q; idx < end; ++idx)
			cpu.SetVU8(reg, idx, val);
			cpu.ClearHighV(reg, 8<<q);
		}

		cpu.SetGSR(rn, addr + U64(regs << 0) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvr_bio(CodeType code, uint64_t addr)
{
	return new OpLdvr_bio<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvr_hno<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << "r\t" << DisasmBunch(rt, regs, 4<<q, 1) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdvr_hno<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned r = 0; r < regs; ++r)
		{
			typename ARCH::U16 val = cpu.MemRead16(addr + U64(2*r));
			unsigned reg = (rt+r)%32;
			for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
			cpu.SetVU16(reg, idx, val);
			cpu.ClearHighV(reg, 8<<q);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvr_hno(CodeType code, uint64_t addr)
{
	return new OpLdvr_hno<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvr_hio<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << "r\t" << DisasmBunch(rt, regs, 4<<q, 1) << ", [" << DisasmGSXR(rn) << "]" << ", #" << (regs << 1);
}}
template <	typename	ARCH>
void OpLdvr_hio<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned r = 0; r < regs; ++r)
		{
			typename ARCH::U16 val = cpu.MemRead16(addr + U64(2*r));
			unsigned reg = (rt+r)%32;
			for (unsigned idx = 0, end = 4<<q; idx < end; ++idx)
			cpu.SetVU16(reg, idx, val);
			cpu.ClearHighV(reg, 8<<q);
		}

		cpu.SetGSR(rn, addr + U64(regs << 1) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvr_hio(CodeType code, uint64_t addr)
{
	return new OpLdvr_hio<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvr_sno<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << "r\t" << DisasmBunch(rt, regs, 2<<q, 2) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdvr_sno<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned r = 0; r < regs; ++r)
		{
			typename ARCH::U32 val = cpu.MemRead32(addr + U64(4*r));
			unsigned reg = (rt+r)%32;
			for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
			cpu.SetVU32(reg, idx, val);
			cpu.ClearHighV(reg, 8<<q);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvr_sno(CodeType code, uint64_t addr)
{
	return new OpLdvr_sno<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvr_sio<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << "r\t" << DisasmBunch(rt, regs, 2<<q, 2) << ", [" << DisasmGSXR(rn) << "]" << ", #" << (regs << 2);
}}
template <	typename	ARCH>
void OpLdvr_sio<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned r = 0; r < regs; ++r)
		{
			typename ARCH::U32 val = cpu.MemRead32(addr + U64(4*r));
			unsigned reg = (rt+r)%32;
			for (unsigned idx = 0, end = 2<<q; idx < end; ++idx)
			cpu.SetVU32(reg, idx, val);
			cpu.ClearHighV(reg, 8<<q);
		}

		cpu.SetGSR(rn, addr + U64(regs << 2) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvr_sio(CodeType code, uint64_t addr)
{
	return new OpLdvr_sio<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvr_dno<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << "r\t" << DisasmBunch(rt, regs, 1<<q, 3) << ", [" << DisasmGSXR(rn) << "]";
}}
template <	typename	ARCH>
void OpLdvr_dno<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned r = 0; r < regs; ++r)
		{
			typename ARCH::U64 val = cpu.MemRead64(addr + U64(8*r));
			unsigned reg = (rt+r)%32;
			for (unsigned idx = 0, end = 1<<q; idx < end; ++idx)
			cpu.SetVU64(reg, idx, val);
			cpu.ClearHighV(reg, 8<<q);
		}
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvr_dno(CodeType code, uint64_t addr)
{
	return new OpLdvr_dno<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpLdvr_dio<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ld" << regs << "r\t" << DisasmBunch(rt, regs, 1<<q, 3) << ", [" << DisasmGSXR(rn) << "]" << ", #" << (regs << 3);
}}
template <	typename	ARCH>
void OpLdvr_dio<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;

		U64 addr( cpu.GetGSR(rn) );
		if (rn == 31)
		cpu.CheckSPAlignment(addr);

		for (unsigned r = 0; r < regs; ++r)
		{
			typename ARCH::U64 val = cpu.MemRead64(addr + U64(8*r));
			unsigned reg = (rt+r)%32;
			for (unsigned idx = 0, end = 1<<q; idx < end; ++idx)
			cpu.SetVU64(reg, idx, val);
			cpu.ClearHighV(reg, 8<<q);
		}

		cpu.SetGSR(rn, addr + U64(regs << 3) );
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpLdvr_dio(CodeType code, uint64_t addr)
{
	return new OpLdvr_dio<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFabd_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fabd\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFabd_h(CodeType code, uint64_t addr)
{
	return new OpFabd_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFabd_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fabd\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFabd_s(CodeType code, uint64_t addr)
{
	return new OpFabd_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFabd_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fabd\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFabd_d(CodeType code, uint64_t addr)
{
	return new OpFabd_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFabd_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fabd\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFabd_vh(CodeType code, uint64_t addr)
{
	return new OpFabd_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFabd_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fabd\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFabd_vs(CodeType code, uint64_t addr)
{
	return new OpFabd_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFabd_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fabd\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFabd_v2d(CodeType code, uint64_t addr)
{
	return new OpFabd_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFabs_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fabs\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFabs_h(CodeType code, uint64_t addr)
{
	return new OpFabs_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFabs_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fabs\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFabs_s(CodeType code, uint64_t addr)
{
	return new OpFabs_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFabs_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fabs\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFabs_d(CodeType code, uint64_t addr)
{
	return new OpFabs_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFabs_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fabs\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFabs_vh(CodeType code, uint64_t addr)
{
	return new OpFabs_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFabs_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fabs\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFabs_vs(CodeType code, uint64_t addr)
{
	return new OpFabs_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFabs_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fabs\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFabs_v2d(CodeType code, uint64_t addr)
{
	return new OpFabs_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFacge_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "facge\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFacge_h(CodeType code, uint64_t addr)
{
	return new OpFacge_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFacge_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "facge\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFacge_s(CodeType code, uint64_t addr)
{
	return new OpFacge_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFacge_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "facge\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFacge_d(CodeType code, uint64_t addr)
{
	return new OpFacge_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFacge_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "facge\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFacge_vh(CodeType code, uint64_t addr)
{
	return new OpFacge_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFacge_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "facge\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFacge_vs(CodeType code, uint64_t addr)
{
	return new OpFacge_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFacge_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "facge\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFacge_v2d(CodeType code, uint64_t addr)
{
	return new OpFacge_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFacgt_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "facgt\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFacgt_h(CodeType code, uint64_t addr)
{
	return new OpFacgt_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFacgt_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "facgt\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFacgt_s(CodeType code, uint64_t addr)
{
	return new OpFacgt_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFacgt_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "facgt\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFacgt_d(CodeType code, uint64_t addr)
{
	return new OpFacgt_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFacgt_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "facgt\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFacgt_vh(CodeType code, uint64_t addr)
{
	return new OpFacgt_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFacgt_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "facgt\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFacgt_vs(CodeType code, uint64_t addr)
{
	return new OpFacgt_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFacgt_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "facgt\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFacgt_v2d(CodeType code, uint64_t addr)
{
	return new OpFacgt_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFadd_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fadd\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFadd_h(CodeType code, uint64_t addr)
{
	return new OpFadd_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFadd_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fadd\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFadd_s(CodeType code, uint64_t addr)
{
	return new OpFadd_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFadd_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fadd\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFadd_d(CodeType code, uint64_t addr)
{
	return new OpFadd_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFadd_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fadd\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFadd_vh(CodeType code, uint64_t addr)
{
	return new OpFadd_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFadd_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fadd\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFadd_vs(CodeType code, uint64_t addr)
{
	return new OpFadd_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFadd_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fadd\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFadd_v2d(CodeType code, uint64_t addr)
{
	return new OpFadd_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFaddp_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "faddp\t" << DisasmH(rd) << ", " << DisasmTV(rn,2,1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFaddp_h(CodeType code, uint64_t addr)
{
	return new OpFaddp_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFaddp_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "faddp\t" << DisasmS(rd) << ", " << DisasmTV(rn,2,2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFaddp_s(CodeType code, uint64_t addr)
{
	return new OpFaddp_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFaddp_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "faddp\t" << DisasmD(rd) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFaddp_d(CodeType code, uint64_t addr)
{
	return new OpFaddp_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFaddp_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "faddp\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFaddp_vh(CodeType code, uint64_t addr)
{
	return new OpFaddp_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFaddp_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "faddp\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFaddp_vs(CodeType code, uint64_t addr)
{
	return new OpFaddp_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFaddp_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "faddp\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFaddp_v2d(CodeType code, uint64_t addr)
{
	return new OpFaddp_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFccmp_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fccmp\t" << DisasmH(rn) << ", " << DisasmH(rm) << ", " << DisasmI((n<<3)|(z<<2)|(c<<1)|(v<<0),16) << ", " << DisasmCond(cond);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFccmp_h(CodeType code, uint64_t addr)
{
	return new OpFccmp_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFccmp_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fccmp\t" << DisasmS(rn) << ", " << DisasmS(rm) << ", " << DisasmI((n<<3)|(z<<2)|(c<<1)|(v<<0),16) << ", " << DisasmCond(cond);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFccmp_s(CodeType code, uint64_t addr)
{
	return new OpFccmp_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFccmp_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fccmp\t" << DisasmD(rn) << ", " << DisasmD(rm) << ", " << DisasmI((n<<3)|(z<<2)|(c<<1)|(v<<0),16) << ", " << DisasmCond(cond);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFccmp_d(CodeType code, uint64_t addr)
{
	return new OpFccmp_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFccmpe_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fccmpe\t" << DisasmD(rn) << ", " << DisasmD(rm) << ", " << DisasmI((n<<3)|(z<<2)|(c<<1)|(v<<0),16) << ", " << DisasmCond(cond);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFccmpe_d(CodeType code, uint64_t addr)
{
	return new OpFccmpe_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFccmpe_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fccmpe\t" << DisasmS(rn) << ", " << DisasmS(rm) << ", " << DisasmI((n<<3)|(z<<2)|(c<<1)|(v<<0),16) << ", " << DisasmCond(cond);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFccmpe_s(CodeType code, uint64_t addr)
{
	return new OpFccmpe_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFccmpe_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fccmpe\t" << DisasmH(rn) << ", " << DisasmH(rm) << ", " << DisasmI((n<<3)|(z<<2)|(c<<1)|(v<<0),16) << ", " << DisasmCond(cond);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFccmpe_h(CodeType code, uint64_t addr)
{
	return new OpFccmpe_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmeq_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmeq\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmeq_h(CodeType code, uint64_t addr)
{
	return new OpFcmeq_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmeq_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmeq\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmeq_s(CodeType code, uint64_t addr)
{
	return new OpFcmeq_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmeq_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmeq\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmeq_d(CodeType code, uint64_t addr)
{
	return new OpFcmeq_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmeq_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmeq\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmeq_vh(CodeType code, uint64_t addr)
{
	return new OpFcmeq_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmeq_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmeq\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmeq_vs(CodeType code, uint64_t addr)
{
	return new OpFcmeq_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmeq_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmeq\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmeq_v2d(CodeType code, uint64_t addr)
{
	return new OpFcmeq_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmeq_hz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmeq\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmeq_hz(CodeType code, uint64_t addr)
{
	return new OpFcmeq_hz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmeq_sz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmeq\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmeq_sz(CodeType code, uint64_t addr)
{
	return new OpFcmeq_sz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmeq_dz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmeq\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmeq_dz(CodeType code, uint64_t addr)
{
	return new OpFcmeq_dz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmeq_vhz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmeq\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmeq_vhz(CodeType code, uint64_t addr)
{
	return new OpFcmeq_vhz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmeq_vsz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmeq\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmeq_vsz(CodeType code, uint64_t addr)
{
	return new OpFcmeq_vsz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmeq_v2dz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmeq\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmeq_v2dz(CodeType code, uint64_t addr)
{
	return new OpFcmeq_v2dz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmge_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmge\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmge_h(CodeType code, uint64_t addr)
{
	return new OpFcmge_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmge_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmge\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmge_s(CodeType code, uint64_t addr)
{
	return new OpFcmge_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmge_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmge\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmge_d(CodeType code, uint64_t addr)
{
	return new OpFcmge_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmge_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmge\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmge_vh(CodeType code, uint64_t addr)
{
	return new OpFcmge_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmge_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmge\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmge_vs(CodeType code, uint64_t addr)
{
	return new OpFcmge_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmge_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmge\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmge_v2d(CodeType code, uint64_t addr)
{
	return new OpFcmge_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmge_hz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmge\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmge_hz(CodeType code, uint64_t addr)
{
	return new OpFcmge_hz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmge_sz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmge\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmge_sz(CodeType code, uint64_t addr)
{
	return new OpFcmge_sz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmge_dz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmge\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmge_dz(CodeType code, uint64_t addr)
{
	return new OpFcmge_dz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmge_vhz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmge\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmge_vhz(CodeType code, uint64_t addr)
{
	return new OpFcmge_vhz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmge_vsz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmge\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmge_vsz(CodeType code, uint64_t addr)
{
	return new OpFcmge_vsz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmge_v2dz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmge\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmge_v2dz(CodeType code, uint64_t addr)
{
	return new OpFcmge_v2dz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmgt_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmgt\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmgt_h(CodeType code, uint64_t addr)
{
	return new OpFcmgt_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmgt_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmgt\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmgt_s(CodeType code, uint64_t addr)
{
	return new OpFcmgt_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmgt_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmgt\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmgt_d(CodeType code, uint64_t addr)
{
	return new OpFcmgt_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmgt_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmgt\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmgt_vh(CodeType code, uint64_t addr)
{
	return new OpFcmgt_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmgt_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmgt\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmgt_vs(CodeType code, uint64_t addr)
{
	return new OpFcmgt_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmgt_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmgt\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmgt_v2d(CodeType code, uint64_t addr)
{
	return new OpFcmgt_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmgt_hz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmgt\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmgt_hz(CodeType code, uint64_t addr)
{
	return new OpFcmgt_hz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmgt_sz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmgt\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmgt_sz(CodeType code, uint64_t addr)
{
	return new OpFcmgt_sz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmgt_dz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmgt\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmgt_dz(CodeType code, uint64_t addr)
{
	return new OpFcmgt_dz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmgt_vhz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmgt\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmgt_vhz(CodeType code, uint64_t addr)
{
	return new OpFcmgt_vhz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmgt_vsz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmgt\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmgt_vsz(CodeType code, uint64_t addr)
{
	return new OpFcmgt_vsz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmgt_v2dz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmgt\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmgt_v2dz(CodeType code, uint64_t addr)
{
	return new OpFcmgt_v2dz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmle_hz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmle\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmle_hz(CodeType code, uint64_t addr)
{
	return new OpFcmle_hz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmle_sz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmle\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmle_sz(CodeType code, uint64_t addr)
{
	return new OpFcmle_sz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmle_dz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmle\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmle_dz(CodeType code, uint64_t addr)
{
	return new OpFcmle_dz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmle_vhz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmle\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmle_vhz(CodeType code, uint64_t addr)
{
	return new OpFcmle_vhz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmle_vsz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmle\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmle_vsz(CodeType code, uint64_t addr)
{
	return new OpFcmle_vsz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmle_v2dz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmle\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmle_v2dz(CodeType code, uint64_t addr)
{
	return new OpFcmle_v2dz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmlt_hz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmlt\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmlt_hz(CodeType code, uint64_t addr)
{
	return new OpFcmlt_hz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmlt_sz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmlt\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmlt_sz(CodeType code, uint64_t addr)
{
	return new OpFcmlt_sz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmlt_dz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmlt\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmlt_dz(CodeType code, uint64_t addr)
{
	return new OpFcmlt_dz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmlt_vhz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmlt\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmlt_vhz(CodeType code, uint64_t addr)
{
	return new OpFcmlt_vhz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmlt_vsz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmlt\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmlt_vsz(CodeType code, uint64_t addr)
{
	return new OpFcmlt_vsz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmlt_v2dz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmlt\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmlt_v2dz(CodeType code, uint64_t addr)
{
	return new OpFcmlt_v2dz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmp_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmp\t" << DisasmH(rn) << ", " << DisasmH(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmp_h(CodeType code, uint64_t addr)
{
	return new OpFcmp_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmp_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmp\t" << DisasmS(rn) << ", " << DisasmS(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmp_s(CodeType code, uint64_t addr)
{
	return new OpFcmp_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmp_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmp\t" << DisasmD(rn) << ", " << DisasmD(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmp_d(CodeType code, uint64_t addr)
{
	return new OpFcmp_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmp_hz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmp\t" << DisasmH(rn) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmp_hz(CodeType code, uint64_t addr)
{
	return new OpFcmp_hz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmp_sz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmp\t" << DisasmS(rn) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmp_sz(CodeType code, uint64_t addr)
{
	return new OpFcmp_sz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmp_dz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmp\t" << DisasmD(rn) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmp_dz(CodeType code, uint64_t addr)
{
	return new OpFcmp_dz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmpe_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmpe\t" << DisasmH(rn) << ", " << DisasmH(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmpe_h(CodeType code, uint64_t addr)
{
	return new OpFcmpe_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmpe_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmpe\t" << DisasmS(rn) << ", " << DisasmS(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmpe_s(CodeType code, uint64_t addr)
{
	return new OpFcmpe_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmpe_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmpe\t" << DisasmD(rn) << ", " << DisasmD(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmpe_d(CodeType code, uint64_t addr)
{
	return new OpFcmpe_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmpe_hz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmpe\t" << DisasmH(rn) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmpe_hz(CodeType code, uint64_t addr)
{
	return new OpFcmpe_hz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmpe_sz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmpe\t" << DisasmS(rn) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmpe_sz(CodeType code, uint64_t addr)
{
	return new OpFcmpe_sz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcmpe_dz<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcmpe\t" << DisasmD(rn) << ", #0.0";
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcmpe_dz(CodeType code, uint64_t addr)
{
	return new OpFcmpe_dz<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcsel_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcsel\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm) << ", " << DisasmCond(cond);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcsel_h(CodeType code, uint64_t addr)
{
	return new OpFcsel_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcsel_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcsel\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm) << ", " << DisasmCond(cond);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcsel_s(CodeType code, uint64_t addr)
{
	return new OpFcsel_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcsel_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcsel\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm) << ", " << DisasmCond(cond);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcsel_d(CodeType code, uint64_t addr)
{
	return new OpFcsel_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvt_hs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvt\t" << DisasmH(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvt_hs(CodeType code, uint64_t addr)
{
	return new OpFcvt_hs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvt_hd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvt\t" << DisasmH(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvt_hd(CodeType code, uint64_t addr)
{
	return new OpFcvt_hd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvt_sh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvt\t" << DisasmS(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvt_sh(CodeType code, uint64_t addr)
{
	return new OpFcvt_sh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvt_sd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvt\t" << DisasmS(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvt_sd(CodeType code, uint64_t addr)
{
	return new OpFcvt_sd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvt_dh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvt\t" << DisasmD(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvt_dh(CodeType code, uint64_t addr)
{
	return new OpFcvt_dh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvt_ds<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvt\t" << DisasmD(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvt_ds(CodeType code, uint64_t addr)
{
	return new OpFcvt_ds<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtas_hh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtas\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtas_hh(CodeType code, uint64_t addr)
{
	return new OpFcvtas_hh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtas_ss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtas\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtas_ss(CodeType code, uint64_t addr)
{
	return new OpFcvtas_ss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtas_dd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtas\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtas_dd(CodeType code, uint64_t addr)
{
	return new OpFcvtas_dd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtas_wh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtas\t" << DisasmGZWR(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtas_wh(CodeType code, uint64_t addr)
{
	return new OpFcvtas_wh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtas_ws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtas\t" << DisasmGZWR(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtas_ws(CodeType code, uint64_t addr)
{
	return new OpFcvtas_ws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtas_wd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtas\t" << DisasmGZWR(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtas_wd(CodeType code, uint64_t addr)
{
	return new OpFcvtas_wd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtas_xh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtas\t" << DisasmGZXR(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtas_xh(CodeType code, uint64_t addr)
{
	return new OpFcvtas_xh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtas_xs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtas\t" << DisasmGZXR(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtas_xs(CodeType code, uint64_t addr)
{
	return new OpFcvtas_xs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtas_xd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtas\t" << DisasmGZXR(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtas_xd(CodeType code, uint64_t addr)
{
	return new OpFcvtas_xd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtas_vhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtas\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtas_vhh(CodeType code, uint64_t addr)
{
	return new OpFcvtas_vhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtas_vss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtas\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtas_vss(CodeType code, uint64_t addr)
{
	return new OpFcvtas_vss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtas_v2d2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtas\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtas_v2d2d(CodeType code, uint64_t addr)
{
	return new OpFcvtas_v2d2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtau_hh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtau\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtau_hh(CodeType code, uint64_t addr)
{
	return new OpFcvtau_hh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtau_ss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtau\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtau_ss(CodeType code, uint64_t addr)
{
	return new OpFcvtau_ss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtau_dd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtau\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtau_dd(CodeType code, uint64_t addr)
{
	return new OpFcvtau_dd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtau_wh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtau\t" << DisasmGZWR(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtau_wh(CodeType code, uint64_t addr)
{
	return new OpFcvtau_wh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtau_ws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtau\t" << DisasmGZWR(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtau_ws(CodeType code, uint64_t addr)
{
	return new OpFcvtau_ws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtau_wd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtau\t" << DisasmGZWR(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtau_wd(CodeType code, uint64_t addr)
{
	return new OpFcvtau_wd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtau_xh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtau\t" << DisasmGZXR(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtau_xh(CodeType code, uint64_t addr)
{
	return new OpFcvtau_xh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtau_xs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtau\t" << DisasmGZXR(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtau_xs(CodeType code, uint64_t addr)
{
	return new OpFcvtau_xs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtau_xd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtau\t" << DisasmGZXR(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtau_xd(CodeType code, uint64_t addr)
{
	return new OpFcvtau_xd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtau_vhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtau\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtau_vhh(CodeType code, uint64_t addr)
{
	return new OpFcvtau_vhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtau_vss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtau\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtau_vss(CodeType code, uint64_t addr)
{
	return new OpFcvtau_vss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtau_v2d2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtau\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtau_v2d2d(CodeType code, uint64_t addr)
{
	return new OpFcvtau_v2d2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtl2_v2d4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtl2\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,4,2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtl2_v2d4s(CodeType code, uint64_t addr)
{
	return new OpFcvtl2_v2d4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtl2_v4s8h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtl2\t" << DisasmTV(rd,4,2) << ", " << DisasmTV(rn,8,1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtl2_v4s8h(CodeType code, uint64_t addr)
{
	return new OpFcvtl2_v4s8h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtl_v2d2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtl\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtl_v2d2s(CodeType code, uint64_t addr)
{
	return new OpFcvtl_v2d2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtl_v4s4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtl\t" << DisasmTV(rd,4,2) << ", " << DisasmTV(rn,4,1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtl_v4s4h(CodeType code, uint64_t addr)
{
	return new OpFcvtl_v4s4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtms_hh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtms\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtms_hh(CodeType code, uint64_t addr)
{
	return new OpFcvtms_hh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtms_ss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtms\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtms_ss(CodeType code, uint64_t addr)
{
	return new OpFcvtms_ss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtms_dd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtms\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtms_dd(CodeType code, uint64_t addr)
{
	return new OpFcvtms_dd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtms_wh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtms\t" << DisasmGZWR(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtms_wh(CodeType code, uint64_t addr)
{
	return new OpFcvtms_wh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtms_ws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtms\t" << DisasmGZWR(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtms_ws(CodeType code, uint64_t addr)
{
	return new OpFcvtms_ws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtms_wd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtms\t" << DisasmGZWR(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtms_wd(CodeType code, uint64_t addr)
{
	return new OpFcvtms_wd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtms_xh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtms\t" << DisasmGZXR(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtms_xh(CodeType code, uint64_t addr)
{
	return new OpFcvtms_xh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtms_xs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtms\t" << DisasmGZXR(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtms_xs(CodeType code, uint64_t addr)
{
	return new OpFcvtms_xs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtms_xd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtms\t" << DisasmGZXR(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtms_xd(CodeType code, uint64_t addr)
{
	return new OpFcvtms_xd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtms_vhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtms\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtms_vhh(CodeType code, uint64_t addr)
{
	return new OpFcvtms_vhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtms_vss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtms\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtms_vss(CodeType code, uint64_t addr)
{
	return new OpFcvtms_vss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtms_v2d2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtms\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtms_v2d2d(CodeType code, uint64_t addr)
{
	return new OpFcvtms_v2d2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtmu_hh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtmu\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtmu_hh(CodeType code, uint64_t addr)
{
	return new OpFcvtmu_hh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtmu_ss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtmu\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtmu_ss(CodeType code, uint64_t addr)
{
	return new OpFcvtmu_ss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtmu_dd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtmu\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtmu_dd(CodeType code, uint64_t addr)
{
	return new OpFcvtmu_dd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtmu_wh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtmu\t" << DisasmGZWR(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtmu_wh(CodeType code, uint64_t addr)
{
	return new OpFcvtmu_wh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtmu_ws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtmu\t" << DisasmGZWR(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtmu_ws(CodeType code, uint64_t addr)
{
	return new OpFcvtmu_ws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtmu_wd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtmu\t" << DisasmGZWR(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtmu_wd(CodeType code, uint64_t addr)
{
	return new OpFcvtmu_wd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtmu_xh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtmu\t" << DisasmGZXR(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtmu_xh(CodeType code, uint64_t addr)
{
	return new OpFcvtmu_xh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtmu_xs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtmu\t" << DisasmGZXR(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtmu_xs(CodeType code, uint64_t addr)
{
	return new OpFcvtmu_xs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtmu_xd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtmu\t" << DisasmGZXR(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtmu_xd(CodeType code, uint64_t addr)
{
	return new OpFcvtmu_xd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtmu_vhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtmu\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtmu_vhh(CodeType code, uint64_t addr)
{
	return new OpFcvtmu_vhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtmu_vss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtmu\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtmu_vss(CodeType code, uint64_t addr)
{
	return new OpFcvtmu_vss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtmu_v2d2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtmu\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtmu_v2d2d(CodeType code, uint64_t addr)
{
	return new OpFcvtmu_v2d2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtn2_v4s2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtn2\t" << DisasmTV(rd,4,2) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtn2_v4s2d(CodeType code, uint64_t addr)
{
	return new OpFcvtn2_v4s2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtn2_v8h4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtn2\t" << DisasmTV(rd,8,1) << ", " << DisasmTV(rn,4,2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtn2_v8h4s(CodeType code, uint64_t addr)
{
	return new OpFcvtn2_v8h4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtn_v2s2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtn\t" << DisasmTV(rd,2,2) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtn_v2s2d(CodeType code, uint64_t addr)
{
	return new OpFcvtn_v2s2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtn_v4h4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtn\t" << DisasmTV(rd,4,1) << ", " << DisasmTV(rn,4,2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtn_v4h4s(CodeType code, uint64_t addr)
{
	return new OpFcvtn_v4h4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtns_hh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtns\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtns_hh(CodeType code, uint64_t addr)
{
	return new OpFcvtns_hh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtns_ss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtns\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtns_ss(CodeType code, uint64_t addr)
{
	return new OpFcvtns_ss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtns_dd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtns\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtns_dd(CodeType code, uint64_t addr)
{
	return new OpFcvtns_dd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtns_wh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtns\t" << DisasmGZWR(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtns_wh(CodeType code, uint64_t addr)
{
	return new OpFcvtns_wh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtns_ws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtns\t" << DisasmGZWR(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtns_ws(CodeType code, uint64_t addr)
{
	return new OpFcvtns_ws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtns_wd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtns\t" << DisasmGZWR(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtns_wd(CodeType code, uint64_t addr)
{
	return new OpFcvtns_wd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtns_xh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtns\t" << DisasmGZXR(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtns_xh(CodeType code, uint64_t addr)
{
	return new OpFcvtns_xh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtns_xs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtns\t" << DisasmGZXR(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtns_xs(CodeType code, uint64_t addr)
{
	return new OpFcvtns_xs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtns_xd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtns\t" << DisasmGZXR(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtns_xd(CodeType code, uint64_t addr)
{
	return new OpFcvtns_xd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtns_vhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtns\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtns_vhh(CodeType code, uint64_t addr)
{
	return new OpFcvtns_vhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtns_vss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtns\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtns_vss(CodeType code, uint64_t addr)
{
	return new OpFcvtns_vss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtns_v2d2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtns\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtns_v2d2d(CodeType code, uint64_t addr)
{
	return new OpFcvtns_v2d2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtnu_hh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtnu\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtnu_hh(CodeType code, uint64_t addr)
{
	return new OpFcvtnu_hh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtnu_ss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtnu\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtnu_ss(CodeType code, uint64_t addr)
{
	return new OpFcvtnu_ss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtnu_dd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtnu\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtnu_dd(CodeType code, uint64_t addr)
{
	return new OpFcvtnu_dd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtnu_wh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtnu\t" << DisasmGZWR(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtnu_wh(CodeType code, uint64_t addr)
{
	return new OpFcvtnu_wh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtnu_ws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtnu\t" << DisasmGZWR(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtnu_ws(CodeType code, uint64_t addr)
{
	return new OpFcvtnu_ws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtnu_wd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtnu\t" << DisasmGZWR(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtnu_wd(CodeType code, uint64_t addr)
{
	return new OpFcvtnu_wd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtnu_xh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtnu\t" << DisasmGZXR(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtnu_xh(CodeType code, uint64_t addr)
{
	return new OpFcvtnu_xh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtnu_xs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtnu\t" << DisasmGZXR(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtnu_xs(CodeType code, uint64_t addr)
{
	return new OpFcvtnu_xs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtnu_xd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtnu\t" << DisasmGZXR(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtnu_xd(CodeType code, uint64_t addr)
{
	return new OpFcvtnu_xd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtnu_vhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtnu\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtnu_vhh(CodeType code, uint64_t addr)
{
	return new OpFcvtnu_vhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtnu_vss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtnu\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtnu_vss(CodeType code, uint64_t addr)
{
	return new OpFcvtnu_vss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtnu_v2d2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtnu\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtnu_v2d2d(CodeType code, uint64_t addr)
{
	return new OpFcvtnu_v2d2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtps_hh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtps\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtps_hh(CodeType code, uint64_t addr)
{
	return new OpFcvtps_hh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtps_ss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtps\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtps_ss(CodeType code, uint64_t addr)
{
	return new OpFcvtps_ss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtps_dd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtps\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtps_dd(CodeType code, uint64_t addr)
{
	return new OpFcvtps_dd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtps_wh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtps\t" << DisasmGZWR(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtps_wh(CodeType code, uint64_t addr)
{
	return new OpFcvtps_wh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtps_ws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtps\t" << DisasmGZWR(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtps_ws(CodeType code, uint64_t addr)
{
	return new OpFcvtps_ws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtps_wd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtps\t" << DisasmGZWR(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtps_wd(CodeType code, uint64_t addr)
{
	return new OpFcvtps_wd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtps_xh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtps\t" << DisasmGZXR(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtps_xh(CodeType code, uint64_t addr)
{
	return new OpFcvtps_xh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtps_xs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtps\t" << DisasmGZXR(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtps_xs(CodeType code, uint64_t addr)
{
	return new OpFcvtps_xs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtps_xd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtps\t" << DisasmGZXR(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtps_xd(CodeType code, uint64_t addr)
{
	return new OpFcvtps_xd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtps_vhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtps\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtps_vhh(CodeType code, uint64_t addr)
{
	return new OpFcvtps_vhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtps_vss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtps\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtps_vss(CodeType code, uint64_t addr)
{
	return new OpFcvtps_vss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtps_v2d2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtps\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtps_v2d2d(CodeType code, uint64_t addr)
{
	return new OpFcvtps_v2d2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtpu_hh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtpu\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtpu_hh(CodeType code, uint64_t addr)
{
	return new OpFcvtpu_hh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtpu_ss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtpu\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtpu_ss(CodeType code, uint64_t addr)
{
	return new OpFcvtpu_ss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtpu_dd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtpu\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtpu_dd(CodeType code, uint64_t addr)
{
	return new OpFcvtpu_dd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtpu_wh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtpu\t" << DisasmGZWR(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtpu_wh(CodeType code, uint64_t addr)
{
	return new OpFcvtpu_wh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtpu_ws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtpu\t" << DisasmGZWR(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtpu_ws(CodeType code, uint64_t addr)
{
	return new OpFcvtpu_ws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtpu_wd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtpu\t" << DisasmGZWR(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtpu_wd(CodeType code, uint64_t addr)
{
	return new OpFcvtpu_wd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtpu_xh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtpu\t" << DisasmGZXR(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtpu_xh(CodeType code, uint64_t addr)
{
	return new OpFcvtpu_xh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtpu_xs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtpu\t" << DisasmGZXR(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtpu_xs(CodeType code, uint64_t addr)
{
	return new OpFcvtpu_xs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtpu_xd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtpu\t" << DisasmGZXR(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtpu_xd(CodeType code, uint64_t addr)
{
	return new OpFcvtpu_xd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtpu_vhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtpu\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtpu_vhh(CodeType code, uint64_t addr)
{
	return new OpFcvtpu_vhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtpu_vss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtpu\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtpu_vss(CodeType code, uint64_t addr)
{
	return new OpFcvtpu_vss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtpu_v2d2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtpu\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtpu_v2d2d(CodeType code, uint64_t addr)
{
	return new OpFcvtpu_v2d2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtxn2_v4s2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtxn2\t" << DisasmTV(rd,4,2) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtxn2_v4s2d(CodeType code, uint64_t addr)
{
	return new OpFcvtxn2_v4s2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtxn_sd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtxn\t" << DisasmS(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtxn_sd(CodeType code, uint64_t addr)
{
	return new OpFcvtxn_sd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtxn_v2s2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtxn\t" << DisasmTV(rd,2,2) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtxn_v2s2d(CodeType code, uint64_t addr)
{
	return new OpFcvtxn_v2s2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_hh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_hh(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_hh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_ss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_ss(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_ss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_dd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_dd(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_dd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_wh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmGZWR(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_wh(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_wh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_ws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmGZWR(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_ws(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_ws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_wd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmGZWR(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_wd(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_wd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_xh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmGZXR(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_xh(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_xh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_xs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmGZXR(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_xs(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_xs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_xd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmGZXR(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_xd(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_xd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_vhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmTV(rd,4<<q,2) << ", " << DisasmTV(rn,4<<q,2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_vhh(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_vhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_vss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmTV(rd,2<<q,2) << ", " << DisasmTV(rn,2<<q,2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_vss(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_vss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_v2d2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_v2d2d(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_v2d2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_whi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmGZWR(rd) << ", " << DisasmH(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_whi(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_whi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_wsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmGZWR(rd) << ", " << DisasmS(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_wsi(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_wsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_wdi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmGZWR(rd) << ", " << DisasmD(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_wdi(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_wdi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_xhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmGZXR(rd) << ", " << DisasmH(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_xhi(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_xhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_xsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmGZXR(rd) << ", " << DisasmS(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_xsi(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_xsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_xdi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmGZXR(rd) << ", " << DisasmD(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_xdi(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_xdi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_hhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_hhi(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_hhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_ssi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_ssi(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_ssi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_ddi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_ddi(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_ddi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_vhhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmTV(rd,4<<q,1) << ", " << DisasmTV(rn,4<<q,1) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_vhhi(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_vhhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_vssi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmTV(rd,2<<q,2) << ", " << DisasmTV(rn,2<<q,2) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_vssi(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_vssi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzs_v2d2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzs\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzs_v2d2di(CodeType code, uint64_t addr)
{
	return new OpFcvtzs_v2d2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_hh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_hh(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_hh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_ss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_ss(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_ss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_dd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_dd(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_dd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_wh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmGZWR(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_wh(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_wh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_ws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmGZWR(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_ws(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_ws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_wd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmGZWR(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_wd(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_wd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_xh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmGZXR(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_xh(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_xh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_xs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmGZXR(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_xs(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_xs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_xd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmGZXR(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_xd(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_xd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_vhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmTV(rd,4<<q,2) << ", " << DisasmTV(rn,4<<q,2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_vhh(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_vhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_vss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmTV(rd,2<<q,2) << ", " << DisasmTV(rn,2<<q,2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_vss(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_vss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_v2d2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_v2d2d(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_v2d2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_whi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmGZWR(rd) << ", " << DisasmH(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_whi(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_whi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_wsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmGZWR(rd) << ", " << DisasmS(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_wsi(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_wsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_xhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmGZXR(rd) << ", " << DisasmH(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_xhi(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_xhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_xsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmGZXR(rd) << ", " << DisasmS(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_xsi(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_xsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_wdi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmGZWR(rd) << ", " << DisasmD(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_wdi(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_wdi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_xdi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmGZXR(rd) << ", " << DisasmD(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_xdi(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_xdi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_hhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_hhi(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_hhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_ssi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_ssi(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_ssi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_ddi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_ddi(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_ddi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_vhhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmTV(rd,4<<q,1) << ", " << DisasmTV(rn,4<<q,1) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_vhhi(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_vhhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_vssi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmTV(rd,2<<q,2) << ", " << DisasmTV(rn,2<<q,2) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_vssi(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_vssi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFcvtzu_v2d2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fcvtzu\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFcvtzu_v2d2di(CodeType code, uint64_t addr)
{
	return new OpFcvtzu_v2d2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFdiv_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fdiv\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFdiv_h(CodeType code, uint64_t addr)
{
	return new OpFdiv_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFdiv_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fdiv\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFdiv_s(CodeType code, uint64_t addr)
{
	return new OpFdiv_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFdiv_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fdiv\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFdiv_d(CodeType code, uint64_t addr)
{
	return new OpFdiv_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFdiv_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fdiv\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFdiv_vh(CodeType code, uint64_t addr)
{
	return new OpFdiv_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFdiv_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fdiv\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFdiv_vs(CodeType code, uint64_t addr)
{
	return new OpFdiv_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFdiv_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fdiv\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFdiv_v2d(CodeType code, uint64_t addr)
{
	return new OpFdiv_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmadd_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmadd\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm) << ", " << DisasmH(ra);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmadd_h(CodeType code, uint64_t addr)
{
	return new OpFmadd_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmadd_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmadd\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm) << ", " << DisasmS(ra);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmadd_s(CodeType code, uint64_t addr)
{
	return new OpFmadd_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmadd_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmadd\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm) << ", " << DisasmD(ra);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmadd_d(CodeType code, uint64_t addr)
{
	return new OpFmadd_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmax_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmax\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmax_h(CodeType code, uint64_t addr)
{
	return new OpFmax_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmax_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmax\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmax_s(CodeType code, uint64_t addr)
{
	return new OpFmax_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmax_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmax\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmax_d(CodeType code, uint64_t addr)
{
	return new OpFmax_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmax_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmax\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmax_vh(CodeType code, uint64_t addr)
{
	return new OpFmax_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmax_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmax\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmax_vs(CodeType code, uint64_t addr)
{
	return new OpFmax_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmax_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmax\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmax_v2d(CodeType code, uint64_t addr)
{
	return new OpFmax_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxnm_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxnm\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxnm_h(CodeType code, uint64_t addr)
{
	return new OpFmaxnm_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxnm_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxnm\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxnm_s(CodeType code, uint64_t addr)
{
	return new OpFmaxnm_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxnm_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxnm\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxnm_d(CodeType code, uint64_t addr)
{
	return new OpFmaxnm_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxnm_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxnm\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxnm_vh(CodeType code, uint64_t addr)
{
	return new OpFmaxnm_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxnm_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxnm\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxnm_vs(CodeType code, uint64_t addr)
{
	return new OpFmaxnm_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxnm_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxnm\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxnm_v2d(CodeType code, uint64_t addr)
{
	return new OpFmaxnm_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxnmp_dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxnmp\t" << DisasmD(rd) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxnmp_dv2d(CodeType code, uint64_t addr)
{
	return new OpFmaxnmp_dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxnmp_hv2h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxnmp\t" << DisasmH(rd) << ", " << DisasmTV(rn,2,1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxnmp_hv2h(CodeType code, uint64_t addr)
{
	return new OpFmaxnmp_hv2h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxnmp_sv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxnmp\t" << DisasmS(rd) << ", " << DisasmTV(rn,2,2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxnmp_sv2s(CodeType code, uint64_t addr)
{
	return new OpFmaxnmp_sv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxnmp_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxnmp\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxnmp_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpFmaxnmp_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxnmp_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxnmp\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxnmp_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpFmaxnmp_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxnmp_v2dv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxnmp\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxnmp_v2dv2dv2d(CodeType code, uint64_t addr)
{
	return new OpFmaxnmp_v2dv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxnmv_hv2h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxnmv\t" << DisasmH(rd) << ", " << DisasmTV(rn,4,1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxnmv_hv2h(CodeType code, uint64_t addr)
{
	return new OpFmaxnmv_hv2h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxnmv_hv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxnmv\t" << DisasmH(rd) << ", " << DisasmTV(rn,8,1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxnmv_hv4h(CodeType code, uint64_t addr)
{
	return new OpFmaxnmv_hv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxnmv_sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxnmv\t" << DisasmS(rd) << ", " << DisasmTV(rn,4,2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxnmv_sv4s(CodeType code, uint64_t addr)
{
	return new OpFmaxnmv_sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxp_dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxp\t" << DisasmD(rd) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxp_dv2d(CodeType code, uint64_t addr)
{
	return new OpFmaxp_dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxp_hv2h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxp\t" << DisasmH(rd) << ", " << DisasmTV(rn,2,1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxp_hv2h(CodeType code, uint64_t addr)
{
	return new OpFmaxp_hv2h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxp_sv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxp\t" << DisasmS(rd) << ", " << DisasmTV(rn,2,2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxp_sv2s(CodeType code, uint64_t addr)
{
	return new OpFmaxp_sv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxp_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxp\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxp_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpFmaxp_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxp_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxp\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxp_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpFmaxp_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxp_v2dv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxp\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxp_v2dv2dv2d(CodeType code, uint64_t addr)
{
	return new OpFmaxp_v2dv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxv_hv2h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxv\t" << DisasmH(rd) << ", " << DisasmTV(rn,4,1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxv_hv2h(CodeType code, uint64_t addr)
{
	return new OpFmaxv_hv2h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxv_hv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxv\t" << DisasmH(rd) << ", " << DisasmTV(rn,8,1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxv_hv4h(CodeType code, uint64_t addr)
{
	return new OpFmaxv_hv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmaxv_sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmaxv\t" << DisasmS(rd) << ", " << DisasmTV(rn,4,2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmaxv_sv4s(CodeType code, uint64_t addr)
{
	return new OpFmaxv_sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmin_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmin\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmin_h(CodeType code, uint64_t addr)
{
	return new OpFmin_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmin_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmin\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmin_s(CodeType code, uint64_t addr)
{
	return new OpFmin_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmin_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmin\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmin_d(CodeType code, uint64_t addr)
{
	return new OpFmin_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmin_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmin\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmin_vh(CodeType code, uint64_t addr)
{
	return new OpFmin_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmin_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmin\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmin_vs(CodeType code, uint64_t addr)
{
	return new OpFmin_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmin_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmin\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmin_v2d(CodeType code, uint64_t addr)
{
	return new OpFmin_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminnm_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminnm\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminnm_h(CodeType code, uint64_t addr)
{
	return new OpFminnm_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminnm_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminnm\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminnm_s(CodeType code, uint64_t addr)
{
	return new OpFminnm_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminnm_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminnm\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminnm_d(CodeType code, uint64_t addr)
{
	return new OpFminnm_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminnm_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminnm\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminnm_vh(CodeType code, uint64_t addr)
{
	return new OpFminnm_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminnm_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminnm\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminnm_vs(CodeType code, uint64_t addr)
{
	return new OpFminnm_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminnm_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminnm\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminnm_v2d(CodeType code, uint64_t addr)
{
	return new OpFminnm_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminnmp_hv2h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminnmp\t" << DisasmH(rd) << ", " << DisasmTV(rn,2,1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminnmp_hv2h(CodeType code, uint64_t addr)
{
	return new OpFminnmp_hv2h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminnmp_sv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminnmp\t" << DisasmS(rd) << ", " << DisasmTV(rn,2,2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminnmp_sv2s(CodeType code, uint64_t addr)
{
	return new OpFminnmp_sv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminnmp_dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminnmp\t" << DisasmD(rd) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminnmp_dv2d(CodeType code, uint64_t addr)
{
	return new OpFminnmp_dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminnmp_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminnmp\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminnmp_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpFminnmp_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminnmp_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminnmp\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminnmp_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpFminnmp_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminnmp_v2dv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminnmp\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminnmp_v2dv2dv2d(CodeType code, uint64_t addr)
{
	return new OpFminnmp_v2dv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminnmv_hv2h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminnmv\t" << DisasmH(rd) << ", " << DisasmTV(rn,4,1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminnmv_hv2h(CodeType code, uint64_t addr)
{
	return new OpFminnmv_hv2h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminnmv_hv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminnmv\t" << DisasmH(rd) << ", " << DisasmTV(rn,8,1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminnmv_hv4h(CodeType code, uint64_t addr)
{
	return new OpFminnmv_hv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminnmv_sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminnmv\t" << DisasmS(rd) << ", " << DisasmTV(rn,4,2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminnmv_sv4s(CodeType code, uint64_t addr)
{
	return new OpFminnmv_sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminp_hv2h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminp\t" << DisasmH(rd) << ", " << DisasmTV(rn,2,1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminp_hv2h(CodeType code, uint64_t addr)
{
	return new OpFminp_hv2h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminp_sv2s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminp\t" << DisasmS(rd) << ", " << DisasmTV(rn,2,2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminp_sv2s(CodeType code, uint64_t addr)
{
	return new OpFminp_sv2s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminp_dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminp\t" << DisasmD(rd) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminp_dv2d(CodeType code, uint64_t addr)
{
	return new OpFminp_dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminp_vhvhvh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminp\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminp_vhvhvh(CodeType code, uint64_t addr)
{
	return new OpFminp_vhvhvh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminp_vsvsvs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminp\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminp_vsvsvs(CodeType code, uint64_t addr)
{
	return new OpFminp_vsvsvs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminp_v2dv2dv2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminp\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminp_v2dv2dv2d(CodeType code, uint64_t addr)
{
	return new OpFminp_v2dv2dv2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminv_hv2h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminv\t" << DisasmH(rd) << ", " << DisasmTV(rn,4,1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminv_hv2h(CodeType code, uint64_t addr)
{
	return new OpFminv_hv2h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminv_hv4h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminv\t" << DisasmH(rd) << ", " << DisasmTV(rn,8,1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminv_hv4h(CodeType code, uint64_t addr)
{
	return new OpFminv_hv4h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFminv_sv4s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fminv\t" << DisasmS(rd) << ", " << DisasmTV(rn,4,2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFminv_sv4s(CodeType code, uint64_t addr)
{
	return new OpFminv_sv4s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmla_hi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmla\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmTV(rm,0,1) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmla_hi(CodeType code, uint64_t addr)
{
	return new OpFmla_hi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmla_si<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmla\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmTV(rm,0,2) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmla_si(CodeType code, uint64_t addr)
{
	return new OpFmla_si<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmla_di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmla\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmTV(rm,0,3) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmla_di(CodeType code, uint64_t addr)
{
	return new OpFmla_di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmla_vhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmla\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmla_vhi(CodeType code, uint64_t addr)
{
	return new OpFmla_vhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmla_vsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmla\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmla_vsi(CodeType code, uint64_t addr)
{
	return new OpFmla_vsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmla_v2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmla\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,0,3) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmla_v2di(CodeType code, uint64_t addr)
{
	return new OpFmla_v2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmla_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmla\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmla_vh(CodeType code, uint64_t addr)
{
	return new OpFmla_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmla_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmla\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmla_vs(CodeType code, uint64_t addr)
{
	return new OpFmla_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmla_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmla\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmla_v2d(CodeType code, uint64_t addr)
{
	return new OpFmla_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmls_hi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmls\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmTV(rm,0,1) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmls_hi(CodeType code, uint64_t addr)
{
	return new OpFmls_hi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmls_si<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmls\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmTV(rm,0,2) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmls_si(CodeType code, uint64_t addr)
{
	return new OpFmls_si<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmls_di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmls\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmTV(rm,0,3) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmls_di(CodeType code, uint64_t addr)
{
	return new OpFmls_di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmls_vhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmls\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmls_vhi(CodeType code, uint64_t addr)
{
	return new OpFmls_vhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmls_vsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmls\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmls_vsi(CodeType code, uint64_t addr)
{
	return new OpFmls_vsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmls_v2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmls\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,0,3) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmls_v2di(CodeType code, uint64_t addr)
{
	return new OpFmls_v2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmls_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmls\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmls_vh(CodeType code, uint64_t addr)
{
	return new OpFmls_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmls_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmls\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmls_vs(CodeType code, uint64_t addr)
{
	return new OpFmls_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmls_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmls\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmls_v2d(CodeType code, uint64_t addr)
{
	return new OpFmls_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmov_hh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmov\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmov_hh(CodeType code, uint64_t addr)
{
	return new OpFmov_hh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmov_ss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmov\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmov_ss(CodeType code, uint64_t addr)
{
	return new OpFmov_ss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmov_dd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmov\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmov_dd(CodeType code, uint64_t addr)
{
	return new OpFmov_dd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmov_hf<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmov\t" << DisasmH(rd) << ", " << DisasmF(imm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmov_hf(CodeType code, uint64_t addr)
{
	return new OpFmov_hf<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmov_sf<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmov\t" << DisasmS(rd) << ", " << DisasmF(imm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmov_sf(CodeType code, uint64_t addr)
{
	return new OpFmov_sf<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmov_df<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmov\t" << DisasmD(rd) << ", " << DisasmF(imm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmov_df(CodeType code, uint64_t addr)
{
	return new OpFmov_df<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmov_vhf<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmov\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmF(imm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmov_vhf(CodeType code, uint64_t addr)
{
	return new OpFmov_vhf<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmov_vsf<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmov\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmF(imm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmov_vsf(CodeType code, uint64_t addr)
{
	return new OpFmov_vsf<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmov_v2df<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmov\t" << DisasmTV(rd,2,3) << ", " << DisasmF(imm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmov_v2df(CodeType code, uint64_t addr)
{
	return new OpFmov_v2df<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmov_hw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmov\t" << DisasmH(rd) << ", " << DisasmGZWR(rn);
}}
template <	typename	ARCH>
void OpFmov_hw<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		U16 data = U16(cpu.GetGZR(rn));
		cpu.SetVU16(rd,data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmov_hw(CodeType code, uint64_t addr)
{
	return new OpFmov_hw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmov_hx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmov\t" << DisasmH(rd) << ", " << DisasmGZXR(rn);
}}
template <	typename	ARCH>
void OpFmov_hx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U16 U16;
		U16 data = U16(cpu.GetGZR(rn));
		cpu.SetVU16(rd,data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmov_hx(CodeType code, uint64_t addr)
{
	return new OpFmov_hx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmov_wh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmov\t" << DisasmGZWR(rd) << ", " << DisasmH(rn);
}}
template <	typename	ARCH>
void OpFmov_wh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		U32 data = U32(cpu.GetVU16(rn,0));
		cpu.SetGZR(rd,data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmov_wh(CodeType code, uint64_t addr)
{
	return new OpFmov_wh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmov_sw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmov\t" << DisasmS(rd) << ", " << DisasmGZWR(rn);
}}
template <	typename	ARCH>
void OpFmov_sw<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		U32 data = U32(cpu.GetGZR(rn));
		cpu.SetVU32(rd,data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmov_sw(CodeType code, uint64_t addr)
{
	return new OpFmov_sw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmov_ws<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmov\t" << DisasmGZWR(rd) << ", " << DisasmS(rn);
}}
template <	typename	ARCH>
void OpFmov_ws<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U32 U32;
		U32 data = cpu.GetVU32(rn,0);
		cpu.SetGZR(rd,data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmov_ws(CodeType code, uint64_t addr)
{
	return new OpFmov_ws<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmov_dx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmov\t" << DisasmD(rd) << ", " << DisasmGZXR(rn);
}}
template <	typename	ARCH>
void OpFmov_dx<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		U64 data = cpu.GetGZR(rn);
		cpu.SetVU64(rd,data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmov_dx(CodeType code, uint64_t addr)
{
	return new OpFmov_dx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmov_dix<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmov\t" << DisasmTV(rd,0,3) << "[1], " << DisasmGZXR(rn);
}}
template <	typename	ARCH>
void OpFmov_dix<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		U64 data = cpu.GetGZR(rn);
		cpu.SetVU64(rd,1,data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmov_dix(CodeType code, uint64_t addr)
{
	return new OpFmov_dix<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmov_xh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmov\t" << DisasmGZXR(rd) << ", " << DisasmH(rn);
}}
template <	typename	ARCH>
void OpFmov_xh<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		U64 data = U64(cpu.GetVU16(rn,0));
		cpu.SetGZR(rd,data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmov_xh(CodeType code, uint64_t addr)
{
	return new OpFmov_xh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmov_xd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmov\t" << DisasmGZXR(rd) << ", " << DisasmD(rn);
}}
template <	typename	ARCH>
void OpFmov_xd<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		U64 data = cpu.GetVU64(rn,0);
		cpu.SetGZR(rd,data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmov_xd(CodeType code, uint64_t addr)
{
	return new OpFmov_xd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmov_xdi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmov\t" << DisasmGZXR(rd) << ", " << DisasmTV(rn,0,3) << "[1]";
}}
template <	typename	ARCH>
void OpFmov_xdi<	ARCH>::execute( ARCH & cpu) const
{
	{
		typedef typename ARCH::U64 U64;
		U64 data = cpu.GetVU64(rn,1);
		cpu.SetGZR(rd,data);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmov_xdi(CodeType code, uint64_t addr)
{
	return new OpFmov_xdi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmsub_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmsub\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm) << ", " << DisasmH(ra);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmsub_h(CodeType code, uint64_t addr)
{
	return new OpFmsub_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmsub_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmsub\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm) << ", " << DisasmS(ra);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmsub_s(CodeType code, uint64_t addr)
{
	return new OpFmsub_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmsub_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmsub\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm) << ", " << DisasmD(ra);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmsub_d(CodeType code, uint64_t addr)
{
	return new OpFmsub_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmul_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmul\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmul_h(CodeType code, uint64_t addr)
{
	return new OpFmul_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmul_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmul\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmul_s(CodeType code, uint64_t addr)
{
	return new OpFmul_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmul_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmul\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmul_d(CodeType code, uint64_t addr)
{
	return new OpFmul_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmul_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmul\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmul_vh(CodeType code, uint64_t addr)
{
	return new OpFmul_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmul_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmul\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmul_vs(CodeType code, uint64_t addr)
{
	return new OpFmul_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmul_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmul\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmul_v2d(CodeType code, uint64_t addr)
{
	return new OpFmul_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmul_hi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmul\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmTV(rm,0,1) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmul_hi(CodeType code, uint64_t addr)
{
	return new OpFmul_hi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmul_si<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmul\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmTV(rm,0,2) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmul_si(CodeType code, uint64_t addr)
{
	return new OpFmul_si<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmul_di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmul\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmTV(rm,0,3) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmul_di(CodeType code, uint64_t addr)
{
	return new OpFmul_di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmul_vhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmul\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmul_vhi(CodeType code, uint64_t addr)
{
	return new OpFmul_vhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmul_vsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmul\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmul_vsi(CodeType code, uint64_t addr)
{
	return new OpFmul_vsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmul_v2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmul\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,0,3) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmul_v2di(CodeType code, uint64_t addr)
{
	return new OpFmul_v2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmulx_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmulx\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmulx_h(CodeType code, uint64_t addr)
{
	return new OpFmulx_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmulx_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmulx\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmulx_s(CodeType code, uint64_t addr)
{
	return new OpFmulx_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmulx_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmulx\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmulx_d(CodeType code, uint64_t addr)
{
	return new OpFmulx_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmulx_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmulx\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmulx_vh(CodeType code, uint64_t addr)
{
	return new OpFmulx_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmulx_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmulx\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmulx_vs(CodeType code, uint64_t addr)
{
	return new OpFmulx_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmulx_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmulx\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmulx_v2d(CodeType code, uint64_t addr)
{
	return new OpFmulx_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmulx_hi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmulx\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmTV(rm,0,1) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmulx_hi(CodeType code, uint64_t addr)
{
	return new OpFmulx_hi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmulx_si<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmulx\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmTV(rm,0,2) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmulx_si(CodeType code, uint64_t addr)
{
	return new OpFmulx_si<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmulx_di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmulx\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmTV(rm,0,3) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmulx_di(CodeType code, uint64_t addr)
{
	return new OpFmulx_di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmulx_vhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmulx\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 0, 1) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmulx_vhi(CodeType code, uint64_t addr)
{
	return new OpFmulx_vhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmulx_vsi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmulx\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 0, 2) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmulx_vsi(CodeType code, uint64_t addr)
{
	return new OpFmulx_vsi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFmulx_v2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fmulx\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,0,3) << DisasmSubscript(index);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFmulx_v2di(CodeType code, uint64_t addr)
{
	return new OpFmulx_v2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFneg_hh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fneg\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFneg_hh(CodeType code, uint64_t addr)
{
	return new OpFneg_hh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFneg_ss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fneg\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFneg_ss(CodeType code, uint64_t addr)
{
	return new OpFneg_ss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFneg_dd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fneg\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFneg_dd(CodeType code, uint64_t addr)
{
	return new OpFneg_dd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFneg_vhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fneg\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFneg_vhh(CodeType code, uint64_t addr)
{
	return new OpFneg_vhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFneg_vss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fneg\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFneg_vss(CodeType code, uint64_t addr)
{
	return new OpFneg_vss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFneg_v2d2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fneg\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFneg_v2d2d(CodeType code, uint64_t addr)
{
	return new OpFneg_v2d2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFnmadd_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fnmadd\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm) << ", " << DisasmH(ra);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFnmadd_h(CodeType code, uint64_t addr)
{
	return new OpFnmadd_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFnmadd_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fnmadd\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm) << ", " << DisasmS(ra);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFnmadd_s(CodeType code, uint64_t addr)
{
	return new OpFnmadd_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFnmadd_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fnmadd\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm) << ", " << DisasmD(ra);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFnmadd_d(CodeType code, uint64_t addr)
{
	return new OpFnmadd_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFnmsub_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fnmsub\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm) << ", " << DisasmH(ra);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFnmsub_h(CodeType code, uint64_t addr)
{
	return new OpFnmsub_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFnmsub_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fnmsub\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm) << ", " << DisasmS(ra);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFnmsub_s(CodeType code, uint64_t addr)
{
	return new OpFnmsub_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFnmsub_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fnmsub\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm) << ", " << DisasmD(ra);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFnmsub_d(CodeType code, uint64_t addr)
{
	return new OpFnmsub_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFnmul_hhh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fnmul\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFnmul_hhh(CodeType code, uint64_t addr)
{
	return new OpFnmul_hhh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFnmul_sss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fnmul\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFnmul_sss(CodeType code, uint64_t addr)
{
	return new OpFnmul_sss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFnmul_ddd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fnmul\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFnmul_ddd(CodeType code, uint64_t addr)
{
	return new OpFnmul_ddd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrecpe_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frecpe\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrecpe_s(CodeType code, uint64_t addr)
{
	return new OpFrecpe_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrecpe_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frecpe\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrecpe_d(CodeType code, uint64_t addr)
{
	return new OpFrecpe_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrecpe_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frecpe\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrecpe_vs(CodeType code, uint64_t addr)
{
	return new OpFrecpe_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrecpe_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frecpe\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrecpe_v2d(CodeType code, uint64_t addr)
{
	return new OpFrecpe_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrecps_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frecps\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrecps_s(CodeType code, uint64_t addr)
{
	return new OpFrecps_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrecps_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frecps\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrecps_d(CodeType code, uint64_t addr)
{
	return new OpFrecps_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrecps_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frecps\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrecps_vs(CodeType code, uint64_t addr)
{
	return new OpFrecps_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrecps_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frecps\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrecps_v2d(CodeType code, uint64_t addr)
{
	return new OpFrecps_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrecpx_dd<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frecpx\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrecpx_dd(CodeType code, uint64_t addr)
{
	return new OpFrecpx_dd<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrecpx_ss<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frecpx\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrecpx_ss(CodeType code, uint64_t addr)
{
	return new OpFrecpx_ss<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrinta_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frinta\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrinta_h(CodeType code, uint64_t addr)
{
	return new OpFrinta_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrinta_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frinta\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrinta_s(CodeType code, uint64_t addr)
{
	return new OpFrinta_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrinta_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frinta\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrinta_d(CodeType code, uint64_t addr)
{
	return new OpFrinta_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrinta_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frinta\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrinta_vh(CodeType code, uint64_t addr)
{
	return new OpFrinta_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrinta_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frinta\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrinta_vs(CodeType code, uint64_t addr)
{
	return new OpFrinta_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrinta_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frinta\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrinta_v2d(CodeType code, uint64_t addr)
{
	return new OpFrinta_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrinti_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frinti\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrinti_d(CodeType code, uint64_t addr)
{
	return new OpFrinti_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrinti_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frinti\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrinti_h(CodeType code, uint64_t addr)
{
	return new OpFrinti_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrinti_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frinti\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrinti_s(CodeType code, uint64_t addr)
{
	return new OpFrinti_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrinti_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frinti\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrinti_vh(CodeType code, uint64_t addr)
{
	return new OpFrinti_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrinti_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frinti\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrinti_vs(CodeType code, uint64_t addr)
{
	return new OpFrinti_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrinti_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frinti\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrinti_v2d(CodeType code, uint64_t addr)
{
	return new OpFrinti_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintm_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintm\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintm_h(CodeType code, uint64_t addr)
{
	return new OpFrintm_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintm_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintm\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintm_s(CodeType code, uint64_t addr)
{
	return new OpFrintm_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintm_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintm\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintm_d(CodeType code, uint64_t addr)
{
	return new OpFrintm_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintm_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintm\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintm_vh(CodeType code, uint64_t addr)
{
	return new OpFrintm_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintm_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintm\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintm_vs(CodeType code, uint64_t addr)
{
	return new OpFrintm_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintm_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintm\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintm_v2d(CodeType code, uint64_t addr)
{
	return new OpFrintm_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintn_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintn\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintn_h(CodeType code, uint64_t addr)
{
	return new OpFrintn_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintn_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintn\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintn_s(CodeType code, uint64_t addr)
{
	return new OpFrintn_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintn_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintn\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintn_d(CodeType code, uint64_t addr)
{
	return new OpFrintn_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintn_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintn\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintn_vh(CodeType code, uint64_t addr)
{
	return new OpFrintn_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintn_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintn\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintn_vs(CodeType code, uint64_t addr)
{
	return new OpFrintn_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintn_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintn\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintn_v2d(CodeType code, uint64_t addr)
{
	return new OpFrintn_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintp_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintp\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintp_h(CodeType code, uint64_t addr)
{
	return new OpFrintp_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintp_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintp\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintp_s(CodeType code, uint64_t addr)
{
	return new OpFrintp_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintp_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintp\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintp_d(CodeType code, uint64_t addr)
{
	return new OpFrintp_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintp_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintp\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintp_vh(CodeType code, uint64_t addr)
{
	return new OpFrintp_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintp_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintp\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintp_vs(CodeType code, uint64_t addr)
{
	return new OpFrintp_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintp_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintp\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintp_v2d(CodeType code, uint64_t addr)
{
	return new OpFrintp_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintx_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintx\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintx_h(CodeType code, uint64_t addr)
{
	return new OpFrintx_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintx_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintx\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintx_s(CodeType code, uint64_t addr)
{
	return new OpFrintx_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintx_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintx\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintx_d(CodeType code, uint64_t addr)
{
	return new OpFrintx_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintx_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintx\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintx_vh(CodeType code, uint64_t addr)
{
	return new OpFrintx_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintx_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintx\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintx_vs(CodeType code, uint64_t addr)
{
	return new OpFrintx_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintx_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintx\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintx_v2d(CodeType code, uint64_t addr)
{
	return new OpFrintx_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintz_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintz\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintz_h(CodeType code, uint64_t addr)
{
	return new OpFrintz_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintz_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintz\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintz_s(CodeType code, uint64_t addr)
{
	return new OpFrintz_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintz_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintz\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintz_d(CodeType code, uint64_t addr)
{
	return new OpFrintz_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintz_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintz\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintz_vh(CodeType code, uint64_t addr)
{
	return new OpFrintz_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintz_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintz\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintz_vs(CodeType code, uint64_t addr)
{
	return new OpFrintz_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrintz_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frintz\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrintz_v2d(CodeType code, uint64_t addr)
{
	return new OpFrintz_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrsqrte_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frsqrte\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrsqrte_s(CodeType code, uint64_t addr)
{
	return new OpFrsqrte_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrsqrte_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frsqrte\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrsqrte_d(CodeType code, uint64_t addr)
{
	return new OpFrsqrte_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrsqrte_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frsqrte\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrsqrte_vs(CodeType code, uint64_t addr)
{
	return new OpFrsqrte_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrsqrte_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frsqrte\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrsqrte_v2d(CodeType code, uint64_t addr)
{
	return new OpFrsqrte_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrsqrts_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frsqrts\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrsqrts_s(CodeType code, uint64_t addr)
{
	return new OpFrsqrts_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrsqrts_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frsqrts\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrsqrts_d(CodeType code, uint64_t addr)
{
	return new OpFrsqrts_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrsqrts_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frsqrts\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrsqrts_vs(CodeType code, uint64_t addr)
{
	return new OpFrsqrts_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFrsqrts_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "frsqrts\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFrsqrts_v2d(CodeType code, uint64_t addr)
{
	return new OpFrsqrts_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFsqrt_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fsqrt\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFsqrt_h(CodeType code, uint64_t addr)
{
	return new OpFsqrt_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFsqrt_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fsqrt\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFsqrt_s(CodeType code, uint64_t addr)
{
	return new OpFsqrt_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFsqrt_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fsqrt\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFsqrt_d(CodeType code, uint64_t addr)
{
	return new OpFsqrt_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFsqrt_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fsqrt\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFsqrt_vh(CodeType code, uint64_t addr)
{
	return new OpFsqrt_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFsqrt_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fsqrt\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFsqrt_vs(CodeType code, uint64_t addr)
{
	return new OpFsqrt_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFsqrt_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fsqrt\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFsqrt_v2d(CodeType code, uint64_t addr)
{
	return new OpFsqrt_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFsub_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fsub\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmH(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFsub_h(CodeType code, uint64_t addr)
{
	return new OpFsub_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFsub_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fsub\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmS(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFsub_s(CodeType code, uint64_t addr)
{
	return new OpFsub_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFsub_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fsub\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmD(rm);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFsub_d(CodeType code, uint64_t addr)
{
	return new OpFsub_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFsub_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fsub\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmTV(rm, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFsub_vh(CodeType code, uint64_t addr)
{
	return new OpFsub_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFsub_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fsub\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmTV(rm, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFsub_vs(CodeType code, uint64_t addr)
{
	return new OpFsub_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpFsub_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "fsub\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmTV(rm,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpFsub_v2d(CodeType code, uint64_t addr)
{
	return new OpFsub_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_hw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmH(rd) << ", " << DisasmGZWR(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_hw(CodeType code, uint64_t addr)
{
	return new OpScvtf_hw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_sw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmS(rd) << ", " << DisasmGZWR(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_sw(CodeType code, uint64_t addr)
{
	return new OpScvtf_sw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_hx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmH(rd) << ", " << DisasmGZXR(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_hx(CodeType code, uint64_t addr)
{
	return new OpScvtf_hx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_sx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmS(rd) << ", " << DisasmGZXR(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_sx(CodeType code, uint64_t addr)
{
	return new OpScvtf_sx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_dw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmD(rd) << ", " << DisasmGZWR(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_dw(CodeType code, uint64_t addr)
{
	return new OpScvtf_dw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_dx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmD(rd) << ", " << DisasmGZXR(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_dx(CodeType code, uint64_t addr)
{
	return new OpScvtf_dx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_h(CodeType code, uint64_t addr)
{
	return new OpScvtf_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_s(CodeType code, uint64_t addr)
{
	return new OpScvtf_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_d(CodeType code, uint64_t addr)
{
	return new OpScvtf_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_vh(CodeType code, uint64_t addr)
{
	return new OpScvtf_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_vs(CodeType code, uint64_t addr)
{
	return new OpScvtf_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_v2d(CodeType code, uint64_t addr)
{
	return new OpScvtf_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_hhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_hhi(CodeType code, uint64_t addr)
{
	return new OpScvtf_hhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_ssi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_ssi(CodeType code, uint64_t addr)
{
	return new OpScvtf_ssi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_ddi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_ddi(CodeType code, uint64_t addr)
{
	return new OpScvtf_ddi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_hwi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmH(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_hwi(CodeType code, uint64_t addr)
{
	return new OpScvtf_hwi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_swi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmS(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_swi(CodeType code, uint64_t addr)
{
	return new OpScvtf_swi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_hxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmH(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_hxi(CodeType code, uint64_t addr)
{
	return new OpScvtf_hxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_sxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmS(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_sxi(CodeType code, uint64_t addr)
{
	return new OpScvtf_sxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_dwi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmD(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_dwi(CodeType code, uint64_t addr)
{
	return new OpScvtf_dwi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_dxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmD(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_dxi(CodeType code, uint64_t addr)
{
	return new OpScvtf_dxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_vhhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmTV(rd,4<<q,1) << ", " << DisasmTV(rn,4<<q,1) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_vhhi(CodeType code, uint64_t addr)
{
	return new OpScvtf_vhhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_vssi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmTV(rd,2<<q,2) << ", " << DisasmTV(rn,2<<q,2) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_vssi(CodeType code, uint64_t addr)
{
	return new OpScvtf_vssi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpScvtf_v2d2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "scvtf\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpScvtf_v2d2di(CodeType code, uint64_t addr)
{
	return new OpScvtf_v2d2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_hw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmH(rd) << ", " << DisasmGZWR(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_hw(CodeType code, uint64_t addr)
{
	return new OpUcvtf_hw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_sw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmS(rd) << ", " << DisasmGZWR(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_sw(CodeType code, uint64_t addr)
{
	return new OpUcvtf_sw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_hx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmH(rd) << ", " << DisasmGZXR(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_hx(CodeType code, uint64_t addr)
{
	return new OpUcvtf_hx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_sx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmS(rd) << ", " << DisasmGZXR(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_sx(CodeType code, uint64_t addr)
{
	return new OpUcvtf_sx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_dw<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmD(rd) << ", " << DisasmGZWR(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_dw(CodeType code, uint64_t addr)
{
	return new OpUcvtf_dw<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_dx<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmD(rd) << ", " << DisasmGZXR(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_dx(CodeType code, uint64_t addr)
{
	return new OpUcvtf_dx<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_h<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmH(rd) << ", " << DisasmH(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_h(CodeType code, uint64_t addr)
{
	return new OpUcvtf_h<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_s<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmS(rd) << ", " << DisasmS(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_s(CodeType code, uint64_t addr)
{
	return new OpUcvtf_s<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmD(rd) << ", " << DisasmD(rn);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_d(CodeType code, uint64_t addr)
{
	return new OpUcvtf_d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_vh<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_vh(CodeType code, uint64_t addr)
{
	return new OpUcvtf_vh<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_vs<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_vs(CodeType code, uint64_t addr)
{
	return new OpUcvtf_vs<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_v2d<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_v2d(CodeType code, uint64_t addr)
{
	return new OpUcvtf_v2d<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_hhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmH(rd) << ", " << DisasmH(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_hhi(CodeType code, uint64_t addr)
{
	return new OpUcvtf_hhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_ssi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmS(rd) << ", " << DisasmS(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_ssi(CodeType code, uint64_t addr)
{
	return new OpUcvtf_ssi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_ddi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmD(rd) << ", " << DisasmD(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_ddi(CodeType code, uint64_t addr)
{
	return new OpUcvtf_ddi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_hwi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmH(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_hwi(CodeType code, uint64_t addr)
{
	return new OpUcvtf_hwi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_swi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmS(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_swi(CodeType code, uint64_t addr)
{
	return new OpUcvtf_swi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_hxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmH(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_hxi(CodeType code, uint64_t addr)
{
	return new OpUcvtf_hxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_sxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmS(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_sxi(CodeType code, uint64_t addr)
{
	return new OpUcvtf_sxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_dwi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmD(rd) << ", " << DisasmGZWR(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_dwi(CodeType code, uint64_t addr)
{
	return new OpUcvtf_dwi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_dxi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmD(rd) << ", " << DisasmGZXR(rn) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_dxi(CodeType code, uint64_t addr)
{
	return new OpUcvtf_dxi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_vhhi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmTV(rd, 4<<q, 1) << ", " << DisasmTV(rn, 4<<q, 1) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_vhhi(CodeType code, uint64_t addr)
{
	return new OpUcvtf_vhhi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_vssi<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmTV(rd, 2<<q, 2) << ", " << DisasmTV(rn, 2<<q, 2) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_vssi(CodeType code, uint64_t addr)
{
	return new OpUcvtf_vssi<	ARCH>(code, addr);
}

template <	typename	ARCH>
void OpUcvtf_v2d2di<	ARCH>::disasm( ARCH & cpu,
std::ostream& sink) const
{
	{
		sink << "ucvtf\t" << DisasmTV(rd,2,3) << ", " << DisasmTV(rn,2,3) << ", " << DisasmI(fbits);
}}

template <	typename	ARCH>
static Operation<	ARCH> *DecodeOpUcvtf_v2d2di(CodeType code, uint64_t addr)
{
	return new OpUcvtf_v2d2di<	ARCH>(code, addr);
}

template <	typename	ARCH>
OpMsr<	ARCH>::OpMsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "msr")
{
	rt = uint8_t(code & 0x1f);
	op2 = uint8_t((code >> 5) & 0x7);
	crm = uint8_t((code >> 8) & 0xf);
	crn = uint8_t((code >> 12) & 0xf);
	op1 = uint8_t((code >> 16) & 0x7);
	op0 = uint8_t((code >> 19) & 0x3);
	sysreg = ARCH::GetSystemRegister(op0, op1, crn, crm, op2);
}

template <	typename	ARCH>
OpStvms_bro<	ARCH>::OpStvms_bro(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvms_bro")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
	reject = rm == 31;
}

template <	typename	ARCH>
OpStvms_hro<	ARCH>::OpStvms_hro(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvms_hro")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
	reject = rm == 31;
}

template <	typename	ARCH>
OpStvms_sro<	ARCH>::OpStvms_sro(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvms_sro")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
	reject = rm == 31;
}

template <	typename	ARCH>
OpStvms_dro<	ARCH>::OpStvms_dro(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvms_dro")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
	reject = (rm == 31) or (not (q or vms.ses));
}

template <	typename	ARCH>
OpLdvms_bro<	ARCH>::OpLdvms_bro(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvms_bro")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
	reject = rm == 31;
}

template <	typename	ARCH>
OpLdvms_hro<	ARCH>::OpLdvms_hro(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvms_hro")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
	reject = rm == 31;
}

template <	typename	ARCH>
OpLdvms_sro<	ARCH>::OpLdvms_sro(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvms_sro")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
	reject = rm == 31;
}

template <	typename	ARCH>
OpLdvms_dro<	ARCH>::OpLdvms_dro(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvms_dro")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
	reject = (rm == 31) or (not (q or vms.ses));
}

template <	typename	ARCH>
OpStvsl_bro<	ARCH>::OpStvsl_bro(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvsl_bro")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index0 = uint8_t((code >> 10) & 0x7);
	regs1 = uint8_t((code >> 13) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	regs0 = uint8_t((code >> 21) & 0x1);
	index1 = uint8_t((code >> 30) & 0x1);
	reject = rm == 31;
	index = index1<<3|index0;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpStvsl_hro<	ARCH>::OpStvsl_hro(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvsl_hro")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index0 = uint8_t((code >> 11) & 0x3);
	regs1 = uint8_t((code >> 13) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	regs0 = uint8_t((code >> 21) & 0x1);
	index1 = uint8_t((code >> 30) & 0x1);
	reject = rm == 31;
	index = index1<<2|index0;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpStvsl_sro<	ARCH>::OpStvsl_sro(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvsl_sro")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index0 = uint8_t((code >> 12) & 0x1);
	regs1 = uint8_t((code >> 13) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	regs0 = uint8_t((code >> 21) & 0x1);
	index1 = uint8_t((code >> 30) & 0x1);
	reject = rm == 31;
	index = index1<<1|index0;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpStvsl_dro<	ARCH>::OpStvsl_dro(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvsl_dro")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	regs1 = uint8_t((code >> 13) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	regs0 = uint8_t((code >> 21) & 0x1);
	index = uint8_t((code >> 30) & 0x1);
	reject = rm == 31;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvsl_bro<	ARCH>::OpLdvsl_bro(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvsl_bro")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index0 = uint8_t((code >> 10) & 0x7);
	regs1 = uint8_t((code >> 13) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	regs0 = uint8_t((code >> 21) & 0x1);
	index1 = uint8_t((code >> 30) & 0x1);
	reject = rm == 31;
	index = index1<<3|index0;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvsl_hro<	ARCH>::OpLdvsl_hro(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvsl_hro")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index0 = uint8_t((code >> 11) & 0x3);
	regs1 = uint8_t((code >> 13) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	regs0 = uint8_t((code >> 21) & 0x1);
	index1 = uint8_t((code >> 30) & 0x1);
	reject = rm == 31;
	index = index1<<2|index0;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvsl_sro<	ARCH>::OpLdvsl_sro(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvsl_sro")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index0 = uint8_t((code >> 12) & 0x1);
	regs1 = uint8_t((code >> 13) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	regs0 = uint8_t((code >> 21) & 0x1);
	index1 = uint8_t((code >> 30) & 0x1);
	reject = rm == 31;
	index = index1<<1|index0;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvsl_dro<	ARCH>::OpLdvsl_dro(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvsl_dro")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	regs1 = uint8_t((code >> 13) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	regs0 = uint8_t((code >> 21) & 0x1);
	index = uint8_t((code >> 30) & 0x1);
	reject = rm == 31;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvr_bro<	ARCH>::OpLdvr_bro(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvr_bro")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	regs1 = uint8_t((code >> 13) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	regs0 = uint8_t((code >> 21) & 0x1);
	q = uint8_t((code >> 30) & 0x1);
	reject = rm == 31;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvr_hro<	ARCH>::OpLdvr_hro(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvr_hro")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	regs1 = uint8_t((code >> 13) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	regs0 = uint8_t((code >> 21) & 0x1);
	q = uint8_t((code >> 30) & 0x1);
	reject = rm == 31;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvr_sro<	ARCH>::OpLdvr_sro(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvr_sro")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	regs1 = uint8_t((code >> 13) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	regs0 = uint8_t((code >> 21) & 0x1);
	q = uint8_t((code >> 30) & 0x1);
	reject = rm == 31;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvr_dro<	ARCH>::OpLdvr_dro(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvr_dro")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	regs1 = uint8_t((code >> 13) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	regs0 = uint8_t((code >> 21) & 0x1);
	q = uint8_t((code >> 30) & 0x1);
	reject = rm == 31;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpAdc_www<	ARCH>::OpAdc_www(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adc_www")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1458";
}

template <	typename	ARCH>
OpAdc_xxx<	ARCH>::OpAdc_xxx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adc_xxx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1612";
}

template <	typename	ARCH>
OpAdcs_www<	ARCH>::OpAdcs_www(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adcs_www")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1459";
}

template <	typename	ARCH>
OpAdcs_xxx<	ARCH>::OpAdcs_xxx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adcs_xxx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1613";
}

template <	typename	ARCH>
OpAdd_wsxtb<	ARCH>::OpAdd_wsxtb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_wsxtb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,375";
}

template <	typename	ARCH>
OpAdd_wsxth<	ARCH>::OpAdd_wsxth(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_wsxth")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,379";
}

template <	typename	ARCH>
OpAdd_wsxtw<	ARCH>::OpAdd_wsxtw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_wsxtw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,383";
}

template <	typename	ARCH>
OpAdd_wsxtx<	ARCH>::OpAdd_wsxtx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_wsxtx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,387";
}

template <	typename	ARCH>
OpAdd_wuxtb<	ARCH>::OpAdd_wuxtb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_wuxtb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,391";
}

template <	typename	ARCH>
OpAdd_wuxth<	ARCH>::OpAdd_wuxth(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_wuxth")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,395";
}

template <	typename	ARCH>
OpAdd_wuxtw<	ARCH>::OpAdd_wuxtw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_wuxtw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,399";
}

template <	typename	ARCH>
OpAdd_wuxtx<	ARCH>::OpAdd_wuxtx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_wuxtx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,403";
}

template <	typename	ARCH>
OpAdd_xsxtb<	ARCH>::OpAdd_xsxtb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_xsxtb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,407";
}

template <	typename	ARCH>
OpAdd_xsxth<	ARCH>::OpAdd_xsxth(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_xsxth")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,411";
}

template <	typename	ARCH>
OpAdd_xsxtw<	ARCH>::OpAdd_xsxtw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_xsxtw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,415";
}

template <	typename	ARCH>
OpAdd_xsxtx<	ARCH>::OpAdd_xsxtx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_xsxtx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,431";
}

template <	typename	ARCH>
OpAdd_xuxtb<	ARCH>::OpAdd_xuxtb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_xuxtb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,419";
}

template <	typename	ARCH>
OpAdd_xuxth<	ARCH>::OpAdd_xuxth(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_xuxth")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,423";
}

template <	typename	ARCH>
OpAdd_xuxtw<	ARCH>::OpAdd_xuxtw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_xuxtw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,427";
}

template <	typename	ARCH>
OpAdd_xuxtx<	ARCH>::OpAdd_xuxtx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_xuxtx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,438";
}

template <	typename	ARCH>
OpAdd_wi<	ARCH>::OpAdd_wi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_wi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm0 = uint16_t((code >> 10) & 0xfff);
	shl12 = uint8_t((code >> 22) & 0x1);
	imm = shl12 ? (imm0 << 12) : imm0;
	format = "base,24";
}

template <	typename	ARCH>
OpAdd_xi<	ARCH>::OpAdd_xi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_xi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm0 = uint16_t((code >> 10) & 0xfff);
	shl12 = uint8_t((code >> 22) & 0x1);
	imm = shl12 ? (imm0 << 12) : imm0;
	format = "base,33";
}

template <	typename	ARCH>
OpAdd_wlsl<	ARCH>::OpAdd_wlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_wlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,182";
}

template <	typename	ARCH>
OpAdd_wlsr<	ARCH>::OpAdd_wlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_wlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,194";
}

template <	typename	ARCH>
OpAdd_wasr<	ARCH>::OpAdd_wasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_wasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,170";
}

template <	typename	ARCH>
OpAdd_xlsl<	ARCH>::OpAdd_xlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_xlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,122";
}

template <	typename	ARCH>
OpAdd_xlsr<	ARCH>::OpAdd_xlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_xlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,134";
}

template <	typename	ARCH>
OpAdd_xasr<	ARCH>::OpAdd_xasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_xasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,110";
}

template <	typename	ARCH>
OpAdds_wsxtb<	ARCH>::OpAdds_wsxtb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_wsxtb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,376";
}

template <	typename	ARCH>
OpAdds_wsxth<	ARCH>::OpAdds_wsxth(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_wsxth")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,380";
}

template <	typename	ARCH>
OpAdds_wsxtw<	ARCH>::OpAdds_wsxtw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_wsxtw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,384";
}

template <	typename	ARCH>
OpAdds_wsxtx<	ARCH>::OpAdds_wsxtx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_wsxtx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,388";
}

template <	typename	ARCH>
OpAdds_wuxtb<	ARCH>::OpAdds_wuxtb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_wuxtb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,392";
}

template <	typename	ARCH>
OpAdds_wuxth<	ARCH>::OpAdds_wuxth(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_wuxth")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,396";
}

template <	typename	ARCH>
OpAdds_wuxtw<	ARCH>::OpAdds_wuxtw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_wuxtw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,400";
}

template <	typename	ARCH>
OpAdds_wuxtx<	ARCH>::OpAdds_wuxtx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_wuxtx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,404";
}

template <	typename	ARCH>
OpAdds_xsxtb<	ARCH>::OpAdds_xsxtb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_xsxtb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,408";
}

template <	typename	ARCH>
OpAdds_xsxth<	ARCH>::OpAdds_xsxth(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_xsxth")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,412";
}

template <	typename	ARCH>
OpAdds_xsxtw<	ARCH>::OpAdds_xsxtw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_xsxtw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,416";
}

template <	typename	ARCH>
OpAdds_xsxtx<	ARCH>::OpAdds_xsxtx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_xsxtx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,432";
}

template <	typename	ARCH>
OpAdds_xuxtb<	ARCH>::OpAdds_xuxtb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_xuxtb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,420";
}

template <	typename	ARCH>
OpAdds_xuxth<	ARCH>::OpAdds_xuxth(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_xuxth")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,424";
}

template <	typename	ARCH>
OpAdds_xuxtw<	ARCH>::OpAdds_xuxtw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_xuxtw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,428";
}

template <	typename	ARCH>
OpAdds_xuxtx<	ARCH>::OpAdds_xuxtx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_xuxtx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,436";
}

template <	typename	ARCH>
OpAdds_wi<	ARCH>::OpAdds_wi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_wi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm0 = uint16_t((code >> 10) & 0xfff);
	shl12 = uint8_t((code >> 22) & 0x1);
	imm = shl12 ? (imm0 << 12) : imm0;
	format = "base,23";
}

template <	typename	ARCH>
OpAdds_xi<	ARCH>::OpAdds_xi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_xi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm0 = uint16_t((code >> 10) & 0xfff);
	shl12 = uint8_t((code >> 22) & 0x1);
	imm = shl12 ? (imm0 << 12) : imm0;
	format = "base,32";
}

template <	typename	ARCH>
OpAdds_wlsl<	ARCH>::OpAdds_wlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_wlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,183";
}

template <	typename	ARCH>
OpAdds_wlsr<	ARCH>::OpAdds_wlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_wlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,204";
}

template <	typename	ARCH>
OpAdds_wasr<	ARCH>::OpAdds_wasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_wasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,180";
}

template <	typename	ARCH>
OpAdds_xlsl<	ARCH>::OpAdds_xlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_xlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,128";
}

template <	typename	ARCH>
OpAdds_xlsr<	ARCH>::OpAdds_xlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_xlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,144";
}

template <	typename	ARCH>
OpAdds_xasr<	ARCH>::OpAdds_xasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adds_xasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,120";
}

template <	typename	ARCH>
OpAdr<	ARCH>::OpAdr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adr")
{
	rd = uint8_t(code & 0x1f);
	imm1 = ((int32_t)(((code >> 5) & 0x7ffff) << 13) >> 13) << 2;
	imm0 = uint8_t((code >> 29) & 0x3);
	imm = imm1|imm0;
	format = "base,2";
}

template <	typename	ARCH>
OpAdrp<	ARCH>::OpAdrp(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "adrp")
{
	rd = uint8_t(code & 0x1f);
	imm1 = ((int32_t)(((code >> 5) & 0x7ffff) << 13) >> 13) << 2;
	imm0 = uint8_t((code >> 29) & 0x3);
	imm = imm1|imm0;
	format = "base,1";
}

template <	typename	ARCH>
OpAnd_wi<	ARCH>::OpAnd_wi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "and_wi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imms = uint8_t((code >> 10) & 0x3f);
	immr = uint8_t((code >> 16) & 0x3f);
	imm = DecodeBitMasks(0,imms,immr).wmask;
	format = "base,71";
}

template <	typename	ARCH>
OpAnd_xi<	ARCH>::OpAnd_xi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "and_xi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imms = uint8_t((code >> 10) & 0x3f);
	immr = uint8_t((code >> 16) & 0x3f);
	n = uint8_t((code >> 22) & 0x1);
	imm = DecodeBitMasks(n,imms,immr).wmask;
	format = "base,26";
}

template <	typename	ARCH>
OpAnd_wlsl<	ARCH>::OpAnd_wlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "and_wlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,187";
}

template <	typename	ARCH>
OpAnd_wlsr<	ARCH>::OpAnd_wlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "and_wlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,195";
}

template <	typename	ARCH>
OpAnd_wasr<	ARCH>::OpAnd_wasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "and_wasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,171";
}

template <	typename	ARCH>
OpAnd_wror<	ARCH>::OpAnd_wror(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "and_wror")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,206";
}

template <	typename	ARCH>
OpAnd_xlsl<	ARCH>::OpAnd_xlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "and_xlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,123";
}

template <	typename	ARCH>
OpAnd_xlsr<	ARCH>::OpAnd_xlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "and_xlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,135";
}

template <	typename	ARCH>
OpAnd_xasr<	ARCH>::OpAnd_xasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "and_xasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,111";
}

template <	typename	ARCH>
OpAnd_xror<	ARCH>::OpAnd_xror(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "and_xror")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,146";
}

template <	typename	ARCH>
OpAnds_wi<	ARCH>::OpAnds_wi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ands_wi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imms = uint8_t((code >> 10) & 0x3f);
	immr = uint8_t((code >> 16) & 0x3f);
	imm = DecodeBitMasks(0,imms,immr).wmask;
	format = "base,73";
}

template <	typename	ARCH>
OpAnds_xi<	ARCH>::OpAnds_xi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ands_xi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imms = uint8_t((code >> 10) & 0x3f);
	immr = uint8_t((code >> 16) & 0x3f);
	n = uint8_t((code >> 22) & 0x1);
	imm = DecodeBitMasks(n,imms,immr).wmask;
	format = "base,29";
}

template <	typename	ARCH>
OpAnds_wlsl<	ARCH>::OpAnds_wlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ands_wlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,184";
}

template <	typename	ARCH>
OpAnds_wlsr<	ARCH>::OpAnds_wlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ands_wlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,205";
}

template <	typename	ARCH>
OpAnds_wasr<	ARCH>::OpAnds_wasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ands_wasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,181";
}

template <	typename	ARCH>
OpAnds_wror<	ARCH>::OpAnds_wror(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ands_wror")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,213";
}

template <	typename	ARCH>
OpAnds_xlsl<	ARCH>::OpAnds_xlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ands_xlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,130";
}

template <	typename	ARCH>
OpAnds_xlsr<	ARCH>::OpAnds_xlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ands_xlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,145";
}

template <	typename	ARCH>
OpAnds_xasr<	ARCH>::OpAnds_xasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ands_xasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,121";
}

template <	typename	ARCH>
OpAnds_xror<	ARCH>::OpAnds_xror(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ands_xror")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,153";
}

template <	typename	ARCH>
OpAsr_www<	ARCH>::OpAsr_www(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "asr_www")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1460";
}

template <	typename	ARCH>
OpAsr_xxx<	ARCH>::OpAsr_xxx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "asr_xxx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1614";
}

template <	typename	ARCH>
OpB<	ARCH>::OpB(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "b")
{
	imm = ((int32_t)((code & 0x3ffffff) << 6) >> 6) << 2;
	format = "base,3";
}

template <	typename	ARCH>
OpB_cond<	ARCH>::OpB_cond(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "b_cond")
{
	cond = uint8_t(code & 0xf);
	imm = ((int32_t)(((code >> 5) & 0x7ffff) << 13) >> 13) << 2;
	format = "base,20";
}

template <	typename	ARCH>
OpBfm_w<	ARCH>::OpBfm_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bfm_w")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imms = uint8_t((code >> 10) & 0x1f);
	immr = uint8_t((code >> 16) & 0x1f);
	format = "base,162";
}

template <	typename	ARCH>
OpBfm_x<	ARCH>::OpBfm_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bfm_x")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imms = uint8_t((code >> 10) & 0x3f);
	immr = uint8_t((code >> 16) & 0x3f);
	format = "base,90";
}

template <	typename	ARCH>
OpBic_wlsl<	ARCH>::OpBic_wlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bic_wlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,188";
}

template <	typename	ARCH>
OpBic_wlsr<	ARCH>::OpBic_wlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bic_wlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,196";
}

template <	typename	ARCH>
OpBic_wasr<	ARCH>::OpBic_wasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bic_wasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,172";
}

template <	typename	ARCH>
OpBic_wror<	ARCH>::OpBic_wror(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bic_wror")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,207";
}

template <	typename	ARCH>
OpBic_xlsl<	ARCH>::OpBic_xlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bic_xlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,124";
}

template <	typename	ARCH>
OpBic_xlsr<	ARCH>::OpBic_xlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bic_xlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,136";
}

template <	typename	ARCH>
OpBic_xasr<	ARCH>::OpBic_xasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bic_xasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,112";
}

template <	typename	ARCH>
OpBic_xror<	ARCH>::OpBic_xror(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bic_xror")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,147";
}

template <	typename	ARCH>
OpBics_wlsl<	ARCH>::OpBics_wlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bics_wlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,189";
}

template <	typename	ARCH>
OpBics_wlsr<	ARCH>::OpBics_wlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bics_wlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,197";
}

template <	typename	ARCH>
OpBics_wasr<	ARCH>::OpBics_wasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bics_wasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,173";
}

template <	typename	ARCH>
OpBics_wror<	ARCH>::OpBics_wror(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bics_wror")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,208";
}

template <	typename	ARCH>
OpBics_xlsl<	ARCH>::OpBics_xlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bics_xlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,125";
}

template <	typename	ARCH>
OpBics_xlsr<	ARCH>::OpBics_xlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bics_xlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,137";
}

template <	typename	ARCH>
OpBics_xasr<	ARCH>::OpBics_xasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bics_xasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,113";
}

template <	typename	ARCH>
OpBics_xror<	ARCH>::OpBics_xror(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bics_xror")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,148";
}

template <	typename	ARCH>
OpBl<	ARCH>::OpBl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bl")
{
	imm = ((int32_t)((code & 0x3ffffff) << 6) >> 6) << 2;
	format = "base,4";
}

template <	typename	ARCH>
OpBlr<	ARCH>::OpBlr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "blr")
{
	rn = uint8_t((code >> 5) & 0x1f);
	format = "base,2886";
}

template <	typename	ARCH>
OpBr<	ARCH>::OpBr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "br")
{
	rn = uint8_t((code >> 5) & 0x1f);
	format = "base,2887";
}

template <	typename	ARCH>
OpBrk<	ARCH>::OpBrk(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "brk")
{
	imm = uint16_t((code >> 5) & 0xffff);
	format = "base,573";
}

template <	typename	ARCH>
OpCbnz_wlit<	ARCH>::OpCbnz_wlit(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cbnz_wlit")
{
	rt = uint8_t(code & 0x1f);
	imm = ((int32_t)(((code >> 5) & 0x7ffff) << 13) >> 13) << 2;
	format = "base,12";
}

template <	typename	ARCH>
OpCbnz_xlit<	ARCH>::OpCbnz_xlit(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cbnz_xlit")
{
	rt = uint8_t(code & 0x1f);
	imm = ((int32_t)(((code >> 5) & 0x7ffff) << 13) >> 13) << 2;
	format = "base,15";
}

template <	typename	ARCH>
OpCbz_wlit<	ARCH>::OpCbz_wlit(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cbz_wlit")
{
	rt = uint8_t(code & 0x1f);
	imm = ((int32_t)(((code >> 5) & 0x7ffff) << 13) >> 13) << 2;
	format = "base,13";
}

template <	typename	ARCH>
OpCbz_xlit<	ARCH>::OpCbz_xlit(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cbz_xlit")
{
	rt = uint8_t(code & 0x1f);
	imm = ((int32_t)(((code >> 5) & 0x7ffff) << 13) >> 13) << 2;
	format = "base,16";
}

template <	typename	ARCH>
OpCcmn_wi<	ARCH>::OpCcmn_wi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ccmn_wi")
{
	v = uint8_t(code & 0x1);
	c = uint8_t((code >> 1) & 0x1);
	z = uint8_t((code >> 2) & 0x1);
	n = uint8_t((code >> 3) & 0x1);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	imm = uint8_t((code >> 16) & 0x1f);
	format = "base,366";
}

template <	typename	ARCH>
OpCcmn_xi<	ARCH>::OpCcmn_xi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ccmn_xi")
{
	v = uint8_t(code & 0x1);
	c = uint8_t((code >> 1) & 0x1);
	z = uint8_t((code >> 2) & 0x1);
	n = uint8_t((code >> 3) & 0x1);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	imm = uint8_t((code >> 16) & 0x1f);
	format = "base,370";
}

template <	typename	ARCH>
OpCcmn_w<	ARCH>::OpCcmn_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ccmn_w")
{
	v = uint8_t(code & 0x1);
	c = uint8_t((code >> 1) & 0x1);
	z = uint8_t((code >> 2) & 0x1);
	n = uint8_t((code >> 3) & 0x1);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,368";
}

template <	typename	ARCH>
OpCcmn_x<	ARCH>::OpCcmn_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ccmn_x")
{
	v = uint8_t(code & 0x1);
	c = uint8_t((code >> 1) & 0x1);
	z = uint8_t((code >> 2) & 0x1);
	n = uint8_t((code >> 3) & 0x1);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,372";
}

template <	typename	ARCH>
OpCcmp_wi<	ARCH>::OpCcmp_wi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ccmp_wi")
{
	v = uint8_t(code & 0x1);
	c = uint8_t((code >> 1) & 0x1);
	z = uint8_t((code >> 2) & 0x1);
	n = uint8_t((code >> 3) & 0x1);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	imm = uint8_t((code >> 16) & 0x1f);
	format = "base,367";
}

template <	typename	ARCH>
OpCcmp_xi<	ARCH>::OpCcmp_xi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ccmp_xi")
{
	v = uint8_t(code & 0x1);
	c = uint8_t((code >> 1) & 0x1);
	z = uint8_t((code >> 2) & 0x1);
	n = uint8_t((code >> 3) & 0x1);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	imm = uint8_t((code >> 16) & 0x1f);
	format = "base,371";
}

template <	typename	ARCH>
OpCcmp_w<	ARCH>::OpCcmp_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ccmp_w")
{
	v = uint8_t(code & 0x1);
	c = uint8_t((code >> 1) & 0x1);
	z = uint8_t((code >> 2) & 0x1);
	n = uint8_t((code >> 3) & 0x1);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,369";
}

template <	typename	ARCH>
OpCcmp_x<	ARCH>::OpCcmp_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ccmp_x")
{
	v = uint8_t(code & 0x1);
	c = uint8_t((code >> 1) & 0x1);
	z = uint8_t((code >> 2) & 0x1);
	n = uint8_t((code >> 3) & 0x1);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,373";
}

template <	typename	ARCH>
OpClrex<	ARCH>::OpClrex(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "clrex")
{
	imm = uint8_t((code >> 8) & 0xf);
	format = "base,2942";
}

template <	typename	ARCH>
OpCls_w<	ARCH>::OpCls_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cls_w")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	format = "base,2615";
}

template <	typename	ARCH>
OpCls_x<	ARCH>::OpCls_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cls_x")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	format = "base,2655";
}

template <	typename	ARCH>
OpClz_w<	ARCH>::OpClz_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "clz_w")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	format = "base,2616";
}

template <	typename	ARCH>
OpClz_x<	ARCH>::OpClz_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "clz_x")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	format = "base,2654";
}

template <	typename	ARCH>
OpCsel_w<	ARCH>::OpCsel_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "csel_w")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,291";
}

template <	typename	ARCH>
OpCsel_x<	ARCH>::OpCsel_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "csel_x")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,327";
}

template <	typename	ARCH>
OpCsinc_w<	ARCH>::OpCsinc_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "csinc_w")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,292";
}

template <	typename	ARCH>
OpCsinc_x<	ARCH>::OpCsinc_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "csinc_x")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,328";
}

template <	typename	ARCH>
OpCsinv_w<	ARCH>::OpCsinv_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "csinv_w")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,293";
}

template <	typename	ARCH>
OpCsinv_x<	ARCH>::OpCsinv_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "csinv_x")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,329";
}

template <	typename	ARCH>
OpCsneg_w<	ARCH>::OpCsneg_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "csneg_w")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,294";
}

template <	typename	ARCH>
OpCsneg_x<	ARCH>::OpCsneg_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "csneg_x")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,330";
}

template <	typename	ARCH>
OpDcps1<	ARCH>::OpDcps1(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "dcps1")
{
	imm = uint16_t((code >> 5) & 0xffff);
	format = "base,578";
}

template <	typename	ARCH>
OpDcps2<	ARCH>::OpDcps2(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "dcps2")
{
	imm = uint16_t((code >> 5) & 0xffff);
	format = "base,579";
}

template <	typename	ARCH>
OpDcps3<	ARCH>::OpDcps3(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "dcps3")
{
	imm = uint16_t((code >> 5) & 0xffff);
	format = "base,580";
}

template <	typename	ARCH>
OpDrps<	ARCH>::OpDrps(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "drps")
{
	format = "base,2946";
}

template <	typename	ARCH>
OpEon_wlsl<	ARCH>::OpEon_wlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "eon_wlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,190";
}

template <	typename	ARCH>
OpEon_wlsr<	ARCH>::OpEon_wlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "eon_wlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,198";
}

template <	typename	ARCH>
OpEon_wasr<	ARCH>::OpEon_wasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "eon_wasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,174";
}

template <	typename	ARCH>
OpEon_wror<	ARCH>::OpEon_wror(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "eon_wror")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,209";
}

template <	typename	ARCH>
OpEon_xlsl<	ARCH>::OpEon_xlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "eon_xlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,126";
}

template <	typename	ARCH>
OpEon_xlsr<	ARCH>::OpEon_xlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "eon_xlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,138";
}

template <	typename	ARCH>
OpEon_xasr<	ARCH>::OpEon_xasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "eon_xasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,114";
}

template <	typename	ARCH>
OpEon_xror<	ARCH>::OpEon_xror(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "eon_xror")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,149";
}

template <	typename	ARCH>
OpEor_wi<	ARCH>::OpEor_wi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "eor_wi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imms = uint8_t((code >> 10) & 0x3f);
	immr = uint8_t((code >> 16) & 0x3f);
	imm = DecodeBitMasks(0,imms,immr).wmask;
	format = "base,72";
}

template <	typename	ARCH>
OpEor_xi<	ARCH>::OpEor_xi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "eor_xi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imms = uint8_t((code >> 10) & 0x3f);
	immr = uint8_t((code >> 16) & 0x3f);
	n = uint8_t((code >> 22) & 0x1);
	imm = DecodeBitMasks(n,imms,immr).wmask;
	format = "base,27";
}

template <	typename	ARCH>
OpEor_wlsl<	ARCH>::OpEor_wlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "eor_wlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,191";
}

template <	typename	ARCH>
OpEor_wlsr<	ARCH>::OpEor_wlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "eor_wlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,199";
}

template <	typename	ARCH>
OpEor_wasr<	ARCH>::OpEor_wasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "eor_wasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,175";
}

template <	typename	ARCH>
OpEor_wror<	ARCH>::OpEor_wror(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "eor_wror")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,210";
}

template <	typename	ARCH>
OpEor_xlsl<	ARCH>::OpEor_xlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "eor_xlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,127";
}

template <	typename	ARCH>
OpEor_xlsr<	ARCH>::OpEor_xlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "eor_xlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,139";
}

template <	typename	ARCH>
OpEor_xasr<	ARCH>::OpEor_xasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "eor_xasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,115";
}

template <	typename	ARCH>
OpEor_xror<	ARCH>::OpEor_xror(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "eor_xror")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,150";
}

template <	typename	ARCH>
OpEret<	ARCH>::OpEret(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "eret")
{
	format = "base,2947";
}

template <	typename	ARCH>
OpExtr_w<	ARCH>::OpExtr_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "extr_w")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imms = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,165";
}

template <	typename	ARCH>
OpExtr_x<	ARCH>::OpExtr_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "extr_x")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imms = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,109";
}

template <	typename	ARCH>
OpHlt<	ARCH>::OpHlt(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "hlt")
{
	imm = uint16_t((code >> 5) & 0xffff);
	format = "base,574";
}

template <	typename	ARCH>
OpHvc<	ARCH>::OpHvc(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "hvc")
{
	imm = uint16_t((code >> 5) & 0xffff);
	format = "base,575";
}

template <	typename	ARCH>
OpLdar_w<	ARCH>::OpLdar_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldar_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	format = "base,2622";
}

template <	typename	ARCH>
OpLdar_x<	ARCH>::OpLdar_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldar_x")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	format = "base,2656";
}

template <	typename	ARCH>
OpLdarb_w<	ARCH>::OpLdarb_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldarb_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	format = "base,2623";
}

template <	typename	ARCH>
OpLdarh_w<	ARCH>::OpLdarh_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldarh_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	format = "base,2624";
}

template <	typename	ARCH>
OpLdaxp_w<	ARCH>::OpLdaxp_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldaxp_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,220";
}

template <	typename	ARCH>
OpLdaxp_x<	ARCH>::OpLdaxp_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldaxp_x")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,243";
}

template <	typename	ARCH>
OpLdaxr_w<	ARCH>::OpLdaxr_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldaxr_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,226";
}

template <	typename	ARCH>
OpLdaxr_x<	ARCH>::OpLdaxr_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldaxr_x")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,245";
}

template <	typename	ARCH>
OpLdaxrb_w<	ARCH>::OpLdaxrb_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldaxrb_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,227";
}

template <	typename	ARCH>
OpLdaxrh_w<	ARCH>::OpLdaxrh_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldaxrh_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,228";
}

template <	typename	ARCH>
OpLdp_w<	ARCH>::OpLdp_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldp_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	imm = ((int16_t)(((code >> 15) & 0x7f) << 9) >> 9) << 2;
	am = uint8_t((code >> 23) & 0x3);
	reject = (rt == rt2) or (am & 1 and (rt == rn or rt2 == rn) and rn != 31);
}

template <	typename	ARCH>
OpLdp_x<	ARCH>::OpLdp_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldp_x")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	imm = ((int16_t)(((code >> 15) & 0x7f) << 9) >> 9) << 3;
	am = uint8_t((code >> 23) & 0x3);
	reject = (rt == rt2) or (am & 1 and (rt == rn or rt2 == rn) and rn != 31);
}

template <	typename	ARCH>
OpLdpsw_xxi<	ARCH>::OpLdpsw_xxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldpsw_xxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	imm = ((int16_t)(((code >> 15) & 0x7f) << 9) >> 9) << 2;
	am = uint8_t((code >> 23) & 0x3);
	reject = (rt == rt2) or (am == 0) or (am & 1 and (rt == rn or rt2 == rn) and rn != 31);
}

template <	typename	ARCH>
OpLdr_wxi<	ARCH>::OpLdr_wxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_wxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	am = uint8_t((code >> 10) & 0x3);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	reject = am == 2 or (am & 1 and rn == rt and rn != 31);
}

template <	typename	ARCH>
OpLdr_wuo<	ARCH>::OpLdr_wuo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_wuo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff) << 2;
	format = "base,82";
}

template <	typename	ARCH>
OpLdr_xxi<	ARCH>::OpLdr_xxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_xxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	am = uint8_t((code >> 10) & 0x3);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	reject = am == 2 or (am & 1 and rn == rt and rn != 31);
}

template <	typename	ARCH>
OpLdr_xuo<	ARCH>::OpLdr_xuo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_xuo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff) << 3;
	format = "base,104";
}

template <	typename	ARCH>
OpLdr_wlit<	ARCH>::OpLdr_wlit(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_wlit")
{
	rt = uint8_t(code & 0x1f);
	imm = ((int32_t)(((code >> 5) & 0x7ffff) << 13) >> 13) << 2;
	format = "base,14";
}

template <	typename	ARCH>
OpLdr_xlit<	ARCH>::OpLdr_xlit(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_xlit")
{
	rt = uint8_t(code & 0x1f);
	imm = ((int32_t)(((code >> 5) & 0x7ffff) << 13) >> 13) << 2;
	format = "base,17";
}

template <	typename	ARCH>
OpLdr_wxwu<	ARCH>::OpLdr_wxwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_wxwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*2;
	format = "base,623";
}

template <	typename	ARCH>
OpLdr_wxxu<	ARCH>::OpLdr_wxxu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_wxxu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1596";
	shift = s*2;
}

template <	typename	ARCH>
OpLdr_wxws<	ARCH>::OpLdr_wxws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_wxws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*2;
	format = "base,615";
}

template <	typename	ARCH>
OpLdr_wxxs<	ARCH>::OpLdr_wxxs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_wxxs")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*2;
	format = "base,631";
}

template <	typename	ARCH>
OpLdr_xxwu<	ARCH>::OpLdr_xxwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_xxwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*3;
	format = "base,644";
}

template <	typename	ARCH>
OpLdr_xxxu<	ARCH>::OpLdr_xxxu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_xxxu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1661";
	shift = s*3;
}

template <	typename	ARCH>
OpLdr_xxws<	ARCH>::OpLdr_xxws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_xxws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*3;
	format = "base,639";
}

template <	typename	ARCH>
OpLdr_xxxs<	ARCH>::OpLdr_xxxs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_xxxs")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*3;
	format = "base,649";
}

template <	typename	ARCH>
OpLdrb_wxi<	ARCH>::OpLdrb_wxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrb_wxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	am = uint8_t((code >> 10) & 0x3);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	reject = am == 2 or (am & 1 and rn == rt and rn != 31);
}

template <	typename	ARCH>
OpLdrb_wuo<	ARCH>::OpLdrb_wuo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrb_wuo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff);
	format = "base,83";
}

template <	typename	ARCH>
OpLdrb_wxwu<	ARCH>::OpLdrb_wxwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrb_wxwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*0;
	format = "base,624";
}

template <	typename	ARCH>
OpLdrb_wxxu<	ARCH>::OpLdrb_wxxu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrb_wxxu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1597";
	shift = s*0;
}

template <	typename	ARCH>
OpLdrb_wxws<	ARCH>::OpLdrb_wxws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrb_wxws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*0;
	format = "base,616";
}

template <	typename	ARCH>
OpLdrb_wxxs<	ARCH>::OpLdrb_wxxs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrb_wxxs")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*0;
	format = "base,632";
}

template <	typename	ARCH>
OpLdrh_wxi<	ARCH>::OpLdrh_wxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrh_wxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	am = uint8_t((code >> 10) & 0x3);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	reject = am == 2 or (am & 1 and rn == rt and rn != 31);
}

template <	typename	ARCH>
OpLdrh_wuo<	ARCH>::OpLdrh_wuo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrh_wuo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff) << 1;
	format = "base,84";
}

template <	typename	ARCH>
OpLdrh_wxwu<	ARCH>::OpLdrh_wxwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrh_wxwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*1;
	format = "base,625";
}

template <	typename	ARCH>
OpLdrh_wxxu<	ARCH>::OpLdrh_wxxu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrh_wxxu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1598";
	shift = s*1;
}

template <	typename	ARCH>
OpLdrh_wxws<	ARCH>::OpLdrh_wxws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrh_wxws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*1;
	format = "base,617";
}

template <	typename	ARCH>
OpLdrh_wxxs<	ARCH>::OpLdrh_wxxs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrh_wxxs")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*1;
	format = "base,633";
}

template <	typename	ARCH>
OpLdrsb_wxi<	ARCH>::OpLdrsb_wxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsb_wxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	am = uint8_t((code >> 10) & 0x3);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	reject = am == 2 or (am & 1 and rn == rt and rn != 31);
}

template <	typename	ARCH>
OpLdrsb_wuo<	ARCH>::OpLdrsb_wuo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsb_wuo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff);
	format = "base,85";
}

template <	typename	ARCH>
OpLdrsb_xxi<	ARCH>::OpLdrsb_xxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsb_xxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	am = uint8_t((code >> 10) & 0x3);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	reject = am == 2 or (am & 1 and rn == rt and rn != 31);
}

template <	typename	ARCH>
OpLdrsb_xuo<	ARCH>::OpLdrsb_xuo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsb_xuo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff);
	format = "base,105";
}

template <	typename	ARCH>
OpLdrsb_wxwu<	ARCH>::OpLdrsb_wxwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsb_wxwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*0;
	format = "base,626";
}

template <	typename	ARCH>
OpLdrsb_wxxu<	ARCH>::OpLdrsb_wxxu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsb_wxxu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1599";
	shift = s*0;
}

template <	typename	ARCH>
OpLdrsb_wxws<	ARCH>::OpLdrsb_wxws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsb_wxws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*0;
	format = "base,618";
}

template <	typename	ARCH>
OpLdrsb_wxxs<	ARCH>::OpLdrsb_wxxs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsb_wxxs")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*0;
	format = "base,634";
}

template <	typename	ARCH>
OpLdrsb_xxwu<	ARCH>::OpLdrsb_xxwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsb_xxwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*0;
	format = "base,645";
}

template <	typename	ARCH>
OpLdrsb_xxxu<	ARCH>::OpLdrsb_xxxu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsb_xxxu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1662";
	shift = s*0;
}

template <	typename	ARCH>
OpLdrsb_xxws<	ARCH>::OpLdrsb_xxws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsb_xxws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*0;
	format = "base,640";
}

template <	typename	ARCH>
OpLdrsb_xxxs<	ARCH>::OpLdrsb_xxxs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsb_xxxs")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*0;
	format = "base,650";
}

template <	typename	ARCH>
OpLdrsh_wxi<	ARCH>::OpLdrsh_wxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsh_wxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	am = uint8_t((code >> 10) & 0x3);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	reject = am == 2 or (am & 1 and rn == rt and rn != 31);
}

template <	typename	ARCH>
OpLdrsh_wuo<	ARCH>::OpLdrsh_wuo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsh_wuo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff) << 1;
	format = "base,86";
}

template <	typename	ARCH>
OpLdrsh_xxi<	ARCH>::OpLdrsh_xxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsh_xxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	am = uint8_t((code >> 10) & 0x3);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	reject = am == 2 or (am & 1 and rn == rt and rn != 31);
}

template <	typename	ARCH>
OpLdrsh_xuo<	ARCH>::OpLdrsh_xuo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsh_xuo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff) << 1;
	format = "base,106";
}

template <	typename	ARCH>
OpLdrsh_wxwu<	ARCH>::OpLdrsh_wxwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsh_wxwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*1;
	format = "base,627";
}

template <	typename	ARCH>
OpLdrsh_wxxu<	ARCH>::OpLdrsh_wxxu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsh_wxxu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1600";
	shift = s*1;
}

template <	typename	ARCH>
OpLdrsh_wxws<	ARCH>::OpLdrsh_wxws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsh_wxws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*1;
	format = "base,619";
}

template <	typename	ARCH>
OpLdrsh_wxxs<	ARCH>::OpLdrsh_wxxs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsh_wxxs")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*1;
	format = "base,635";
}

template <	typename	ARCH>
OpLdrsh_xxwu<	ARCH>::OpLdrsh_xxwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsh_xxwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*1;
	format = "base,646";
}

template <	typename	ARCH>
OpLdrsh_xxxu<	ARCH>::OpLdrsh_xxxu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsh_xxxu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1663";
	shift = s*1;
}

template <	typename	ARCH>
OpLdrsh_xxws<	ARCH>::OpLdrsh_xxws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsh_xxws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*1;
	format = "base,641";
}

template <	typename	ARCH>
OpLdrsh_xxxs<	ARCH>::OpLdrsh_xxxs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsh_xxxs")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*1;
	format = "base,651";
}

template <	typename	ARCH>
OpLdrsw_xlit<	ARCH>::OpLdrsw_xlit(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsw_xlit")
{
	rt = uint8_t(code & 0x1f);
	imm = ((int32_t)(((code >> 5) & 0x7ffff) << 13) >> 13) << 2;
	format = "base,18";
}

template <	typename	ARCH>
OpLdrsw_xxi<	ARCH>::OpLdrsw_xxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsw_xxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	am = uint8_t((code >> 10) & 0x3);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	reject = am == 2 or (am & 1 and rn == rt and rn != 31);
}

template <	typename	ARCH>
OpLdrsw_xuo<	ARCH>::OpLdrsw_xuo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsw_xuo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff) << 2;
	format = "base,107";
}

template <	typename	ARCH>
OpLdrsw_xxwu<	ARCH>::OpLdrsw_xxwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsw_xxwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*2;
	format = "base,647";
}

template <	typename	ARCH>
OpLdrsw_xxxu<	ARCH>::OpLdrsw_xxxu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsw_xxxu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1664";
	shift = s*2;
}

template <	typename	ARCH>
OpLdrsw_xxws<	ARCH>::OpLdrsw_xxws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsw_xxws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*2;
	format = "base,642";
}

template <	typename	ARCH>
OpLdrsw_xxxs<	ARCH>::OpLdrsw_xxxs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldrsw_xxxs")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*2;
	format = "base,652";
}

template <	typename	ARCH>
OpLdtr_wbo<	ARCH>::OpLdtr_wbo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldtr_wbo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	format = "base,297";
}

template <	typename	ARCH>
OpLdtr_xbo<	ARCH>::OpLdtr_xbo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldtr_xbo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	format = "base,334";
}

template <	typename	ARCH>
OpLdtrb_wbo<	ARCH>::OpLdtrb_wbo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldtrb_wbo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	format = "base,298";
}

template <	typename	ARCH>
OpLdtrh_wbo<	ARCH>::OpLdtrh_wbo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldtrh_wbo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	format = "base,299";
}

template <	typename	ARCH>
OpLdtrsb_wbo<	ARCH>::OpLdtrsb_wbo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldtrsb_wbo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	format = "base,300";
}

template <	typename	ARCH>
OpLdtrsb_xbo<	ARCH>::OpLdtrsb_xbo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldtrsb_xbo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	format = "base,335";
}

template <	typename	ARCH>
OpLdtrsh_wbo<	ARCH>::OpLdtrsh_wbo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldtrsh_wbo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	format = "base,301";
}

template <	typename	ARCH>
OpLdtrsh_xbo<	ARCH>::OpLdtrsh_xbo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldtrsh_xbo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	format = "base,336";
}

template <	typename	ARCH>
OpLdtrsw_xbo<	ARCH>::OpLdtrsw_xbo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldtrsw_xbo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	format = "base,337";
}

template <	typename	ARCH>
OpLdxp_w<	ARCH>::OpLdxp_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldxp_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,221";
}

template <	typename	ARCH>
OpLdxp_x<	ARCH>::OpLdxp_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldxp_x")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,244";
}

template <	typename	ARCH>
OpLdxr_w<	ARCH>::OpLdxr_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldxr_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,229";
}

template <	typename	ARCH>
OpLdxr_x<	ARCH>::OpLdxr_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldxr_x")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,246";
}

template <	typename	ARCH>
OpLdxrb_w<	ARCH>::OpLdxrb_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldxrb_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,230";
}

template <	typename	ARCH>
OpLdxrh_w<	ARCH>::OpLdxrh_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldxrh_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,231";
}

template <	typename	ARCH>
OpLsl_www<	ARCH>::OpLsl_www(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "lsl_www")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1467";
}

template <	typename	ARCH>
OpLsl_xxx<	ARCH>::OpLsl_xxx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "lsl_xxx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1615";
}

template <	typename	ARCH>
OpLsr_www<	ARCH>::OpLsr_www(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "lsr_www")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1468";
}

template <	typename	ARCH>
OpLsr_xxx<	ARCH>::OpLsr_xxx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "lsr_xxx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1616";
}

template <	typename	ARCH>
OpMadd_w<	ARCH>::OpMadd_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "madd_w")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	ra = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,166";
}

template <	typename	ARCH>
OpMadd_x<	ARCH>::OpMadd_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "madd_x")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	ra = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,241";
}

template <	typename	ARCH>
OpMov_wi<	ARCH>::OpMov_wi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mov_wi")
{
	rd = uint8_t(code & 0x1f);
	imm0 = uint16_t((code >> 5) & 0xffff);
	shift = uint8_t((code >> 21) & 0x1) << 4;
	n = ((int8_t)(((code >> 30) & 0x1) << 7) >> 7);
	imm = (uint32_t(imm0) << shift)^~int32_t(n);
	format = "base,19";
}

template <	typename	ARCH>
OpMov_xi<	ARCH>::OpMov_xi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mov_xi")
{
	rd = uint8_t(code & 0x1f);
	imm0 = uint16_t((code >> 5) & 0xffff);
	shift = uint8_t((code >> 21) & 0x3) << 4;
	n = ((int8_t)(((code >> 30) & 0x1) << 7) >> 7);
	imm = (uint64_t(imm0) << shift)^~int64_t(n);
	format = "base,7";
}

template <	typename	ARCH>
OpMovk_w<	ARCH>::OpMovk_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "movk_w")
{
	rd = uint8_t(code & 0x1f);
	imm = uint16_t((code >> 5) & 0xffff);
	shift = uint8_t((code >> 21) & 0x1) << 4;
	format = "base,69";
}

template <	typename	ARCH>
OpMovk_x<	ARCH>::OpMovk_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "movk_x")
{
	rd = uint8_t(code & 0x1f);
	imm = uint16_t((code >> 5) & 0xffff);
	shift = uint8_t((code >> 21) & 0x3) << 4;
	format = "base,25";
}

template <	typename	ARCH>
OpMrs<	ARCH>::OpMrs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mrs")
{
	rt = uint8_t(code & 0x1f);
	op2 = uint8_t((code >> 5) & 0x7);
	crm = uint8_t((code >> 8) & 0xf);
	crn = uint8_t((code >> 12) & 0xf);
	op1 = uint8_t((code >> 16) & 0x7);
	op0 = uint8_t((code >> 19) & 0x3);
	sysreg = ARCH::GetSystemRegister(op0, op1, crn, crm, op2);
}

template <	typename	ARCH>
OpMsub_w<	ARCH>::OpMsub_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "msub_w")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	ra = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,167";
}

template <	typename	ARCH>
OpMsub_x<	ARCH>::OpMsub_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "msub_x")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	ra = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,242";
}

template <	typename	ARCH>
OpNop<	ARCH>::OpNop(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "nop")
{
	format = "base,2948";
}

template <	typename	ARCH>
OpOrn_wlsl<	ARCH>::OpOrn_wlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "orn_wlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,185";
}

template <	typename	ARCH>
OpOrn_wlsr<	ARCH>::OpOrn_wlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "orn_wlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,200";
}

template <	typename	ARCH>
OpOrn_wasr<	ARCH>::OpOrn_wasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "orn_wasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,176";
}

template <	typename	ARCH>
OpOrn_wror<	ARCH>::OpOrn_wror(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "orn_wror")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,211";
}

template <	typename	ARCH>
OpOrn_xlsl<	ARCH>::OpOrn_xlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "orn_xlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,131";
}

template <	typename	ARCH>
OpOrn_xlsr<	ARCH>::OpOrn_xlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "orn_xlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,140";
}

template <	typename	ARCH>
OpOrn_xasr<	ARCH>::OpOrn_xasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "orn_xasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,116";
}

template <	typename	ARCH>
OpOrn_xror<	ARCH>::OpOrn_xror(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "orn_xror")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,151";
}

template <	typename	ARCH>
OpOrr_wi<	ARCH>::OpOrr_wi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "orr_wi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imms = uint8_t((code >> 10) & 0x3f);
	immr = uint8_t((code >> 16) & 0x3f);
	imm = DecodeBitMasks(0,imms,immr).wmask;
	format = "base,70";
}

template <	typename	ARCH>
OpOrr_xi<	ARCH>::OpOrr_xi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "orr_xi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imms = uint8_t((code >> 10) & 0x3f);
	immr = uint8_t((code >> 16) & 0x3f);
	n = uint8_t((code >> 22) & 0x1);
	imm = DecodeBitMasks(n,imms,immr).wmask;
	format = "base,28";
}

template <	typename	ARCH>
OpOrr_wlsl<	ARCH>::OpOrr_wlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "orr_wlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,193";
}

template <	typename	ARCH>
OpOrr_xlsl<	ARCH>::OpOrr_xlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "orr_xlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,132";
}

template <	typename	ARCH>
OpOrr_wlsr<	ARCH>::OpOrr_wlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "orr_wlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,203";
}

template <	typename	ARCH>
OpOrr_xlsr<	ARCH>::OpOrr_xlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "orr_xlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,143";
}

template <	typename	ARCH>
OpOrr_wasr<	ARCH>::OpOrr_wasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "orr_wasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,179";
}

template <	typename	ARCH>
OpOrr_xasr<	ARCH>::OpOrr_xasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "orr_xasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,119";
}

template <	typename	ARCH>
OpOrr_wror<	ARCH>::OpOrr_wror(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "orr_wror")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,212";
}

template <	typename	ARCH>
OpOrr_xror<	ARCH>::OpOrr_xror(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "orr_xror")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,152";
}

template <	typename	ARCH>
OpPrfm_lit<	ARCH>::OpPrfm_lit(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "prfm_lit")
{
	rt = uint8_t(code & 0x1f);
	imm = ((int32_t)(((code >> 5) & 0x7ffff) << 13) >> 13) << 2;
	format = "base,8";
}

template <	typename	ARCH>
OpPrfm_xi<	ARCH>::OpPrfm_xi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "prfm_xi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff) << 3;
	format = "base,34";
}

template <	typename	ARCH>
OpPrfm_xws<	ARCH>::OpPrfm_xws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "prfm_xws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*3;
	format = "base,581";
}

template <	typename	ARCH>
OpPrfm_xwu<	ARCH>::OpPrfm_xwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "prfm_xwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*3;
	format = "base,582";
}

template <	typename	ARCH>
OpPrfm_xx<	ARCH>::OpPrfm_xx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "prfm_xx")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	opt = uint8_t((code >> 15) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*3;
	format = "base,583";
}

template <	typename	ARCH>
OpPrfum<	ARCH>::OpPrfum(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "prfum")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	format = "base,258";
}

template <	typename	ARCH>
OpRbit_w<	ARCH>::OpRbit_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rbit_w")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	format = "base,2617";
}

template <	typename	ARCH>
OpRbit_x<	ARCH>::OpRbit_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rbit_x")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	format = "base,2617";
}

template <	typename	ARCH>
OpRet<	ARCH>::OpRet(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ret")
{
	rn = uint8_t((code >> 5) & 0x1f);
	format = "base,2888";
}

template <	typename	ARCH>
OpRev_w<	ARCH>::OpRev_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rev_w")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	format = "base,2618";
}

template <	typename	ARCH>
OpRev_x<	ARCH>::OpRev_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rev_x")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	format = "base,2653";
}

template <	typename	ARCH>
OpRev16_w<	ARCH>::OpRev16_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rev16_w")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	format = "base,2619";
}

template <	typename	ARCH>
OpRev16_x<	ARCH>::OpRev16_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rev16_x")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	format = "base,2651";
}

template <	typename	ARCH>
OpRev32_x<	ARCH>::OpRev32_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rev32_x")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	format = "base,2652";
}

template <	typename	ARCH>
OpRor_www<	ARCH>::OpRor_www(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ror_www")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1469";
}

template <	typename	ARCH>
OpRor_xxx<	ARCH>::OpRor_xxx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ror_xxx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1617";
}

template <	typename	ARCH>
OpSbc_www<	ARCH>::OpSbc_www(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sbc_www")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1472";
}

template <	typename	ARCH>
OpSbc_xxx<	ARCH>::OpSbc_xxx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sbc_xxx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1620";
}

template <	typename	ARCH>
OpSbcs_www<	ARCH>::OpSbcs_www(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sbcs_www")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1473";
}

template <	typename	ARCH>
OpSbcs_xxx<	ARCH>::OpSbcs_xxx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sbcs_xxx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1619";
}

template <	typename	ARCH>
OpSbfm_w<	ARCH>::OpSbfm_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sbfm_w")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imms = uint8_t((code >> 10) & 0x1f);
	immr = uint8_t((code >> 16) & 0x1f);
	format = "base,163";
}

template <	typename	ARCH>
OpSbfm_x<	ARCH>::OpSbfm_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sbfm_x")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imms = uint8_t((code >> 10) & 0x3f);
	immr = uint8_t((code >> 16) & 0x3f);
	format = "base,91";
}

template <	typename	ARCH>
OpSdiv_www<	ARCH>::OpSdiv_www(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sdiv_www")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1470";
}

template <	typename	ARCH>
OpSdiv_xxx<	ARCH>::OpSdiv_xxx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sdiv_xxx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1470";
}

template <	typename	ARCH>
OpSmaddl_xw<	ARCH>::OpSmaddl_xw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smaddl_xw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	ra = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,235";
}

template <	typename	ARCH>
OpSmc<	ARCH>::OpSmc(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smc")
{
	imm = uint16_t((code >> 5) & 0xffff);
	format = "base,576";
}

template <	typename	ARCH>
OpSmsubl_xw<	ARCH>::OpSmsubl_xw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smsubl_xw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	ra = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,236";
}

template <	typename	ARCH>
OpSmulh<	ARCH>::OpSmulh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smulh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	ra = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,239";
}

template <	typename	ARCH>
OpStlr_w<	ARCH>::OpStlr_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stlr_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,232";
}

template <	typename	ARCH>
OpStlr_x<	ARCH>::OpStlr_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stlr_x")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,247";
}

template <	typename	ARCH>
OpStlrb_w<	ARCH>::OpStlrb_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stlrb_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,233";
}

template <	typename	ARCH>
OpStlrh_w<	ARCH>::OpStlrh_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stlrh_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,234";
}

template <	typename	ARCH>
OpStlxp_w<	ARCH>::OpStlxp_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stlxp_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,168";
}

template <	typename	ARCH>
OpStlxp_x<	ARCH>::OpStlxp_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stlxp_x")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,222";
}

template <	typename	ARCH>
OpStlxr_w<	ARCH>::OpStlxr_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stlxr_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,214";
}

template <	typename	ARCH>
OpStlxr_x<	ARCH>::OpStlxr_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stlxr_x")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,224";
}

template <	typename	ARCH>
OpStlxrb_w<	ARCH>::OpStlxrb_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stlxrb_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,215";
}

template <	typename	ARCH>
OpStlxrh_w<	ARCH>::OpStlxrh_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stlxrh_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,216";
}

template <	typename	ARCH>
OpStp_w<	ARCH>::OpStp_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stp_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	imm = ((int16_t)(((code >> 15) & 0x7f) << 9) >> 9) << 2;
	am = uint8_t((code >> 23) & 0x3);
	reject = am & 1 and (rt == rn or rt2 == rn) and rn != 31;
}

template <	typename	ARCH>
OpStp_x<	ARCH>::OpStp_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stp_x")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	imm = ((int16_t)(((code >> 15) & 0x7f) << 9) >> 9) << 3;
	am = uint8_t((code >> 23) & 0x3);
	reject = am & 1 and (rt == rn or rt2 == rn) and rn != 31;
}

template <	typename	ARCH>
OpStr_wxi<	ARCH>::OpStr_wxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_wxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	am = uint8_t((code >> 10) & 0x3);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	reject = am == 2 or (am & 1 and rn == rt and rn != 31);
}

template <	typename	ARCH>
OpStr_wuo<	ARCH>::OpStr_wuo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_wuo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff) << 2;
	format = "base,87";
}

template <	typename	ARCH>
OpStr_xxi<	ARCH>::OpStr_xxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_xxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	am = uint8_t((code >> 10) & 0x3);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	reject = am == 2 or (am & 1 and rn == rt and rn != 31);
}

template <	typename	ARCH>
OpStr_xuo<	ARCH>::OpStr_xuo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_xuo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff) << 3;
	format = "base,108";
}

template <	typename	ARCH>
OpStr_wxwu<	ARCH>::OpStr_wxwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_wxwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*2;
	format = "base,628";
}

template <	typename	ARCH>
OpStr_wxxu<	ARCH>::OpStr_wxxu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_wxxu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1601";
	shift = s*2;
}

template <	typename	ARCH>
OpStr_wxws<	ARCH>::OpStr_wxws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_wxws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*2;
	format = "base,620";
}

template <	typename	ARCH>
OpStr_wxxs<	ARCH>::OpStr_wxxs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_wxxs")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*2;
	format = "base,636";
}

template <	typename	ARCH>
OpStr_xxwu<	ARCH>::OpStr_xxwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_xxwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*3;
	format = "base,648";
}

template <	typename	ARCH>
OpStr_xxxu<	ARCH>::OpStr_xxxu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_xxxu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1665";
	shift = s*3;
}

template <	typename	ARCH>
OpStr_xxws<	ARCH>::OpStr_xxws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_xxws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*3;
	format = "base,643";
}

template <	typename	ARCH>
OpStr_xxxs<	ARCH>::OpStr_xxxs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_xxxs")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*3;
	format = "base,653";
}

template <	typename	ARCH>
OpStrb_wxi<	ARCH>::OpStrb_wxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "strb_wxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	am = uint8_t((code >> 10) & 0x3);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	reject = am == 2 or (am & 1 and rn == rt and rn != 31);
}

template <	typename	ARCH>
OpStrb_wuo<	ARCH>::OpStrb_wuo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "strb_wuo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff);
	format = "base,88";
}

template <	typename	ARCH>
OpStrb_wxwu<	ARCH>::OpStrb_wxwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "strb_wxwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*0;
	format = "base,629";
}

template <	typename	ARCH>
OpStrb_wxxu<	ARCH>::OpStrb_wxxu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "strb_wxxu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1602";
	shift = s*0;
}

template <	typename	ARCH>
OpStrb_wxws<	ARCH>::OpStrb_wxws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "strb_wxws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*0;
	format = "base,621";
}

template <	typename	ARCH>
OpStrb_wxxs<	ARCH>::OpStrb_wxxs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "strb_wxxs")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*0;
	format = "base,637";
}

template <	typename	ARCH>
OpStrh_wxi<	ARCH>::OpStrh_wxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "strh_wxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	am = uint8_t((code >> 10) & 0x3);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	reject = am == 2 or (am & 1 and rn == rt and rn != 31);
}

template <	typename	ARCH>
OpStrh_wuo<	ARCH>::OpStrh_wuo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "strh_wuo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff) << 1;
	format = "base,89";
}

template <	typename	ARCH>
OpStrh_wxwu<	ARCH>::OpStrh_wxwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "strh_wxwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*1;
	format = "base,630";
}

template <	typename	ARCH>
OpStrh_wxxu<	ARCH>::OpStrh_wxxu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "strh_wxxu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1603";
	shift = s*1;
}

template <	typename	ARCH>
OpStrh_wxws<	ARCH>::OpStrh_wxws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "strh_wxws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*1;
	format = "base,622";
}

template <	typename	ARCH>
OpStrh_wxxs<	ARCH>::OpStrh_wxxs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "strh_wxxs")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*1;
	format = "base,638";
}

template <	typename	ARCH>
OpSttr_wbo<	ARCH>::OpSttr_wbo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sttr_wbo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	format = "base,302";
}

template <	typename	ARCH>
OpSttr_xbo<	ARCH>::OpSttr_xbo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sttr_xbo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	format = "base,338";
}

template <	typename	ARCH>
OpSttrb_wbo<	ARCH>::OpSttrb_wbo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sttrb_wbo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	format = "base,303";
}

template <	typename	ARCH>
OpSttrh_wbo<	ARCH>::OpSttrh_wbo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sttrh_wbo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	format = "base,304";
}

template <	typename	ARCH>
OpStxp_w<	ARCH>::OpStxp_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stxp_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,169";
}

template <	typename	ARCH>
OpStxp_x<	ARCH>::OpStxp_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stxp_x")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,223";
}

template <	typename	ARCH>
OpStxr_w<	ARCH>::OpStxr_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stxr_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,217";
}

template <	typename	ARCH>
OpStxr_x<	ARCH>::OpStxr_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stxr_x")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,225";
}

template <	typename	ARCH>
OpStxrb_w<	ARCH>::OpStxrb_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stxrb_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,218";
}

template <	typename	ARCH>
OpStxrh_w<	ARCH>::OpStxrh_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stxrh_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	format = "base,219";
}

template <	typename	ARCH>
OpSub_wsxtb<	ARCH>::OpSub_wsxtb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_wsxtb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,377";
}

template <	typename	ARCH>
OpSub_wsxth<	ARCH>::OpSub_wsxth(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_wsxth")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,381";
}

template <	typename	ARCH>
OpSub_wsxtw<	ARCH>::OpSub_wsxtw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_wsxtw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,385";
}

template <	typename	ARCH>
OpSub_wsxtx<	ARCH>::OpSub_wsxtx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_wsxtx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,389";
}

template <	typename	ARCH>
OpSub_wuxtb<	ARCH>::OpSub_wuxtb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_wuxtb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,393";
}

template <	typename	ARCH>
OpSub_wuxth<	ARCH>::OpSub_wuxth(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_wuxth")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,397";
}

template <	typename	ARCH>
OpSub_wuxtw<	ARCH>::OpSub_wuxtw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_wuxtw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,402";
}

template <	typename	ARCH>
OpSub_wuxtx<	ARCH>::OpSub_wuxtx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_wuxtx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,405";
}

template <	typename	ARCH>
OpSub_xsxtb<	ARCH>::OpSub_xsxtb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_xsxtb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,409";
}

template <	typename	ARCH>
OpSub_xsxth<	ARCH>::OpSub_xsxth(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_xsxth")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,413";
}

template <	typename	ARCH>
OpSub_xsxtw<	ARCH>::OpSub_xsxtw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_xsxtw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,417";
}

template <	typename	ARCH>
OpSub_xsxtx<	ARCH>::OpSub_xsxtx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_xsxtx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,433";
}

template <	typename	ARCH>
OpSub_xuxtb<	ARCH>::OpSub_xuxtb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_xuxtb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,421";
}

template <	typename	ARCH>
OpSub_xuxth<	ARCH>::OpSub_xuxth(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_xuxth")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,425";
}

template <	typename	ARCH>
OpSub_xuxtw<	ARCH>::OpSub_xuxtw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_xuxtw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,429";
}

template <	typename	ARCH>
OpSub_xuxtx<	ARCH>::OpSub_xuxtx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_xuxtx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,435";
}

template <	typename	ARCH>
OpSub_wi<	ARCH>::OpSub_wi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_wi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm0 = uint16_t((code >> 10) & 0xfff);
	shl12 = uint8_t((code >> 22) & 0x1);
	imm = shl12 ? (imm0 << 12) : imm0;
	format = "base,21";
}

template <	typename	ARCH>
OpSub_xi<	ARCH>::OpSub_xi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_xi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm0 = uint16_t((code >> 10) & 0xfff);
	shl12 = uint8_t((code >> 22) & 0x1);
	imm = shl12 ? (imm0 << 12) : imm0;
	format = "base,30";
}

template <	typename	ARCH>
OpSub_wlsl<	ARCH>::OpSub_wlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_wlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,186";
}

template <	typename	ARCH>
OpSub_wlsr<	ARCH>::OpSub_wlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_wlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,201";
}

template <	typename	ARCH>
OpSub_wasr<	ARCH>::OpSub_wasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_wasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,177";
}

template <	typename	ARCH>
OpSub_xlsl<	ARCH>::OpSub_xlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_xlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,129";
}

template <	typename	ARCH>
OpSub_xlsr<	ARCH>::OpSub_xlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_xlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,141";
}

template <	typename	ARCH>
OpSub_xasr<	ARCH>::OpSub_xasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_xasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,117";
}

template <	typename	ARCH>
OpSubs_wuxtb<	ARCH>::OpSubs_wuxtb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_wuxtb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,394";
}

template <	typename	ARCH>
OpSubs_wuxth<	ARCH>::OpSubs_wuxth(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_wuxth")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,398";
}

template <	typename	ARCH>
OpSubs_wuxtw<	ARCH>::OpSubs_wuxtw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_wuxtw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,401";
}

template <	typename	ARCH>
OpSubs_wuxtx<	ARCH>::OpSubs_wuxtx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_wuxtx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,406";
}

template <	typename	ARCH>
OpSubs_wsxtb<	ARCH>::OpSubs_wsxtb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_wsxtb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,378";
}

template <	typename	ARCH>
OpSubs_wsxth<	ARCH>::OpSubs_wsxth(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_wsxth")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,382";
}

template <	typename	ARCH>
OpSubs_wsxtw<	ARCH>::OpSubs_wsxtw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_wsxtw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,386";
}

template <	typename	ARCH>
OpSubs_wsxtx<	ARCH>::OpSubs_wsxtx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_wsxtx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,390";
}

template <	typename	ARCH>
OpSubs_xuxtb<	ARCH>::OpSubs_xuxtb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_xuxtb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,422";
}

template <	typename	ARCH>
OpSubs_xuxth<	ARCH>::OpSubs_xuxth(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_xuxth")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,426";
}

template <	typename	ARCH>
OpSubs_xuxtw<	ARCH>::OpSubs_xuxtw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_xuxtw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,430";
}

template <	typename	ARCH>
OpSubs_xuxtx<	ARCH>::OpSubs_xuxtx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_xuxtx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,437";
}

template <	typename	ARCH>
OpSubs_xsxtb<	ARCH>::OpSubs_xsxtb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_xsxtb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,410";
}

template <	typename	ARCH>
OpSubs_xsxth<	ARCH>::OpSubs_xsxth(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_xsxth")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,414";
}

template <	typename	ARCH>
OpSubs_xsxtw<	ARCH>::OpSubs_xsxtw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_xsxtw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,418";
}

template <	typename	ARCH>
OpSubs_xsxtx<	ARCH>::OpSubs_xsxtx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_xsxtx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x7);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = imm >= 5;
	format = "base,434";
}

template <	typename	ARCH>
OpSubs_wi<	ARCH>::OpSubs_wi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_wi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm0 = uint16_t((code >> 10) & 0xfff);
	shl12 = uint8_t((code >> 22) & 0x1);
	imm = shl12 ? (imm0 << 12) : imm0;
	format = "base,22";
}

template <	typename	ARCH>
OpSubs_xi<	ARCH>::OpSubs_xi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_xi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm0 = uint16_t((code >> 10) & 0xfff);
	shl12 = uint8_t((code >> 22) & 0x1);
	imm = shl12 ? (imm0 << 12) : imm0;
	format = "base,31";
}

template <	typename	ARCH>
OpSubs_wlsl<	ARCH>::OpSubs_wlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_wlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,192";
}

template <	typename	ARCH>
OpSubs_wlsr<	ARCH>::OpSubs_wlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_wlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,202";
}

template <	typename	ARCH>
OpSubs_wasr<	ARCH>::OpSubs_wasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_wasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,178";
}

template <	typename	ARCH>
OpSubs_xlsl<	ARCH>::OpSubs_xlsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_xlsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,133";
}

template <	typename	ARCH>
OpSubs_xlsr<	ARCH>::OpSubs_xlsr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_xlsr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,142";
}

template <	typename	ARCH>
OpSubs_xasr<	ARCH>::OpSubs_xasr(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subs_xasr")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 10) & 0x3f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,118";
}

template <	typename	ARCH>
OpSvc<	ARCH>::OpSvc(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "svc")
{
	imm = uint16_t((code >> 5) & 0xffff);
	format = "base,577";
}

template <	typename	ARCH>
OpTb<	ARCH>::OpTb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "tb")
{
	rt = uint8_t(code & 0x1f);
	imm = ((int16_t)(((code >> 5) & 0x3fff) << 2) >> 2) << 2;
	pos0 = uint8_t((code >> 19) & 0x1f);
	bitval = uint8_t((code >> 24) & 0x1);
	pos1 = uint8_t((code >> 31) & 0x1) << 5;
	pos = pos1|pos0;
	format = "base,5";
}

template <	typename	ARCH>
OpUbfm_w<	ARCH>::OpUbfm_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ubfm_w")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imms = uint8_t((code >> 10) & 0x1f);
	immr = uint8_t((code >> 16) & 0x1f);
	format = "base,164";
}

template <	typename	ARCH>
OpUbfm_x<	ARCH>::OpUbfm_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ubfm_x")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imms = uint8_t((code >> 10) & 0x3f);
	immr = uint8_t((code >> 16) & 0x3f);
	format = "base,92";
}

template <	typename	ARCH>
OpUdiv_www<	ARCH>::OpUdiv_www(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "udiv_www")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1471";
}

template <	typename	ARCH>
OpUdiv_xxx<	ARCH>::OpUdiv_xxx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "udiv_xxx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,1618";
}

template <	typename	ARCH>
OpUmaddl_xw<	ARCH>::OpUmaddl_xw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umaddl_xw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	ra = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,237";
}

template <	typename	ARCH>
OpUmsubl_xw<	ARCH>::OpUmsubl_xw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umsubl_xw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	ra = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,238";
}

template <	typename	ARCH>
OpUmulh<	ARCH>::OpUmulh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umulh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	ra = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	format = "base,240";
}

template <	typename	ARCH>
OpCrc32b<	ARCH>::OpCrc32b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "crc32b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpCrc32h<	ARCH>::OpCrc32h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "crc32h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpCrc32w<	ARCH>::OpCrc32w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "crc32w")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpCrc32x<	ARCH>::OpCrc32x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "crc32x")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpCrc32cb<	ARCH>::OpCrc32cb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "crc32cb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpCrc32ch<	ARCH>::OpCrc32ch(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "crc32ch")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpCrc32cw<	ARCH>::OpCrc32cw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "crc32cw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpCrc32cx<	ARCH>::OpCrc32cx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "crc32cx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpCas_w<	ARCH>::OpCas_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cas_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	l = uint8_t((code >> 15) & 0x1);
	rs = uint8_t((code >> 16) & 0x1f);
	a = uint8_t((code >> 22) & 0x1);
}

template <	typename	ARCH>
OpCas_x<	ARCH>::OpCas_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cas_x")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	l = uint8_t((code >> 15) & 0x1);
	rs = uint8_t((code >> 16) & 0x1f);
	a = uint8_t((code >> 22) & 0x1);
}

template <	typename	ARCH>
OpCasb_w<	ARCH>::OpCasb_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "casb_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	l = uint8_t((code >> 15) & 0x1);
	rs = uint8_t((code >> 16) & 0x1f);
	a = uint8_t((code >> 22) & 0x1);
}

template <	typename	ARCH>
OpCash_w<	ARCH>::OpCash_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cash_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	l = uint8_t((code >> 15) & 0x1);
	rs = uint8_t((code >> 16) & 0x1f);
	a = uint8_t((code >> 22) & 0x1);
}

template <	typename	ARCH>
OpCasp_w<	ARCH>::OpCasp_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "casp_w")
{
	rt = uint8_t((code >> 1) & 0xf) << 1;
	rn = uint8_t((code >> 5) & 0x1f);
	l = uint8_t((code >> 15) & 0x1);
	rs = uint8_t((code >> 17) & 0xf) << 1;
	a = uint8_t((code >> 22) & 0x1);
}

template <	typename	ARCH>
OpCasp_x<	ARCH>::OpCasp_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "casp_x")
{
	rt = uint8_t((code >> 1) & 0xf) << 1;
	rn = uint8_t((code >> 5) & 0x1f);
	l = uint8_t((code >> 15) & 0x1);
	rs = uint8_t((code >> 17) & 0xf) << 1;
	a = uint8_t((code >> 22) & 0x1);
	format = "base,1919";
}

template <	typename	ARCH>
OpSwp_w<	ARCH>::OpSwp_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "swp_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	l = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpSwp_x<	ARCH>::OpSwp_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "swp_x")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	l = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpSwpb_w<	ARCH>::OpSwpb_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "swpb_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	l = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpSwph_w<	ARCH>::OpSwph_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "swph_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	l = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstadd_w<	ARCH>::OpLdstadd_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstadd_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstadd_x<	ARCH>::OpLdstadd_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstadd_x")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstaddb_w<	ARCH>::OpLdstaddb_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstaddb_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstaddh_w<	ARCH>::OpLdstaddh_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstaddh_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstclr_w<	ARCH>::OpLdstclr_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstclr_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstclr_x<	ARCH>::OpLdstclr_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstclr_x")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstclrb_w<	ARCH>::OpLdstclrb_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstclrb_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstclrh_w<	ARCH>::OpLdstclrh_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstclrh_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdsteor_w<	ARCH>::OpLdsteor_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldsteor_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdsteor_x<	ARCH>::OpLdsteor_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldsteor_x")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdsteorb_w<	ARCH>::OpLdsteorb_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldsteorb_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdsteorh_w<	ARCH>::OpLdsteorh_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldsteorh_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstset_w<	ARCH>::OpLdstset_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstset_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstset_x<	ARCH>::OpLdstset_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstset_x")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstsetb_w<	ARCH>::OpLdstsetb_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstsetb_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstseth_w<	ARCH>::OpLdstseth_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstseth_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstsmax_w<	ARCH>::OpLdstsmax_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstsmax_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstsmax_x<	ARCH>::OpLdstsmax_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstsmax_x")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstsmaxb_w<	ARCH>::OpLdstsmaxb_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstsmaxb_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstsmaxh_w<	ARCH>::OpLdstsmaxh_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstsmaxh_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstsmin_w<	ARCH>::OpLdstsmin_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstsmin_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstsmin_x<	ARCH>::OpLdstsmin_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstsmin_x")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstsminb_w<	ARCH>::OpLdstsminb_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstsminb_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstsminh_w<	ARCH>::OpLdstsminh_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstsminh_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstumax_w<	ARCH>::OpLdstumax_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstumax_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstumax_x<	ARCH>::OpLdstumax_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstumax_x")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstumaxb_w<	ARCH>::OpLdstumaxb_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstumaxb_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstumaxh_w<	ARCH>::OpLdstumaxh_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstumaxh_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstumin_w<	ARCH>::OpLdstumin_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstumin_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstumin_x<	ARCH>::OpLdstumin_x(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstumin_x")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstuminb_w<	ARCH>::OpLdstuminb_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstuminb_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpLdstuminh_w<	ARCH>::OpLdstuminh_w(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldstuminh_w")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rs = uint8_t((code >> 16) & 0x1f);
	r = uint8_t((code >> 22) & 0x1);
	a = uint8_t((code >> 23) & 0x1);
}

template <	typename	ARCH>
OpBti<	ARCH>::OpBti(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bti")
{
	tt = uint8_t((code >> 6) & 0x3);
}

template <	typename	ARCH>
OpAbs_dd<	ARCH>::OpAbs_dd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "abs_dd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpAbs_vbb<	ARCH>::OpAbs_vbb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "abs_vbb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpAbs_vhh<	ARCH>::OpAbs_vhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "abs_vhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpAbs_vss<	ARCH>::OpAbs_vss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "abs_vss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpAbs_v2d2d<	ARCH>::OpAbs_v2d2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "abs_v2d2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpAdd_d<	ARCH>::OpAdd_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpAdd_vb<	ARCH>::OpAdd_vb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_vb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpAdd_vh<	ARCH>::OpAdd_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpAdd_vs<	ARCH>::OpAdd_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpAdd_v2d<	ARCH>::OpAdd_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "add_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpAddhn2_v16bv8hv8h<	ARCH>::OpAddhn2_v16bv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "addhn2_v16bv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpAddhn2_v4sv2dv2d<	ARCH>::OpAddhn2_v4sv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "addhn2_v4sv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpAddhn2_v8hv4sv4s<	ARCH>::OpAddhn2_v8hv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "addhn2_v8hv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpAddhn_v2sv2dv2d<	ARCH>::OpAddhn_v2sv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "addhn_v2sv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpAddhn_v4hv4sv4s<	ARCH>::OpAddhn_v4hv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "addhn_v4hv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpAddhn_v8bv8hv8h<	ARCH>::OpAddhn_v8bv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "addhn_v8bv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpAddp_d<	ARCH>::OpAddp_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "addp_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpAddp_vb<	ARCH>::OpAddp_vb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "addp_vb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpAddp_vh<	ARCH>::OpAddp_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "addp_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpAddp_vs<	ARCH>::OpAddp_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "addp_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpAddp_v2d<	ARCH>::OpAddp_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "addp_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpAddv_bvb<	ARCH>::OpAddv_bvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "addv_bvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpAddv_hvh<	ARCH>::OpAddv_hvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "addv_hvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpAddv_sv4s<	ARCH>::OpAddv_sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "addv_sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpAesd_v16b16b<	ARCH>::OpAesd_v16b16b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "aesd_v16b16b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpAese_v16b16b<	ARCH>::OpAese_v16b16b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "aese_v16b16b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpAesimc_v16b16b<	ARCH>::OpAesimc_v16b16b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "aesimc_v16b16b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpAesmc_v16b16b<	ARCH>::OpAesmc_v16b16b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "aesmc_v16b16b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpCmeq_d_reg<	ARCH>::OpCmeq_d_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmeq_d_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpCmeq_vb_reg<	ARCH>::OpCmeq_vb_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmeq_vb_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmeq_vh_reg<	ARCH>::OpCmeq_vh_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmeq_vh_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmeq_vs_reg<	ARCH>::OpCmeq_vs_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmeq_vs_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmeq_v2d_reg<	ARCH>::OpCmeq_v2d_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmeq_v2d_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpCmeq_d_zero<	ARCH>::OpCmeq_d_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmeq_d_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpCmeq_vb_zero<	ARCH>::OpCmeq_vb_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmeq_vb_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmeq_vh_zero<	ARCH>::OpCmeq_vh_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmeq_vh_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmeq_vs_zero<	ARCH>::OpCmeq_vs_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmeq_vs_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmeq_v2d_zero<	ARCH>::OpCmeq_v2d_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmeq_v2d_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpCmge_d_reg<	ARCH>::OpCmge_d_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmge_d_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpCmge_vb_reg<	ARCH>::OpCmge_vb_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmge_vb_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmge_vh_reg<	ARCH>::OpCmge_vh_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmge_vh_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmge_vs_reg<	ARCH>::OpCmge_vs_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmge_vs_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmge_v2d_reg<	ARCH>::OpCmge_v2d_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmge_v2d_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpCmge_d_zero<	ARCH>::OpCmge_d_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmge_d_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpCmge_vb_zero<	ARCH>::OpCmge_vb_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmge_vb_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmge_vh_zero<	ARCH>::OpCmge_vh_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmge_vh_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmge_vs_zero<	ARCH>::OpCmge_vs_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmge_vs_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmge_v2d_zero<	ARCH>::OpCmge_v2d_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmge_v2d_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpCmgt_d_reg<	ARCH>::OpCmgt_d_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmgt_d_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpCmgt_vb_reg<	ARCH>::OpCmgt_vb_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmgt_vb_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmgt_vh_reg<	ARCH>::OpCmgt_vh_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmgt_vh_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmgt_vs_reg<	ARCH>::OpCmgt_vs_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmgt_vs_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmgt_v2d_reg<	ARCH>::OpCmgt_v2d_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmgt_v2d_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpCmgt_d_zero<	ARCH>::OpCmgt_d_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmgt_d_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpCmgt_vb_zero<	ARCH>::OpCmgt_vb_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmgt_vb_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmgt_vh_zero<	ARCH>::OpCmgt_vh_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmgt_vh_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmgt_vs_zero<	ARCH>::OpCmgt_vs_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmgt_vs_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmgt_v2d_zero<	ARCH>::OpCmgt_v2d_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmgt_v2d_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpCmhi_d_reg<	ARCH>::OpCmhi_d_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmhi_d_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpCmhi_vb_reg<	ARCH>::OpCmhi_vb_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmhi_vb_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmhi_vh_reg<	ARCH>::OpCmhi_vh_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmhi_vh_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmhi_vs_reg<	ARCH>::OpCmhi_vs_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmhi_vs_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmhi_v2d_reg<	ARCH>::OpCmhi_v2d_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmhi_v2d_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpCmhs_d_reg<	ARCH>::OpCmhs_d_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmhs_d_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpCmhs_vb_reg<	ARCH>::OpCmhs_vb_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmhs_vb_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmhs_vh_reg<	ARCH>::OpCmhs_vh_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmhs_vh_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmhs_vs_reg<	ARCH>::OpCmhs_vs_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmhs_vs_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmhs_v2d_reg<	ARCH>::OpCmhs_v2d_reg(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmhs_v2d_reg")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpCmle_d_zero<	ARCH>::OpCmle_d_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmle_d_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpCmle_vb_zero<	ARCH>::OpCmle_vb_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmle_vb_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmle_vh_zero<	ARCH>::OpCmle_vh_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmle_vh_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmle_vs_zero<	ARCH>::OpCmle_vs_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmle_vs_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmle_v2d_zero<	ARCH>::OpCmle_v2d_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmle_v2d_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpCmlt_d_zero<	ARCH>::OpCmlt_d_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmlt_d_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpCmlt_vb_zero<	ARCH>::OpCmlt_vb_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmlt_vb_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmlt_vh_zero<	ARCH>::OpCmlt_vh_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmlt_vh_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmlt_vs_zero<	ARCH>::OpCmlt_vs_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmlt_vs_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmlt_v2d_zero<	ARCH>::OpCmlt_v2d_zero(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmlt_v2d_zero")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpCmtst_ddd<	ARCH>::OpCmtst_ddd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmtst_ddd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpCmtst_v2dv2dv2d<	ARCH>::OpCmtst_v2dv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmtst_v2dv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpLdp_so<	ARCH>::OpLdp_so(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldp_so")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	imm = ((int16_t)(((code >> 15) & 0x7f) << 9) >> 9) << 2;
	am = uint8_t((code >> 23) & 0x3);
	reject = rt == rt2;
}

template <	typename	ARCH>
OpLdp_do<	ARCH>::OpLdp_do(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldp_do")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	imm = ((int16_t)(((code >> 15) & 0x7f) << 9) >> 9) << 3;
	am = uint8_t((code >> 23) & 0x3);
	reject = rt == rt2;
}

template <	typename	ARCH>
OpLdp_qo<	ARCH>::OpLdp_qo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldp_qo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	imm = ((int16_t)(((code >> 15) & 0x7f) << 9) >> 9) << 4;
	am = uint8_t((code >> 23) & 0x3);
	reject = rt == rt2;
}

template <	typename	ARCH>
OpLdr_bxi<	ARCH>::OpLdr_bxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_bxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	am = uint8_t((code >> 10) & 0x3);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	reject = am == 2;
}

template <	typename	ARCH>
OpLdr_buo<	ARCH>::OpLdr_buo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_buo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff);
}

template <	typename	ARCH>
OpLdr_hxi<	ARCH>::OpLdr_hxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_hxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	am = uint8_t((code >> 10) & 0x3);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	reject = am == 2;
}

template <	typename	ARCH>
OpLdr_huo<	ARCH>::OpLdr_huo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_huo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff) << 1;
}

template <	typename	ARCH>
OpLdr_sxi<	ARCH>::OpLdr_sxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_sxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	am = uint8_t((code >> 10) & 0x3);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	reject = am == 2;
}

template <	typename	ARCH>
OpLdr_suo<	ARCH>::OpLdr_suo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_suo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff) << 2;
}

template <	typename	ARCH>
OpLdr_dxi<	ARCH>::OpLdr_dxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_dxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	am = uint8_t((code >> 10) & 0x3);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	reject = am == 2;
}

template <	typename	ARCH>
OpLdr_duo<	ARCH>::OpLdr_duo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_duo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff) << 3;
}

template <	typename	ARCH>
OpLdr_qxi<	ARCH>::OpLdr_qxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_qxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	am = uint8_t((code >> 10) & 0x3);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	reject = am == 2;
}

template <	typename	ARCH>
OpLdr_quo<	ARCH>::OpLdr_quo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_quo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff) << 4;
}

template <	typename	ARCH>
OpLdr_slit<	ARCH>::OpLdr_slit(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_slit")
{
	rt = uint8_t(code & 0x1f);
	imm = ((int32_t)(((code >> 5) & 0x7ffff) << 13) >> 13) << 2;
}

template <	typename	ARCH>
OpLdr_dlit<	ARCH>::OpLdr_dlit(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_dlit")
{
	rt = uint8_t(code & 0x1f);
	imm = ((int32_t)(((code >> 5) & 0x7ffff) << 13) >> 13) << 2;
}

template <	typename	ARCH>
OpLdr_qlit<	ARCH>::OpLdr_qlit(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_qlit")
{
	rt = uint8_t(code & 0x1f);
	imm = ((int32_t)(((code >> 5) & 0x7ffff) << 13) >> 13) << 2;
}

template <	typename	ARCH>
OpLdr_bxwu<	ARCH>::OpLdr_bxwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_bxwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*0;
}

template <	typename	ARCH>
OpLdr_bxxu<	ARCH>::OpLdr_bxxu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_bxxu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*0;
}

template <	typename	ARCH>
OpLdr_bxws<	ARCH>::OpLdr_bxws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_bxws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*0;
}

template <	typename	ARCH>
OpLdr_bxxs<	ARCH>::OpLdr_bxxs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_bxxs")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*0;
}

template <	typename	ARCH>
OpLdr_hxwu<	ARCH>::OpLdr_hxwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_hxwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*1;
}

template <	typename	ARCH>
OpLdr_hxxu<	ARCH>::OpLdr_hxxu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_hxxu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*1;
}

template <	typename	ARCH>
OpLdr_hxws<	ARCH>::OpLdr_hxws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_hxws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*1;
}

template <	typename	ARCH>
OpLdr_hxxs<	ARCH>::OpLdr_hxxs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_hxxs")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*1;
}

template <	typename	ARCH>
OpLdr_sxwu<	ARCH>::OpLdr_sxwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_sxwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*2;
}

template <	typename	ARCH>
OpLdr_sxxu<	ARCH>::OpLdr_sxxu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_sxxu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*2;
}

template <	typename	ARCH>
OpLdr_sxws<	ARCH>::OpLdr_sxws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_sxws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*2;
}

template <	typename	ARCH>
OpLdr_sxxs<	ARCH>::OpLdr_sxxs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_sxxs")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*2;
}

template <	typename	ARCH>
OpLdr_dxwu<	ARCH>::OpLdr_dxwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_dxwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*3;
}

template <	typename	ARCH>
OpLdr_dxxu<	ARCH>::OpLdr_dxxu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_dxxu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*3;
}

template <	typename	ARCH>
OpLdr_dxws<	ARCH>::OpLdr_dxws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_dxws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*3;
}

template <	typename	ARCH>
OpLdr_dxxs<	ARCH>::OpLdr_dxxs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_dxxs")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*3;
}

template <	typename	ARCH>
OpLdr_qxwu<	ARCH>::OpLdr_qxwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_qxwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*4;
}

template <	typename	ARCH>
OpLdr_qxxu<	ARCH>::OpLdr_qxxu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_qxxu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*4;
}

template <	typename	ARCH>
OpLdr_qxws<	ARCH>::OpLdr_qxws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_qxws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*4;
}

template <	typename	ARCH>
OpLdr_qxxs<	ARCH>::OpLdr_qxxs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldr_qxxs")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*4;
}

template <	typename	ARCH>
OpMov_vbii<	ARCH>::OpMov_vbii(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mov_vbii")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index2 = uint8_t((code >> 11) & 0xf);
	index1 = uint8_t((code >> 17) & 0xf);
}

template <	typename	ARCH>
OpMov_vhii<	ARCH>::OpMov_vhii(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mov_vhii")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index2 = uint8_t((code >> 12) & 0x7);
	index1 = uint8_t((code >> 18) & 0x7);
}

template <	typename	ARCH>
OpMov_vsii<	ARCH>::OpMov_vsii(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mov_vsii")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index2 = uint8_t((code >> 13) & 0x3);
	index1 = uint8_t((code >> 19) & 0x3);
}

template <	typename	ARCH>
OpMov_vdii<	ARCH>::OpMov_vdii(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mov_vdii")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index2 = uint8_t((code >> 14) & 0x1);
	index1 = uint8_t((code >> 20) & 0x1);
}

template <	typename	ARCH>
OpIns_vbw<	ARCH>::OpIns_vbw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ins_vbw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 17) & 0xf);
}

template <	typename	ARCH>
OpIns_vhw<	ARCH>::OpIns_vhw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ins_vhw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 18) & 0x7);
}

template <	typename	ARCH>
OpIns_vsw<	ARCH>::OpIns_vsw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ins_vsw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 19) & 0x3);
}

template <	typename	ARCH>
OpIns_vdx<	ARCH>::OpIns_vdx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ins_vdx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 20) & 0x1);
}

template <	typename	ARCH>
OpPmull<	ARCH>::OpPmull(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "pmull")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpPmull2<	ARCH>::OpPmull2(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "pmull2")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpPmull2_v8hv16bv16b<	ARCH>::OpPmull2_v8hv16bv16b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "pmull2_v8hv16bv16b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpPmull_v8hv8bv8b<	ARCH>::OpPmull_v8hv8bv8b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "pmull_v8hv8bv8b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpRaddhn2_v16bv8hv8h<	ARCH>::OpRaddhn2_v16bv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "raddhn2_v16bv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpRaddhn2_v4sv2dv2d<	ARCH>::OpRaddhn2_v4sv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "raddhn2_v4sv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpRaddhn2_v8hv4sv4s<	ARCH>::OpRaddhn2_v8hv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "raddhn2_v8hv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpRaddhn_v2sv2dv2d<	ARCH>::OpRaddhn_v2sv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "raddhn_v2sv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpRaddhn_v4hv4sv4s<	ARCH>::OpRaddhn_v4hv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "raddhn_v4hv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpRaddhn_v8bv8hv8h<	ARCH>::OpRaddhn_v8bv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "raddhn_v8bv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpRshrn2_v16b8hi<	ARCH>::OpRshrn2_v16b8hi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rshrn2_v16b8hi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x7);
	shift = 8 - lro;
	round =  uint32_t(1) << (shift - 1);
}

template <	typename	ARCH>
OpRshrn2_v4s2di<	ARCH>::OpRshrn2_v4s2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rshrn2_v4s2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	shift = 32 - lro;
	round =  uint64_t(1) << (shift - 1);
}

template <	typename	ARCH>
OpRshrn2_v8h4si<	ARCH>::OpRshrn2_v8h4si(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rshrn2_v8h4si")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	shift = 16 - lro;
	round =  uint32_t(1) << (shift - 1);
}

template <	typename	ARCH>
OpRshrn_v2s2di<	ARCH>::OpRshrn_v2s2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rshrn_v2s2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	shift = 32 - lro;
	round =  uint64_t(1) << (shift - 1);
}

template <	typename	ARCH>
OpRshrn_v4h4si<	ARCH>::OpRshrn_v4h4si(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rshrn_v4h4si")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	shift = 16 - lro;
	round =  uint32_t(1) << (shift - 1);
}

template <	typename	ARCH>
OpRshrn_v8b8hi<	ARCH>::OpRshrn_v8b8hi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rshrn_v8b8hi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x7);
	shift = 8 - lro;
	round =  uint16_t(1) << (shift - 1);
}

template <	typename	ARCH>
OpRsubhn2_v16bv8hv8h<	ARCH>::OpRsubhn2_v16bv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rsubhn2_v16bv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpRsubhn2_v4sv2dv2d<	ARCH>::OpRsubhn2_v4sv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rsubhn2_v4sv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpRsubhn2_v8hv4sv4s<	ARCH>::OpRsubhn2_v8hv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rsubhn2_v8hv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpRsubhn_v2sv2dv2d<	ARCH>::OpRsubhn_v2sv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rsubhn_v2sv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpRsubhn_v4hv4sv4s<	ARCH>::OpRsubhn_v4hv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rsubhn_v4hv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpRsubhn_v8bv8hv8h<	ARCH>::OpRsubhn_v8bv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rsubhn_v8bv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSabal2_v2dv4sv4s<	ARCH>::OpSabal2_v2dv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sabal2_v2dv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSabal2_v4sv8hv8h<	ARCH>::OpSabal2_v4sv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sabal2_v4sv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSabal2_v8hv16bv16b<	ARCH>::OpSabal2_v8hv16bv16b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sabal2_v8hv16bv16b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSabal_v2dv2sv2s<	ARCH>::OpSabal_v2dv2sv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sabal_v2dv2sv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSabal_v4sv4hv4h<	ARCH>::OpSabal_v4sv4hv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sabal_v4sv4hv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSabal_v8hv8bv8b<	ARCH>::OpSabal_v8hv8bv8b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sabal_v8hv8bv8b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSabdl2_v2dv4sv4s<	ARCH>::OpSabdl2_v2dv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sabdl2_v2dv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSabdl2_v4sv8hv8h<	ARCH>::OpSabdl2_v4sv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sabdl2_v4sv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSabdl2_v8hv16bv16b<	ARCH>::OpSabdl2_v8hv16bv16b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sabdl2_v8hv16bv16b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSabdl_v2dv2sv2s<	ARCH>::OpSabdl_v2dv2sv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sabdl_v2dv2sv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSabdl_v4sv4hv4h<	ARCH>::OpSabdl_v4sv4hv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sabdl_v4sv4hv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSabdl_v8hv8bv8b<	ARCH>::OpSabdl_v8hv8bv8b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sabdl_v8hv8bv8b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSaddl2_v2dv4sv4s<	ARCH>::OpSaddl2_v2dv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "saddl2_v2dv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSaddl2_v4sv8hv8h<	ARCH>::OpSaddl2_v4sv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "saddl2_v4sv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSaddl2_v8hv16bv16b<	ARCH>::OpSaddl2_v8hv16bv16b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "saddl2_v8hv16bv16b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSaddl_v2dv2sv2s<	ARCH>::OpSaddl_v2dv2sv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "saddl_v2dv2sv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSaddl_v4sv4hv4h<	ARCH>::OpSaddl_v4sv4hv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "saddl_v4sv4hv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSaddl_v8hv8bv8b<	ARCH>::OpSaddl_v8hv8bv8b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "saddl_v8hv8bv8b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSaddlv_dv4s<	ARCH>::OpSaddlv_dv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "saddlv_dv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSaddw2_v2dv2dv4s<	ARCH>::OpSaddw2_v2dv2dv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "saddw2_v2dv2dv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSaddw2_v4sv4sv8h<	ARCH>::OpSaddw2_v4sv4sv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "saddw2_v4sv4sv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSaddw2_v8hv8hv16b<	ARCH>::OpSaddw2_v8hv8hv16b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "saddw2_v8hv8hv16b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSaddw_v2dv2dv2s<	ARCH>::OpSaddw_v2dv2dv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "saddw_v2dv2dv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSaddw_v4sv4sv4h<	ARCH>::OpSaddw_v4sv4sv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "saddw_v4sv4sv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSaddw_v8hv8hv8b<	ARCH>::OpSaddw_v8hv8hv8b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "saddw_v8hv8hv8b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSha1c<	ARCH>::OpSha1c(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sha1c")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSha1h_ss<	ARCH>::OpSha1h_ss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sha1h_ss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSha1m<	ARCH>::OpSha1m(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sha1m")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSha1p<	ARCH>::OpSha1p(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sha1p")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSha1su0_v4sv4sv4s<	ARCH>::OpSha1su0_v4sv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sha1su0_v4sv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSha1su1_v4s4s<	ARCH>::OpSha1su1_v4s4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sha1su1_v4s4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSha256h<	ARCH>::OpSha256h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sha256h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSha256h2<	ARCH>::OpSha256h2(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sha256h2")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSha256su0_v4s4s<	ARCH>::OpSha256su0_v4s4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sha256su0_v4s4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSha256su1_v4sv4sv4s<	ARCH>::OpSha256su1_v4sv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sha256su1_v4sv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpShll_v8h<	ARCH>::OpShll_v8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "shll_v8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpShll_v4s<	ARCH>::OpShll_v4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "shll_v4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpShll_v2d<	ARCH>::OpShll_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "shll_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpShrn2_v16b8hi<	ARCH>::OpShrn2_v16b8hi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "shrn2_v16b8hi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x7);
	shift = 8 - lro;
}

template <	typename	ARCH>
OpShrn2_v4s2di<	ARCH>::OpShrn2_v4s2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "shrn2_v4s2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	shift = 32 - lro;
}

template <	typename	ARCH>
OpShrn2_v8h4si<	ARCH>::OpShrn2_v8h4si(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "shrn2_v8h4si")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	shift = 16 - lro;
}

template <	typename	ARCH>
OpShrn_v2s2di<	ARCH>::OpShrn_v2s2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "shrn_v2s2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	shift = 32 - lro;
}

template <	typename	ARCH>
OpShrn_v4h4si<	ARCH>::OpShrn_v4h4si(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "shrn_v4h4si")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	shift = 16 - lro;
}

template <	typename	ARCH>
OpShrn_v8b8hi<	ARCH>::OpShrn_v8b8hi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "shrn_v8b8hi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x7);
	shift = 8 - lro;
}

template <	typename	ARCH>
OpSmaxv_bvb<	ARCH>::OpSmaxv_bvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smaxv_bvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSmaxv_hvh<	ARCH>::OpSmaxv_hvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smaxv_hvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSmaxv_sv4s<	ARCH>::OpSmaxv_sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smaxv_sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSminv_bvb<	ARCH>::OpSminv_bvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sminv_bvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSminv_hvh<	ARCH>::OpSminv_hvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sminv_hvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSminv_sv4s<	ARCH>::OpSminv_sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sminv_sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUmaxv_bvb<	ARCH>::OpUmaxv_bvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umaxv_bvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUmaxv_hvh<	ARCH>::OpUmaxv_hvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umaxv_hvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUmaxv_sv4s<	ARCH>::OpUmaxv_sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umaxv_sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUminv_bvb<	ARCH>::OpUminv_bvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uminv_bvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUminv_hvh<	ARCH>::OpUminv_hvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uminv_hvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUminv_sv4s<	ARCH>::OpUminv_sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uminv_sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSmlal2_v2dv4sv4s<	ARCH>::OpSmlal2_v2dv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smlal2_v2dv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSmlal2_v2dv4svsi<	ARCH>::OpSmlal2_v2dv4svsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smlal2_v2dv4svsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpSmlal2_v4sv8hv8h<	ARCH>::OpSmlal2_v4sv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smlal2_v4sv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSmlal2_v4sv8hvhi<	ARCH>::OpSmlal2_v4sv8hvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smlal2_v4sv8hvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpSmlal2_v8hv16bv16b<	ARCH>::OpSmlal2_v8hv16bv16b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smlal2_v8hv16bv16b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSmlal_v2dv2sv2s<	ARCH>::OpSmlal_v2dv2sv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smlal_v2dv2sv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSmlal_v2dv2svsi<	ARCH>::OpSmlal_v2dv2svsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smlal_v2dv2svsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpSmlal_v4sv4hv4h<	ARCH>::OpSmlal_v4sv4hv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smlal_v4sv4hv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSmlal_v4sv4hvhi<	ARCH>::OpSmlal_v4sv4hvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smlal_v4sv4hvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpSmlal_v8hv8bv8b<	ARCH>::OpSmlal_v8hv8bv8b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smlal_v8hv8bv8b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSmlsl2_v2dv4sv4s<	ARCH>::OpSmlsl2_v2dv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smlsl2_v2dv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSmlsl2_v2dv4svsi<	ARCH>::OpSmlsl2_v2dv4svsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smlsl2_v2dv4svsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpSmlsl2_v4sv8hv8h<	ARCH>::OpSmlsl2_v4sv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smlsl2_v4sv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSmlsl2_v4sv8hvhi<	ARCH>::OpSmlsl2_v4sv8hvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smlsl2_v4sv8hvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpSmlsl2_v8hv16bv16b<	ARCH>::OpSmlsl2_v8hv16bv16b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smlsl2_v8hv16bv16b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSmlsl_v2dv2sv2s<	ARCH>::OpSmlsl_v2dv2sv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smlsl_v2dv2sv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSmlsl_v2dv2svsi<	ARCH>::OpSmlsl_v2dv2svsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smlsl_v2dv2svsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpSmlsl_v4sv4hv4h<	ARCH>::OpSmlsl_v4sv4hv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smlsl_v4sv4hv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSmlsl_v4sv4hvhi<	ARCH>::OpSmlsl_v4sv4hvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smlsl_v4sv4hvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpSmlsl_v8hv8bv8b<	ARCH>::OpSmlsl_v8hv8bv8b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smlsl_v8hv8bv8b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSmov_wvb<	ARCH>::OpSmov_wvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smov_wvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 17) & 0xf);
}

template <	typename	ARCH>
OpSmov_wvh<	ARCH>::OpSmov_wvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smov_wvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 18) & 0x7);
}

template <	typename	ARCH>
OpSmov_xvb<	ARCH>::OpSmov_xvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smov_xvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 17) & 0xf);
}

template <	typename	ARCH>
OpSmov_xvh<	ARCH>::OpSmov_xvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smov_xvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 18) & 0x7);
}

template <	typename	ARCH>
OpSmov_xvs<	ARCH>::OpSmov_xvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smov_xvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 19) & 0x3);
}

template <	typename	ARCH>
OpSmull2_v2dv4sv4s<	ARCH>::OpSmull2_v2dv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smull2_v2dv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSmull2_v2dv4svsi<	ARCH>::OpSmull2_v2dv4svsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smull2_v2dv4svsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpSmull2_v4sv8hv8h<	ARCH>::OpSmull2_v4sv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smull2_v4sv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSmull2_v4sv8hvhi<	ARCH>::OpSmull2_v4sv8hvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smull2_v4sv8hvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpSmull2_v8hv16bv16b<	ARCH>::OpSmull2_v8hv16bv16b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smull2_v8hv16bv16b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSmull_v2dv2sv2s<	ARCH>::OpSmull_v2dv2sv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smull_v2dv2sv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSmull_v2dv2svsi<	ARCH>::OpSmull_v2dv2svsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smull_v2dv2svsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpSmull_v4sv4hv4h<	ARCH>::OpSmull_v4sv4hv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smull_v4sv4hv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSmull_v4sv4hvhi<	ARCH>::OpSmull_v4sv4hvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smull_v4sv4hvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpSmull_v8hv8bv8b<	ARCH>::OpSmull_v8hv8bv8b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smull_v8hv8bv8b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqabs_bb<	ARCH>::OpSqabs_bb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqabs_bb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqabs_dd<	ARCH>::OpSqabs_dd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqabs_dd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqabs_hh<	ARCH>::OpSqabs_hh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqabs_hh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqabs_ss<	ARCH>::OpSqabs_ss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqabs_ss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqabs_v2d2d<	ARCH>::OpSqabs_v2d2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqabs_v2d2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqadd_bbb<	ARCH>::OpSqadd_bbb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqadd_bbb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqadd_ddd<	ARCH>::OpSqadd_ddd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqadd_ddd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqadd_hhh<	ARCH>::OpSqadd_hhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqadd_hhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqadd_sss<	ARCH>::OpSqadd_sss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqadd_sss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqadd_v2dv2dv2d<	ARCH>::OpSqadd_v2dv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqadd_v2dv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqdmlal2_v2dv4sv4s<	ARCH>::OpSqdmlal2_v2dv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlal2_v2dv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqdmlal2_v2dv4svsi<	ARCH>::OpSqdmlal2_v2dv4svsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlal2_v2dv4svsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqdmlal2_v4sv8hv8h<	ARCH>::OpSqdmlal2_v4sv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlal2_v4sv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqdmlal2_v4sv8hvhi<	ARCH>::OpSqdmlal2_v4sv8hvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlal2_v4sv8hvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqdmlal_dss<	ARCH>::OpSqdmlal_dss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlal_dss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqdmlal_dsvsi<	ARCH>::OpSqdmlal_dsvsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlal_dsvsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqdmlal_shh<	ARCH>::OpSqdmlal_shh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlal_shh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqdmlal_shvhi<	ARCH>::OpSqdmlal_shvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlal_shvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqdmlal_v2dv2sv2s<	ARCH>::OpSqdmlal_v2dv2sv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlal_v2dv2sv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqdmlal_v2dv2svsi<	ARCH>::OpSqdmlal_v2dv2svsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlal_v2dv2svsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqdmlal_v4sv4hv4h<	ARCH>::OpSqdmlal_v4sv4hv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlal_v4sv4hv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqdmlal_v4sv4hvhi<	ARCH>::OpSqdmlal_v4sv4hvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlal_v4sv4hvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqdmlsl2_v2dv4sv4s<	ARCH>::OpSqdmlsl2_v2dv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlsl2_v2dv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqdmlsl2_v2dv4svsi<	ARCH>::OpSqdmlsl2_v2dv4svsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlsl2_v2dv4svsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqdmlsl2_v4sv8hv8h<	ARCH>::OpSqdmlsl2_v4sv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlsl2_v4sv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqdmlsl2_v4sv8hvhi<	ARCH>::OpSqdmlsl2_v4sv8hvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlsl2_v4sv8hvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqdmlsl_dss<	ARCH>::OpSqdmlsl_dss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlsl_dss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqdmlsl_dsvsi<	ARCH>::OpSqdmlsl_dsvsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlsl_dsvsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqdmlsl_shh<	ARCH>::OpSqdmlsl_shh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlsl_shh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqdmlsl_shvhi<	ARCH>::OpSqdmlsl_shvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlsl_shvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqdmlsl_v2dv2sv2s<	ARCH>::OpSqdmlsl_v2dv2sv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlsl_v2dv2sv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqdmlsl_v2dv2svsi<	ARCH>::OpSqdmlsl_v2dv2svsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlsl_v2dv2svsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqdmlsl_v4sv4hv4h<	ARCH>::OpSqdmlsl_v4sv4hv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlsl_v4sv4hv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqdmlsl_v4sv4hvhi<	ARCH>::OpSqdmlsl_v4sv4hvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmlsl_v4sv4hvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqdmulh_hhh<	ARCH>::OpSqdmulh_hhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmulh_hhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqdmulh_hhvhi<	ARCH>::OpSqdmulh_hhvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmulh_hhvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqdmulh_sss<	ARCH>::OpSqdmulh_sss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmulh_sss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqdmulh_ssvsi<	ARCH>::OpSqdmulh_ssvsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmulh_ssvsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqdmull2_v2dv4sv4s<	ARCH>::OpSqdmull2_v2dv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmull2_v2dv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqdmull2_v2dv4svsi<	ARCH>::OpSqdmull2_v2dv4svsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmull2_v2dv4svsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqdmull2_v4sv8hv8h<	ARCH>::OpSqdmull2_v4sv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmull2_v4sv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqdmull2_v4sv8hvhi<	ARCH>::OpSqdmull2_v4sv8hvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmull2_v4sv8hvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqdmull_dss<	ARCH>::OpSqdmull_dss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmull_dss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqdmull_dsvsi<	ARCH>::OpSqdmull_dsvsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmull_dsvsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqdmull_shh<	ARCH>::OpSqdmull_shh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmull_shh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqdmull_shvhi<	ARCH>::OpSqdmull_shvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmull_shvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqdmull_v2dv2sv2s<	ARCH>::OpSqdmull_v2dv2sv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmull_v2dv2sv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqdmull_v2dv2svsi<	ARCH>::OpSqdmull_v2dv2svsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmull_v2dv2svsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqdmull_v4sv4hv4h<	ARCH>::OpSqdmull_v4sv4hv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmull_v4sv4hv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqdmull_v4sv4hvhi<	ARCH>::OpSqdmull_v4sv4hvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmull_v4sv4hvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqneg_bb<	ARCH>::OpSqneg_bb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqneg_bb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqneg_dd<	ARCH>::OpSqneg_dd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqneg_dd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqneg_hh<	ARCH>::OpSqneg_hh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqneg_hh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqneg_ss<	ARCH>::OpSqneg_ss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqneg_ss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqneg_v2dv2d<	ARCH>::OpSqneg_v2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqneg_v2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqrdmulh_hhh<	ARCH>::OpSqrdmulh_hhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrdmulh_hhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqrdmulh_hhvhi<	ARCH>::OpSqrdmulh_hhvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrdmulh_hhvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqrdmulh_sss<	ARCH>::OpSqrdmulh_sss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrdmulh_sss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqrdmulh_ssvsi<	ARCH>::OpSqrdmulh_ssvsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrdmulh_ssvsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqrshl_bbb<	ARCH>::OpSqrshl_bbb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshl_bbb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqrshl_ddd<	ARCH>::OpSqrshl_ddd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshl_ddd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqrshl_hhh<	ARCH>::OpSqrshl_hhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshl_hhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqrshl_sss<	ARCH>::OpSqrshl_sss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshl_sss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqrshl_v2dv2dv2d<	ARCH>::OpSqrshl_v2dv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshl_v2dv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqrshrn2_v16b8hi<	ARCH>::OpSqrshrn2_v16b8hi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshrn2_v16b8hi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x7);
	shift = 8 - lro;
}

template <	typename	ARCH>
OpSqrshrn2_v4s2di<	ARCH>::OpSqrshrn2_v4s2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshrn2_v4s2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	shift = 32 - lro;
}

template <	typename	ARCH>
OpSqrshrn2_v8h4si<	ARCH>::OpSqrshrn2_v8h4si(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshrn2_v8h4si")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	shift = 16 - lro;
}

template <	typename	ARCH>
OpSqrshrn_bhi<	ARCH>::OpSqrshrn_bhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshrn_bhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x7);
	shift = 8 - lro;
}

template <	typename	ARCH>
OpSqrshrn_hsi<	ARCH>::OpSqrshrn_hsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshrn_hsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	shift = 16 - lro;
}

template <	typename	ARCH>
OpSqrshrn_sdi<	ARCH>::OpSqrshrn_sdi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshrn_sdi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	shift = 32 - lro;
}

template <	typename	ARCH>
OpSqrshrn_v2s2di<	ARCH>::OpSqrshrn_v2s2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshrn_v2s2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	shift = 32 - lro;
}

template <	typename	ARCH>
OpSqrshrn_v4h4si<	ARCH>::OpSqrshrn_v4h4si(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshrn_v4h4si")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	shift = 16 - lro;
}

template <	typename	ARCH>
OpSqrshrn_v8b8hi<	ARCH>::OpSqrshrn_v8b8hi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshrn_v8b8hi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x7);
	shift = 8 - lro;
}

template <	typename	ARCH>
OpSqrshrun2_v16b8hi<	ARCH>::OpSqrshrun2_v16b8hi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshrun2_v16b8hi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x7);
	shift = 8 - lro;
}

template <	typename	ARCH>
OpSqrshrun2_v4s2di<	ARCH>::OpSqrshrun2_v4s2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshrun2_v4s2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	shift = 32 - lro;
}

template <	typename	ARCH>
OpSqrshrun2_v8h4si<	ARCH>::OpSqrshrun2_v8h4si(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshrun2_v8h4si")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	shift = 16 - lro;
}

template <	typename	ARCH>
OpSqrshrun_bhi<	ARCH>::OpSqrshrun_bhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshrun_bhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x7);
	shift = 8 - lro;
}

template <	typename	ARCH>
OpSqrshrun_hsi<	ARCH>::OpSqrshrun_hsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshrun_hsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	shift = 16 - lro;
}

template <	typename	ARCH>
OpSqrshrun_sdi<	ARCH>::OpSqrshrun_sdi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshrun_sdi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	shift = 32 - lro;
}

template <	typename	ARCH>
OpSqrshrun_v2s2di<	ARCH>::OpSqrshrun_v2s2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshrun_v2s2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	shift = 32 - lro;
}

template <	typename	ARCH>
OpSqrshrun_v4h4si<	ARCH>::OpSqrshrun_v4h4si(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshrun_v4h4si")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	shift = 16 - lro;
}

template <	typename	ARCH>
OpSqrshrun_v8b8hi<	ARCH>::OpSqrshrun_v8b8hi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshrun_v8b8hi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x7);
	shift = 8 - lro;
}

template <	typename	ARCH>
OpSqshl_bbb<	ARCH>::OpSqshl_bbb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshl_bbb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqshl_bbi<	ARCH>::OpSqshl_bbi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshl_bbi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	shift = uint8_t((code >> 16) & 0x7);
}

template <	typename	ARCH>
OpSqshl_ddd<	ARCH>::OpSqshl_ddd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshl_ddd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqshl_ddi<	ARCH>::OpSqshl_ddi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshl_ddi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	shift = uint8_t((code >> 16) & 0x3f);
}

template <	typename	ARCH>
OpSqshl_hhh<	ARCH>::OpSqshl_hhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshl_hhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqshl_hhi<	ARCH>::OpSqshl_hhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshl_hhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	shift = uint8_t((code >> 16) & 0xf);
}

template <	typename	ARCH>
OpSqshl_ssi<	ARCH>::OpSqshl_ssi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshl_ssi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	shift = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqshl_sss<	ARCH>::OpSqshl_sss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshl_sss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqshl_v2d2di<	ARCH>::OpSqshl_v2d2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshl_v2d2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 16) & 0x3f);
}

template <	typename	ARCH>
OpSqshl_v2dv2dv2d<	ARCH>::OpSqshl_v2dv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshl_v2dv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqshlu_bbi<	ARCH>::OpSqshlu_bbi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshlu_bbi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	shift = uint8_t((code >> 16) & 0x7);
}

template <	typename	ARCH>
OpSqshlu_ddi<	ARCH>::OpSqshlu_ddi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshlu_ddi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	shift = uint8_t((code >> 16) & 0x3f);
}

template <	typename	ARCH>
OpSqshlu_hhi<	ARCH>::OpSqshlu_hhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshlu_hhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	shift = uint8_t((code >> 16) & 0xf);
}

template <	typename	ARCH>
OpSqshlu_ssi<	ARCH>::OpSqshlu_ssi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshlu_ssi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	shift = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqshlu_v2d2di<	ARCH>::OpSqshlu_v2d2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshlu_v2d2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	shift = uint8_t((code >> 16) & 0x3f);
}

template <	typename	ARCH>
OpSqshrn2_v16b8hi<	ARCH>::OpSqshrn2_v16b8hi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshrn2_v16b8hi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x7);
	shift = 8 - lro;
}

template <	typename	ARCH>
OpSqshrn2_v4s2di<	ARCH>::OpSqshrn2_v4s2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshrn2_v4s2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	shift = 32 - lro;
}

template <	typename	ARCH>
OpSqshrn2_v8h4si<	ARCH>::OpSqshrn2_v8h4si(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshrn2_v8h4si")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	shift = 16 - lro;
}

template <	typename	ARCH>
OpSqshrn_bhi<	ARCH>::OpSqshrn_bhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshrn_bhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x7);
	shift = 8 - lro;
}

template <	typename	ARCH>
OpSqshrn_hsi<	ARCH>::OpSqshrn_hsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshrn_hsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	shift = 16 - lro;
}

template <	typename	ARCH>
OpSqshrn_sdi<	ARCH>::OpSqshrn_sdi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshrn_sdi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	shift = 32 - lro;
}

template <	typename	ARCH>
OpSqshrn_v2s2di<	ARCH>::OpSqshrn_v2s2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshrn_v2s2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	shift = 32 - lro;
}

template <	typename	ARCH>
OpSqshrn_v4h4si<	ARCH>::OpSqshrn_v4h4si(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshrn_v4h4si")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	shift = 16 - lro;
}

template <	typename	ARCH>
OpSqshrn_v8b8hi<	ARCH>::OpSqshrn_v8b8hi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshrn_v8b8hi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x7);
	shift = 8 - lro;
}

template <	typename	ARCH>
OpSqshrun2_v16b8hi<	ARCH>::OpSqshrun2_v16b8hi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshrun2_v16b8hi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x7);
	shift = 8 - lro;
}

template <	typename	ARCH>
OpSqshrun2_v4s2di<	ARCH>::OpSqshrun2_v4s2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshrun2_v4s2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	shift = 32 - lro;
}

template <	typename	ARCH>
OpSqshrun2_v8h4si<	ARCH>::OpSqshrun2_v8h4si(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshrun2_v8h4si")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	shift = 16 - lro;
}

template <	typename	ARCH>
OpSqshrun_bhi<	ARCH>::OpSqshrun_bhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshrun_bhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x7);
	shift = 8 - lro;
}

template <	typename	ARCH>
OpSqshrun_hsi<	ARCH>::OpSqshrun_hsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshrun_hsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	shift = 16 - lro;
}

template <	typename	ARCH>
OpSqshrun_sdi<	ARCH>::OpSqshrun_sdi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshrun_sdi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	shift = 32 - lro;
}

template <	typename	ARCH>
OpSqshrun_v2s2di<	ARCH>::OpSqshrun_v2s2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshrun_v2s2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	shift = 32 - lro;
}

template <	typename	ARCH>
OpSqshrun_v4h4si<	ARCH>::OpSqshrun_v4h4si(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshrun_v4h4si")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	shift = 16 - lro;
}

template <	typename	ARCH>
OpSqshrun_v8b8hi<	ARCH>::OpSqshrun_v8b8hi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshrun_v8b8hi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x7);
	shift = 8 - lro;
}

template <	typename	ARCH>
OpSqsub_bbb<	ARCH>::OpSqsub_bbb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqsub_bbb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqsub_ddd<	ARCH>::OpSqsub_ddd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqsub_ddd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqsub_hhh<	ARCH>::OpSqsub_hhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqsub_hhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqsub_sss<	ARCH>::OpSqsub_sss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqsub_sss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqsub_v2dv2dv2d<	ARCH>::OpSqsub_v2dv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqsub_v2dv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSqxtn2_v16b8h<	ARCH>::OpSqxtn2_v16b8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqxtn2_v16b8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqxtn2_v4s2d<	ARCH>::OpSqxtn2_v4s2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqxtn2_v4s2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqxtn2_v8h4s<	ARCH>::OpSqxtn2_v8h4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqxtn2_v8h4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqxtn_bh<	ARCH>::OpSqxtn_bh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqxtn_bh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqxtn_hs<	ARCH>::OpSqxtn_hs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqxtn_hs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqxtn_sd<	ARCH>::OpSqxtn_sd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqxtn_sd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqxtn_v2s2d<	ARCH>::OpSqxtn_v2s2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqxtn_v2s2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqxtn_v4h4s<	ARCH>::OpSqxtn_v4h4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqxtn_v4h4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqxtn_v8b8h<	ARCH>::OpSqxtn_v8b8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqxtn_v8b8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqxtun2_v16b8h<	ARCH>::OpSqxtun2_v16b8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqxtun2_v16b8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqxtun2_v4s2d<	ARCH>::OpSqxtun2_v4s2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqxtun2_v4s2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqxtun2_v8h4s<	ARCH>::OpSqxtun2_v8h4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqxtun2_v8h4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqxtun_bh<	ARCH>::OpSqxtun_bh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqxtun_bh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqxtun_hs<	ARCH>::OpSqxtun_hs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqxtun_hs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqxtun_sd<	ARCH>::OpSqxtun_sd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqxtun_sd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqxtun_v2s2d<	ARCH>::OpSqxtun_v2s2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqxtun_v2s2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqxtun_v4h4s<	ARCH>::OpSqxtun_v4h4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqxtun_v4h4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSqxtun_v8b8h<	ARCH>::OpSqxtun_v8b8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqxtun_v8b8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSri_ddi<	ARCH>::OpSri_ddi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sri_ddi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x3f);
	shift = 64 - lro;
}

template <	typename	ARCH>
OpSri_v2d2di<	ARCH>::OpSri_v2d2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sri_v2d2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x3f);
	shift = 64 - lro;
}

template <	typename	ARCH>
OpSrshl_ddd<	ARCH>::OpSrshl_ddd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "srshl_ddd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSrshl_v2dv2dv2d<	ARCH>::OpSrshl_v2dv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "srshl_v2dv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSrshr_ddi<	ARCH>::OpSrshr_ddi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "srshr_ddi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x3f);
	shift = 64 - lro;
}

template <	typename	ARCH>
OpSrsra_ddi<	ARCH>::OpSrsra_ddi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "srsra_ddi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x3f);
	shift = 64 - lro;
}

template <	typename	ARCH>
OpSshl_ddd<	ARCH>::OpSshl_ddd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sshl_ddd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSshl_v2dv2dv2d<	ARCH>::OpSshl_v2dv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sshl_v2dv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSshll_v8h<	ARCH>::OpSshll_v8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sshll_v8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 16) & 0x7);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSshll_v4s<	ARCH>::OpSshll_v4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sshll_v4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 16) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSshll_v2d<	ARCH>::OpSshll_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sshll_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSshr_ddi<	ARCH>::OpSshr_ddi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sshr_ddi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x3f);
	shift = 64 - lro;
}

template <	typename	ARCH>
OpSsra_ddi<	ARCH>::OpSsra_ddi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ssra_ddi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x3f);
	shift = 64 - lro;
}

template <	typename	ARCH>
OpSsubl2_v2dv4sv4s<	ARCH>::OpSsubl2_v2dv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ssubl2_v2dv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSsubl2_v4sv8hv8h<	ARCH>::OpSsubl2_v4sv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ssubl2_v4sv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSsubl2_v8hv16bv16b<	ARCH>::OpSsubl2_v8hv16bv16b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ssubl2_v8hv16bv16b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSsubl_v2dv2sv2s<	ARCH>::OpSsubl_v2dv2sv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ssubl_v2dv2sv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSsubl_v4sv4hv4h<	ARCH>::OpSsubl_v4sv4hv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ssubl_v4sv4hv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSsubl_v8hv8bv8b<	ARCH>::OpSsubl_v8hv8bv8b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ssubl_v8hv8bv8b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSsubw2_v2dv2dv4s<	ARCH>::OpSsubw2_v2dv2dv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ssubw2_v2dv2dv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSsubw2_v4sv4sv8h<	ARCH>::OpSsubw2_v4sv4sv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ssubw2_v4sv4sv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSsubw2_v8hv8hv16b<	ARCH>::OpSsubw2_v8hv8hv16b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ssubw2_v8hv8hv16b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSsubw_v2dv2dv2s<	ARCH>::OpSsubw_v2dv2dv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ssubw_v2dv2dv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSsubw_v4sv4sv4h<	ARCH>::OpSsubw_v4sv4sv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ssubw_v4sv4sv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSsubw_v8hv8hv8b<	ARCH>::OpSsubw_v8hv8hv8b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ssubw_v8hv8hv8b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpStp_so<	ARCH>::OpStp_so(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stp_so")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	imm = ((int16_t)(((code >> 15) & 0x7f) << 9) >> 9) << 2;
	am = uint8_t((code >> 23) & 0x3);
}

template <	typename	ARCH>
OpStp_do<	ARCH>::OpStp_do(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stp_do")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	imm = ((int16_t)(((code >> 15) & 0x7f) << 9) >> 9) << 3;
	am = uint8_t((code >> 23) & 0x3);
}

template <	typename	ARCH>
OpStp_qo<	ARCH>::OpStp_qo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stp_qo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rt2 = uint8_t((code >> 10) & 0x1f);
	imm = ((int16_t)(((code >> 15) & 0x7f) << 9) >> 9) << 4;
	am = uint8_t((code >> 23) & 0x3);
}

template <	typename	ARCH>
OpStr_bxi<	ARCH>::OpStr_bxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_bxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	am = uint8_t((code >> 10) & 0x3);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	reject = am == 2;
}

template <	typename	ARCH>
OpStr_buo<	ARCH>::OpStr_buo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_buo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff);
}

template <	typename	ARCH>
OpStr_hxi<	ARCH>::OpStr_hxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_hxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	am = uint8_t((code >> 10) & 0x3);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	reject = am == 2;
}

template <	typename	ARCH>
OpStr_huo<	ARCH>::OpStr_huo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_huo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff) << 1;
}

template <	typename	ARCH>
OpStr_sxi<	ARCH>::OpStr_sxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_sxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	am = uint8_t((code >> 10) & 0x3);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	reject = am == 2;
}

template <	typename	ARCH>
OpStr_suo<	ARCH>::OpStr_suo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_suo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff) << 2;
}

template <	typename	ARCH>
OpStr_dxi<	ARCH>::OpStr_dxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_dxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	am = uint8_t((code >> 10) & 0x3);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	reject = am == 2;
}

template <	typename	ARCH>
OpStr_duo<	ARCH>::OpStr_duo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_duo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff) << 3;
}

template <	typename	ARCH>
OpStr_qxi<	ARCH>::OpStr_qxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_qxi")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	am = uint8_t((code >> 10) & 0x3);
	imm = ((int16_t)(((code >> 12) & 0x1ff) << 7) >> 7);
	reject = am == 2;
}

template <	typename	ARCH>
OpStr_quo<	ARCH>::OpStr_quo(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_quo")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint16_t((code >> 10) & 0xfff) << 4;
}

template <	typename	ARCH>
OpStr_bxwu<	ARCH>::OpStr_bxwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_bxwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*0;
}

template <	typename	ARCH>
OpStr_bxxu<	ARCH>::OpStr_bxxu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_bxxu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*0;
}

template <	typename	ARCH>
OpStr_bxws<	ARCH>::OpStr_bxws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_bxws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*0;
}

template <	typename	ARCH>
OpStr_bxxs<	ARCH>::OpStr_bxxs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_bxxs")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*0;
}

template <	typename	ARCH>
OpStr_hxwu<	ARCH>::OpStr_hxwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_hxwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*1;
}

template <	typename	ARCH>
OpStr_hxxu<	ARCH>::OpStr_hxxu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_hxxu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*1;
}

template <	typename	ARCH>
OpStr_hxws<	ARCH>::OpStr_hxws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_hxws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*1;
}

template <	typename	ARCH>
OpStr_hxxs<	ARCH>::OpStr_hxxs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_hxxs")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*1;
}

template <	typename	ARCH>
OpStr_sxwu<	ARCH>::OpStr_sxwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_sxwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*2;
}

template <	typename	ARCH>
OpStr_sxxu<	ARCH>::OpStr_sxxu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_sxxu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*2;
}

template <	typename	ARCH>
OpStr_sxws<	ARCH>::OpStr_sxws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_sxws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*2;
}

template <	typename	ARCH>
OpStr_sxxs<	ARCH>::OpStr_sxxs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_sxxs")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*2;
}

template <	typename	ARCH>
OpStr_dxwu<	ARCH>::OpStr_dxwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_dxwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*3;
}

template <	typename	ARCH>
OpStr_dxxu<	ARCH>::OpStr_dxxu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_dxxu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*3;
}

template <	typename	ARCH>
OpStr_dxws<	ARCH>::OpStr_dxws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_dxws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*3;
}

template <	typename	ARCH>
OpStr_dxxs<	ARCH>::OpStr_dxxs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_dxxs")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*3;
}

template <	typename	ARCH>
OpStr_qxwu<	ARCH>::OpStr_qxwu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_qxwu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*4;
}

template <	typename	ARCH>
OpStr_qxxu<	ARCH>::OpStr_qxxu(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_qxxu")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*4;
}

template <	typename	ARCH>
OpStr_qxws<	ARCH>::OpStr_qxws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_qxws")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*4;
}

template <	typename	ARCH>
OpStr_qxxs<	ARCH>::OpStr_qxxs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "str_qxxs")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	s = uint8_t((code >> 12) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	shift = s*4;
}

template <	typename	ARCH>
OpSub_ddd<	ARCH>::OpSub_ddd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_ddd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSub_v2dv2dv2d<	ARCH>::OpSub_v2dv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_v2dv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSubhn2_v16bv8hv8h<	ARCH>::OpSubhn2_v16bv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subhn2_v16bv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSubhn2_v4sv2dv2d<	ARCH>::OpSubhn2_v4sv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subhn2_v4sv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSubhn2_v8hv4sv4s<	ARCH>::OpSubhn2_v8hv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subhn2_v8hv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSubhn_v2sv2dv2d<	ARCH>::OpSubhn_v2sv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subhn_v2sv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSubhn_v4hv4sv4s<	ARCH>::OpSubhn_v4hv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subhn_v4hv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSubhn_v8bv8hv8h<	ARCH>::OpSubhn_v8bv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "subhn_v8bv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpSuqadd_bb<	ARCH>::OpSuqadd_bb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "suqadd_bb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSuqadd_dd<	ARCH>::OpSuqadd_dd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "suqadd_dd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSuqadd_hh<	ARCH>::OpSuqadd_hh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "suqadd_hh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSuqadd_ss<	ARCH>::OpSuqadd_ss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "suqadd_ss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpSuqadd_v2d2d<	ARCH>::OpSuqadd_v2d2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "suqadd_v2d2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUabal2_v2dv4sv4s<	ARCH>::OpUabal2_v2dv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uabal2_v2dv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUabal2_v4sv8hv8h<	ARCH>::OpUabal2_v4sv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uabal2_v4sv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUabal2_v8hv16bv16b<	ARCH>::OpUabal2_v8hv16bv16b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uabal2_v8hv16bv16b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUabal_v2dv2sv2s<	ARCH>::OpUabal_v2dv2sv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uabal_v2dv2sv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUabal_v4sv4hv4h<	ARCH>::OpUabal_v4sv4hv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uabal_v4sv4hv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUabal_v8hv8bv8b<	ARCH>::OpUabal_v8hv8bv8b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uabal_v8hv8bv8b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUabdl2_v2dv4sv4s<	ARCH>::OpUabdl2_v2dv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uabdl2_v2dv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUabdl2_v4sv8hv8h<	ARCH>::OpUabdl2_v4sv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uabdl2_v4sv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUabdl2_v8hv16bv16b<	ARCH>::OpUabdl2_v8hv16bv16b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uabdl2_v8hv16bv16b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUabdl_v2dv2sv2s<	ARCH>::OpUabdl_v2dv2sv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uabdl_v2dv2sv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUabdl_v4sv4hv4h<	ARCH>::OpUabdl_v4sv4hv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uabdl_v4sv4hv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUabdl_v8hv8bv8b<	ARCH>::OpUabdl_v8hv8bv8b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uabdl_v8hv8bv8b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUaddl2_v2dv4sv4s<	ARCH>::OpUaddl2_v2dv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uaddl2_v2dv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUaddl2_v4sv8hv8h<	ARCH>::OpUaddl2_v4sv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uaddl2_v4sv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUaddl2_v8hv16bv16b<	ARCH>::OpUaddl2_v8hv16bv16b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uaddl2_v8hv16bv16b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUaddl_v2dv2sv2s<	ARCH>::OpUaddl_v2dv2sv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uaddl_v2dv2sv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUaddl_v4sv4hv4h<	ARCH>::OpUaddl_v4sv4hv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uaddl_v4sv4hv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUaddl_v8hv8bv8b<	ARCH>::OpUaddl_v8hv8bv8b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uaddl_v8hv8bv8b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUaddlv_dv4s<	ARCH>::OpUaddlv_dv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uaddlv_dv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUaddw2_v2dv2dv4s<	ARCH>::OpUaddw2_v2dv2dv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uaddw2_v2dv2dv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUaddw2_v4sv4sv8h<	ARCH>::OpUaddw2_v4sv4sv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uaddw2_v4sv4sv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUaddw2_v8hv8hv16b<	ARCH>::OpUaddw2_v8hv8hv16b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uaddw2_v8hv8hv16b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUaddw_v2dv2dv2s<	ARCH>::OpUaddw_v2dv2dv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uaddw_v2dv2dv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUaddw_v4sv4sv4h<	ARCH>::OpUaddw_v4sv4sv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uaddw_v4sv4sv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUaddw_v8hv8hv8b<	ARCH>::OpUaddw_v8hv8hv8b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uaddw_v8hv8hv8b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUmlal2_v2dv4sv4s<	ARCH>::OpUmlal2_v2dv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umlal2_v2dv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUmlal2_v2dv4svsi<	ARCH>::OpUmlal2_v2dv4svsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umlal2_v2dv4svsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpUmlal2_v4sv8hv8h<	ARCH>::OpUmlal2_v4sv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umlal2_v4sv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUmlal2_v4sv8hvhi<	ARCH>::OpUmlal2_v4sv8hvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umlal2_v4sv8hvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpUmlal2_v8hv16bv16b<	ARCH>::OpUmlal2_v8hv16bv16b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umlal2_v8hv16bv16b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUmlal_v2dv2sv2s<	ARCH>::OpUmlal_v2dv2sv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umlal_v2dv2sv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUmlal_v2dv2svsi<	ARCH>::OpUmlal_v2dv2svsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umlal_v2dv2svsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpUmlal_v4sv4hv4h<	ARCH>::OpUmlal_v4sv4hv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umlal_v4sv4hv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUmlal_v4sv4hvhi<	ARCH>::OpUmlal_v4sv4hvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umlal_v4sv4hvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpUmlal_v8hv8bv8b<	ARCH>::OpUmlal_v8hv8bv8b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umlal_v8hv8bv8b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUmlsl2_v2dv4sv4s<	ARCH>::OpUmlsl2_v2dv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umlsl2_v2dv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUmlsl2_v2dv4svsi<	ARCH>::OpUmlsl2_v2dv4svsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umlsl2_v2dv4svsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpUmlsl2_v4sv8hv8h<	ARCH>::OpUmlsl2_v4sv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umlsl2_v4sv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUmlsl2_v4sv8hvhi<	ARCH>::OpUmlsl2_v4sv8hvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umlsl2_v4sv8hvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpUmlsl2_v8hv16bv16b<	ARCH>::OpUmlsl2_v8hv16bv16b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umlsl2_v8hv16bv16b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUmlsl_v2dv2sv2s<	ARCH>::OpUmlsl_v2dv2sv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umlsl_v2dv2sv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUmlsl_v2dv2svsi<	ARCH>::OpUmlsl_v2dv2svsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umlsl_v2dv2svsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpUmlsl_v4sv4hv4h<	ARCH>::OpUmlsl_v4sv4hv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umlsl_v4sv4hv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUmlsl_v4sv4hvhi<	ARCH>::OpUmlsl_v4sv4hvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umlsl_v4sv4hvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpUmlsl_v8hv8bv8b<	ARCH>::OpUmlsl_v8hv8bv8b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umlsl_v8hv8bv8b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUmov_wvb<	ARCH>::OpUmov_wvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umov_wvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 17) & 0xf);
}

template <	typename	ARCH>
OpUmov_wvh<	ARCH>::OpUmov_wvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umov_wvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 18) & 0x7);
}

template <	typename	ARCH>
OpUmov_wvs<	ARCH>::OpUmov_wvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umov_wvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 19) & 0x3);
}

template <	typename	ARCH>
OpUmov_xvd<	ARCH>::OpUmov_xvd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umov_xvd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 20) & 0x1);
}

template <	typename	ARCH>
OpUmull2_v2dv4sv4s<	ARCH>::OpUmull2_v2dv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umull2_v2dv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUmull2_v2dv4svsi<	ARCH>::OpUmull2_v2dv4svsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umull2_v2dv4svsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpUmull2_v4sv8hv8h<	ARCH>::OpUmull2_v4sv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umull2_v4sv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUmull2_v4sv8hvhi<	ARCH>::OpUmull2_v4sv8hvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umull2_v4sv8hvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpUmull2_v8hv16bv16b<	ARCH>::OpUmull2_v8hv16bv16b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umull2_v8hv16bv16b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUmull_v2dv2sv2s<	ARCH>::OpUmull_v2dv2sv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umull_v2dv2sv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUmull_v2dv2svsi<	ARCH>::OpUmull_v2dv2svsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umull_v2dv2svsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpUmull_v4sv4hv4h<	ARCH>::OpUmull_v4sv4hv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umull_v4sv4hv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUmull_v4sv4hvhi<	ARCH>::OpUmull_v4sv4hvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umull_v4sv4hvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpUmull_v8hv8bv8b<	ARCH>::OpUmull_v8hv8bv8b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umull_v8hv8bv8b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUqadd_bbb<	ARCH>::OpUqadd_bbb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqadd_bbb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUqadd_ddd<	ARCH>::OpUqadd_ddd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqadd_ddd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUqadd_hhh<	ARCH>::OpUqadd_hhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqadd_hhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUqadd_sss<	ARCH>::OpUqadd_sss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqadd_sss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUqadd_v2dv2dv2d<	ARCH>::OpUqadd_v2dv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqadd_v2dv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUqrshl_bbb<	ARCH>::OpUqrshl_bbb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqrshl_bbb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUqrshl_ddd<	ARCH>::OpUqrshl_ddd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqrshl_ddd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUqrshl_hhh<	ARCH>::OpUqrshl_hhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqrshl_hhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUqrshl_sss<	ARCH>::OpUqrshl_sss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqrshl_sss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUqrshl_v2dv2dv2d<	ARCH>::OpUqrshl_v2dv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqrshl_v2dv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUqrshrn2_v16b8hi<	ARCH>::OpUqrshrn2_v16b8hi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqrshrn2_v16b8hi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x7);
	shift = 8 - lro;
}

template <	typename	ARCH>
OpUqrshrn2_v4s2di<	ARCH>::OpUqrshrn2_v4s2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqrshrn2_v4s2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	shift = 32 - lro;
}

template <	typename	ARCH>
OpUqrshrn2_v8h4si<	ARCH>::OpUqrshrn2_v8h4si(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqrshrn2_v8h4si")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	shift = 16 - lro;
}

template <	typename	ARCH>
OpUqrshrn_bhi<	ARCH>::OpUqrshrn_bhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqrshrn_bhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x7);
	shift = 8 - lro;
}

template <	typename	ARCH>
OpUqrshrn_hsi<	ARCH>::OpUqrshrn_hsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqrshrn_hsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	shift = 16 - lro;
}

template <	typename	ARCH>
OpUqrshrn_sdi<	ARCH>::OpUqrshrn_sdi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqrshrn_sdi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	shift = 32 - lro;
}

template <	typename	ARCH>
OpUqrshrn_v2s2di<	ARCH>::OpUqrshrn_v2s2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqrshrn_v2s2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	shift = 32 - lro;
}

template <	typename	ARCH>
OpUqrshrn_v4h4si<	ARCH>::OpUqrshrn_v4h4si(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqrshrn_v4h4si")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	shift = 16 - lro;
}

template <	typename	ARCH>
OpUqrshrn_v8b8hi<	ARCH>::OpUqrshrn_v8b8hi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqrshrn_v8b8hi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x7);
	shift = 8 - lro;
}

template <	typename	ARCH>
OpUqshl_bbb<	ARCH>::OpUqshl_bbb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshl_bbb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUqshl_bbi<	ARCH>::OpUqshl_bbi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshl_bbi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	shift = uint8_t((code >> 16) & 0x7);
}

template <	typename	ARCH>
OpUqshl_ddd<	ARCH>::OpUqshl_ddd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshl_ddd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUqshl_ddi<	ARCH>::OpUqshl_ddi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshl_ddi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	shift = uint8_t((code >> 16) & 0x3f);
}

template <	typename	ARCH>
OpUqshl_hhh<	ARCH>::OpUqshl_hhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshl_hhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUqshl_hhi<	ARCH>::OpUqshl_hhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshl_hhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	shift = uint8_t((code >> 16) & 0xf);
}

template <	typename	ARCH>
OpUqshl_ssi<	ARCH>::OpUqshl_ssi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshl_ssi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	shift = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUqshl_sss<	ARCH>::OpUqshl_sss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshl_sss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUqshl_v2d2di<	ARCH>::OpUqshl_v2d2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshl_v2d2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 16) & 0x3f);
}

template <	typename	ARCH>
OpUqshl_v2dv2dv2d<	ARCH>::OpUqshl_v2dv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshl_v2dv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUqshrn2_v16b8hi<	ARCH>::OpUqshrn2_v16b8hi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshrn2_v16b8hi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x7);
	shift = 8 - lro;
}

template <	typename	ARCH>
OpUqshrn2_v4s2di<	ARCH>::OpUqshrn2_v4s2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshrn2_v4s2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	shift = 32 - lro;
}

template <	typename	ARCH>
OpUqshrn2_v8h4si<	ARCH>::OpUqshrn2_v8h4si(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshrn2_v8h4si")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	shift = 16 - lro;
}

template <	typename	ARCH>
OpUqshrn_bhi<	ARCH>::OpUqshrn_bhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshrn_bhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x7);
	shift = 8 - lro;
}

template <	typename	ARCH>
OpUqshrn_hsi<	ARCH>::OpUqshrn_hsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshrn_hsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	shift = 16 - lro;
}

template <	typename	ARCH>
OpUqshrn_sdi<	ARCH>::OpUqshrn_sdi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshrn_sdi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	shift = 32 - lro;
}

template <	typename	ARCH>
OpUqshrn_v2s2di<	ARCH>::OpUqshrn_v2s2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshrn_v2s2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	shift = 32 - lro;
}

template <	typename	ARCH>
OpUqshrn_v4h4si<	ARCH>::OpUqshrn_v4h4si(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshrn_v4h4si")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	shift = 16 - lro;
}

template <	typename	ARCH>
OpUqshrn_v8b8hi<	ARCH>::OpUqshrn_v8b8hi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshrn_v8b8hi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x7);
	shift = 8 - lro;
}

template <	typename	ARCH>
OpUqsub_bbb<	ARCH>::OpUqsub_bbb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqsub_bbb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUqsub_ddd<	ARCH>::OpUqsub_ddd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqsub_ddd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUqsub_hhh<	ARCH>::OpUqsub_hhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqsub_hhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUqsub_sss<	ARCH>::OpUqsub_sss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqsub_sss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUqsub_v2dv2dv2d<	ARCH>::OpUqsub_v2dv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqsub_v2dv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUqxtn2_v16b8h<	ARCH>::OpUqxtn2_v16b8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqxtn2_v16b8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUqxtn2_v4s2d<	ARCH>::OpUqxtn2_v4s2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqxtn2_v4s2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUqxtn2_v8h4s<	ARCH>::OpUqxtn2_v8h4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqxtn2_v8h4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUqxtn_bh<	ARCH>::OpUqxtn_bh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqxtn_bh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUqxtn_hs<	ARCH>::OpUqxtn_hs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqxtn_hs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUqxtn_sd<	ARCH>::OpUqxtn_sd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqxtn_sd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUqxtn_v2s2d<	ARCH>::OpUqxtn_v2s2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqxtn_v2s2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUqxtn_v4h4s<	ARCH>::OpUqxtn_v4h4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqxtn_v4h4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUqxtn_v8b8h<	ARCH>::OpUqxtn_v8b8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqxtn_v8b8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUrshl_ddd<	ARCH>::OpUrshl_ddd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "urshl_ddd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUrshl_v2dv2dv2d<	ARCH>::OpUrshl_v2dv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "urshl_v2dv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUrshr_ddi<	ARCH>::OpUrshr_ddi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "urshr_ddi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x3f);
	shift = 64 - lro;
}

template <	typename	ARCH>
OpUrsra_ddi<	ARCH>::OpUrsra_ddi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ursra_ddi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x3f);
	shift = 64 - lro;
}

template <	typename	ARCH>
OpUshr_ddi<	ARCH>::OpUshr_ddi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ushr_ddi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x3f);
	shift = 64 - lro;
}

template <	typename	ARCH>
OpUsqadd_bb<	ARCH>::OpUsqadd_bb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "usqadd_bb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUsqadd_dd<	ARCH>::OpUsqadd_dd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "usqadd_dd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUsqadd_hh<	ARCH>::OpUsqadd_hh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "usqadd_hh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUsqadd_ss<	ARCH>::OpUsqadd_ss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "usqadd_ss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUsqadd_v2d2d<	ARCH>::OpUsqadd_v2d2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "usqadd_v2d2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUsra_ddi<	ARCH>::OpUsra_ddi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "usra_ddi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x3f);
	shift = 64 - lro;
}

template <	typename	ARCH>
OpUsubl2_v2dv4sv4s<	ARCH>::OpUsubl2_v2dv4sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "usubl2_v2dv4sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUsubl2_v4sv8hv8h<	ARCH>::OpUsubl2_v4sv8hv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "usubl2_v4sv8hv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUsubl2_v8hv16bv16b<	ARCH>::OpUsubl2_v8hv16bv16b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "usubl2_v8hv16bv16b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUsubl_v2dv2sv2s<	ARCH>::OpUsubl_v2dv2sv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "usubl_v2dv2sv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUsubl_v4sv4hv4h<	ARCH>::OpUsubl_v4sv4hv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "usubl_v4sv4hv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUsubl_v8hv8bv8b<	ARCH>::OpUsubl_v8hv8bv8b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "usubl_v8hv8bv8b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUsubw2_v2dv2dv4s<	ARCH>::OpUsubw2_v2dv2dv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "usubw2_v2dv2dv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUsubw2_v4sv4sv8h<	ARCH>::OpUsubw2_v4sv4sv8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "usubw2_v4sv4sv8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUsubw2_v8hv8hv16b<	ARCH>::OpUsubw2_v8hv8hv16b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "usubw2_v8hv8hv16b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUsubw_v2dv2dv2s<	ARCH>::OpUsubw_v2dv2dv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "usubw_v2dv2dv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUsubw_v4sv4sv4h<	ARCH>::OpUsubw_v4sv4sv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "usubw_v4sv4sv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUsubw_v8hv8hv8b<	ARCH>::OpUsubw_v8hv8hv8b(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "usubw_v8hv8hv8b")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUzp1_v2dv2dv2d<	ARCH>::OpUzp1_v2dv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uzp1_v2dv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUzp2_v2dv2dv2d<	ARCH>::OpUzp2_v2dv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uzp2_v2dv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUzp2_vhvhvh<	ARCH>::OpUzp2_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uzp2_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpXtn2_v16b8h<	ARCH>::OpXtn2_v16b8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "xtn2_v16b8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpXtn2_v8h4s<	ARCH>::OpXtn2_v8h4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "xtn2_v8h4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpXtn2_v4s2d<	ARCH>::OpXtn2_v4s2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "xtn2_v4s2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpXtn_v2s2d<	ARCH>::OpXtn_v2s2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "xtn_v2s2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpXtn_v4h4s<	ARCH>::OpXtn_v4h4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "xtn_v4h4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpXtn_v8b8h<	ARCH>::OpXtn_v8b8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "xtn_v8b8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpZip1_v2dv2dv2d<	ARCH>::OpZip1_v2dv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "zip1_v2dv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpZip2_v2dv2dv2d<	ARCH>::OpZip2_v2dv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "zip2_v2dv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpOrr_vbvbvb<	ARCH>::OpOrr_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "orr_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpAnd_vbvbvb<	ARCH>::OpAnd_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "and_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpBic_vbvbvb<	ARCH>::OpBic_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bic_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpBic_vhi<	ARCH>::OpBic_vhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bic_vhi")
{
	rd = uint8_t(code & 0x1f);
	imm0 = uint8_t((code >> 5) & 0x1f);
	sh = uint8_t((code >> 13) & 0x1) << 3;
	imm1 = uint8_t((code >> 16) & 0x7) << 5;
	q = uint8_t((code >> 30) & 0x1);
	imm = uint16_t(imm1|imm0) << sh;
}

template <	typename	ARCH>
OpBic_vsi<	ARCH>::OpBic_vsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bic_vsi")
{
	rd = uint8_t(code & 0x1f);
	imm0 = uint8_t((code >> 5) & 0x1f);
	sh = uint8_t((code >> 13) & 0x3) << 3;
	imm1 = uint8_t((code >> 16) & 0x7) << 5;
	q = uint8_t((code >> 30) & 0x1);
	imm = uint32_t(imm1|imm0) << sh;
}

template <	typename	ARCH>
OpBit<	ARCH>::OpBit(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bit")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpBif<	ARCH>::OpBif(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bif")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpBsl<	ARCH>::OpBsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "bsl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCls_vbb<	ARCH>::OpCls_vbb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cls_vbb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCls_vhh<	ARCH>::OpCls_vhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cls_vhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCls_vss<	ARCH>::OpCls_vss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cls_vss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpClz_vbb<	ARCH>::OpClz_vbb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "clz_vbb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpClz_vhh<	ARCH>::OpClz_vhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "clz_vhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpClz_vss<	ARCH>::OpClz_vss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "clz_vss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmtst_vbvbvb<	ARCH>::OpCmtst_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmtst_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmtst_vhvhvh<	ARCH>::OpCmtst_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmtst_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCmtst_vsvsvs<	ARCH>::OpCmtst_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cmtst_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpCnt_vbb<	ARCH>::OpCnt_vbb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "cnt_vbb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpMov_bvb<	ARCH>::OpMov_bvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mov_bvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 17) & 0xf);
}

template <	typename	ARCH>
OpMov_hvh<	ARCH>::OpMov_hvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mov_hvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 18) & 0x7);
}

template <	typename	ARCH>
OpMov_svs<	ARCH>::OpMov_svs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mov_svs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 19) & 0x3);
}

template <	typename	ARCH>
OpMov_dvd<	ARCH>::OpMov_dvd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mov_dvd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 20) & 0x1);
}

template <	typename	ARCH>
OpDup_vbvb<	ARCH>::OpDup_vbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "dup_vbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 17) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpDup_vhvh<	ARCH>::OpDup_vhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "dup_vhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 18) & 0x7);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpDup_vsvs<	ARCH>::OpDup_vsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "dup_vsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 19) & 0x3);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpDup_v2dvd<	ARCH>::OpDup_v2dvd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "dup_v2dvd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 20) & 0x1);
}

template <	typename	ARCH>
OpDup_vb<	ARCH>::OpDup_vb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "dup_vb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpDup_vh<	ARCH>::OpDup_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "dup_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpDup_vs<	ARCH>::OpDup_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "dup_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpDup_v2d<	ARCH>::OpDup_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "dup_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpEor_vbvbvb<	ARCH>::OpEor_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "eor_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpExt_vb<	ARCH>::OpExt_vb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ext_vb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 11) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
	reject = (q == 0) and (index & 8);
}

template <	typename	ARCH>
OpMla_vbvbvb<	ARCH>::OpMla_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mla_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpMla_vhvhvhi<	ARCH>::OpMla_vhvhvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mla_vhvhvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	q = uint8_t((code >> 30) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpMla_vhvhvh<	ARCH>::OpMla_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mla_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpMla_vsvsvsi<	ARCH>::OpMla_vsvsvsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mla_vsvsvsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	q = uint8_t((code >> 30) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpMla_vsvsvs<	ARCH>::OpMla_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mla_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpMls_vbvbvb<	ARCH>::OpMls_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mls_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpMls_vhvhvhi<	ARCH>::OpMls_vhvhvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mls_vhvhvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	q = uint8_t((code >> 30) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpMls_vhvhvh<	ARCH>::OpMls_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mls_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpMls_vsvsvsi<	ARCH>::OpMls_vsvsvsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mls_vsvsvsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	q = uint8_t((code >> 30) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpMls_vsvsvs<	ARCH>::OpMls_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mls_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpMovi_vbi<	ARCH>::OpMovi_vbi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "movi_vbi")
{
	rd = uint8_t(code & 0x1f);
	imm0 = uint8_t((code >> 5) & 0x1f);
	imm1 = uint8_t((code >> 16) & 0x7) << 5;
	q = uint8_t((code >> 30) & 0x1);
	imm = imm1|imm0;
}

template <	typename	ARCH>
OpMovi_vhi<	ARCH>::OpMovi_vhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "movi_vhi")
{
	rd = uint8_t(code & 0x1f);
	imm0 = uint8_t((code >> 5) & 0x1f);
	sh = uint8_t((code >> 13) & 0x1) << 3;
	imm1 = uint8_t((code >> 16) & 0x7) << 5;
	q = uint8_t((code >> 30) & 0x1);
	imm = uint16_t(imm1|imm0) << sh;
}

template <	typename	ARCH>
OpMovi_vsi<	ARCH>::OpMovi_vsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "movi_vsi")
{
	rd = uint8_t(code & 0x1f);
	imm0 = uint8_t((code >> 5) & 0x1f);
	sh = uint8_t((code >> 13) & 0x3) << 3;
	imm1 = uint8_t((code >> 16) & 0x7) << 5;
	q = uint8_t((code >> 30) & 0x1);
	imm = uint32_t(imm1|imm0) << sh;
}

template <	typename	ARCH>
OpMovi_di<	ARCH>::OpMovi_di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "movi_di")
{
	rd = uint8_t(code & 0x1f);
	h = uint8_t((code >> 5) & 0x1);
	g = uint8_t((code >> 6) & 0x1);
	f = uint8_t((code >> 7) & 0x1);
	e = uint8_t((code >> 8) & 0x1);
	d = uint8_t((code >> 9) & 0x1);
	c = uint8_t((code >> 16) & 0x1);
	b = uint8_t((code >> 17) & 0x1);
	a = uint8_t((code >> 18) & 0x1);
	imm = ((uint64_t(a)<<56)|(uint64_t(b)<<48)|(uint64_t(c)<<40)|(uint64_t(d)<<32)|(uint64_t(e)<<24)|(uint64_t(f)<<16)|(uint64_t(g)<<8)|(uint64_t(h)<<0))*0xff;
}

template <	typename	ARCH>
OpMovi_v2di<	ARCH>::OpMovi_v2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "movi_v2di")
{
	rd = uint8_t(code & 0x1f);
	h = uint8_t((code >> 5) & 0x1);
	g = uint8_t((code >> 6) & 0x1);
	f = uint8_t((code >> 7) & 0x1);
	e = uint8_t((code >> 8) & 0x1);
	d = uint8_t((code >> 9) & 0x1);
	c = uint8_t((code >> 16) & 0x1);
	b = uint8_t((code >> 17) & 0x1);
	a = uint8_t((code >> 18) & 0x1);
	imm = ((uint64_t(a)<<56)|(uint64_t(b)<<48)|(uint64_t(c)<<40)|(uint64_t(d)<<32)|(uint64_t(e)<<24)|(uint64_t(f)<<16)|(uint64_t(g)<<8)|(uint64_t(h)<<0))*0xff;
}

template <	typename	ARCH>
OpMovi_vsmsl<	ARCH>::OpMovi_vsmsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "movi_vsmsl")
{
	rd = uint8_t(code & 0x1f);
	imm0 = uint32_t((code >> 5) & 0x1f) << 16;
	sh = uint8_t((code >> 12) & 0x1);
	imm1 = uint32_t((code >> 16) & 0x7) << 21;
	q = uint8_t((code >> 30) & 0x1);
	imm = (imm1|imm0|0xffff) >> (sh ? 0 : 8);
}

template <	typename	ARCH>
OpMul_vb<	ARCH>::OpMul_vb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mul_vb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpMul_vh<	ARCH>::OpMul_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mul_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpMul_vs<	ARCH>::OpMul_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mul_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpMul_vhvhvhi<	ARCH>::OpMul_vhvhvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mul_vhvhvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	q = uint8_t((code >> 30) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpMul_vsvsvsi<	ARCH>::OpMul_vsvsvsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mul_vsvsvsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	q = uint8_t((code >> 30) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpMvn_vb<	ARCH>::OpMvn_vb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mvn_vb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpMvni_vhi<	ARCH>::OpMvni_vhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mvni_vhi")
{
	rd = uint8_t(code & 0x1f);
	imm0 = uint8_t((code >> 5) & 0x1f);
	sh = uint8_t((code >> 13) & 0x1) << 3;
	imm1 = uint8_t((code >> 16) & 0x7) << 5;
	q = uint8_t((code >> 30) & 0x1);
	imm = uint16_t(imm1|imm0) << sh;
}

template <	typename	ARCH>
OpMvni_vsi<	ARCH>::OpMvni_vsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mvni_vsi")
{
	rd = uint8_t(code & 0x1f);
	imm0 = uint8_t((code >> 5) & 0x1f);
	sh = uint8_t((code >> 13) & 0x3) << 3;
	imm1 = uint8_t((code >> 16) & 0x7) << 5;
	q = uint8_t((code >> 30) & 0x1);
	imm = uint32_t(imm1|imm0) << sh;
}

template <	typename	ARCH>
OpMvni_vsmsl<	ARCH>::OpMvni_vsmsl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "mvni_vsmsl")
{
	rd = uint8_t(code & 0x1f);
	imm0 = uint32_t((code >> 5) & 0x1f) << 16;
	sh = uint8_t((code >> 12) & 0x1);
	imm1 = uint32_t((code >> 16) & 0x7) << 21;
	q = uint8_t((code >> 30) & 0x1);
	imm = (imm1|imm0|0xffff) >> (sh ? 0 : 8);
}

template <	typename	ARCH>
OpNeg_vb<	ARCH>::OpNeg_vb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "neg_vb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpNeg_vh<	ARCH>::OpNeg_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "neg_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpNeg_vs<	ARCH>::OpNeg_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "neg_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpNeg_v2d<	ARCH>::OpNeg_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "neg_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpNeg_d<	ARCH>::OpNeg_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "neg_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpOrn_vbvbvb<	ARCH>::OpOrn_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "orn_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpOrr_vhi<	ARCH>::OpOrr_vhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "orr_vhi")
{
	rd = uint8_t(code & 0x1f);
	imm0 = uint8_t((code >> 5) & 0x1f);
	sh = uint8_t((code >> 13) & 0x1) << 3;
	imm1 = uint8_t((code >> 16) & 0x7) << 5;
	q = uint8_t((code >> 30) & 0x1);
	imm = uint16_t(imm1|imm0) << sh;
}

template <	typename	ARCH>
OpOrr_vsi<	ARCH>::OpOrr_vsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "orr_vsi")
{
	rd = uint8_t(code & 0x1f);
	imm0 = uint8_t((code >> 5) & 0x1f);
	sh = uint8_t((code >> 13) & 0x3) << 3;
	imm1 = uint8_t((code >> 16) & 0x7) << 5;
	q = uint8_t((code >> 30) & 0x1);
	imm = uint32_t(imm1|imm0) << sh;
}

template <	typename	ARCH>
OpPmul_vbvbvb<	ARCH>::OpPmul_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "pmul_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpRbit_vbb<	ARCH>::OpRbit_vbb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rbit_vbb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpRev16_vbb<	ARCH>::OpRev16_vbb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rev16_vbb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpRev32_vbb<	ARCH>::OpRev32_vbb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rev32_vbb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpRev32_vhh<	ARCH>::OpRev32_vhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rev32_vhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpRev64_vbb<	ARCH>::OpRev64_vbb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rev64_vbb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpRev64_vhh<	ARCH>::OpRev64_vhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rev64_vhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpRev64_vss<	ARCH>::OpRev64_vss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "rev64_vss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSaba_vbvbvb<	ARCH>::OpSaba_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "saba_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSaba_vhvhvh<	ARCH>::OpSaba_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "saba_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSaba_vsvsvs<	ARCH>::OpSaba_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "saba_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSabd_vbvbvb<	ARCH>::OpSabd_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sabd_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSabd_vhvhvh<	ARCH>::OpSabd_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sabd_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSabd_vsvsvs<	ARCH>::OpSabd_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sabd_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSadalp_vhb<	ARCH>::OpSadalp_vhb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sadalp_vhb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSadalp_vsh<	ARCH>::OpSadalp_vsh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sadalp_vsh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSadalp_vds<	ARCH>::OpSadalp_vds(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sadalp_vds")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSaddlp_vhb<	ARCH>::OpSaddlp_vhb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "saddlp_vhb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSaddlp_vsh<	ARCH>::OpSaddlp_vsh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "saddlp_vsh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSaddlp_vds<	ARCH>::OpSaddlp_vds(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "saddlp_vds")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSaddlv_hvb<	ARCH>::OpSaddlv_hvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "saddlv_hvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSaddlv_svh<	ARCH>::OpSaddlv_svh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "saddlv_svh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpShadd_vbvbvb<	ARCH>::OpShadd_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "shadd_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpShadd_vhvhvh<	ARCH>::OpShadd_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "shadd_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpShadd_vsvsvs<	ARCH>::OpShadd_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "shadd_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpShl_ddi<	ARCH>::OpShl_ddi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "shl_ddi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	shift = uint8_t((code >> 16) & 0x3f);
}

template <	typename	ARCH>
OpShl_vbbi<	ARCH>::OpShl_vbbi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "shl_vbbi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 16) & 0x7);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpShl_vhhi<	ARCH>::OpShl_vhhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "shl_vhhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 16) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpShl_vssi<	ARCH>::OpShl_vssi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "shl_vssi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpShl_v2d2di<	ARCH>::OpShl_v2d2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "shl_v2d2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 16) & 0x3f);
}

template <	typename	ARCH>
OpShsub_vbvbvb<	ARCH>::OpShsub_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "shsub_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpShsub_vhvhvh<	ARCH>::OpShsub_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "shsub_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpShsub_vsvsvs<	ARCH>::OpShsub_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "shsub_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSli_ddi<	ARCH>::OpSli_ddi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sli_ddi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	shift = uint8_t((code >> 16) & 0x3f);
}

template <	typename	ARCH>
OpSli_vbbi<	ARCH>::OpSli_vbbi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sli_vbbi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	shift = uint8_t((code >> 16) & 0x7);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSli_vhhi<	ARCH>::OpSli_vhhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sli_vhhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	shift = uint8_t((code >> 16) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSli_vssi<	ARCH>::OpSli_vssi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sli_vssi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	shift = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSli_v2d2di<	ARCH>::OpSli_v2d2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sli_v2d2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	shift = uint8_t((code >> 16) & 0x3f);
}

template <	typename	ARCH>
OpSmax_vbvbvb<	ARCH>::OpSmax_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smax_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSmax_vhvhvh<	ARCH>::OpSmax_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smax_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSmax_vsvsvs<	ARCH>::OpSmax_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smax_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSmaxp_vbvbvb<	ARCH>::OpSmaxp_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smaxp_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSmaxp_vhvhvh<	ARCH>::OpSmaxp_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smaxp_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSmaxp_vsvsvs<	ARCH>::OpSmaxp_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smaxp_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSmin_vbvbvb<	ARCH>::OpSmin_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smin_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSmin_vhvhvh<	ARCH>::OpSmin_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smin_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSmin_vsvsvs<	ARCH>::OpSmin_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "smin_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSminp_vbvbvb<	ARCH>::OpSminp_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sminp_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSminp_vhvhvh<	ARCH>::OpSminp_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sminp_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSminp_vsvsvs<	ARCH>::OpSminp_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sminp_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqabs_vbb<	ARCH>::OpSqabs_vbb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqabs_vbb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqabs_vhh<	ARCH>::OpSqabs_vhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqabs_vhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqabs_vss<	ARCH>::OpSqabs_vss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqabs_vss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqadd_vbvbvb<	ARCH>::OpSqadd_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqadd_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqadd_vhvhvh<	ARCH>::OpSqadd_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqadd_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqadd_vsvsvs<	ARCH>::OpSqadd_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqadd_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqdmulh_vhvhvhi<	ARCH>::OpSqdmulh_vhvhvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmulh_vhvhvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	q = uint8_t((code >> 30) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqdmulh_vhvhvh<	ARCH>::OpSqdmulh_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmulh_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqdmulh_vsvsvsi<	ARCH>::OpSqdmulh_vsvsvsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmulh_vsvsvsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	q = uint8_t((code >> 30) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqdmulh_vsvsvs<	ARCH>::OpSqdmulh_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqdmulh_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqneg_vbb<	ARCH>::OpSqneg_vbb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqneg_vbb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqneg_vhh<	ARCH>::OpSqneg_vhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqneg_vhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqneg_vss<	ARCH>::OpSqneg_vss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqneg_vss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqrdmulh_vhvhvhi<	ARCH>::OpSqrdmulh_vhvhvhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrdmulh_vhvhvhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	q = uint8_t((code >> 30) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqrdmulh_vhvhvh<	ARCH>::OpSqrdmulh_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrdmulh_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqrdmulh_vsvsvsi<	ARCH>::OpSqrdmulh_vsvsvsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrdmulh_vsvsvsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	q = uint8_t((code >> 30) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpSqrdmulh_vsvsvs<	ARCH>::OpSqrdmulh_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrdmulh_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqrshl_vbvbvb<	ARCH>::OpSqrshl_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshl_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqrshl_vhvhvh<	ARCH>::OpSqrshl_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshl_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqrshl_vsvsvs<	ARCH>::OpSqrshl_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqrshl_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqshl_vbbi<	ARCH>::OpSqshl_vbbi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshl_vbbi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 16) & 0x7);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqshl_vbvbvb<	ARCH>::OpSqshl_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshl_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqshl_vhhi<	ARCH>::OpSqshl_vhhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshl_vhhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 16) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqshl_vhvhvh<	ARCH>::OpSqshl_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshl_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqshl_vssi<	ARCH>::OpSqshl_vssi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshl_vssi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqshl_vsvsvs<	ARCH>::OpSqshl_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshl_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqshlu_vbbi<	ARCH>::OpSqshlu_vbbi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshlu_vbbi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	shift = uint8_t((code >> 16) & 0x7);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqshlu_vhhi<	ARCH>::OpSqshlu_vhhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshlu_vhhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	shift = uint8_t((code >> 16) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqshlu_vssi<	ARCH>::OpSqshlu_vssi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqshlu_vssi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	shift = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqsub_vbvbvb<	ARCH>::OpSqsub_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqsub_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqsub_vhvhvh<	ARCH>::OpSqsub_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqsub_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSqsub_vsvsvs<	ARCH>::OpSqsub_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sqsub_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSrhadd_vbvbvb<	ARCH>::OpSrhadd_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "srhadd_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSrhadd_vhvhvh<	ARCH>::OpSrhadd_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "srhadd_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSrhadd_vsvsvs<	ARCH>::OpSrhadd_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "srhadd_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSri_vbbi<	ARCH>::OpSri_vbbi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sri_vbbi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x7);
	q = uint8_t((code >> 30) & 0x1);
	shift = 8 - lro;
}

template <	typename	ARCH>
OpSri_vhhi<	ARCH>::OpSri_vhhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sri_vhhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
	shift = 16 - lro;
}

template <	typename	ARCH>
OpSri_vssi<	ARCH>::OpSri_vssi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sri_vssi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
	shift = 32 - lro;
}

template <	typename	ARCH>
OpSrshl_vbvbvb<	ARCH>::OpSrshl_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "srshl_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSrshl_vhvhvh<	ARCH>::OpSrshl_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "srshl_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSrshl_vsvsvs<	ARCH>::OpSrshl_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "srshl_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSshl_vbvbvb<	ARCH>::OpSshl_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sshl_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSshl_vhvhvh<	ARCH>::OpSshl_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sshl_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSshl_vsvsvs<	ARCH>::OpSshl_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sshl_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSshr_vbbi<	ARCH>::OpSshr_vbbi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sshr_vbbi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	sm = uint8_t((code >> 12) & 0x3);
	lro = uint8_t((code >> 16) & 0x7);
	q = uint8_t((code >> 30) & 0x1);
	shift = 8 - lro;
}

template <	typename	ARCH>
OpSshr_vhhi<	ARCH>::OpSshr_vhhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sshr_vhhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	sm = uint8_t((code >> 12) & 0x3);
	lro = uint8_t((code >> 16) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
	shift = 16 - lro;
}

template <	typename	ARCH>
OpSshr_vssi<	ARCH>::OpSshr_vssi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sshr_vssi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	sm = uint8_t((code >> 12) & 0x3);
	lro = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
	shift = 32 - lro;
}

template <	typename	ARCH>
OpSshr_v2d2di<	ARCH>::OpSshr_v2d2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sshr_v2d2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	sm = uint8_t((code >> 12) & 0x3);
	lro = uint8_t((code >> 16) & 0x3f);
	shift =  64 - lro ;
}

template <	typename	ARCH>
OpSub_vbvbvb<	ARCH>::OpSub_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSub_vhvhvh<	ARCH>::OpSub_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSub_vsvsvs<	ARCH>::OpSub_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "sub_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSuqadd_vbb<	ARCH>::OpSuqadd_vbb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "suqadd_vbb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSuqadd_vhh<	ARCH>::OpSuqadd_vhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "suqadd_vhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpSuqadd_vss<	ARCH>::OpSuqadd_vss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "suqadd_vss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpTbl<	ARCH>::OpTbl(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "tbl")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	len = uint8_t((code >> 13) & 0x3);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpTbx<	ARCH>::OpTbx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "tbx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	len = uint8_t((code >> 13) & 0x3);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpTrn_vb<	ARCH>::OpTrn_vb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "trn_vb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	op = uint8_t((code >> 14) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpTrn_vh<	ARCH>::OpTrn_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "trn_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	op = uint8_t((code >> 14) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpTrn_vs<	ARCH>::OpTrn_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "trn_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	op = uint8_t((code >> 14) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpTrn_v2d<	ARCH>::OpTrn_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "trn_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	op = uint8_t((code >> 14) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUaba_vbvbvb<	ARCH>::OpUaba_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uaba_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUaba_vhvhvh<	ARCH>::OpUaba_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uaba_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUaba_vsvsvs<	ARCH>::OpUaba_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uaba_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUabd_vbvbvb<	ARCH>::OpUabd_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uabd_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUabd_vhvhvh<	ARCH>::OpUabd_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uabd_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUabd_vsvsvs<	ARCH>::OpUabd_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uabd_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUadalp_vhb<	ARCH>::OpUadalp_vhb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uadalp_vhb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUadalp_vsh<	ARCH>::OpUadalp_vsh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uadalp_vsh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUadalp_vds<	ARCH>::OpUadalp_vds(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uadalp_vds")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUaddlp_vhb<	ARCH>::OpUaddlp_vhb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uaddlp_vhb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUaddlp_vsh<	ARCH>::OpUaddlp_vsh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uaddlp_vsh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUaddlp_vds<	ARCH>::OpUaddlp_vds(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uaddlp_vds")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUaddlv_hvb<	ARCH>::OpUaddlv_hvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uaddlv_hvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUaddlv_svh<	ARCH>::OpUaddlv_svh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uaddlv_svh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUhadd_vbvbvb<	ARCH>::OpUhadd_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uhadd_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUhadd_vhvhvh<	ARCH>::OpUhadd_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uhadd_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUhadd_vsvsvs<	ARCH>::OpUhadd_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uhadd_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUhsub_vbvbvb<	ARCH>::OpUhsub_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uhsub_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUhsub_vhvhvh<	ARCH>::OpUhsub_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uhsub_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUhsub_vsvsvs<	ARCH>::OpUhsub_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uhsub_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUmax_vbvbvb<	ARCH>::OpUmax_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umax_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUmax_vhvhvh<	ARCH>::OpUmax_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umax_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUmax_vsvsvs<	ARCH>::OpUmax_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umax_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUmaxp_vbvbvb<	ARCH>::OpUmaxp_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umaxp_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUmaxp_vhvhvh<	ARCH>::OpUmaxp_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umaxp_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUmaxp_vsvsvs<	ARCH>::OpUmaxp_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umaxp_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUmin_vbvbvb<	ARCH>::OpUmin_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umin_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUmin_vhvhvh<	ARCH>::OpUmin_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umin_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUmin_vsvsvs<	ARCH>::OpUmin_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "umin_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUminp_vbvbvb<	ARCH>::OpUminp_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uminp_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUminp_vhvhvh<	ARCH>::OpUminp_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uminp_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUminp_vsvsvs<	ARCH>::OpUminp_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uminp_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUqadd_vbvbvb<	ARCH>::OpUqadd_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqadd_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUqadd_vhvhvh<	ARCH>::OpUqadd_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqadd_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUqadd_vsvsvs<	ARCH>::OpUqadd_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqadd_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUqrshl_vbvbvb<	ARCH>::OpUqrshl_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqrshl_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUqrshl_vhvhvh<	ARCH>::OpUqrshl_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqrshl_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUqrshl_vsvsvs<	ARCH>::OpUqrshl_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqrshl_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUqshl_vbbi<	ARCH>::OpUqshl_vbbi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshl_vbbi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 16) & 0x7);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUqshl_vbvbvb<	ARCH>::OpUqshl_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshl_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUqshl_vhhi<	ARCH>::OpUqshl_vhhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshl_vhhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 16) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUqshl_vhvhvh<	ARCH>::OpUqshl_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshl_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUqshl_vssi<	ARCH>::OpUqshl_vssi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshl_vssi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUqshl_vsvsvs<	ARCH>::OpUqshl_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqshl_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUqsub_vbvbvb<	ARCH>::OpUqsub_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqsub_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUqsub_vhvhvh<	ARCH>::OpUqsub_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqsub_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUqsub_vsvsvs<	ARCH>::OpUqsub_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uqsub_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUrecpe_vss<	ARCH>::OpUrecpe_vss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "urecpe_vss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUrhadd_vbvbvb<	ARCH>::OpUrhadd_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "urhadd_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUrhadd_vhvhvh<	ARCH>::OpUrhadd_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "urhadd_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUrhadd_vsvsvs<	ARCH>::OpUrhadd_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "urhadd_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUrshl_vbvbvb<	ARCH>::OpUrshl_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "urshl_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUrshl_vhvhvh<	ARCH>::OpUrshl_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "urshl_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUrshl_vsvsvs<	ARCH>::OpUrshl_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "urshl_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUrsqrte_vss<	ARCH>::OpUrsqrte_vss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ursqrte_vss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUshl_d<	ARCH>::OpUshl_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ushl_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUshl_vb<	ARCH>::OpUshl_vb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ushl_vb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUshl_vh<	ARCH>::OpUshl_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ushl_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUshl_vs<	ARCH>::OpUshl_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ushl_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUshl_v2d<	ARCH>::OpUshl_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ushl_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpUshll_v8h<	ARCH>::OpUshll_v8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ushll_v8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 16) & 0x7);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUshll_v4s<	ARCH>::OpUshll_v4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ushll_v4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 16) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUshll_v2d<	ARCH>::OpUshll_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ushll_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	imm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUshr_vbbi<	ARCH>::OpUshr_vbbi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ushr_vbbi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	sm = uint8_t((code >> 12) & 0x3);
	lro = uint8_t((code >> 16) & 0x7);
	q = uint8_t((code >> 30) & 0x1);
	round = uint8_t(sm >> 1 << 7) >> lro;
	shift = 8 - lro;
}

template <	typename	ARCH>
OpUshr_vhhi<	ARCH>::OpUshr_vhhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ushr_vhhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	sm = uint8_t((code >> 12) & 0x3);
	lro = uint8_t((code >> 16) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
	round = uint16_t(sm >> 1 << 15) >> lro;
	shift = 16 - lro;
}

template <	typename	ARCH>
OpUshr_vssi<	ARCH>::OpUshr_vssi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ushr_vssi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	sm = uint8_t((code >> 12) & 0x3);
	lro = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
	round = uint32_t(sm >> 1 << 31) >> lro;
	shift = 32 - lro;
}

template <	typename	ARCH>
OpUshr_v2d2di<	ARCH>::OpUshr_v2d2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ushr_v2d2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	sm = uint8_t((code >> 12) & 0x3);
	lro = uint8_t((code >> 16) & 0x3f);
	round = uint64_t(uint64_t(sm) >> 1 << 63) >> lro;
	shift0 = (64-lro)>>1;
	shift1 = 32-(lro>>1);
}

template <	typename	ARCH>
OpUsqadd_vbb<	ARCH>::OpUsqadd_vbb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "usqadd_vbb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUsqadd_vhh<	ARCH>::OpUsqadd_vhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "usqadd_vhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUsqadd_vss<	ARCH>::OpUsqadd_vss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "usqadd_vss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUzp1_vbvbvb<	ARCH>::OpUzp1_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uzp1_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUzp1_vhvhvh<	ARCH>::OpUzp1_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uzp1_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUzp1_vsvsvs<	ARCH>::OpUzp1_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uzp1_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUzp2_vbvbvb<	ARCH>::OpUzp2_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uzp2_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUzp2_vsvsvs<	ARCH>::OpUzp2_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "uzp2_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpZip1_vbvbvb<	ARCH>::OpZip1_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "zip1_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpZip1_vhvhvh<	ARCH>::OpZip1_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "zip1_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpZip1_vsvsvs<	ARCH>::OpZip1_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "zip1_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpZip2_vbvbvb<	ARCH>::OpZip2_vbvbvb(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "zip2_vbvbvb")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpZip2_vhvhvh<	ARCH>::OpZip2_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "zip2_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpZip2_vsvsvs<	ARCH>::OpZip2_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "zip2_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpStvms_bno<	ARCH>::OpStvms_bno(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvms_bno")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
}

template <	typename	ARCH>
OpStvms_bio<	ARCH>::OpStvms_bio(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvms_bio")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
}

template <	typename	ARCH>
OpStvms_hno<	ARCH>::OpStvms_hno(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvms_hno")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
}

template <	typename	ARCH>
OpStvms_hio<	ARCH>::OpStvms_hio(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvms_hio")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
}

template <	typename	ARCH>
OpStvms_sno<	ARCH>::OpStvms_sno(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvms_sno")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
}

template <	typename	ARCH>
OpStvms_sio<	ARCH>::OpStvms_sio(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvms_sio")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
}

template <	typename	ARCH>
OpStvms_dno<	ARCH>::OpStvms_dno(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvms_dno")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
	reject = not (q or vms.ses);
}

template <	typename	ARCH>
OpStvms_dio<	ARCH>::OpStvms_dio(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvms_dio")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
	reject = not (q or vms.ses);
}

template <	typename	ARCH>
OpLdvms_bno<	ARCH>::OpLdvms_bno(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvms_bno")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
}

template <	typename	ARCH>
OpLdvms_bio<	ARCH>::OpLdvms_bio(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvms_bio")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
}

template <	typename	ARCH>
OpLdvms_hno<	ARCH>::OpLdvms_hno(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvms_hno")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
}

template <	typename	ARCH>
OpLdvms_hio<	ARCH>::OpLdvms_hio(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvms_hio")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
}

template <	typename	ARCH>
OpLdvms_sno<	ARCH>::OpLdvms_sno(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvms_sno")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
}

template <	typename	ARCH>
OpLdvms_sio<	ARCH>::OpLdvms_sio(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvms_sio")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
}

template <	typename	ARCH>
OpLdvms_dno<	ARCH>::OpLdvms_dno(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvms_dno")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
	reject = not (q or vms.ses);
}

template <	typename	ARCH>
OpLdvms_dio<	ARCH>::OpLdvms_dio(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvms_dio")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	opcode = uint8_t((code >> 12) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
	vms = opcode;
	reject = not (q or vms.ses);
}

template <	typename	ARCH>
OpStvsl_bno<	ARCH>::OpStvsl_bno(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvsl_bno")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index0 = uint8_t((code >> 10) & 0x7);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	index1 = uint8_t((code >> 30) & 0x1);
	index = index1<<3|index0;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpStvsl_bio<	ARCH>::OpStvsl_bio(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvsl_bio")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index0 = uint8_t((code >> 10) & 0x7);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	index1 = uint8_t((code >> 30) & 0x1);
	index = index1<<3|index0;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpStvsl_hno<	ARCH>::OpStvsl_hno(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvsl_hno")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index0 = uint8_t((code >> 11) & 0x3);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	index1 = uint8_t((code >> 30) & 0x1);
	index = index1<<2|index0;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpStvsl_hio<	ARCH>::OpStvsl_hio(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvsl_hio")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index0 = uint8_t((code >> 11) & 0x3);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	index1 = uint8_t((code >> 30) & 0x1);
	index = index1<<2|index0;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpStvsl_sno<	ARCH>::OpStvsl_sno(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvsl_sno")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index0 = uint8_t((code >> 12) & 0x1);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	index1 = uint8_t((code >> 30) & 0x1);
	index = index1<<1|index0;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpStvsl_sio<	ARCH>::OpStvsl_sio(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvsl_sio")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index0 = uint8_t((code >> 12) & 0x1);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	index1 = uint8_t((code >> 30) & 0x1);
	index = index1<<1|index0;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpStvsl_dno<	ARCH>::OpStvsl_dno(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvsl_dno")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	index = uint8_t((code >> 30) & 0x1);
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpStvsl_dio<	ARCH>::OpStvsl_dio(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "stvsl_dio")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	index = uint8_t((code >> 30) & 0x1);
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvsl_bno<	ARCH>::OpLdvsl_bno(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvsl_bno")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index0 = uint8_t((code >> 10) & 0x7);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	index1 = uint8_t((code >> 30) & 0x1);
	index = index1<<3|index0;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvsl_bio<	ARCH>::OpLdvsl_bio(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvsl_bio")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index0 = uint8_t((code >> 10) & 0x7);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	index1 = uint8_t((code >> 30) & 0x1);
	index = index1<<3|index0;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvsl_hno<	ARCH>::OpLdvsl_hno(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvsl_hno")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index0 = uint8_t((code >> 11) & 0x3);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	index1 = uint8_t((code >> 30) & 0x1);
	index = index1<<2|index0;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvsl_hio<	ARCH>::OpLdvsl_hio(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvsl_hio")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index0 = uint8_t((code >> 11) & 0x3);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	index1 = uint8_t((code >> 30) & 0x1);
	index = index1<<2|index0;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvsl_sno<	ARCH>::OpLdvsl_sno(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvsl_sno")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index0 = uint8_t((code >> 12) & 0x1);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	index1 = uint8_t((code >> 30) & 0x1);
	index = index1<<1|index0;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvsl_sio<	ARCH>::OpLdvsl_sio(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvsl_sio")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index0 = uint8_t((code >> 12) & 0x1);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	index1 = uint8_t((code >> 30) & 0x1);
	index = index1<<1|index0;
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvsl_dno<	ARCH>::OpLdvsl_dno(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvsl_dno")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	index = uint8_t((code >> 30) & 0x1);
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvsl_dio<	ARCH>::OpLdvsl_dio(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvsl_dio")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	index = uint8_t((code >> 30) & 0x1);
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvr_bno<	ARCH>::OpLdvr_bno(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvr_bno")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	q = uint8_t((code >> 30) & 0x1);
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvr_bio<	ARCH>::OpLdvr_bio(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvr_bio")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	q = uint8_t((code >> 30) & 0x1);
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvr_hno<	ARCH>::OpLdvr_hno(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvr_hno")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	q = uint8_t((code >> 30) & 0x1);
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvr_hio<	ARCH>::OpLdvr_hio(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvr_hio")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	q = uint8_t((code >> 30) & 0x1);
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvr_sno<	ARCH>::OpLdvr_sno(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvr_sno")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	q = uint8_t((code >> 30) & 0x1);
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvr_sio<	ARCH>::OpLdvr_sio(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvr_sio")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	q = uint8_t((code >> 30) & 0x1);
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvr_dno<	ARCH>::OpLdvr_dno(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvr_dno")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	q = uint8_t((code >> 30) & 0x1);
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpLdvr_dio<	ARCH>::OpLdvr_dio(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ldvr_dio")
{
	rt = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	regs1 = uint8_t((code >> 13) & 0x1);
	regs0 = uint8_t((code >> 21) & 0x1);
	q = uint8_t((code >> 30) & 0x1);
	regs = (regs1<<1|regs0)+1;
}

template <	typename	ARCH>
OpFabd_h<	ARCH>::OpFabd_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fabd_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFabd_s<	ARCH>::OpFabd_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fabd_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFabd_d<	ARCH>::OpFabd_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fabd_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFabd_vh<	ARCH>::OpFabd_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fabd_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFabd_vs<	ARCH>::OpFabd_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fabd_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFabd_v2d<	ARCH>::OpFabd_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fabd_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFabs_h<	ARCH>::OpFabs_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fabs_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFabs_s<	ARCH>::OpFabs_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fabs_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFabs_d<	ARCH>::OpFabs_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fabs_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFabs_vh<	ARCH>::OpFabs_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fabs_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFabs_vs<	ARCH>::OpFabs_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fabs_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFabs_v2d<	ARCH>::OpFabs_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fabs_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFacge_h<	ARCH>::OpFacge_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "facge_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFacge_s<	ARCH>::OpFacge_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "facge_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFacge_d<	ARCH>::OpFacge_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "facge_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFacge_vh<	ARCH>::OpFacge_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "facge_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFacge_vs<	ARCH>::OpFacge_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "facge_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFacge_v2d<	ARCH>::OpFacge_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "facge_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFacgt_h<	ARCH>::OpFacgt_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "facgt_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFacgt_s<	ARCH>::OpFacgt_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "facgt_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFacgt_d<	ARCH>::OpFacgt_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "facgt_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFacgt_vh<	ARCH>::OpFacgt_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "facgt_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFacgt_vs<	ARCH>::OpFacgt_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "facgt_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFacgt_v2d<	ARCH>::OpFacgt_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "facgt_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFadd_h<	ARCH>::OpFadd_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fadd_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFadd_s<	ARCH>::OpFadd_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fadd_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFadd_d<	ARCH>::OpFadd_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fadd_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFadd_vh<	ARCH>::OpFadd_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fadd_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFadd_vs<	ARCH>::OpFadd_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fadd_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFadd_v2d<	ARCH>::OpFadd_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fadd_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFaddp_h<	ARCH>::OpFaddp_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "faddp_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFaddp_s<	ARCH>::OpFaddp_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "faddp_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFaddp_d<	ARCH>::OpFaddp_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "faddp_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFaddp_vh<	ARCH>::OpFaddp_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "faddp_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFaddp_vs<	ARCH>::OpFaddp_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "faddp_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFaddp_v2d<	ARCH>::OpFaddp_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "faddp_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFccmp_h<	ARCH>::OpFccmp_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fccmp_h")
{
	v = uint8_t(code & 0x1);
	c = uint8_t((code >> 1) & 0x1);
	z = uint8_t((code >> 2) & 0x1);
	n = uint8_t((code >> 3) & 0x1);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFccmp_s<	ARCH>::OpFccmp_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fccmp_s")
{
	v = uint8_t(code & 0x1);
	c = uint8_t((code >> 1) & 0x1);
	z = uint8_t((code >> 2) & 0x1);
	n = uint8_t((code >> 3) & 0x1);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFccmp_d<	ARCH>::OpFccmp_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fccmp_d")
{
	v = uint8_t(code & 0x1);
	c = uint8_t((code >> 1) & 0x1);
	z = uint8_t((code >> 2) & 0x1);
	n = uint8_t((code >> 3) & 0x1);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFccmpe_d<	ARCH>::OpFccmpe_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fccmpe_d")
{
	v = uint8_t(code & 0x1);
	c = uint8_t((code >> 1) & 0x1);
	z = uint8_t((code >> 2) & 0x1);
	n = uint8_t((code >> 3) & 0x1);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFccmpe_s<	ARCH>::OpFccmpe_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fccmpe_s")
{
	v = uint8_t(code & 0x1);
	c = uint8_t((code >> 1) & 0x1);
	z = uint8_t((code >> 2) & 0x1);
	n = uint8_t((code >> 3) & 0x1);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFccmpe_h<	ARCH>::OpFccmpe_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fccmpe_h")
{
	v = uint8_t(code & 0x1);
	c = uint8_t((code >> 1) & 0x1);
	z = uint8_t((code >> 2) & 0x1);
	n = uint8_t((code >> 3) & 0x1);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFcmeq_h<	ARCH>::OpFcmeq_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmeq_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFcmeq_s<	ARCH>::OpFcmeq_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmeq_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFcmeq_d<	ARCH>::OpFcmeq_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmeq_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFcmeq_vh<	ARCH>::OpFcmeq_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmeq_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcmeq_vs<	ARCH>::OpFcmeq_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmeq_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcmeq_v2d<	ARCH>::OpFcmeq_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmeq_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFcmeq_hz<	ARCH>::OpFcmeq_hz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmeq_hz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcmeq_sz<	ARCH>::OpFcmeq_sz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmeq_sz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcmeq_dz<	ARCH>::OpFcmeq_dz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmeq_dz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcmeq_vhz<	ARCH>::OpFcmeq_vhz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmeq_vhz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcmeq_vsz<	ARCH>::OpFcmeq_vsz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmeq_vsz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcmeq_v2dz<	ARCH>::OpFcmeq_v2dz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmeq_v2dz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcmge_h<	ARCH>::OpFcmge_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmge_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFcmge_s<	ARCH>::OpFcmge_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmge_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFcmge_d<	ARCH>::OpFcmge_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmge_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFcmge_vh<	ARCH>::OpFcmge_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmge_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcmge_vs<	ARCH>::OpFcmge_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmge_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcmge_v2d<	ARCH>::OpFcmge_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmge_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFcmge_hz<	ARCH>::OpFcmge_hz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmge_hz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcmge_sz<	ARCH>::OpFcmge_sz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmge_sz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcmge_dz<	ARCH>::OpFcmge_dz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmge_dz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcmge_vhz<	ARCH>::OpFcmge_vhz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmge_vhz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcmge_vsz<	ARCH>::OpFcmge_vsz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmge_vsz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcmge_v2dz<	ARCH>::OpFcmge_v2dz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmge_v2dz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcmgt_h<	ARCH>::OpFcmgt_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmgt_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFcmgt_s<	ARCH>::OpFcmgt_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmgt_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFcmgt_d<	ARCH>::OpFcmgt_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmgt_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFcmgt_vh<	ARCH>::OpFcmgt_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmgt_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcmgt_vs<	ARCH>::OpFcmgt_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmgt_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcmgt_v2d<	ARCH>::OpFcmgt_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmgt_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFcmgt_hz<	ARCH>::OpFcmgt_hz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmgt_hz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcmgt_sz<	ARCH>::OpFcmgt_sz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmgt_sz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcmgt_dz<	ARCH>::OpFcmgt_dz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmgt_dz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcmgt_vhz<	ARCH>::OpFcmgt_vhz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmgt_vhz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcmgt_vsz<	ARCH>::OpFcmgt_vsz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmgt_vsz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcmgt_v2dz<	ARCH>::OpFcmgt_v2dz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmgt_v2dz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcmle_hz<	ARCH>::OpFcmle_hz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmle_hz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcmle_sz<	ARCH>::OpFcmle_sz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmle_sz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcmle_dz<	ARCH>::OpFcmle_dz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmle_dz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcmle_vhz<	ARCH>::OpFcmle_vhz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmle_vhz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcmle_vsz<	ARCH>::OpFcmle_vsz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmle_vsz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcmle_v2dz<	ARCH>::OpFcmle_v2dz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmle_v2dz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcmlt_hz<	ARCH>::OpFcmlt_hz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmlt_hz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcmlt_sz<	ARCH>::OpFcmlt_sz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmlt_sz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcmlt_dz<	ARCH>::OpFcmlt_dz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmlt_dz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcmlt_vhz<	ARCH>::OpFcmlt_vhz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmlt_vhz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcmlt_vsz<	ARCH>::OpFcmlt_vsz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmlt_vsz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcmlt_v2dz<	ARCH>::OpFcmlt_v2dz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmlt_v2dz")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcmp_h<	ARCH>::OpFcmp_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmp_h")
{
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFcmp_s<	ARCH>::OpFcmp_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmp_s")
{
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFcmp_d<	ARCH>::OpFcmp_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmp_d")
{
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFcmp_hz<	ARCH>::OpFcmp_hz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmp_hz")
{
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = rm != 0;
}

template <	typename	ARCH>
OpFcmp_sz<	ARCH>::OpFcmp_sz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmp_sz")
{
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = rm != 0;
}

template <	typename	ARCH>
OpFcmp_dz<	ARCH>::OpFcmp_dz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmp_dz")
{
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = rm != 0;
}

template <	typename	ARCH>
OpFcmpe_h<	ARCH>::OpFcmpe_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmpe_h")
{
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFcmpe_s<	ARCH>::OpFcmpe_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmpe_s")
{
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFcmpe_d<	ARCH>::OpFcmpe_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmpe_d")
{
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFcmpe_hz<	ARCH>::OpFcmpe_hz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmpe_hz")
{
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = rm != 0;
}

template <	typename	ARCH>
OpFcmpe_sz<	ARCH>::OpFcmpe_sz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmpe_sz")
{
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = rm != 0;
}

template <	typename	ARCH>
OpFcmpe_dz<	ARCH>::OpFcmpe_dz(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcmpe_dz")
{
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	reject = rm != 0;
}

template <	typename	ARCH>
OpFcsel_h<	ARCH>::OpFcsel_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcsel_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFcsel_s<	ARCH>::OpFcsel_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcsel_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFcsel_d<	ARCH>::OpFcsel_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcsel_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	cond = uint8_t((code >> 12) & 0xf);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFcvt_hs<	ARCH>::OpFcvt_hs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvt_hs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvt_hd<	ARCH>::OpFcvt_hd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvt_hd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvt_sh<	ARCH>::OpFcvt_sh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvt_sh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvt_sd<	ARCH>::OpFcvt_sd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvt_sd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvt_dh<	ARCH>::OpFcvt_dh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvt_dh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvt_ds<	ARCH>::OpFcvt_ds(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvt_ds")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtas_hh<	ARCH>::OpFcvtas_hh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtas_hh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtas_ss<	ARCH>::OpFcvtas_ss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtas_ss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtas_dd<	ARCH>::OpFcvtas_dd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtas_dd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtas_wh<	ARCH>::OpFcvtas_wh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtas_wh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtas_ws<	ARCH>::OpFcvtas_ws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtas_ws")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtas_wd<	ARCH>::OpFcvtas_wd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtas_wd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtas_xh<	ARCH>::OpFcvtas_xh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtas_xh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtas_xs<	ARCH>::OpFcvtas_xs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtas_xs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtas_xd<	ARCH>::OpFcvtas_xd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtas_xd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtas_vhh<	ARCH>::OpFcvtas_vhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtas_vhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcvtas_vss<	ARCH>::OpFcvtas_vss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtas_vss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcvtas_v2d2d<	ARCH>::OpFcvtas_v2d2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtas_v2d2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtau_hh<	ARCH>::OpFcvtau_hh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtau_hh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtau_ss<	ARCH>::OpFcvtau_ss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtau_ss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtau_dd<	ARCH>::OpFcvtau_dd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtau_dd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtau_wh<	ARCH>::OpFcvtau_wh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtau_wh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtau_ws<	ARCH>::OpFcvtau_ws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtau_ws")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtau_wd<	ARCH>::OpFcvtau_wd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtau_wd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtau_xh<	ARCH>::OpFcvtau_xh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtau_xh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtau_xs<	ARCH>::OpFcvtau_xs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtau_xs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtau_xd<	ARCH>::OpFcvtau_xd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtau_xd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtau_vhh<	ARCH>::OpFcvtau_vhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtau_vhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcvtau_vss<	ARCH>::OpFcvtau_vss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtau_vss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcvtau_v2d2d<	ARCH>::OpFcvtau_v2d2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtau_v2d2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtl2_v2d4s<	ARCH>::OpFcvtl2_v2d4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtl2_v2d4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtl2_v4s8h<	ARCH>::OpFcvtl2_v4s8h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtl2_v4s8h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtl_v2d2s<	ARCH>::OpFcvtl_v2d2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtl_v2d2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtl_v4s4h<	ARCH>::OpFcvtl_v4s4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtl_v4s4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtms_hh<	ARCH>::OpFcvtms_hh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtms_hh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtms_ss<	ARCH>::OpFcvtms_ss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtms_ss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtms_dd<	ARCH>::OpFcvtms_dd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtms_dd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtms_wh<	ARCH>::OpFcvtms_wh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtms_wh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtms_ws<	ARCH>::OpFcvtms_ws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtms_ws")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtms_wd<	ARCH>::OpFcvtms_wd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtms_wd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtms_xh<	ARCH>::OpFcvtms_xh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtms_xh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtms_xs<	ARCH>::OpFcvtms_xs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtms_xs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtms_xd<	ARCH>::OpFcvtms_xd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtms_xd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtms_vhh<	ARCH>::OpFcvtms_vhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtms_vhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcvtms_vss<	ARCH>::OpFcvtms_vss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtms_vss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcvtms_v2d2d<	ARCH>::OpFcvtms_v2d2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtms_v2d2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtmu_hh<	ARCH>::OpFcvtmu_hh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtmu_hh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtmu_ss<	ARCH>::OpFcvtmu_ss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtmu_ss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtmu_dd<	ARCH>::OpFcvtmu_dd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtmu_dd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtmu_wh<	ARCH>::OpFcvtmu_wh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtmu_wh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtmu_ws<	ARCH>::OpFcvtmu_ws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtmu_ws")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtmu_wd<	ARCH>::OpFcvtmu_wd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtmu_wd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtmu_xh<	ARCH>::OpFcvtmu_xh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtmu_xh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtmu_xs<	ARCH>::OpFcvtmu_xs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtmu_xs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtmu_xd<	ARCH>::OpFcvtmu_xd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtmu_xd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtmu_vhh<	ARCH>::OpFcvtmu_vhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtmu_vhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcvtmu_vss<	ARCH>::OpFcvtmu_vss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtmu_vss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcvtmu_v2d2d<	ARCH>::OpFcvtmu_v2d2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtmu_v2d2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtn2_v4s2d<	ARCH>::OpFcvtn2_v4s2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtn2_v4s2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtn2_v8h4s<	ARCH>::OpFcvtn2_v8h4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtn2_v8h4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtn_v2s2d<	ARCH>::OpFcvtn_v2s2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtn_v2s2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtn_v4h4s<	ARCH>::OpFcvtn_v4h4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtn_v4h4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtns_hh<	ARCH>::OpFcvtns_hh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtns_hh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtns_ss<	ARCH>::OpFcvtns_ss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtns_ss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtns_dd<	ARCH>::OpFcvtns_dd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtns_dd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtns_wh<	ARCH>::OpFcvtns_wh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtns_wh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtns_ws<	ARCH>::OpFcvtns_ws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtns_ws")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtns_wd<	ARCH>::OpFcvtns_wd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtns_wd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtns_xh<	ARCH>::OpFcvtns_xh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtns_xh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtns_xs<	ARCH>::OpFcvtns_xs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtns_xs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtns_xd<	ARCH>::OpFcvtns_xd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtns_xd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtns_vhh<	ARCH>::OpFcvtns_vhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtns_vhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcvtns_vss<	ARCH>::OpFcvtns_vss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtns_vss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcvtns_v2d2d<	ARCH>::OpFcvtns_v2d2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtns_v2d2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtnu_hh<	ARCH>::OpFcvtnu_hh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtnu_hh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtnu_ss<	ARCH>::OpFcvtnu_ss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtnu_ss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtnu_dd<	ARCH>::OpFcvtnu_dd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtnu_dd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtnu_wh<	ARCH>::OpFcvtnu_wh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtnu_wh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtnu_ws<	ARCH>::OpFcvtnu_ws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtnu_ws")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtnu_wd<	ARCH>::OpFcvtnu_wd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtnu_wd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtnu_xh<	ARCH>::OpFcvtnu_xh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtnu_xh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtnu_xs<	ARCH>::OpFcvtnu_xs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtnu_xs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtnu_xd<	ARCH>::OpFcvtnu_xd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtnu_xd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtnu_vhh<	ARCH>::OpFcvtnu_vhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtnu_vhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcvtnu_vss<	ARCH>::OpFcvtnu_vss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtnu_vss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcvtnu_v2d2d<	ARCH>::OpFcvtnu_v2d2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtnu_v2d2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtps_hh<	ARCH>::OpFcvtps_hh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtps_hh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtps_ss<	ARCH>::OpFcvtps_ss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtps_ss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtps_dd<	ARCH>::OpFcvtps_dd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtps_dd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtps_wh<	ARCH>::OpFcvtps_wh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtps_wh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtps_ws<	ARCH>::OpFcvtps_ws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtps_ws")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtps_wd<	ARCH>::OpFcvtps_wd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtps_wd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtps_xh<	ARCH>::OpFcvtps_xh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtps_xh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtps_xs<	ARCH>::OpFcvtps_xs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtps_xs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtps_xd<	ARCH>::OpFcvtps_xd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtps_xd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtps_vhh<	ARCH>::OpFcvtps_vhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtps_vhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcvtps_vss<	ARCH>::OpFcvtps_vss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtps_vss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcvtps_v2d2d<	ARCH>::OpFcvtps_v2d2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtps_v2d2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtpu_hh<	ARCH>::OpFcvtpu_hh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtpu_hh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtpu_ss<	ARCH>::OpFcvtpu_ss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtpu_ss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtpu_dd<	ARCH>::OpFcvtpu_dd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtpu_dd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtpu_wh<	ARCH>::OpFcvtpu_wh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtpu_wh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtpu_ws<	ARCH>::OpFcvtpu_ws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtpu_ws")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtpu_wd<	ARCH>::OpFcvtpu_wd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtpu_wd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtpu_xh<	ARCH>::OpFcvtpu_xh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtpu_xh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtpu_xs<	ARCH>::OpFcvtpu_xs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtpu_xs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtpu_xd<	ARCH>::OpFcvtpu_xd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtpu_xd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtpu_vhh<	ARCH>::OpFcvtpu_vhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtpu_vhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcvtpu_vss<	ARCH>::OpFcvtpu_vss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtpu_vss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcvtpu_v2d2d<	ARCH>::OpFcvtpu_v2d2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtpu_v2d2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtxn2_v4s2d<	ARCH>::OpFcvtxn2_v4s2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtxn2_v4s2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtxn_sd<	ARCH>::OpFcvtxn_sd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtxn_sd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtxn_v2s2d<	ARCH>::OpFcvtxn_v2s2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtxn_v2s2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtzs_hh<	ARCH>::OpFcvtzs_hh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_hh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtzs_ss<	ARCH>::OpFcvtzs_ss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_ss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtzs_dd<	ARCH>::OpFcvtzs_dd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_dd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtzs_wh<	ARCH>::OpFcvtzs_wh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_wh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtzs_ws<	ARCH>::OpFcvtzs_ws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_ws")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtzs_wd<	ARCH>::OpFcvtzs_wd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_wd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtzs_xh<	ARCH>::OpFcvtzs_xh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_xh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtzs_xs<	ARCH>::OpFcvtzs_xs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_xs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtzs_xd<	ARCH>::OpFcvtzs_xd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_xd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtzs_vhh<	ARCH>::OpFcvtzs_vhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_vhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcvtzs_vss<	ARCH>::OpFcvtzs_vss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_vss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcvtzs_v2d2d<	ARCH>::OpFcvtzs_v2d2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_v2d2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtzs_whi<	ARCH>::OpFcvtzs_whi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_whi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x1f);
	fbits = 32-scale;
}

template <	typename	ARCH>
OpFcvtzs_wsi<	ARCH>::OpFcvtzs_wsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_wsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x1f);
	fbits = 32-scale;
}

template <	typename	ARCH>
OpFcvtzs_wdi<	ARCH>::OpFcvtzs_wdi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_wdi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x1f);
	fbits = 32-scale;
}

template <	typename	ARCH>
OpFcvtzs_xhi<	ARCH>::OpFcvtzs_xhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_xhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x3f);
	fbits = 64-scale;
}

template <	typename	ARCH>
OpFcvtzs_xsi<	ARCH>::OpFcvtzs_xsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_xsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x3f);
	fbits = 64-scale;
}

template <	typename	ARCH>
OpFcvtzs_xdi<	ARCH>::OpFcvtzs_xdi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_xdi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x3f);
	fbits = 64-scale;
}

template <	typename	ARCH>
OpFcvtzs_hhi<	ARCH>::OpFcvtzs_hhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_hhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	fbits = 16 - lro;
}

template <	typename	ARCH>
OpFcvtzs_ssi<	ARCH>::OpFcvtzs_ssi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_ssi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	fbits = 32 - lro;
}

template <	typename	ARCH>
OpFcvtzs_ddi<	ARCH>::OpFcvtzs_ddi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_ddi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x3f);
	fbits = 64 - lro;
}

template <	typename	ARCH>
OpFcvtzs_vhhi<	ARCH>::OpFcvtzs_vhhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_vhhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
	fbits = 16 - lro;
}

template <	typename	ARCH>
OpFcvtzs_vssi<	ARCH>::OpFcvtzs_vssi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_vssi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
	fbits = 32 - lro;
}

template <	typename	ARCH>
OpFcvtzs_v2d2di<	ARCH>::OpFcvtzs_v2d2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzs_v2d2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x3f);
	fbits = 64 - lro;
}

template <	typename	ARCH>
OpFcvtzu_hh<	ARCH>::OpFcvtzu_hh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_hh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtzu_ss<	ARCH>::OpFcvtzu_ss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_ss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtzu_dd<	ARCH>::OpFcvtzu_dd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_dd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtzu_wh<	ARCH>::OpFcvtzu_wh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_wh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtzu_ws<	ARCH>::OpFcvtzu_ws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_ws")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtzu_wd<	ARCH>::OpFcvtzu_wd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_wd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtzu_xh<	ARCH>::OpFcvtzu_xh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_xh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtzu_xs<	ARCH>::OpFcvtzu_xs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_xs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtzu_xd<	ARCH>::OpFcvtzu_xd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_xd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtzu_vhh<	ARCH>::OpFcvtzu_vhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_vhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcvtzu_vss<	ARCH>::OpFcvtzu_vss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_vss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFcvtzu_v2d2d<	ARCH>::OpFcvtzu_v2d2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_v2d2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFcvtzu_whi<	ARCH>::OpFcvtzu_whi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_whi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x1f);
	fbits = 32-scale;
}

template <	typename	ARCH>
OpFcvtzu_wsi<	ARCH>::OpFcvtzu_wsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_wsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x1f);
	fbits = 32-scale;
}

template <	typename	ARCH>
OpFcvtzu_xhi<	ARCH>::OpFcvtzu_xhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_xhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x3f);
	fbits = 64-scale;
}

template <	typename	ARCH>
OpFcvtzu_xsi<	ARCH>::OpFcvtzu_xsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_xsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x3f);
	fbits = 64-scale;
}

template <	typename	ARCH>
OpFcvtzu_wdi<	ARCH>::OpFcvtzu_wdi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_wdi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x1f);
	fbits = 32-scale;
}

template <	typename	ARCH>
OpFcvtzu_xdi<	ARCH>::OpFcvtzu_xdi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_xdi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x3f);
	fbits = 64-scale;
}

template <	typename	ARCH>
OpFcvtzu_hhi<	ARCH>::OpFcvtzu_hhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_hhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	fbits = 16 - lro;
}

template <	typename	ARCH>
OpFcvtzu_ssi<	ARCH>::OpFcvtzu_ssi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_ssi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	fbits = 32 - lro;
}

template <	typename	ARCH>
OpFcvtzu_ddi<	ARCH>::OpFcvtzu_ddi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_ddi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x3f);
	fbits = 64 - lro;
}

template <	typename	ARCH>
OpFcvtzu_vhhi<	ARCH>::OpFcvtzu_vhhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_vhhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
	fbits = 16 - lro;
}

template <	typename	ARCH>
OpFcvtzu_vssi<	ARCH>::OpFcvtzu_vssi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_vssi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
	fbits = 32 - lro;
}

template <	typename	ARCH>
OpFcvtzu_v2d2di<	ARCH>::OpFcvtzu_v2d2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fcvtzu_v2d2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x3f);
	fbits = 64 - lro;
}

template <	typename	ARCH>
OpFdiv_h<	ARCH>::OpFdiv_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fdiv_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFdiv_s<	ARCH>::OpFdiv_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fdiv_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFdiv_d<	ARCH>::OpFdiv_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fdiv_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFdiv_vh<	ARCH>::OpFdiv_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fdiv_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFdiv_vs<	ARCH>::OpFdiv_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fdiv_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFdiv_v2d<	ARCH>::OpFdiv_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fdiv_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmadd_h<	ARCH>::OpFmadd_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmadd_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	ra = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmadd_s<	ARCH>::OpFmadd_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmadd_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	ra = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmadd_d<	ARCH>::OpFmadd_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmadd_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	ra = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmax_h<	ARCH>::OpFmax_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmax_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmax_s<	ARCH>::OpFmax_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmax_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmax_d<	ARCH>::OpFmax_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmax_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmax_vh<	ARCH>::OpFmax_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmax_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFmax_vs<	ARCH>::OpFmax_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmax_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFmax_v2d<	ARCH>::OpFmax_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmax_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmaxnm_h<	ARCH>::OpFmaxnm_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxnm_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmaxnm_s<	ARCH>::OpFmaxnm_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxnm_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmaxnm_d<	ARCH>::OpFmaxnm_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxnm_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmaxnm_vh<	ARCH>::OpFmaxnm_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxnm_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFmaxnm_vs<	ARCH>::OpFmaxnm_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxnm_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFmaxnm_v2d<	ARCH>::OpFmaxnm_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxnm_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmaxnmp_dv2d<	ARCH>::OpFmaxnmp_dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxnmp_dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmaxnmp_hv2h<	ARCH>::OpFmaxnmp_hv2h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxnmp_hv2h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmaxnmp_sv2s<	ARCH>::OpFmaxnmp_sv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxnmp_sv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmaxnmp_vhvhvh<	ARCH>::OpFmaxnmp_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxnmp_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFmaxnmp_vsvsvs<	ARCH>::OpFmaxnmp_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxnmp_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFmaxnmp_v2dv2dv2d<	ARCH>::OpFmaxnmp_v2dv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxnmp_v2dv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmaxnmv_hv2h<	ARCH>::OpFmaxnmv_hv2h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxnmv_hv2h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmaxnmv_hv4h<	ARCH>::OpFmaxnmv_hv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxnmv_hv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmaxnmv_sv4s<	ARCH>::OpFmaxnmv_sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxnmv_sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmaxp_dv2d<	ARCH>::OpFmaxp_dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxp_dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmaxp_hv2h<	ARCH>::OpFmaxp_hv2h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxp_hv2h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmaxp_sv2s<	ARCH>::OpFmaxp_sv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxp_sv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmaxp_vhvhvh<	ARCH>::OpFmaxp_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxp_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFmaxp_vsvsvs<	ARCH>::OpFmaxp_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxp_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFmaxp_v2dv2dv2d<	ARCH>::OpFmaxp_v2dv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxp_v2dv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmaxv_hv2h<	ARCH>::OpFmaxv_hv2h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxv_hv2h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmaxv_hv4h<	ARCH>::OpFmaxv_hv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxv_hv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmaxv_sv4s<	ARCH>::OpFmaxv_sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmaxv_sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmin_h<	ARCH>::OpFmin_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmin_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmin_s<	ARCH>::OpFmin_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmin_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmin_d<	ARCH>::OpFmin_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmin_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmin_vh<	ARCH>::OpFmin_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmin_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFmin_vs<	ARCH>::OpFmin_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmin_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFmin_v2d<	ARCH>::OpFmin_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmin_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFminnm_h<	ARCH>::OpFminnm_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminnm_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFminnm_s<	ARCH>::OpFminnm_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminnm_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFminnm_d<	ARCH>::OpFminnm_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminnm_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFminnm_vh<	ARCH>::OpFminnm_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminnm_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFminnm_vs<	ARCH>::OpFminnm_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminnm_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFminnm_v2d<	ARCH>::OpFminnm_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminnm_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFminnmp_hv2h<	ARCH>::OpFminnmp_hv2h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminnmp_hv2h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFminnmp_sv2s<	ARCH>::OpFminnmp_sv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminnmp_sv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFminnmp_dv2d<	ARCH>::OpFminnmp_dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminnmp_dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFminnmp_vhvhvh<	ARCH>::OpFminnmp_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminnmp_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFminnmp_vsvsvs<	ARCH>::OpFminnmp_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminnmp_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFminnmp_v2dv2dv2d<	ARCH>::OpFminnmp_v2dv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminnmp_v2dv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFminnmv_hv2h<	ARCH>::OpFminnmv_hv2h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminnmv_hv2h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFminnmv_hv4h<	ARCH>::OpFminnmv_hv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminnmv_hv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFminnmv_sv4s<	ARCH>::OpFminnmv_sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminnmv_sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFminp_hv2h<	ARCH>::OpFminp_hv2h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminp_hv2h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFminp_sv2s<	ARCH>::OpFminp_sv2s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminp_sv2s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFminp_dv2d<	ARCH>::OpFminp_dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminp_dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFminp_vhvhvh<	ARCH>::OpFminp_vhvhvh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminp_vhvhvh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFminp_vsvsvs<	ARCH>::OpFminp_vsvsvs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminp_vsvsvs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFminp_v2dv2dv2d<	ARCH>::OpFminp_v2dv2dv2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminp_v2dv2dv2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFminv_hv2h<	ARCH>::OpFminv_hv2h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminv_hv2h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFminv_hv4h<	ARCH>::OpFminv_hv4h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminv_hv4h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFminv_sv4s<	ARCH>::OpFminv_sv4s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fminv_sv4s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmla_hi<	ARCH>::OpFmla_hi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmla_hi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpFmla_si<	ARCH>::OpFmla_si(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmla_si")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpFmla_di<	ARCH>::OpFmla_di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmla_di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 11) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmla_vhi<	ARCH>::OpFmla_vhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmla_vhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	q = uint8_t((code >> 30) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpFmla_vsi<	ARCH>::OpFmla_vsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmla_vsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	q = uint8_t((code >> 30) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpFmla_v2di<	ARCH>::OpFmla_v2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmla_v2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 11) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmla_vh<	ARCH>::OpFmla_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmla_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFmla_vs<	ARCH>::OpFmla_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmla_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFmla_v2d<	ARCH>::OpFmla_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmla_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmls_hi<	ARCH>::OpFmls_hi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmls_hi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpFmls_si<	ARCH>::OpFmls_si(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmls_si")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpFmls_di<	ARCH>::OpFmls_di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmls_di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 11) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmls_vhi<	ARCH>::OpFmls_vhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmls_vhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	q = uint8_t((code >> 30) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpFmls_vsi<	ARCH>::OpFmls_vsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmls_vsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	q = uint8_t((code >> 30) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpFmls_v2di<	ARCH>::OpFmls_v2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmls_v2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 11) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmls_vh<	ARCH>::OpFmls_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmls_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFmls_vs<	ARCH>::OpFmls_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmls_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFmls_v2d<	ARCH>::OpFmls_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmls_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmov_hh<	ARCH>::OpFmov_hh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmov_hh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmov_ss<	ARCH>::OpFmov_ss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmov_ss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmov_dd<	ARCH>::OpFmov_dd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmov_dd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmov_hf<	ARCH>::OpFmov_hf(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmov_hf")
{
	rd = uint8_t(code & 0x1f);
	fpimm = uint8_t((code >> 13) & 0xff);
	imm = fpimm;
}

template <	typename	ARCH>
OpFmov_sf<	ARCH>::OpFmov_sf(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmov_sf")
{
	rd = uint8_t(code & 0x1f);
	fpimm = uint8_t((code >> 13) & 0xff);
	imm = fpimm;
}

template <	typename	ARCH>
OpFmov_df<	ARCH>::OpFmov_df(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmov_df")
{
	rd = uint8_t(code & 0x1f);
	fpimm = uint8_t((code >> 13) & 0xff);
	imm = fpimm;
}

template <	typename	ARCH>
OpFmov_vhf<	ARCH>::OpFmov_vhf(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmov_vhf")
{
	rd = uint8_t(code & 0x1f);
	imm0 = uint8_t((code >> 5) & 0x1f);
	imm1 = uint8_t((code >> 16) & 0x7) << 5;
	q = uint8_t((code >> 30) & 0x1);
	imm = imm1|imm0;
}

template <	typename	ARCH>
OpFmov_vsf<	ARCH>::OpFmov_vsf(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmov_vsf")
{
	rd = uint8_t(code & 0x1f);
	imm0 = uint8_t((code >> 5) & 0x1f);
	imm1 = uint8_t((code >> 16) & 0x7) << 5;
	q = uint8_t((code >> 30) & 0x1);
	imm = imm1|imm0;
}

template <	typename	ARCH>
OpFmov_v2df<	ARCH>::OpFmov_v2df(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmov_v2df")
{
	rd = uint8_t(code & 0x1f);
	imm0 = uint8_t((code >> 5) & 0x1f);
	imm1 = uint8_t((code >> 16) & 0x7) << 5;
	imm = imm1|imm0;
}

template <	typename	ARCH>
OpFmov_hw<	ARCH>::OpFmov_hw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmov_hw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmov_hx<	ARCH>::OpFmov_hx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmov_hx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmov_wh<	ARCH>::OpFmov_wh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmov_wh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmov_sw<	ARCH>::OpFmov_sw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmov_sw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmov_ws<	ARCH>::OpFmov_ws(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmov_ws")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmov_dx<	ARCH>::OpFmov_dx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmov_dx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmov_dix<	ARCH>::OpFmov_dix(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmov_dix")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmov_xh<	ARCH>::OpFmov_xh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmov_xh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmov_xd<	ARCH>::OpFmov_xd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmov_xd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmov_xdi<	ARCH>::OpFmov_xdi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmov_xdi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFmsub_h<	ARCH>::OpFmsub_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmsub_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	ra = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmsub_s<	ARCH>::OpFmsub_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmsub_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	ra = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmsub_d<	ARCH>::OpFmsub_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmsub_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	ra = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmul_h<	ARCH>::OpFmul_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmul_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmul_s<	ARCH>::OpFmul_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmul_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmul_d<	ARCH>::OpFmul_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmul_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmul_vh<	ARCH>::OpFmul_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmul_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFmul_vs<	ARCH>::OpFmul_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmul_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFmul_v2d<	ARCH>::OpFmul_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmul_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmul_hi<	ARCH>::OpFmul_hi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmul_hi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpFmul_si<	ARCH>::OpFmul_si(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmul_si")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpFmul_di<	ARCH>::OpFmul_di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmul_di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 11) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmul_vhi<	ARCH>::OpFmul_vhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmul_vhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	q = uint8_t((code >> 30) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpFmul_vsi<	ARCH>::OpFmul_vsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmul_vsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	q = uint8_t((code >> 30) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpFmul_v2di<	ARCH>::OpFmul_v2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmul_v2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 11) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmulx_h<	ARCH>::OpFmulx_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmulx_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmulx_s<	ARCH>::OpFmulx_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmulx_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmulx_d<	ARCH>::OpFmulx_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmulx_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmulx_vh<	ARCH>::OpFmulx_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmulx_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFmulx_vs<	ARCH>::OpFmulx_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmulx_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFmulx_v2d<	ARCH>::OpFmulx_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmulx_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmulx_hi<	ARCH>::OpFmulx_hi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmulx_hi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	index = index1|index0;
}

template <	typename	ARCH>
OpFmulx_si<	ARCH>::OpFmulx_si(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmulx_si")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpFmulx_di<	ARCH>::OpFmulx_di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmulx_di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 11) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFmulx_vhi<	ARCH>::OpFmulx_vhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmulx_vhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 2;
	rm = uint8_t((code >> 16) & 0xf);
	index0 = uint8_t((code >> 20) & 0x3);
	q = uint8_t((code >> 30) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpFmulx_vsi<	ARCH>::OpFmulx_vsi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmulx_vsi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index1 = uint8_t((code >> 11) & 0x1) << 1;
	rm = uint8_t((code >> 16) & 0x1f);
	index0 = uint8_t((code >> 21) & 0x1);
	q = uint8_t((code >> 30) & 0x1);
	index = index1|index0;
}

template <	typename	ARCH>
OpFmulx_v2di<	ARCH>::OpFmulx_v2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fmulx_v2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	index = uint8_t((code >> 11) & 0x1);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFneg_hh<	ARCH>::OpFneg_hh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fneg_hh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFneg_ss<	ARCH>::OpFneg_ss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fneg_ss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFneg_dd<	ARCH>::OpFneg_dd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fneg_dd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFneg_vhh<	ARCH>::OpFneg_vhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fneg_vhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFneg_vss<	ARCH>::OpFneg_vss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fneg_vss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFneg_v2d2d<	ARCH>::OpFneg_v2d2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fneg_v2d2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFnmadd_h<	ARCH>::OpFnmadd_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fnmadd_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	ra = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFnmadd_s<	ARCH>::OpFnmadd_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fnmadd_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	ra = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFnmadd_d<	ARCH>::OpFnmadd_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fnmadd_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	ra = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFnmsub_h<	ARCH>::OpFnmsub_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fnmsub_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	ra = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFnmsub_s<	ARCH>::OpFnmsub_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fnmsub_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	ra = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFnmsub_d<	ARCH>::OpFnmsub_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fnmsub_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	ra = uint8_t((code >> 10) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFnmul_hhh<	ARCH>::OpFnmul_hhh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fnmul_hhh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFnmul_sss<	ARCH>::OpFnmul_sss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fnmul_sss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFnmul_ddd<	ARCH>::OpFnmul_ddd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fnmul_ddd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFrecpe_s<	ARCH>::OpFrecpe_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frecpe_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrecpe_d<	ARCH>::OpFrecpe_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frecpe_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrecpe_vs<	ARCH>::OpFrecpe_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frecpe_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFrecpe_v2d<	ARCH>::OpFrecpe_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frecpe_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrecps_s<	ARCH>::OpFrecps_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frecps_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFrecps_d<	ARCH>::OpFrecps_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frecps_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFrecps_vs<	ARCH>::OpFrecps_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frecps_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFrecps_v2d<	ARCH>::OpFrecps_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frecps_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFrecpx_dd<	ARCH>::OpFrecpx_dd(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frecpx_dd")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrecpx_ss<	ARCH>::OpFrecpx_ss(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frecpx_ss")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrinta_h<	ARCH>::OpFrinta_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frinta_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrinta_s<	ARCH>::OpFrinta_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frinta_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrinta_d<	ARCH>::OpFrinta_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frinta_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrinta_vh<	ARCH>::OpFrinta_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frinta_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFrinta_vs<	ARCH>::OpFrinta_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frinta_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFrinta_v2d<	ARCH>::OpFrinta_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frinta_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrinti_d<	ARCH>::OpFrinti_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frinti_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrinti_h<	ARCH>::OpFrinti_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frinti_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrinti_s<	ARCH>::OpFrinti_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frinti_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrinti_vh<	ARCH>::OpFrinti_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frinti_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFrinti_vs<	ARCH>::OpFrinti_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frinti_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFrinti_v2d<	ARCH>::OpFrinti_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frinti_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrintm_h<	ARCH>::OpFrintm_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintm_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrintm_s<	ARCH>::OpFrintm_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintm_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrintm_d<	ARCH>::OpFrintm_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintm_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrintm_vh<	ARCH>::OpFrintm_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintm_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFrintm_vs<	ARCH>::OpFrintm_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintm_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFrintm_v2d<	ARCH>::OpFrintm_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintm_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrintn_h<	ARCH>::OpFrintn_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintn_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrintn_s<	ARCH>::OpFrintn_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintn_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrintn_d<	ARCH>::OpFrintn_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintn_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrintn_vh<	ARCH>::OpFrintn_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintn_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFrintn_vs<	ARCH>::OpFrintn_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintn_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFrintn_v2d<	ARCH>::OpFrintn_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintn_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrintp_h<	ARCH>::OpFrintp_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintp_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrintp_s<	ARCH>::OpFrintp_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintp_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrintp_d<	ARCH>::OpFrintp_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintp_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrintp_vh<	ARCH>::OpFrintp_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintp_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFrintp_vs<	ARCH>::OpFrintp_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintp_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFrintp_v2d<	ARCH>::OpFrintp_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintp_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrintx_h<	ARCH>::OpFrintx_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintx_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrintx_s<	ARCH>::OpFrintx_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintx_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrintx_d<	ARCH>::OpFrintx_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintx_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrintx_vh<	ARCH>::OpFrintx_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintx_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFrintx_vs<	ARCH>::OpFrintx_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintx_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFrintx_v2d<	ARCH>::OpFrintx_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintx_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrintz_h<	ARCH>::OpFrintz_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintz_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrintz_s<	ARCH>::OpFrintz_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintz_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrintz_d<	ARCH>::OpFrintz_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintz_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrintz_vh<	ARCH>::OpFrintz_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintz_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFrintz_vs<	ARCH>::OpFrintz_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintz_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFrintz_v2d<	ARCH>::OpFrintz_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frintz_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrsqrte_s<	ARCH>::OpFrsqrte_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frsqrte_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrsqrte_d<	ARCH>::OpFrsqrte_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frsqrte_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrsqrte_vs<	ARCH>::OpFrsqrte_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frsqrte_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFrsqrte_v2d<	ARCH>::OpFrsqrte_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frsqrte_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFrsqrts_s<	ARCH>::OpFrsqrts_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frsqrts_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFrsqrts_d<	ARCH>::OpFrsqrts_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frsqrts_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFrsqrts_vs<	ARCH>::OpFrsqrts_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frsqrts_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFrsqrts_v2d<	ARCH>::OpFrsqrts_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "frsqrts_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFsqrt_h<	ARCH>::OpFsqrt_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fsqrt_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFsqrt_s<	ARCH>::OpFsqrt_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fsqrt_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFsqrt_d<	ARCH>::OpFsqrt_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fsqrt_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFsqrt_vh<	ARCH>::OpFsqrt_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fsqrt_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFsqrt_vs<	ARCH>::OpFsqrt_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fsqrt_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFsqrt_v2d<	ARCH>::OpFsqrt_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fsqrt_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpFsub_h<	ARCH>::OpFsub_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fsub_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFsub_s<	ARCH>::OpFsub_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fsub_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFsub_d<	ARCH>::OpFsub_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fsub_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpFsub_vh<	ARCH>::OpFsub_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fsub_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFsub_vs<	ARCH>::OpFsub_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fsub_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpFsub_v2d<	ARCH>::OpFsub_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "fsub_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	rm = uint8_t((code >> 16) & 0x1f);
}

template <	typename	ARCH>
OpScvtf_hw<	ARCH>::OpScvtf_hw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_hw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpScvtf_sw<	ARCH>::OpScvtf_sw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_sw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpScvtf_hx<	ARCH>::OpScvtf_hx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_hx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpScvtf_sx<	ARCH>::OpScvtf_sx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_sx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpScvtf_dw<	ARCH>::OpScvtf_dw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_dw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpScvtf_dx<	ARCH>::OpScvtf_dx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_dx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpScvtf_h<	ARCH>::OpScvtf_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpScvtf_s<	ARCH>::OpScvtf_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpScvtf_d<	ARCH>::OpScvtf_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpScvtf_vh<	ARCH>::OpScvtf_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpScvtf_vs<	ARCH>::OpScvtf_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpScvtf_v2d<	ARCH>::OpScvtf_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpScvtf_hhi<	ARCH>::OpScvtf_hhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_hhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	fbits = 16 - lro;
}

template <	typename	ARCH>
OpScvtf_ssi<	ARCH>::OpScvtf_ssi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_ssi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	fbits = 32 - lro;
}

template <	typename	ARCH>
OpScvtf_ddi<	ARCH>::OpScvtf_ddi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_ddi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x3f);
	fbits = 64 - lro;
}

template <	typename	ARCH>
OpScvtf_hwi<	ARCH>::OpScvtf_hwi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_hwi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x1f);
	fbits = 32-scale;
}

template <	typename	ARCH>
OpScvtf_swi<	ARCH>::OpScvtf_swi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_swi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x1f);
	fbits = 32-scale;
}

template <	typename	ARCH>
OpScvtf_hxi<	ARCH>::OpScvtf_hxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_hxi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x3f);
	fbits = 64-scale;
}

template <	typename	ARCH>
OpScvtf_sxi<	ARCH>::OpScvtf_sxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_sxi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x3f);
	fbits = 64-scale;
}

template <	typename	ARCH>
OpScvtf_dwi<	ARCH>::OpScvtf_dwi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_dwi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x1f);
	fbits = 32-scale;
}

template <	typename	ARCH>
OpScvtf_dxi<	ARCH>::OpScvtf_dxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_dxi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x3f);
	fbits = 64-scale;
}

template <	typename	ARCH>
OpScvtf_vhhi<	ARCH>::OpScvtf_vhhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_vhhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
	fbits = 16 - lro;
}

template <	typename	ARCH>
OpScvtf_vssi<	ARCH>::OpScvtf_vssi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_vssi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
	fbits = 32 - lro;
}

template <	typename	ARCH>
OpScvtf_v2d2di<	ARCH>::OpScvtf_v2d2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "scvtf_v2d2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x3f);
	fbits = 64 - lro;
}

template <	typename	ARCH>
OpUcvtf_hw<	ARCH>::OpUcvtf_hw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_hw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUcvtf_sw<	ARCH>::OpUcvtf_sw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_sw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUcvtf_hx<	ARCH>::OpUcvtf_hx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_hx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUcvtf_sx<	ARCH>::OpUcvtf_sx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_sx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUcvtf_dw<	ARCH>::OpUcvtf_dw(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_dw")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUcvtf_dx<	ARCH>::OpUcvtf_dx(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_dx")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUcvtf_h<	ARCH>::OpUcvtf_h(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_h")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUcvtf_s<	ARCH>::OpUcvtf_s(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_s")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUcvtf_d<	ARCH>::OpUcvtf_d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUcvtf_vh<	ARCH>::OpUcvtf_vh(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_vh")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUcvtf_vs<	ARCH>::OpUcvtf_vs(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_vs")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
}

template <	typename	ARCH>
OpUcvtf_v2d<	ARCH>::OpUcvtf_v2d(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_v2d")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
}

template <	typename	ARCH>
OpUcvtf_hhi<	ARCH>::OpUcvtf_hhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_hhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	fbits = 16 - lro;
}

template <	typename	ARCH>
OpUcvtf_ssi<	ARCH>::OpUcvtf_ssi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_ssi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	fbits = 32 - lro;
}

template <	typename	ARCH>
OpUcvtf_ddi<	ARCH>::OpUcvtf_ddi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_ddi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x3f);
	fbits = 64 - lro;
}

template <	typename	ARCH>
OpUcvtf_hwi<	ARCH>::OpUcvtf_hwi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_hwi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x1f);
	fbits = 32-scale;
}

template <	typename	ARCH>
OpUcvtf_swi<	ARCH>::OpUcvtf_swi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_swi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x1f);
	fbits = 32-scale;
}

template <	typename	ARCH>
OpUcvtf_hxi<	ARCH>::OpUcvtf_hxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_hxi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x3f);
	fbits = 64-scale;
}

template <	typename	ARCH>
OpUcvtf_sxi<	ARCH>::OpUcvtf_sxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_sxi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x3f);
	fbits = 64-scale;
}

template <	typename	ARCH>
OpUcvtf_dwi<	ARCH>::OpUcvtf_dwi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_dwi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x1f);
	fbits = 32-scale;
}

template <	typename	ARCH>
OpUcvtf_dxi<	ARCH>::OpUcvtf_dxi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_dxi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	scale = uint8_t((code >> 10) & 0x3f);
	fbits = 64-scale;
}

template <	typename	ARCH>
OpUcvtf_vhhi<	ARCH>::OpUcvtf_vhhi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_vhhi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0xf);
	q = uint8_t((code >> 30) & 0x1);
	fbits = 16 - lro;
}

template <	typename	ARCH>
OpUcvtf_vssi<	ARCH>::OpUcvtf_vssi(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_vssi")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x1f);
	q = uint8_t((code >> 30) & 0x1);
	fbits = 32 - lro;
}

template <	typename	ARCH>
OpUcvtf_v2d2di<	ARCH>::OpUcvtf_v2d2di(CodeType code, uint64_t addr) : Operation<	ARCH>(code, addr, "ucvtf_v2d2di")
{
	rd = uint8_t(code & 0x1f);
	rn = uint8_t((code >> 5) & 0x1f);
	lro = uint8_t((code >> 16) & 0x3f);
	fbits = 64 - lro;
}

template <	typename	ARCH>
DecodeTableEntry<	ARCH>::DecodeTableEntry(CodeType opcode, CodeType opcode_mask, Operation<	ARCH> *(*decode)(CodeType, uint64_t))
{
	this->opcode = opcode;
	this->opcode_mask = opcode_mask;
	this->decode = decode;
}

template <	typename	ARCH>
Decoder<	ARCH>::Decoder()

{
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f40e400UL, 0xffc0fc00UL, DecodeOpUcvtf_v2d2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f20e400UL, 0xbfe0fc00UL, DecodeOpUcvtf_vssi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f10e400UL, 0xbff0fc00UL, DecodeOpUcvtf_vhhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e430000UL, 0xffff0000UL, DecodeOpUcvtf_dxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e438000UL, 0xffff8000UL, DecodeOpUcvtf_dwi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e030000UL, 0xffff0000UL, DecodeOpUcvtf_sxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ec30000UL, 0xffff0000UL, DecodeOpUcvtf_hxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e038000UL, 0xffff8000UL, DecodeOpUcvtf_swi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ec38000UL, 0xffff8000UL, DecodeOpUcvtf_hwi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f40e400UL, 0xffc0fc00UL, DecodeOpUcvtf_ddi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f20e400UL, 0xffe0fc00UL, DecodeOpUcvtf_ssi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f10e400UL, 0xfff0fc00UL, DecodeOpUcvtf_hhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e61d800UL, 0xfffffc00UL, DecodeOpUcvtf_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e21d800UL, 0xbffffc00UL, DecodeOpUcvtf_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e79d800UL, 0xbffffc00UL, DecodeOpUcvtf_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e61d800UL, 0xfffffc00UL, DecodeOpUcvtf_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e21d800UL, 0xfffffc00UL, DecodeOpUcvtf_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e79d800UL, 0xfffffc00UL, DecodeOpUcvtf_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e630000UL, 0xfffffc00UL, DecodeOpUcvtf_dx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e630000UL, 0xfffffc00UL, DecodeOpUcvtf_dw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e230000UL, 0xfffffc00UL, DecodeOpUcvtf_sx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ee30000UL, 0xfffffc00UL, DecodeOpUcvtf_hx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e230000UL, 0xfffffc00UL, DecodeOpUcvtf_sw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee30000UL, 0xfffffc00UL, DecodeOpUcvtf_hw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f40e400UL, 0xffc0fc00UL, DecodeOpScvtf_v2d2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf20e400UL, 0xbfe0fc00UL, DecodeOpScvtf_vssi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf10e400UL, 0xbff0fc00UL, DecodeOpScvtf_vhhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e420000UL, 0xffff0000UL, DecodeOpScvtf_dxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e428000UL, 0xffff8000UL, DecodeOpScvtf_dwi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e020000UL, 0xffff0000UL, DecodeOpScvtf_sxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ec20000UL, 0xffff0000UL, DecodeOpScvtf_hxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e028000UL, 0xffff8000UL, DecodeOpScvtf_swi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ec28000UL, 0xffff8000UL, DecodeOpScvtf_hwi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f40e400UL, 0xffc0fc00UL, DecodeOpScvtf_ddi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f20e400UL, 0xffe0fc00UL, DecodeOpScvtf_ssi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f10e400UL, 0xfff0fc00UL, DecodeOpScvtf_hhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e61d800UL, 0xfffffc00UL, DecodeOpScvtf_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe21d800UL, 0xbffffc00UL, DecodeOpScvtf_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe79d800UL, 0xbffffc00UL, DecodeOpScvtf_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e61d800UL, 0xfffffc00UL, DecodeOpScvtf_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e21d800UL, 0xfffffc00UL, DecodeOpScvtf_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e79d800UL, 0xfffffc00UL, DecodeOpScvtf_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e620000UL, 0xfffffc00UL, DecodeOpScvtf_dx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e620000UL, 0xfffffc00UL, DecodeOpScvtf_dw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e220000UL, 0xfffffc00UL, DecodeOpScvtf_sx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ee20000UL, 0xfffffc00UL, DecodeOpScvtf_hx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e220000UL, 0xfffffc00UL, DecodeOpScvtf_sw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee20000UL, 0xfffffc00UL, DecodeOpScvtf_hw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee0d400UL, 0xffe0fc00UL, DecodeOpFsub_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea0d400UL, 0xbfe0fc00UL, DecodeOpFsub_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xec01400UL, 0xbfe0fc00UL, DecodeOpFsub_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e603800UL, 0xffe0fc00UL, DecodeOpFsub_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e203800UL, 0xffe0fc00UL, DecodeOpFsub_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee03800UL, 0xffe0fc00UL, DecodeOpFsub_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee1f800UL, 0xfffffc00UL, DecodeOpFsqrt_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea1f800UL, 0xbffffc00UL, DecodeOpFsqrt_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ef9f800UL, 0xbffffc00UL, DecodeOpFsqrt_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e61c000UL, 0xfffffc00UL, DecodeOpFsqrt_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e21c000UL, 0xfffffc00UL, DecodeOpFsqrt_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee1c000UL, 0xfffffc00UL, DecodeOpFsqrt_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee0fc00UL, 0xffe0fc00UL, DecodeOpFrsqrts_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea0fc00UL, 0xbfe0fc00UL, DecodeOpFrsqrts_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee0fc00UL, 0xffe0fc00UL, DecodeOpFrsqrts_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ea0fc00UL, 0xffe0fc00UL, DecodeOpFrsqrts_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee1d800UL, 0xfffffc00UL, DecodeOpFrsqrte_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea1d800UL, 0xbffffc00UL, DecodeOpFrsqrte_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ee1d800UL, 0xfffffc00UL, DecodeOpFrsqrte_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ea1d800UL, 0xfffffc00UL, DecodeOpFrsqrte_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee19800UL, 0xfffffc00UL, DecodeOpFrintz_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea19800UL, 0xbffffc00UL, DecodeOpFrintz_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xef99800UL, 0xbffffc00UL, DecodeOpFrintz_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e65c000UL, 0xfffffc00UL, DecodeOpFrintz_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e25c000UL, 0xfffffc00UL, DecodeOpFrintz_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee5c000UL, 0xfffffc00UL, DecodeOpFrintz_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e619800UL, 0xfffffc00UL, DecodeOpFrintx_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e219800UL, 0xbffffc00UL, DecodeOpFrintx_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e799800UL, 0xbffffc00UL, DecodeOpFrintx_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e674000UL, 0xfffffc00UL, DecodeOpFrintx_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e274000UL, 0xfffffc00UL, DecodeOpFrintx_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee74000UL, 0xfffffc00UL, DecodeOpFrintx_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee18800UL, 0xfffffc00UL, DecodeOpFrintp_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea18800UL, 0xbffffc00UL, DecodeOpFrintp_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xef98800UL, 0xbffffc00UL, DecodeOpFrintp_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e64c000UL, 0xfffffc00UL, DecodeOpFrintp_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e24c000UL, 0xfffffc00UL, DecodeOpFrintp_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee4c000UL, 0xfffffc00UL, DecodeOpFrintp_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e618800UL, 0xfffffc00UL, DecodeOpFrintn_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe218800UL, 0xbffffc00UL, DecodeOpFrintn_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe798800UL, 0xbffffc00UL, DecodeOpFrintn_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e644000UL, 0xfffffc00UL, DecodeOpFrintn_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e244000UL, 0xfffffc00UL, DecodeOpFrintn_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee44000UL, 0xfffffc00UL, DecodeOpFrintn_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e619800UL, 0xfffffc00UL, DecodeOpFrintm_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe219800UL, 0xbffffc00UL, DecodeOpFrintm_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe799800UL, 0xbffffc00UL, DecodeOpFrintm_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e654000UL, 0xfffffc00UL, DecodeOpFrintm_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e254000UL, 0xfffffc00UL, DecodeOpFrintm_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee54000UL, 0xfffffc00UL, DecodeOpFrintm_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee19800UL, 0xfffffc00UL, DecodeOpFrinti_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea19800UL, 0xbffffc00UL, DecodeOpFrinti_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ef99800UL, 0xbffffc00UL, DecodeOpFrinti_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e27c000UL, 0xfffffc00UL, DecodeOpFrinti_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee7c000UL, 0xfffffc00UL, DecodeOpFrinti_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e67c000UL, 0xfffffc00UL, DecodeOpFrinti_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e618800UL, 0xfffffc00UL, DecodeOpFrinta_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e218800UL, 0xbffffc00UL, DecodeOpFrinta_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e798800UL, 0xbffffc00UL, DecodeOpFrinta_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e664000UL, 0xfffffc00UL, DecodeOpFrinta_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e264000UL, 0xfffffc00UL, DecodeOpFrinta_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee64000UL, 0xfffffc00UL, DecodeOpFrinta_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ea1f800UL, 0xfffffc00UL, DecodeOpFrecpx_ss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee1f800UL, 0xfffffc00UL, DecodeOpFrecpx_dd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e60fc00UL, 0xffe0fc00UL, DecodeOpFrecps_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe20fc00UL, 0xbfe0fc00UL, DecodeOpFrecps_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e60fc00UL, 0xffe0fc00UL, DecodeOpFrecps_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e20fc00UL, 0xffe0fc00UL, DecodeOpFrecps_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee1d800UL, 0xfffffc00UL, DecodeOpFrecpe_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea1d800UL, 0xbffffc00UL, DecodeOpFrecpe_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee1d800UL, 0xfffffc00UL, DecodeOpFrecpe_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ea1d800UL, 0xfffffc00UL, DecodeOpFrecpe_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e608800UL, 0xffe0fc00UL, DecodeOpFnmul_ddd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e208800UL, 0xffe0fc00UL, DecodeOpFnmul_sss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee08800UL, 0xffe0fc00UL, DecodeOpFnmul_hhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1f608000UL, 0xffe08000UL, DecodeOpFnmsub_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1f208000UL, 0xffe08000UL, DecodeOpFnmsub_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1fe08000UL, 0xffe08000UL, DecodeOpFnmsub_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1f600000UL, 0xffe08000UL, DecodeOpFnmadd_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1f200000UL, 0xffe08000UL, DecodeOpFnmadd_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1fe00000UL, 0xffe08000UL, DecodeOpFnmadd_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee0f800UL, 0xfffffc00UL, DecodeOpFneg_v2d2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea0f800UL, 0xbffffc00UL, DecodeOpFneg_vss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ef8f800UL, 0xbffffc00UL, DecodeOpFneg_vhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e614000UL, 0xfffffc00UL, DecodeOpFneg_dd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e214000UL, 0xfffffc00UL, DecodeOpFneg_ss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee14000UL, 0xfffffc00UL, DecodeOpFneg_hh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6fc09000UL, 0xffe0f400UL, DecodeOpFmulx_v2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f809000UL, 0xbfc0f400UL, DecodeOpFmulx_vsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f009000UL, 0xbfc0f400UL, DecodeOpFmulx_vhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7fc09000UL, 0xffe0f400UL, DecodeOpFmulx_di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f809000UL, 0xffc0f400UL, DecodeOpFmulx_si<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f009000UL, 0xffc0f400UL, DecodeOpFmulx_hi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e60dc00UL, 0xffe0fc00UL, DecodeOpFmulx_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe20dc00UL, 0xbfe0fc00UL, DecodeOpFmulx_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe401c00UL, 0xbfe0fc00UL, DecodeOpFmulx_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e60dc00UL, 0xffe0fc00UL, DecodeOpFmulx_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e20dc00UL, 0xffe0fc00UL, DecodeOpFmulx_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e401c00UL, 0xffe0fc00UL, DecodeOpFmulx_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4fc09000UL, 0xffe0f400UL, DecodeOpFmul_v2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf809000UL, 0xbfc0f400UL, DecodeOpFmul_vsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf009000UL, 0xbfc0f400UL, DecodeOpFmul_vhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5fc09000UL, 0xffe0f400UL, DecodeOpFmul_di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f809000UL, 0xffc0f400UL, DecodeOpFmul_si<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f009000UL, 0xffc0f400UL, DecodeOpFmul_hi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e60dc00UL, 0xffe0fc00UL, DecodeOpFmul_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e20dc00UL, 0xbfe0fc00UL, DecodeOpFmul_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e401c00UL, 0xbfe0fc00UL, DecodeOpFmul_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e600800UL, 0xffe0fc00UL, DecodeOpFmul_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e200800UL, 0xffe0fc00UL, DecodeOpFmul_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee00800UL, 0xffe0fc00UL, DecodeOpFmul_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1f408000UL, 0xffe08000UL, DecodeOpFmsub_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1f008000UL, 0xffe08000UL, DecodeOpFmsub_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1fc08000UL, 0xffe08000UL, DecodeOpFmsub_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9eae0000UL, 0xfffffc00UL, DecodeOpFmov_xdi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e660000UL, 0xfffffc00UL, DecodeOpFmov_xd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ee60000UL, 0xfffffc00UL, DecodeOpFmov_xh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9eaf0000UL, 0xfffffc00UL, DecodeOpFmov_dix<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e670000UL, 0xfffffc00UL, DecodeOpFmov_dx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e260000UL, 0xfffffc00UL, DecodeOpFmov_ws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e270000UL, 0xfffffc00UL, DecodeOpFmov_sw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee60000UL, 0xfffffc00UL, DecodeOpFmov_wh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ee70000UL, 0xfffffc00UL, DecodeOpFmov_hx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee70000UL, 0xfffffc00UL, DecodeOpFmov_hw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f00f400UL, 0xfff8fc00UL, DecodeOpFmov_v2df<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf00f400UL, 0xbff8fc00UL, DecodeOpFmov_vsf<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf00fc00UL, 0xbff8fc00UL, DecodeOpFmov_vhf<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e601000UL, 0xffe01fe0UL, DecodeOpFmov_df<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e201000UL, 0xffe01fe0UL, DecodeOpFmov_sf<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee01000UL, 0xffe01fe0UL, DecodeOpFmov_hf<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e604000UL, 0xfffffc00UL, DecodeOpFmov_dd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e204000UL, 0xfffffc00UL, DecodeOpFmov_ss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee04000UL, 0xfffffc00UL, DecodeOpFmov_hh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee0cc00UL, 0xffe0fc00UL, DecodeOpFmls_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea0cc00UL, 0xbfe0fc00UL, DecodeOpFmls_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xec00c00UL, 0xbfe0fc00UL, DecodeOpFmls_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4fc05000UL, 0xffe0f400UL, DecodeOpFmls_v2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf805000UL, 0xbfc0f400UL, DecodeOpFmls_vsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf005000UL, 0xbfc0f400UL, DecodeOpFmls_vhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5fc05000UL, 0xffe0f400UL, DecodeOpFmls_di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f805000UL, 0xffc0f400UL, DecodeOpFmls_si<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f005000UL, 0xffc0f400UL, DecodeOpFmls_hi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e60cc00UL, 0xffe0fc00UL, DecodeOpFmla_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe20cc00UL, 0xbfe0fc00UL, DecodeOpFmla_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe400c00UL, 0xbfe0fc00UL, DecodeOpFmla_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4fc01000UL, 0xffe0f400UL, DecodeOpFmla_v2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf801000UL, 0xbfc0f400UL, DecodeOpFmla_vsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf001000UL, 0xbfc0f400UL, DecodeOpFmla_vhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5fc01000UL, 0xffe0f400UL, DecodeOpFmla_di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f801000UL, 0xffc0f400UL, DecodeOpFmla_si<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f001000UL, 0xffc0f400UL, DecodeOpFmla_hi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6eb0f800UL, 0xfffffc00UL, DecodeOpFminv_sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4eb0f800UL, 0xfffffc00UL, DecodeOpFminv_hv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xeb0f800UL, 0xfffffc00UL, DecodeOpFminv_hv2h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee0f400UL, 0xffe0fc00UL, DecodeOpFminp_v2dv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea0f400UL, 0xbfe0fc00UL, DecodeOpFminp_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ec03400UL, 0xbfe0fc00UL, DecodeOpFminp_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ef0f800UL, 0xfffffc00UL, DecodeOpFminp_dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7eb0f800UL, 0xfffffc00UL, DecodeOpFminp_sv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5eb0f800UL, 0xfffffc00UL, DecodeOpFminp_hv2h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6eb0c800UL, 0xfffffc00UL, DecodeOpFminnmv_sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4eb0c800UL, 0xfffffc00UL, DecodeOpFminnmv_hv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xeb0c800UL, 0xfffffc00UL, DecodeOpFminnmv_hv2h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee0c400UL, 0xffe0fc00UL, DecodeOpFminnmp_v2dv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea0c400UL, 0xbfe0fc00UL, DecodeOpFminnmp_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ec00400UL, 0xbfe0fc00UL, DecodeOpFminnmp_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ef0c800UL, 0xfffffc00UL, DecodeOpFminnmp_dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7eb0c800UL, 0xfffffc00UL, DecodeOpFminnmp_sv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5eb0c800UL, 0xfffffc00UL, DecodeOpFminnmp_hv2h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee0c400UL, 0xffe0fc00UL, DecodeOpFminnm_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea0c400UL, 0xbfe0fc00UL, DecodeOpFminnm_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xec00400UL, 0xbfe0fc00UL, DecodeOpFminnm_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e607800UL, 0xffe0fc00UL, DecodeOpFminnm_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e207800UL, 0xffe0fc00UL, DecodeOpFminnm_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee07800UL, 0xffe0fc00UL, DecodeOpFminnm_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee0f400UL, 0xffe0fc00UL, DecodeOpFmin_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea0f400UL, 0xbfe0fc00UL, DecodeOpFmin_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xec03400UL, 0xbfe0fc00UL, DecodeOpFmin_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e605800UL, 0xffe0fc00UL, DecodeOpFmin_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e205800UL, 0xffe0fc00UL, DecodeOpFmin_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee05800UL, 0xffe0fc00UL, DecodeOpFmin_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e30f800UL, 0xfffffc00UL, DecodeOpFmaxv_sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e30f800UL, 0xfffffc00UL, DecodeOpFmaxv_hv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe30f800UL, 0xfffffc00UL, DecodeOpFmaxv_hv2h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e60f400UL, 0xffe0fc00UL, DecodeOpFmaxp_v2dv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e20f400UL, 0xbfe0fc00UL, DecodeOpFmaxp_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e403400UL, 0xbfe0fc00UL, DecodeOpFmaxp_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e30f800UL, 0xfffffc00UL, DecodeOpFmaxp_sv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e30f800UL, 0xfffffc00UL, DecodeOpFmaxp_hv2h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e70f800UL, 0xfffffc00UL, DecodeOpFmaxp_dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e30c800UL, 0xfffffc00UL, DecodeOpFmaxnmv_sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e30c800UL, 0xfffffc00UL, DecodeOpFmaxnmv_hv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe30c800UL, 0xfffffc00UL, DecodeOpFmaxnmv_hv2h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e60c400UL, 0xffe0fc00UL, DecodeOpFmaxnmp_v2dv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e20c400UL, 0xbfe0fc00UL, DecodeOpFmaxnmp_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e400400UL, 0xbfe0fc00UL, DecodeOpFmaxnmp_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e30c800UL, 0xfffffc00UL, DecodeOpFmaxnmp_sv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e30c800UL, 0xfffffc00UL, DecodeOpFmaxnmp_hv2h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e70c800UL, 0xfffffc00UL, DecodeOpFmaxnmp_dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e60c400UL, 0xffe0fc00UL, DecodeOpFmaxnm_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe20c400UL, 0xbfe0fc00UL, DecodeOpFmaxnm_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe400400UL, 0xbfe0fc00UL, DecodeOpFmaxnm_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e606800UL, 0xffe0fc00UL, DecodeOpFmaxnm_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e206800UL, 0xffe0fc00UL, DecodeOpFmaxnm_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee06800UL, 0xffe0fc00UL, DecodeOpFmaxnm_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e60f400UL, 0xffe0fc00UL, DecodeOpFmax_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe20f400UL, 0xbfe0fc00UL, DecodeOpFmax_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe403400UL, 0xbfe0fc00UL, DecodeOpFmax_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e604800UL, 0xffe0fc00UL, DecodeOpFmax_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e204800UL, 0xffe0fc00UL, DecodeOpFmax_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee04800UL, 0xffe0fc00UL, DecodeOpFmax_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1f400000UL, 0xffe08000UL, DecodeOpFmadd_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1f000000UL, 0xffe08000UL, DecodeOpFmadd_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1fc00000UL, 0xffe08000UL, DecodeOpFmadd_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e60fc00UL, 0xffe0fc00UL, DecodeOpFdiv_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e20fc00UL, 0xbfe0fc00UL, DecodeOpFdiv_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e403c00UL, 0xbfe0fc00UL, DecodeOpFdiv_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e601800UL, 0xffe0fc00UL, DecodeOpFdiv_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e201800UL, 0xffe0fc00UL, DecodeOpFdiv_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee01800UL, 0xffe0fc00UL, DecodeOpFdiv_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f40fc00UL, 0xffc0fc00UL, DecodeOpFcvtzu_v2d2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f20fc00UL, 0xbfe0fc00UL, DecodeOpFcvtzu_vssi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f10fc00UL, 0xbff0fc00UL, DecodeOpFcvtzu_vhhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f40fc00UL, 0xffc0fc00UL, DecodeOpFcvtzu_ddi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f20fc00UL, 0xffe0fc00UL, DecodeOpFcvtzu_ssi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f10fc00UL, 0xfff0fc00UL, DecodeOpFcvtzu_hhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e590000UL, 0xffff0000UL, DecodeOpFcvtzu_xdi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e598000UL, 0xffff8000UL, DecodeOpFcvtzu_wdi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e190000UL, 0xffff0000UL, DecodeOpFcvtzu_xsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ed90000UL, 0xffff0000UL, DecodeOpFcvtzu_xhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e198000UL, 0xffff8000UL, DecodeOpFcvtzu_wsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ed98000UL, 0xffff8000UL, DecodeOpFcvtzu_whi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee1b800UL, 0xfffffc00UL, DecodeOpFcvtzu_v2d2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea1b800UL, 0xbffffc00UL, DecodeOpFcvtzu_vss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ef9b800UL, 0xbffffc00UL, DecodeOpFcvtzu_vhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e790000UL, 0xfffffc00UL, DecodeOpFcvtzu_xd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e390000UL, 0xfffffc00UL, DecodeOpFcvtzu_xs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ef90000UL, 0xfffffc00UL, DecodeOpFcvtzu_xh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e790000UL, 0xfffffc00UL, DecodeOpFcvtzu_wd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e390000UL, 0xfffffc00UL, DecodeOpFcvtzu_ws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ef90000UL, 0xfffffc00UL, DecodeOpFcvtzu_wh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ee1b800UL, 0xfffffc00UL, DecodeOpFcvtzu_dd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ea1b800UL, 0xfffffc00UL, DecodeOpFcvtzu_ss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ef9b800UL, 0xfffffc00UL, DecodeOpFcvtzu_hh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f40fc00UL, 0xffc0fc00UL, DecodeOpFcvtzs_v2d2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf20fc00UL, 0xbfe0fc00UL, DecodeOpFcvtzs_vssi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf10fc00UL, 0xbff0fc00UL, DecodeOpFcvtzs_vhhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f40fc00UL, 0xffc0fc00UL, DecodeOpFcvtzs_ddi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f20fc00UL, 0xffe0fc00UL, DecodeOpFcvtzs_ssi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f10fc00UL, 0xfff0fc00UL, DecodeOpFcvtzs_hhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e580000UL, 0xffff0000UL, DecodeOpFcvtzs_xdi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e180000UL, 0xffff0000UL, DecodeOpFcvtzs_xsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ed80000UL, 0xffff0000UL, DecodeOpFcvtzs_xhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e588000UL, 0xffff8000UL, DecodeOpFcvtzs_wdi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e188000UL, 0xffff8000UL, DecodeOpFcvtzs_wsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ed88000UL, 0xffff8000UL, DecodeOpFcvtzs_whi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee1b800UL, 0xfffffc00UL, DecodeOpFcvtzs_v2d2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea1b800UL, 0xbffffc00UL, DecodeOpFcvtzs_vss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xef9b800UL, 0xbffffc00UL, DecodeOpFcvtzs_vhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e780000UL, 0xfffffc00UL, DecodeOpFcvtzs_xd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e380000UL, 0xfffffc00UL, DecodeOpFcvtzs_xs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ef80000UL, 0xfffffc00UL, DecodeOpFcvtzs_xh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e780000UL, 0xfffffc00UL, DecodeOpFcvtzs_wd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e380000UL, 0xfffffc00UL, DecodeOpFcvtzs_ws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ef80000UL, 0xfffffc00UL, DecodeOpFcvtzs_wh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee1b800UL, 0xfffffc00UL, DecodeOpFcvtzs_dd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ea1b800UL, 0xfffffc00UL, DecodeOpFcvtzs_ss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ef9b800UL, 0xfffffc00UL, DecodeOpFcvtzs_hh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e616800UL, 0xfffffc00UL, DecodeOpFcvtxn_v2s2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e616800UL, 0xfffffc00UL, DecodeOpFcvtxn_sd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e616800UL, 0xfffffc00UL, DecodeOpFcvtxn2_v4s2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee1a800UL, 0xfffffc00UL, DecodeOpFcvtpu_v2d2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea1a800UL, 0xbffffc00UL, DecodeOpFcvtpu_vss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ef9a800UL, 0xbffffc00UL, DecodeOpFcvtpu_vhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e690000UL, 0xfffffc00UL, DecodeOpFcvtpu_xd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e290000UL, 0xfffffc00UL, DecodeOpFcvtpu_xs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ee90000UL, 0xfffffc00UL, DecodeOpFcvtpu_xh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e690000UL, 0xfffffc00UL, DecodeOpFcvtpu_wd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e290000UL, 0xfffffc00UL, DecodeOpFcvtpu_ws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee90000UL, 0xfffffc00UL, DecodeOpFcvtpu_wh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ee1a800UL, 0xfffffc00UL, DecodeOpFcvtpu_dd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ea1a800UL, 0xfffffc00UL, DecodeOpFcvtpu_ss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ef9a800UL, 0xfffffc00UL, DecodeOpFcvtpu_hh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee1a800UL, 0xfffffc00UL, DecodeOpFcvtps_v2d2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea1a800UL, 0xbffffc00UL, DecodeOpFcvtps_vss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xef9a800UL, 0xbffffc00UL, DecodeOpFcvtps_vhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e680000UL, 0xfffffc00UL, DecodeOpFcvtps_xd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e280000UL, 0xfffffc00UL, DecodeOpFcvtps_xs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ee80000UL, 0xfffffc00UL, DecodeOpFcvtps_xh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e680000UL, 0xfffffc00UL, DecodeOpFcvtps_wd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e280000UL, 0xfffffc00UL, DecodeOpFcvtps_ws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee80000UL, 0xfffffc00UL, DecodeOpFcvtps_wh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee1a800UL, 0xfffffc00UL, DecodeOpFcvtps_dd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ea1a800UL, 0xfffffc00UL, DecodeOpFcvtps_ss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ef9a800UL, 0xfffffc00UL, DecodeOpFcvtps_hh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e61a800UL, 0xfffffc00UL, DecodeOpFcvtnu_v2d2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e21a800UL, 0xbffffc00UL, DecodeOpFcvtnu_vss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e79a800UL, 0xbffffc00UL, DecodeOpFcvtnu_vhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e610000UL, 0xfffffc00UL, DecodeOpFcvtnu_xd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e210000UL, 0xfffffc00UL, DecodeOpFcvtnu_xs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ee10000UL, 0xfffffc00UL, DecodeOpFcvtnu_xh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e610000UL, 0xfffffc00UL, DecodeOpFcvtnu_wd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e210000UL, 0xfffffc00UL, DecodeOpFcvtnu_ws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee10000UL, 0xfffffc00UL, DecodeOpFcvtnu_wh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e61a800UL, 0xfffffc00UL, DecodeOpFcvtnu_dd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e21a800UL, 0xfffffc00UL, DecodeOpFcvtnu_ss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e79a800UL, 0xfffffc00UL, DecodeOpFcvtnu_hh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e61a800UL, 0xfffffc00UL, DecodeOpFcvtns_v2d2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe21a800UL, 0xbffffc00UL, DecodeOpFcvtns_vss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe79a800UL, 0xbffffc00UL, DecodeOpFcvtns_vhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e600000UL, 0xfffffc00UL, DecodeOpFcvtns_xd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e200000UL, 0xfffffc00UL, DecodeOpFcvtns_xs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ee00000UL, 0xfffffc00UL, DecodeOpFcvtns_xh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e600000UL, 0xfffffc00UL, DecodeOpFcvtns_wd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e200000UL, 0xfffffc00UL, DecodeOpFcvtns_ws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee00000UL, 0xfffffc00UL, DecodeOpFcvtns_wh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e61a800UL, 0xfffffc00UL, DecodeOpFcvtns_dd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e21a800UL, 0xfffffc00UL, DecodeOpFcvtns_ss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e79a800UL, 0xfffffc00UL, DecodeOpFcvtns_hh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe216800UL, 0xfffffc00UL, DecodeOpFcvtn_v4h4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe616800UL, 0xfffffc00UL, DecodeOpFcvtn_v2s2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e216800UL, 0xfffffc00UL, DecodeOpFcvtn2_v8h4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e616800UL, 0xfffffc00UL, DecodeOpFcvtn2_v4s2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e61b800UL, 0xfffffc00UL, DecodeOpFcvtmu_v2d2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e21b800UL, 0xbffffc00UL, DecodeOpFcvtmu_vss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e79b800UL, 0xbffffc00UL, DecodeOpFcvtmu_vhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e710000UL, 0xfffffc00UL, DecodeOpFcvtmu_xd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e310000UL, 0xfffffc00UL, DecodeOpFcvtmu_xs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ef10000UL, 0xfffffc00UL, DecodeOpFcvtmu_xh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e710000UL, 0xfffffc00UL, DecodeOpFcvtmu_wd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e310000UL, 0xfffffc00UL, DecodeOpFcvtmu_ws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ef10000UL, 0xfffffc00UL, DecodeOpFcvtmu_wh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e61b800UL, 0xfffffc00UL, DecodeOpFcvtmu_dd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e21b800UL, 0xfffffc00UL, DecodeOpFcvtmu_ss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e79b800UL, 0xfffffc00UL, DecodeOpFcvtmu_hh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e61b800UL, 0xfffffc00UL, DecodeOpFcvtms_v2d2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe21b800UL, 0xbffffc00UL, DecodeOpFcvtms_vss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe79b800UL, 0xbffffc00UL, DecodeOpFcvtms_vhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e700000UL, 0xfffffc00UL, DecodeOpFcvtms_xd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e300000UL, 0xfffffc00UL, DecodeOpFcvtms_xs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ef00000UL, 0xfffffc00UL, DecodeOpFcvtms_xh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e700000UL, 0xfffffc00UL, DecodeOpFcvtms_wd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e300000UL, 0xfffffc00UL, DecodeOpFcvtms_ws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ef00000UL, 0xfffffc00UL, DecodeOpFcvtms_wh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e61b800UL, 0xfffffc00UL, DecodeOpFcvtms_dd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e21b800UL, 0xfffffc00UL, DecodeOpFcvtms_ss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e79b800UL, 0xfffffc00UL, DecodeOpFcvtms_hh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe217800UL, 0xfffffc00UL, DecodeOpFcvtl_v4s4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe617800UL, 0xfffffc00UL, DecodeOpFcvtl_v2d2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e217800UL, 0xfffffc00UL, DecodeOpFcvtl2_v4s8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e617800UL, 0xfffffc00UL, DecodeOpFcvtl2_v2d4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e61c800UL, 0xfffffc00UL, DecodeOpFcvtau_v2d2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e21c800UL, 0xbffffc00UL, DecodeOpFcvtau_vss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e79c800UL, 0xbffffc00UL, DecodeOpFcvtau_vhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e650000UL, 0xfffffc00UL, DecodeOpFcvtau_xd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e250000UL, 0xfffffc00UL, DecodeOpFcvtau_xs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ee50000UL, 0xfffffc00UL, DecodeOpFcvtau_xh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e650000UL, 0xfffffc00UL, DecodeOpFcvtau_wd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e250000UL, 0xfffffc00UL, DecodeOpFcvtau_ws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee50000UL, 0xfffffc00UL, DecodeOpFcvtau_wh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e61c800UL, 0xfffffc00UL, DecodeOpFcvtau_dd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e21c800UL, 0xfffffc00UL, DecodeOpFcvtau_ss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e79c800UL, 0xfffffc00UL, DecodeOpFcvtau_hh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e61c800UL, 0xfffffc00UL, DecodeOpFcvtas_v2d2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe21c800UL, 0xbffffc00UL, DecodeOpFcvtas_vss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe79c800UL, 0xbffffc00UL, DecodeOpFcvtas_vhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e640000UL, 0xfffffc00UL, DecodeOpFcvtas_xd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9e240000UL, 0xfffffc00UL, DecodeOpFcvtas_xs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ee40000UL, 0xfffffc00UL, DecodeOpFcvtas_xh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e640000UL, 0xfffffc00UL, DecodeOpFcvtas_wd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e240000UL, 0xfffffc00UL, DecodeOpFcvtas_ws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee40000UL, 0xfffffc00UL, DecodeOpFcvtas_wh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e61c800UL, 0xfffffc00UL, DecodeOpFcvtas_dd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e21c800UL, 0xfffffc00UL, DecodeOpFcvtas_ss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e79c800UL, 0xfffffc00UL, DecodeOpFcvtas_hh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e22c000UL, 0xfffffc00UL, DecodeOpFcvt_ds<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee2c000UL, 0xfffffc00UL, DecodeOpFcvt_dh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e624000UL, 0xfffffc00UL, DecodeOpFcvt_sd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee24000UL, 0xfffffc00UL, DecodeOpFcvt_sh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e63c000UL, 0xfffffc00UL, DecodeOpFcvt_hd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e23c000UL, 0xfffffc00UL, DecodeOpFcvt_hs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e600c00UL, 0xffe00c00UL, DecodeOpFcsel_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e200c00UL, 0xffe00c00UL, DecodeOpFcsel_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee00c00UL, 0xffe00c00UL, DecodeOpFcsel_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e602018UL, 0xffe0fc1fUL, DecodeOpFcmpe_dz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e202018UL, 0xffe0fc1fUL, DecodeOpFcmpe_sz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee02018UL, 0xffe0fc1fUL, DecodeOpFcmpe_hz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e602010UL, 0xffe0fc1fUL, DecodeOpFcmpe_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e202010UL, 0xffe0fc1fUL, DecodeOpFcmpe_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee02010UL, 0xffe0fc1fUL, DecodeOpFcmpe_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e602008UL, 0xffe0fc1fUL, DecodeOpFcmp_dz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e202008UL, 0xffe0fc1fUL, DecodeOpFcmp_sz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee02008UL, 0xffe0fc1fUL, DecodeOpFcmp_hz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e602000UL, 0xffe0fc1fUL, DecodeOpFcmp_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e202000UL, 0xffe0fc1fUL, DecodeOpFcmp_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee02000UL, 0xffe0fc1fUL, DecodeOpFcmp_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee0e800UL, 0xfffffc00UL, DecodeOpFcmlt_v2dz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea0e800UL, 0xbffffc00UL, DecodeOpFcmlt_vsz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xef8e800UL, 0xbffffc00UL, DecodeOpFcmlt_vhz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee0e800UL, 0xfffffc00UL, DecodeOpFcmlt_dz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ea0e800UL, 0xfffffc00UL, DecodeOpFcmlt_sz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ef8e800UL, 0xfffffc00UL, DecodeOpFcmlt_hz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee0d800UL, 0xfffffc00UL, DecodeOpFcmle_v2dz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea0d800UL, 0xbffffc00UL, DecodeOpFcmle_vsz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ef8d800UL, 0xbffffc00UL, DecodeOpFcmle_vhz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ee0d800UL, 0xfffffc00UL, DecodeOpFcmle_dz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ea0d800UL, 0xfffffc00UL, DecodeOpFcmle_sz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ef8d800UL, 0xfffffc00UL, DecodeOpFcmle_hz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee0c800UL, 0xfffffc00UL, DecodeOpFcmgt_v2dz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea0c800UL, 0xbffffc00UL, DecodeOpFcmgt_vsz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xef8c800UL, 0xbffffc00UL, DecodeOpFcmgt_vhz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee0c800UL, 0xfffffc00UL, DecodeOpFcmgt_dz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ea0c800UL, 0xfffffc00UL, DecodeOpFcmgt_sz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ef8c800UL, 0xfffffc00UL, DecodeOpFcmgt_hz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee0e400UL, 0xffe0fc00UL, DecodeOpFcmgt_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea0e400UL, 0xbfe0fc00UL, DecodeOpFcmgt_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ec02400UL, 0xbfe0fc00UL, DecodeOpFcmgt_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ee0e400UL, 0xffe0fc00UL, DecodeOpFcmgt_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ea0e400UL, 0xffe0fc00UL, DecodeOpFcmgt_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ec02400UL, 0xffe0fc00UL, DecodeOpFcmgt_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee0c800UL, 0xfffffc00UL, DecodeOpFcmge_v2dz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea0c800UL, 0xbffffc00UL, DecodeOpFcmge_vsz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ef8c800UL, 0xbffffc00UL, DecodeOpFcmge_vhz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ee0c800UL, 0xfffffc00UL, DecodeOpFcmge_dz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ea0c800UL, 0xfffffc00UL, DecodeOpFcmge_sz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ef8c800UL, 0xfffffc00UL, DecodeOpFcmge_hz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e60e400UL, 0xffe0fc00UL, DecodeOpFcmge_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e20e400UL, 0xbfe0fc00UL, DecodeOpFcmge_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e402400UL, 0xbfe0fc00UL, DecodeOpFcmge_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e60e400UL, 0xffe0fc00UL, DecodeOpFcmge_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e20e400UL, 0xffe0fc00UL, DecodeOpFcmge_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e402400UL, 0xffe0fc00UL, DecodeOpFcmge_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee0d800UL, 0xfffffc00UL, DecodeOpFcmeq_v2dz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea0d800UL, 0xbffffc00UL, DecodeOpFcmeq_vsz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xef8d800UL, 0xbffffc00UL, DecodeOpFcmeq_vhz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee0d800UL, 0xfffffc00UL, DecodeOpFcmeq_dz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ea0d800UL, 0xfffffc00UL, DecodeOpFcmeq_sz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ef8d800UL, 0xfffffc00UL, DecodeOpFcmeq_hz<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e60e400UL, 0xffe0fc00UL, DecodeOpFcmeq_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe20e400UL, 0xbfe0fc00UL, DecodeOpFcmeq_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe402400UL, 0xbfe0fc00UL, DecodeOpFcmeq_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e60e400UL, 0xffe0fc00UL, DecodeOpFcmeq_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e20e400UL, 0xffe0fc00UL, DecodeOpFcmeq_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e402400UL, 0xffe0fc00UL, DecodeOpFcmeq_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee00410UL, 0xffe00c10UL, DecodeOpFccmpe_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e200410UL, 0xffe00c10UL, DecodeOpFccmpe_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e600410UL, 0xffe00c10UL, DecodeOpFccmpe_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e600400UL, 0xffe00c10UL, DecodeOpFccmp_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e200400UL, 0xffe00c10UL, DecodeOpFccmp_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee00400UL, 0xffe00c10UL, DecodeOpFccmp_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e60d400UL, 0xffe0fc00UL, DecodeOpFaddp_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e20d400UL, 0xbfe0fc00UL, DecodeOpFaddp_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e401400UL, 0xbfe0fc00UL, DecodeOpFaddp_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e70d800UL, 0xfffffc00UL, DecodeOpFaddp_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e30d800UL, 0xfffffc00UL, DecodeOpFaddp_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e30d800UL, 0xfffffc00UL, DecodeOpFaddp_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e60d400UL, 0xffe0fc00UL, DecodeOpFadd_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe20d400UL, 0xbfe0fc00UL, DecodeOpFadd_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe401400UL, 0xbfe0fc00UL, DecodeOpFadd_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e602800UL, 0xffe0fc00UL, DecodeOpFadd_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e202800UL, 0xffe0fc00UL, DecodeOpFadd_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee02800UL, 0xffe0fc00UL, DecodeOpFadd_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee0ec00UL, 0xffe0fc00UL, DecodeOpFacgt_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea0ec00UL, 0xbfe0fc00UL, DecodeOpFacgt_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ec02c00UL, 0xbfe0fc00UL, DecodeOpFacgt_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ee0ec00UL, 0xffe0fc00UL, DecodeOpFacgt_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ea0ec00UL, 0xffe0fc00UL, DecodeOpFacgt_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ec02c00UL, 0xffe0fc00UL, DecodeOpFacgt_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e60ec00UL, 0xffe0fc00UL, DecodeOpFacge_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e20ec00UL, 0xbfe0fc00UL, DecodeOpFacge_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e402c00UL, 0xbfe0fc00UL, DecodeOpFacge_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e60ec00UL, 0xffe0fc00UL, DecodeOpFacge_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e20ec00UL, 0xffe0fc00UL, DecodeOpFacge_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e402c00UL, 0xffe0fc00UL, DecodeOpFacge_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee0f800UL, 0xfffffc00UL, DecodeOpFabs_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea0f800UL, 0xbffffc00UL, DecodeOpFabs_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xef8f800UL, 0xbffffc00UL, DecodeOpFabs_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e60c000UL, 0xfffffc00UL, DecodeOpFabs_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1e20c000UL, 0xfffffc00UL, DecodeOpFabs_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ee0c000UL, 0xfffffc00UL, DecodeOpFabs_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee0d400UL, 0xffe0fc00UL, DecodeOpFabd_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea0d400UL, 0xbfe0fc00UL, DecodeOpFabd_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ec01400UL, 0xbfe0fc00UL, DecodeOpFabd_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ee0d400UL, 0xffe0fc00UL, DecodeOpFabd_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ea0d400UL, 0xffe0fc00UL, DecodeOpFabd_s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ec01400UL, 0xffe0fc00UL, DecodeOpFabd_h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xddfcc00UL, 0xbfdfdc00UL, DecodeOpLdvr_dio<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd40cc00UL, 0xbfdfdc00UL, DecodeOpLdvr_dno<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xddfc800UL, 0xbfdfdc00UL, DecodeOpLdvr_sio<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd40c800UL, 0xbfdfdc00UL, DecodeOpLdvr_sno<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xddfc400UL, 0xbfdfdc00UL, DecodeOpLdvr_hio<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd40c400UL, 0xbfdfdc00UL, DecodeOpLdvr_hno<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xddfc000UL, 0xbfdfdc00UL, DecodeOpLdvr_bio<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd40c000UL, 0xbfdfdc00UL, DecodeOpLdvr_bno<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xddf8400UL, 0xbfdfdc00UL, DecodeOpLdvsl_dio<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd408400UL, 0xbfdfdc00UL, DecodeOpLdvsl_dno<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xddf8000UL, 0xbfdfcc00UL, DecodeOpLdvsl_sio<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd408000UL, 0xbfdfcc00UL, DecodeOpLdvsl_sno<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xddf4000UL, 0xbfdfc400UL, DecodeOpLdvsl_hio<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd404000UL, 0xbfdfc400UL, DecodeOpLdvsl_hno<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xddf0000UL, 0xbfdfc000UL, DecodeOpLdvsl_bio<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd400000UL, 0xbfdfc000UL, DecodeOpLdvsl_bno<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd9f8400UL, 0xbfdfdc00UL, DecodeOpStvsl_dio<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd008400UL, 0xbfdfdc00UL, DecodeOpStvsl_dno<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd9f8000UL, 0xbfdfcc00UL, DecodeOpStvsl_sio<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd008000UL, 0xbfdfcc00UL, DecodeOpStvsl_sno<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd9f4000UL, 0xbfdfc400UL, DecodeOpStvsl_hio<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd004000UL, 0xbfdfc400UL, DecodeOpStvsl_hno<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd9f0000UL, 0xbfdfc000UL, DecodeOpStvsl_bio<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd000000UL, 0xbfdfc000UL, DecodeOpStvsl_bno<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xcdf0c00UL, 0xbfff0c00UL, DecodeOpLdvms_dio<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc400c00UL, 0xbfff0c00UL, DecodeOpLdvms_dno<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xcdf0800UL, 0xbfff0c00UL, DecodeOpLdvms_sio<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc400800UL, 0xbfff0c00UL, DecodeOpLdvms_sno<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xcdf0400UL, 0xbfff0c00UL, DecodeOpLdvms_hio<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc400400UL, 0xbfff0c00UL, DecodeOpLdvms_hno<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xcdf0000UL, 0xbfff0c00UL, DecodeOpLdvms_bio<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc400000UL, 0xbfff0c00UL, DecodeOpLdvms_bno<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc9f0c00UL, 0xbfff0c00UL, DecodeOpStvms_dio<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc000c00UL, 0xbfff0c00UL, DecodeOpStvms_dno<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc9f0800UL, 0xbfff0c00UL, DecodeOpStvms_sio<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc000800UL, 0xbfff0c00UL, DecodeOpStvms_sno<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc9f0400UL, 0xbfff0c00UL, DecodeOpStvms_hio<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc000400UL, 0xbfff0c00UL, DecodeOpStvms_hno<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc9f0000UL, 0xbfff0c00UL, DecodeOpStvms_bio<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc000000UL, 0xbfff0c00UL, DecodeOpStvms_bno<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe807800UL, 0xbfe0fc00UL, DecodeOpZip2_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe407800UL, 0xbfe0fc00UL, DecodeOpZip2_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe007800UL, 0xbfe0fc00UL, DecodeOpZip2_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe803800UL, 0xbfe0fc00UL, DecodeOpZip1_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe403800UL, 0xbfe0fc00UL, DecodeOpZip1_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe003800UL, 0xbfe0fc00UL, DecodeOpZip1_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe805800UL, 0xbfe0fc00UL, DecodeOpUzp2_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe005800UL, 0xbfe0fc00UL, DecodeOpUzp2_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe801800UL, 0xbfe0fc00UL, DecodeOpUzp1_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe401800UL, 0xbfe0fc00UL, DecodeOpUzp1_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe001800UL, 0xbfe0fc00UL, DecodeOpUzp1_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea03800UL, 0xbffffc00UL, DecodeOpUsqadd_vss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e603800UL, 0xbffffc00UL, DecodeOpUsqadd_vhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e203800UL, 0xbffffc00UL, DecodeOpUsqadd_vbb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f400400UL, 0xffc0cc00UL, DecodeOpUshr_v2d2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f200400UL, 0xbfe0cc00UL, DecodeOpUshr_vssi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f100400UL, 0xbff0cc00UL, DecodeOpUshr_vhhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f080400UL, 0xbff8cc00UL, DecodeOpUshr_vbbi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f20a400UL, 0xbfe0fc00UL, DecodeOpUshll_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f10a400UL, 0xbff0fc00UL, DecodeOpUshll_v4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f08a400UL, 0xbff8fc00UL, DecodeOpUshll_v8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee04400UL, 0xffe0fc00UL, DecodeOpUshl_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea04400UL, 0xbfe0fc00UL, DecodeOpUshl_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e604400UL, 0xbfe0fc00UL, DecodeOpUshl_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e204400UL, 0xbfe0fc00UL, DecodeOpUshl_vb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ee04400UL, 0xffe0fc00UL, DecodeOpUshl_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea1c800UL, 0xbffffc00UL, DecodeOpUrsqrte_vss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea05400UL, 0xbfe0fc00UL, DecodeOpUrshl_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e605400UL, 0xbfe0fc00UL, DecodeOpUrshl_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e205400UL, 0xbfe0fc00UL, DecodeOpUrshl_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea01400UL, 0xbfe0fc00UL, DecodeOpUrhadd_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e601400UL, 0xbfe0fc00UL, DecodeOpUrhadd_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e201400UL, 0xbfe0fc00UL, DecodeOpUrhadd_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea1c800UL, 0xbffffc00UL, DecodeOpUrecpe_vss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea02c00UL, 0xbfe0fc00UL, DecodeOpUqsub_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e602c00UL, 0xbfe0fc00UL, DecodeOpUqsub_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e202c00UL, 0xbfe0fc00UL, DecodeOpUqsub_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea04c00UL, 0xbfe0fc00UL, DecodeOpUqshl_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f207400UL, 0xbfe0fc00UL, DecodeOpUqshl_vssi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e604c00UL, 0xbfe0fc00UL, DecodeOpUqshl_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f107400UL, 0xbff0fc00UL, DecodeOpUqshl_vhhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e204c00UL, 0xbfe0fc00UL, DecodeOpUqshl_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f087400UL, 0xbff8fc00UL, DecodeOpUqshl_vbbi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea05c00UL, 0xbfe0fc00UL, DecodeOpUqrshl_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e605c00UL, 0xbfe0fc00UL, DecodeOpUqrshl_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e205c00UL, 0xbfe0fc00UL, DecodeOpUqrshl_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea00c00UL, 0xbfe0fc00UL, DecodeOpUqadd_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e600c00UL, 0xbfe0fc00UL, DecodeOpUqadd_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e200c00UL, 0xbfe0fc00UL, DecodeOpUqadd_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea0ac00UL, 0xbfe0fc00UL, DecodeOpUminp_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e60ac00UL, 0xbfe0fc00UL, DecodeOpUminp_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e20ac00UL, 0xbfe0fc00UL, DecodeOpUminp_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea06c00UL, 0xbfe0fc00UL, DecodeOpUmin_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e606c00UL, 0xbfe0fc00UL, DecodeOpUmin_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e206c00UL, 0xbfe0fc00UL, DecodeOpUmin_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea0a400UL, 0xbfe0fc00UL, DecodeOpUmaxp_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e60a400UL, 0xbfe0fc00UL, DecodeOpUmaxp_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e20a400UL, 0xbfe0fc00UL, DecodeOpUmaxp_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea06400UL, 0xbfe0fc00UL, DecodeOpUmax_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e606400UL, 0xbfe0fc00UL, DecodeOpUmax_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e206400UL, 0xbfe0fc00UL, DecodeOpUmax_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea02400UL, 0xbfe0fc00UL, DecodeOpUhsub_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e602400UL, 0xbfe0fc00UL, DecodeOpUhsub_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e202400UL, 0xbfe0fc00UL, DecodeOpUhsub_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea00400UL, 0xbfe0fc00UL, DecodeOpUhadd_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e600400UL, 0xbfe0fc00UL, DecodeOpUhadd_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e200400UL, 0xbfe0fc00UL, DecodeOpUhadd_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e703800UL, 0xbffffc00UL, DecodeOpUaddlv_svh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e303800UL, 0xbffffc00UL, DecodeOpUaddlv_hvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea02800UL, 0xbffffc00UL, DecodeOpUaddlp_vds<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e602800UL, 0xbffffc00UL, DecodeOpUaddlp_vsh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e202800UL, 0xbffffc00UL, DecodeOpUaddlp_vhb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea06800UL, 0xbffffc00UL, DecodeOpUadalp_vds<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e606800UL, 0xbffffc00UL, DecodeOpUadalp_vsh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e206800UL, 0xbffffc00UL, DecodeOpUadalp_vhb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea07400UL, 0xbfe0fc00UL, DecodeOpUabd_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e607400UL, 0xbfe0fc00UL, DecodeOpUabd_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e207400UL, 0xbfe0fc00UL, DecodeOpUabd_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea07c00UL, 0xbfe0fc00UL, DecodeOpUaba_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e607c00UL, 0xbfe0fc00UL, DecodeOpUaba_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e207c00UL, 0xbfe0fc00UL, DecodeOpUaba_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ec02800UL, 0xffe0bc00UL, DecodeOpTrn_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe802800UL, 0xbfe0bc00UL, DecodeOpTrn_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe402800UL, 0xbfe0bc00UL, DecodeOpTrn_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe002800UL, 0xbfe0bc00UL, DecodeOpTrn_vb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe001000UL, 0xbfe09c00UL, DecodeOpTbx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe000000UL, 0xbfe09c00UL, DecodeOpTbl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea03800UL, 0xbffffc00UL, DecodeOpSuqadd_vss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe603800UL, 0xbffffc00UL, DecodeOpSuqadd_vhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe203800UL, 0xbffffc00UL, DecodeOpSuqadd_vbb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea08400UL, 0xbfe0fc00UL, DecodeOpSub_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e608400UL, 0xbfe0fc00UL, DecodeOpSub_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e208400UL, 0xbfe0fc00UL, DecodeOpSub_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f400400UL, 0xffc0cc00UL, DecodeOpSshr_v2d2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf200400UL, 0xbfe0cc00UL, DecodeOpSshr_vssi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf100400UL, 0xbff0cc00UL, DecodeOpSshr_vhhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf080400UL, 0xbff8cc00UL, DecodeOpSshr_vbbi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea04400UL, 0xbfe0fc00UL, DecodeOpSshl_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe604400UL, 0xbfe0fc00UL, DecodeOpSshl_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe204400UL, 0xbfe0fc00UL, DecodeOpSshl_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea05400UL, 0xbfe0fc00UL, DecodeOpSrshl_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe605400UL, 0xbfe0fc00UL, DecodeOpSrshl_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe205400UL, 0xbfe0fc00UL, DecodeOpSrshl_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f204400UL, 0xbfe0fc00UL, DecodeOpSri_vssi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f104400UL, 0xbff0fc00UL, DecodeOpSri_vhhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f084400UL, 0xbff8fc00UL, DecodeOpSri_vbbi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea01400UL, 0xbfe0fc00UL, DecodeOpSrhadd_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe601400UL, 0xbfe0fc00UL, DecodeOpSrhadd_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe201400UL, 0xbfe0fc00UL, DecodeOpSrhadd_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea02c00UL, 0xbfe0fc00UL, DecodeOpSqsub_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe602c00UL, 0xbfe0fc00UL, DecodeOpSqsub_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe202c00UL, 0xbfe0fc00UL, DecodeOpSqsub_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f206400UL, 0xbfe0fc00UL, DecodeOpSqshlu_vssi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f106400UL, 0xbff0fc00UL, DecodeOpSqshlu_vhhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f086400UL, 0xbff8fc00UL, DecodeOpSqshlu_vbbi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea04c00UL, 0xbfe0fc00UL, DecodeOpSqshl_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf207400UL, 0xbfe0fc00UL, DecodeOpSqshl_vssi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe604c00UL, 0xbfe0fc00UL, DecodeOpSqshl_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf107400UL, 0xbff0fc00UL, DecodeOpSqshl_vhhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe204c00UL, 0xbfe0fc00UL, DecodeOpSqshl_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf087400UL, 0xbff8fc00UL, DecodeOpSqshl_vbbi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea05c00UL, 0xbfe0fc00UL, DecodeOpSqrshl_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe605c00UL, 0xbfe0fc00UL, DecodeOpSqrshl_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe205c00UL, 0xbfe0fc00UL, DecodeOpSqrshl_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea0b400UL, 0xbfe0fc00UL, DecodeOpSqrdmulh_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf80d000UL, 0xbfc0f400UL, DecodeOpSqrdmulh_vsvsvsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e60b400UL, 0xbfe0fc00UL, DecodeOpSqrdmulh_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf40d000UL, 0xbfc0f400UL, DecodeOpSqrdmulh_vhvhvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea07800UL, 0xbffffc00UL, DecodeOpSqneg_vss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e607800UL, 0xbffffc00UL, DecodeOpSqneg_vhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e207800UL, 0xbffffc00UL, DecodeOpSqneg_vbb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea0b400UL, 0xbfe0fc00UL, DecodeOpSqdmulh_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf80c000UL, 0xbfc0f400UL, DecodeOpSqdmulh_vsvsvsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe60b400UL, 0xbfe0fc00UL, DecodeOpSqdmulh_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf40c000UL, 0xbfc0f400UL, DecodeOpSqdmulh_vhvhvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea00c00UL, 0xbfe0fc00UL, DecodeOpSqadd_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe600c00UL, 0xbfe0fc00UL, DecodeOpSqadd_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe200c00UL, 0xbfe0fc00UL, DecodeOpSqadd_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea07800UL, 0xbffffc00UL, DecodeOpSqabs_vss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe607800UL, 0xbffffc00UL, DecodeOpSqabs_vhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe207800UL, 0xbffffc00UL, DecodeOpSqabs_vbb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea0ac00UL, 0xbfe0fc00UL, DecodeOpSminp_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe60ac00UL, 0xbfe0fc00UL, DecodeOpSminp_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe20ac00UL, 0xbfe0fc00UL, DecodeOpSminp_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea06c00UL, 0xbfe0fc00UL, DecodeOpSmin_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe606c00UL, 0xbfe0fc00UL, DecodeOpSmin_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe206c00UL, 0xbfe0fc00UL, DecodeOpSmin_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea0a400UL, 0xbfe0fc00UL, DecodeOpSmaxp_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe60a400UL, 0xbfe0fc00UL, DecodeOpSmaxp_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe20a400UL, 0xbfe0fc00UL, DecodeOpSmaxp_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea06400UL, 0xbfe0fc00UL, DecodeOpSmax_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe606400UL, 0xbfe0fc00UL, DecodeOpSmax_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe206400UL, 0xbfe0fc00UL, DecodeOpSmax_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f405400UL, 0xffc0fc00UL, DecodeOpSli_v2d2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f205400UL, 0xbfe0fc00UL, DecodeOpSli_vssi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f105400UL, 0xbff0fc00UL, DecodeOpSli_vhhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f085400UL, 0xbff8fc00UL, DecodeOpSli_vbbi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f405400UL, 0xffc0fc00UL, DecodeOpSli_ddi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea02400UL, 0xbfe0fc00UL, DecodeOpShsub_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe602400UL, 0xbfe0fc00UL, DecodeOpShsub_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe202400UL, 0xbfe0fc00UL, DecodeOpShsub_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f405400UL, 0xffc0fc00UL, DecodeOpShl_v2d2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf205400UL, 0xbfe0fc00UL, DecodeOpShl_vssi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf105400UL, 0xbff0fc00UL, DecodeOpShl_vhhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf085400UL, 0xbff8fc00UL, DecodeOpShl_vbbi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f405400UL, 0xffc0fc00UL, DecodeOpShl_ddi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea00400UL, 0xbfe0fc00UL, DecodeOpShadd_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe600400UL, 0xbfe0fc00UL, DecodeOpShadd_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe200400UL, 0xbfe0fc00UL, DecodeOpShadd_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe703800UL, 0xbffffc00UL, DecodeOpSaddlv_svh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe303800UL, 0xbffffc00UL, DecodeOpSaddlv_hvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea02800UL, 0xbffffc00UL, DecodeOpSaddlp_vds<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe602800UL, 0xbffffc00UL, DecodeOpSaddlp_vsh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe202800UL, 0xbffffc00UL, DecodeOpSaddlp_vhb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea06800UL, 0xbffffc00UL, DecodeOpSadalp_vds<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe606800UL, 0xbffffc00UL, DecodeOpSadalp_vsh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe206800UL, 0xbffffc00UL, DecodeOpSadalp_vhb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea07400UL, 0xbfe0fc00UL, DecodeOpSabd_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe607400UL, 0xbfe0fc00UL, DecodeOpSabd_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe207400UL, 0xbfe0fc00UL, DecodeOpSabd_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea07c00UL, 0xbfe0fc00UL, DecodeOpSaba_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe607c00UL, 0xbfe0fc00UL, DecodeOpSaba_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe207c00UL, 0xbfe0fc00UL, DecodeOpSaba_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea00800UL, 0xbffffc00UL, DecodeOpRev64_vss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe600800UL, 0xbffffc00UL, DecodeOpRev64_vhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe200800UL, 0xbffffc00UL, DecodeOpRev64_vbb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e600800UL, 0xbffffc00UL, DecodeOpRev32_vhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e200800UL, 0xbffffc00UL, DecodeOpRev32_vbb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe201800UL, 0xbffffc00UL, DecodeOpRev16_vbb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e605800UL, 0xbffffc00UL, DecodeOpRbit_vbb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e209c00UL, 0xbfe0fc00UL, DecodeOpPmul_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf001400UL, 0xbff89c00UL, DecodeOpOrr_vsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf009400UL, 0xbff8dc00UL, DecodeOpOrr_vhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xee01c00UL, 0xbfe0fc00UL, DecodeOpOrn_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ee0b800UL, 0xfffffc00UL, DecodeOpNeg_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee0b800UL, 0xfffffc00UL, DecodeOpNeg_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea0b800UL, 0xbffffc00UL, DecodeOpNeg_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e60b800UL, 0xbffffc00UL, DecodeOpNeg_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e20b800UL, 0xbffffc00UL, DecodeOpNeg_vb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f00c400UL, 0xbff8ec00UL, DecodeOpMvni_vsmsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f000400UL, 0xbff89c00UL, DecodeOpMvni_vsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f008400UL, 0xbff8dc00UL, DecodeOpMvni_vhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e205800UL, 0xbffffc00UL, DecodeOpMvn_vb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf808000UL, 0xbfc0f400UL, DecodeOpMul_vsvsvsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf408000UL, 0xbfc0f400UL, DecodeOpMul_vhvhvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea09c00UL, 0xbfe0fc00UL, DecodeOpMul_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe609c00UL, 0xbfe0fc00UL, DecodeOpMul_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe209c00UL, 0xbfe0fc00UL, DecodeOpMul_vb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf00c400UL, 0xbff8ec00UL, DecodeOpMovi_vsmsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f00e400UL, 0xfff8fc00UL, DecodeOpMovi_v2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f00e400UL, 0xfff8fc00UL, DecodeOpMovi_di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf000400UL, 0xbff89c00UL, DecodeOpMovi_vsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf008400UL, 0xbff8dc00UL, DecodeOpMovi_vhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf00e400UL, 0xbff8fc00UL, DecodeOpMovi_vbi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea09400UL, 0xbfe0fc00UL, DecodeOpMls_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f804000UL, 0xbfc0f400UL, DecodeOpMls_vsvsvsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e609400UL, 0xbfe0fc00UL, DecodeOpMls_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f404000UL, 0xbfc0f400UL, DecodeOpMls_vhvhvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e209400UL, 0xbfe0fc00UL, DecodeOpMls_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea09400UL, 0xbfe0fc00UL, DecodeOpMla_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f800000UL, 0xbfc0f400UL, DecodeOpMla_vsvsvsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe609400UL, 0xbfe0fc00UL, DecodeOpMla_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f400000UL, 0xbfc0f400UL, DecodeOpMla_vhvhvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe209400UL, 0xbfe0fc00UL, DecodeOpMla_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e000000UL, 0xbfe08400UL, DecodeOpExt_vb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e201c00UL, 0xbfe0fc00UL, DecodeOpEor_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e080c00UL, 0xffeffc00UL, DecodeOpDup_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe040c00UL, 0xbfe7fc00UL, DecodeOpDup_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe020c00UL, 0xbfe3fc00UL, DecodeOpDup_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe010c00UL, 0xbfe1fc00UL, DecodeOpDup_vb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e080400UL, 0xffeffc00UL, DecodeOpDup_v2dvd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe040400UL, 0xbfe7fc00UL, DecodeOpDup_vsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe020400UL, 0xbfe3fc00UL, DecodeOpDup_vhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe010400UL, 0xbfe1fc00UL, DecodeOpDup_vbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e080400UL, 0xffeffc00UL, DecodeOpMov_dvd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e040400UL, 0xffe7fc00UL, DecodeOpMov_svs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e020400UL, 0xffe3fc00UL, DecodeOpMov_hvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e010400UL, 0xffe1fc00UL, DecodeOpMov_bvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe205800UL, 0xbffffc00UL, DecodeOpCnt_vbb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea08c00UL, 0xbfe0fc00UL, DecodeOpCmtst_vsvsvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe608c00UL, 0xbfe0fc00UL, DecodeOpCmtst_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe208c00UL, 0xbfe0fc00UL, DecodeOpCmtst_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea04800UL, 0xbffffc00UL, DecodeOpClz_vss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e604800UL, 0xbffffc00UL, DecodeOpClz_vhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e204800UL, 0xbffffc00UL, DecodeOpClz_vbb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea04800UL, 0xbffffc00UL, DecodeOpCls_vss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe604800UL, 0xbffffc00UL, DecodeOpCls_vhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe204800UL, 0xbffffc00UL, DecodeOpCls_vbb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e601c00UL, 0xbfe0fc00UL, DecodeOpBsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ee01c00UL, 0xbfe0fc00UL, DecodeOpBif<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea01c00UL, 0xbfe0fc00UL, DecodeOpBit<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f001400UL, 0xbff89c00UL, DecodeOpBic_vsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f009400UL, 0xbff8dc00UL, DecodeOpBic_vhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe601c00UL, 0xbfe0fc00UL, DecodeOpBic_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe201c00UL, 0xbfe0fc00UL, DecodeOpAnd_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea01c00UL, 0xbfe0fc00UL, DecodeOpOrr_vbvbvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ec07800UL, 0xffe0fc00UL, DecodeOpZip2_v2dv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ec03800UL, 0xffe0fc00UL, DecodeOpZip1_v2dv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe212800UL, 0xfffffc00UL, DecodeOpXtn_v8b8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe612800UL, 0xfffffc00UL, DecodeOpXtn_v4h4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea12800UL, 0xfffffc00UL, DecodeOpXtn_v2s2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ea12800UL, 0xfffffc00UL, DecodeOpXtn2_v4s2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e612800UL, 0xfffffc00UL, DecodeOpXtn2_v8h4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e212800UL, 0xfffffc00UL, DecodeOpXtn2_v16b8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe405800UL, 0xbfe0fc00UL, DecodeOpUzp2_vhvhvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ec05800UL, 0xffe0fc00UL, DecodeOpUzp2_v2dv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ec01800UL, 0xffe0fc00UL, DecodeOpUzp1_v2dv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e203000UL, 0xffe0fc00UL, DecodeOpUsubw_v8hv8hv8b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e603000UL, 0xffe0fc00UL, DecodeOpUsubw_v4sv4sv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea03000UL, 0xffe0fc00UL, DecodeOpUsubw_v2dv2dv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e203000UL, 0xffe0fc00UL, DecodeOpUsubw2_v8hv8hv16b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e603000UL, 0xffe0fc00UL, DecodeOpUsubw2_v4sv4sv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ea03000UL, 0xffe0fc00UL, DecodeOpUsubw2_v2dv2dv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e202000UL, 0xffe0fc00UL, DecodeOpUsubl_v8hv8bv8b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e602000UL, 0xffe0fc00UL, DecodeOpUsubl_v4sv4hv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea02000UL, 0xffe0fc00UL, DecodeOpUsubl_v2dv2sv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e202000UL, 0xffe0fc00UL, DecodeOpUsubl2_v8hv16bv16b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e602000UL, 0xffe0fc00UL, DecodeOpUsubl2_v4sv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ea02000UL, 0xffe0fc00UL, DecodeOpUsubl2_v2dv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f401400UL, 0xffc0fc00UL, DecodeOpUsra_ddi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee03800UL, 0xfffffc00UL, DecodeOpUsqadd_v2d2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ea03800UL, 0xfffffc00UL, DecodeOpUsqadd_ss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e603800UL, 0xfffffc00UL, DecodeOpUsqadd_hh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ee03800UL, 0xfffffc00UL, DecodeOpUsqadd_dd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e203800UL, 0xfffffc00UL, DecodeOpUsqadd_bb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f400400UL, 0xffc0fc00UL, DecodeOpUshr_ddi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f403400UL, 0xffc0fc00UL, DecodeOpUrsra_ddi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f402400UL, 0xffc0fc00UL, DecodeOpUrshr_ddi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee05400UL, 0xffe0fc00UL, DecodeOpUrshl_v2dv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ee05400UL, 0xffe0fc00UL, DecodeOpUrshl_ddd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e214800UL, 0xfffffc00UL, DecodeOpUqxtn_v8b8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e614800UL, 0xfffffc00UL, DecodeOpUqxtn_v4h4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea14800UL, 0xfffffc00UL, DecodeOpUqxtn_v2s2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ea14800UL, 0xfffffc00UL, DecodeOpUqxtn_sd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e614800UL, 0xfffffc00UL, DecodeOpUqxtn_hs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e214800UL, 0xfffffc00UL, DecodeOpUqxtn_bh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e614800UL, 0xfffffc00UL, DecodeOpUqxtn2_v8h4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ea14800UL, 0xfffffc00UL, DecodeOpUqxtn2_v4s2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e214800UL, 0xfffffc00UL, DecodeOpUqxtn2_v16b8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee02c00UL, 0xffe0fc00UL, DecodeOpUqsub_v2dv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ea02c00UL, 0xffe0fc00UL, DecodeOpUqsub_sss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e602c00UL, 0xffe0fc00UL, DecodeOpUqsub_hhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ee02c00UL, 0xffe0fc00UL, DecodeOpUqsub_ddd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e202c00UL, 0xffe0fc00UL, DecodeOpUqsub_bbb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f089400UL, 0xfff8fc00UL, DecodeOpUqshrn_v8b8hi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f109400UL, 0xfff0fc00UL, DecodeOpUqshrn_v4h4si<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f209400UL, 0xffe0fc00UL, DecodeOpUqshrn_v2s2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f209400UL, 0xffe0fc00UL, DecodeOpUqshrn_sdi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f109400UL, 0xfff0fc00UL, DecodeOpUqshrn_hsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f089400UL, 0xfff8fc00UL, DecodeOpUqshrn_bhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f109400UL, 0xfff0fc00UL, DecodeOpUqshrn2_v8h4si<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f209400UL, 0xffe0fc00UL, DecodeOpUqshrn2_v4s2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f089400UL, 0xfff8fc00UL, DecodeOpUqshrn2_v16b8hi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee04c00UL, 0xffe0fc00UL, DecodeOpUqshl_v2dv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f407400UL, 0xffc0fc00UL, DecodeOpUqshl_v2d2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ea04c00UL, 0xffe0fc00UL, DecodeOpUqshl_sss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f207400UL, 0xffe0fc00UL, DecodeOpUqshl_ssi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f107400UL, 0xfff0fc00UL, DecodeOpUqshl_hhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e604c00UL, 0xffe0fc00UL, DecodeOpUqshl_hhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f407400UL, 0xffc0fc00UL, DecodeOpUqshl_ddi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ee04c00UL, 0xffe0fc00UL, DecodeOpUqshl_ddd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f087400UL, 0xfff8fc00UL, DecodeOpUqshl_bbi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e204c00UL, 0xffe0fc00UL, DecodeOpUqshl_bbb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f089c00UL, 0xfff8fc00UL, DecodeOpUqrshrn_v8b8hi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f109c00UL, 0xfff0fc00UL, DecodeOpUqrshrn_v4h4si<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f209c00UL, 0xffe0fc00UL, DecodeOpUqrshrn_v2s2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f209c00UL, 0xffe0fc00UL, DecodeOpUqrshrn_sdi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f109c00UL, 0xfff0fc00UL, DecodeOpUqrshrn_hsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f089c00UL, 0xfff8fc00UL, DecodeOpUqrshrn_bhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f109c00UL, 0xfff0fc00UL, DecodeOpUqrshrn2_v8h4si<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f209c00UL, 0xffe0fc00UL, DecodeOpUqrshrn2_v4s2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f089c00UL, 0xfff8fc00UL, DecodeOpUqrshrn2_v16b8hi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee05c00UL, 0xffe0fc00UL, DecodeOpUqrshl_v2dv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ea05c00UL, 0xffe0fc00UL, DecodeOpUqrshl_sss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e605c00UL, 0xffe0fc00UL, DecodeOpUqrshl_hhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ee05c00UL, 0xffe0fc00UL, DecodeOpUqrshl_ddd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e205c00UL, 0xffe0fc00UL, DecodeOpUqrshl_bbb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee00c00UL, 0xffe0fc00UL, DecodeOpUqadd_v2dv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ea00c00UL, 0xffe0fc00UL, DecodeOpUqadd_sss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e600c00UL, 0xffe0fc00UL, DecodeOpUqadd_hhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ee00c00UL, 0xffe0fc00UL, DecodeOpUqadd_ddd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e200c00UL, 0xffe0fc00UL, DecodeOpUqadd_bbb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e20c000UL, 0xffe0fc00UL, DecodeOpUmull_v8hv8bv8b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f40a000UL, 0xffc0f400UL, DecodeOpUmull_v4sv4hvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e60c000UL, 0xffe0fc00UL, DecodeOpUmull_v4sv4hv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f80a000UL, 0xffc0f400UL, DecodeOpUmull_v2dv2svsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea0c000UL, 0xffe0fc00UL, DecodeOpUmull_v2dv2sv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e20c000UL, 0xffe0fc00UL, DecodeOpUmull2_v8hv16bv16b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f40a000UL, 0xffc0f400UL, DecodeOpUmull2_v4sv8hvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e60c000UL, 0xffe0fc00UL, DecodeOpUmull2_v4sv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f80a000UL, 0xffc0f400UL, DecodeOpUmull2_v2dv4svsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ea0c000UL, 0xffe0fc00UL, DecodeOpUmull2_v2dv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e083c00UL, 0xffeffc00UL, DecodeOpUmov_xvd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe043c00UL, 0xffe7fc00UL, DecodeOpUmov_wvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe023c00UL, 0xffe3fc00UL, DecodeOpUmov_wvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe013c00UL, 0xffe1fc00UL, DecodeOpUmov_wvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e20a000UL, 0xffe0fc00UL, DecodeOpUmlsl_v8hv8bv8b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f406000UL, 0xffc0f400UL, DecodeOpUmlsl_v4sv4hvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e60a000UL, 0xffe0fc00UL, DecodeOpUmlsl_v4sv4hv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f806000UL, 0xffc0f400UL, DecodeOpUmlsl_v2dv2svsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea0a000UL, 0xffe0fc00UL, DecodeOpUmlsl_v2dv2sv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e20a000UL, 0xffe0fc00UL, DecodeOpUmlsl2_v8hv16bv16b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f406000UL, 0xffc0f400UL, DecodeOpUmlsl2_v4sv8hvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e60a000UL, 0xffe0fc00UL, DecodeOpUmlsl2_v4sv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f806000UL, 0xffc0f400UL, DecodeOpUmlsl2_v2dv4svsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ea0a000UL, 0xffe0fc00UL, DecodeOpUmlsl2_v2dv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e208000UL, 0xffe0fc00UL, DecodeOpUmlal_v8hv8bv8b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f402000UL, 0xffc0f400UL, DecodeOpUmlal_v4sv4hvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e608000UL, 0xffe0fc00UL, DecodeOpUmlal_v4sv4hv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f802000UL, 0xffc0f400UL, DecodeOpUmlal_v2dv2svsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea08000UL, 0xffe0fc00UL, DecodeOpUmlal_v2dv2sv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e208000UL, 0xffe0fc00UL, DecodeOpUmlal2_v8hv16bv16b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f402000UL, 0xffc0f400UL, DecodeOpUmlal2_v4sv8hvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e608000UL, 0xffe0fc00UL, DecodeOpUmlal2_v4sv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f802000UL, 0xffc0f400UL, DecodeOpUmlal2_v2dv4svsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ea08000UL, 0xffe0fc00UL, DecodeOpUmlal2_v2dv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e201000UL, 0xffe0fc00UL, DecodeOpUaddw_v8hv8hv8b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e601000UL, 0xffe0fc00UL, DecodeOpUaddw_v4sv4sv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea01000UL, 0xffe0fc00UL, DecodeOpUaddw_v2dv2dv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e201000UL, 0xffe0fc00UL, DecodeOpUaddw2_v8hv8hv16b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e601000UL, 0xffe0fc00UL, DecodeOpUaddw2_v4sv4sv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ea01000UL, 0xffe0fc00UL, DecodeOpUaddw2_v2dv2dv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6eb03800UL, 0xfffffc00UL, DecodeOpUaddlv_dv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e200000UL, 0xffe0fc00UL, DecodeOpUaddl_v8hv8bv8b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e600000UL, 0xffe0fc00UL, DecodeOpUaddl_v4sv4hv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea00000UL, 0xffe0fc00UL, DecodeOpUaddl_v2dv2sv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e200000UL, 0xffe0fc00UL, DecodeOpUaddl2_v8hv16bv16b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e600000UL, 0xffe0fc00UL, DecodeOpUaddl2_v4sv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ea00000UL, 0xffe0fc00UL, DecodeOpUaddl2_v2dv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e207000UL, 0xffe0fc00UL, DecodeOpUabdl_v8hv8bv8b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e607000UL, 0xffe0fc00UL, DecodeOpUabdl_v4sv4hv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea07000UL, 0xffe0fc00UL, DecodeOpUabdl_v2dv2sv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e207000UL, 0xffe0fc00UL, DecodeOpUabdl2_v8hv16bv16b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e607000UL, 0xffe0fc00UL, DecodeOpUabdl2_v4sv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ea07000UL, 0xffe0fc00UL, DecodeOpUabdl2_v2dv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e205000UL, 0xffe0fc00UL, DecodeOpUabal_v8hv8bv8b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e605000UL, 0xffe0fc00UL, DecodeOpUabal_v4sv4hv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea05000UL, 0xffe0fc00UL, DecodeOpUabal_v2dv2sv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e205000UL, 0xffe0fc00UL, DecodeOpUabal2_v8hv16bv16b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e605000UL, 0xffe0fc00UL, DecodeOpUabal2_v4sv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ea05000UL, 0xffe0fc00UL, DecodeOpUabal2_v2dv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee03800UL, 0xfffffc00UL, DecodeOpSuqadd_v2d2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ea03800UL, 0xfffffc00UL, DecodeOpSuqadd_ss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e603800UL, 0xfffffc00UL, DecodeOpSuqadd_hh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee03800UL, 0xfffffc00UL, DecodeOpSuqadd_dd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e203800UL, 0xfffffc00UL, DecodeOpSuqadd_bb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe206000UL, 0xffe0fc00UL, DecodeOpSubhn_v8bv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe606000UL, 0xffe0fc00UL, DecodeOpSubhn_v4hv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea06000UL, 0xffe0fc00UL, DecodeOpSubhn_v2sv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e606000UL, 0xffe0fc00UL, DecodeOpSubhn2_v8hv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ea06000UL, 0xffe0fc00UL, DecodeOpSubhn2_v4sv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e206000UL, 0xffe0fc00UL, DecodeOpSubhn2_v16bv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee08400UL, 0xffe0fc00UL, DecodeOpSub_v2dv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ee08400UL, 0xffe0fc00UL, DecodeOpSub_ddd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3ca0e800UL, 0xffe0ec00UL, DecodeOpStr_qxxs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3ca0c800UL, 0xffe0ec00UL, DecodeOpStr_qxws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3ca06800UL, 0xffe0ec00UL, DecodeOpStr_qxxu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3ca04800UL, 0xffe0ec00UL, DecodeOpStr_qxwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xfc20e800UL, 0xffe0ec00UL, DecodeOpStr_dxxs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xfc20c800UL, 0xffe0ec00UL, DecodeOpStr_dxws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xfc206800UL, 0xffe0ec00UL, DecodeOpStr_dxxu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xfc204800UL, 0xffe0ec00UL, DecodeOpStr_dxwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xbc20e800UL, 0xffe0ec00UL, DecodeOpStr_sxxs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xbc20c800UL, 0xffe0ec00UL, DecodeOpStr_sxws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xbc206800UL, 0xffe0ec00UL, DecodeOpStr_sxxu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xbc204800UL, 0xffe0ec00UL, DecodeOpStr_sxwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7c20e800UL, 0xffe0ec00UL, DecodeOpStr_hxxs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7c20c800UL, 0xffe0ec00UL, DecodeOpStr_hxws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7c206800UL, 0xffe0ec00UL, DecodeOpStr_hxxu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7c204800UL, 0xffe0ec00UL, DecodeOpStr_hxwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3c20e800UL, 0xffe0ec00UL, DecodeOpStr_bxxs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3c20c800UL, 0xffe0ec00UL, DecodeOpStr_bxws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3c206800UL, 0xffe0ec00UL, DecodeOpStr_bxxu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3c204800UL, 0xffe0ec00UL, DecodeOpStr_bxwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3d800000UL, 0xffc00000UL, DecodeOpStr_quo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3c800000UL, 0xffe00000UL, DecodeOpStr_qxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xfd000000UL, 0xffc00000UL, DecodeOpStr_duo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xfc000000UL, 0xffe00000UL, DecodeOpStr_dxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xbd000000UL, 0xffc00000UL, DecodeOpStr_suo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xbc000000UL, 0xffe00000UL, DecodeOpStr_sxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7d000000UL, 0xffc00000UL, DecodeOpStr_huo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7c000000UL, 0xffe00000UL, DecodeOpStr_hxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3d000000UL, 0xffc00000UL, DecodeOpStr_buo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3c000000UL, 0xffe00000UL, DecodeOpStr_bxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xac000000UL, 0xfe400000UL, DecodeOpStp_qo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6c000000UL, 0xfe400000UL, DecodeOpStp_do<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2c000000UL, 0xfe400000UL, DecodeOpStp_so<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe203000UL, 0xffe0fc00UL, DecodeOpSsubw_v8hv8hv8b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe603000UL, 0xffe0fc00UL, DecodeOpSsubw_v4sv4sv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea03000UL, 0xffe0fc00UL, DecodeOpSsubw_v2dv2dv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e203000UL, 0xffe0fc00UL, DecodeOpSsubw2_v8hv8hv16b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e603000UL, 0xffe0fc00UL, DecodeOpSsubw2_v4sv4sv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ea03000UL, 0xffe0fc00UL, DecodeOpSsubw2_v2dv2dv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe202000UL, 0xffe0fc00UL, DecodeOpSsubl_v8hv8bv8b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe602000UL, 0xffe0fc00UL, DecodeOpSsubl_v4sv4hv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea02000UL, 0xffe0fc00UL, DecodeOpSsubl_v2dv2sv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e202000UL, 0xffe0fc00UL, DecodeOpSsubl2_v8hv16bv16b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e602000UL, 0xffe0fc00UL, DecodeOpSsubl2_v4sv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ea02000UL, 0xffe0fc00UL, DecodeOpSsubl2_v2dv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f401400UL, 0xffc0fc00UL, DecodeOpSsra_ddi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f400400UL, 0xffc0fc00UL, DecodeOpSshr_ddi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf20a400UL, 0xbfe0fc00UL, DecodeOpSshll_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf10a400UL, 0xbff0fc00UL, DecodeOpSshll_v4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf08a400UL, 0xbff8fc00UL, DecodeOpSshll_v8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee04400UL, 0xffe0fc00UL, DecodeOpSshl_v2dv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee04400UL, 0xffe0fc00UL, DecodeOpSshl_ddd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f403400UL, 0xffc0fc00UL, DecodeOpSrsra_ddi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f402400UL, 0xffc0fc00UL, DecodeOpSrshr_ddi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee05400UL, 0xffe0fc00UL, DecodeOpSrshl_v2dv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee05400UL, 0xffe0fc00UL, DecodeOpSrshl_ddd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f404400UL, 0xffc0fc00UL, DecodeOpSri_v2d2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f404400UL, 0xffc0fc00UL, DecodeOpSri_ddi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e212800UL, 0xfffffc00UL, DecodeOpSqxtun_v8b8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e612800UL, 0xfffffc00UL, DecodeOpSqxtun_v4h4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea12800UL, 0xfffffc00UL, DecodeOpSqxtun_v2s2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ea12800UL, 0xfffffc00UL, DecodeOpSqxtun_sd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e612800UL, 0xfffffc00UL, DecodeOpSqxtun_hs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e212800UL, 0xfffffc00UL, DecodeOpSqxtun_bh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e612800UL, 0xfffffc00UL, DecodeOpSqxtun2_v8h4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ea12800UL, 0xfffffc00UL, DecodeOpSqxtun2_v4s2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e212800UL, 0xfffffc00UL, DecodeOpSqxtun2_v16b8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe214800UL, 0xfffffc00UL, DecodeOpSqxtn_v8b8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe614800UL, 0xfffffc00UL, DecodeOpSqxtn_v4h4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea14800UL, 0xfffffc00UL, DecodeOpSqxtn_v2s2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ea14800UL, 0xfffffc00UL, DecodeOpSqxtn_sd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e614800UL, 0xfffffc00UL, DecodeOpSqxtn_hs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e214800UL, 0xfffffc00UL, DecodeOpSqxtn_bh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e614800UL, 0xfffffc00UL, DecodeOpSqxtn2_v8h4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ea14800UL, 0xfffffc00UL, DecodeOpSqxtn2_v4s2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e214800UL, 0xfffffc00UL, DecodeOpSqxtn2_v16b8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee02c00UL, 0xffe0fc00UL, DecodeOpSqsub_v2dv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ea02c00UL, 0xffe0fc00UL, DecodeOpSqsub_sss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e602c00UL, 0xffe0fc00UL, DecodeOpSqsub_hhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee02c00UL, 0xffe0fc00UL, DecodeOpSqsub_ddd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e202c00UL, 0xffe0fc00UL, DecodeOpSqsub_bbb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f088400UL, 0xfff8fc00UL, DecodeOpSqshrun_v8b8hi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f108400UL, 0xfff0fc00UL, DecodeOpSqshrun_v4h4si<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f208400UL, 0xffe0fc00UL, DecodeOpSqshrun_v2s2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f208400UL, 0xffe0fc00UL, DecodeOpSqshrun_sdi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f108400UL, 0xfff0fc00UL, DecodeOpSqshrun_hsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f088400UL, 0xfff8fc00UL, DecodeOpSqshrun_bhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f108400UL, 0xfff0fc00UL, DecodeOpSqshrun2_v8h4si<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f208400UL, 0xffe0fc00UL, DecodeOpSqshrun2_v4s2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f088400UL, 0xfff8fc00UL, DecodeOpSqshrun2_v16b8hi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf089400UL, 0xfff8fc00UL, DecodeOpSqshrn_v8b8hi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf109400UL, 0xfff0fc00UL, DecodeOpSqshrn_v4h4si<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf209400UL, 0xffe0fc00UL, DecodeOpSqshrn_v2s2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f209400UL, 0xffe0fc00UL, DecodeOpSqshrn_sdi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f109400UL, 0xfff0fc00UL, DecodeOpSqshrn_hsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f089400UL, 0xfff8fc00UL, DecodeOpSqshrn_bhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f109400UL, 0xfff0fc00UL, DecodeOpSqshrn2_v8h4si<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f209400UL, 0xffe0fc00UL, DecodeOpSqshrn2_v4s2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f089400UL, 0xfff8fc00UL, DecodeOpSqshrn2_v16b8hi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f406400UL, 0xffc0fc00UL, DecodeOpSqshlu_v2d2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f206400UL, 0xffe0fc00UL, DecodeOpSqshlu_ssi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f106400UL, 0xfff0fc00UL, DecodeOpSqshlu_hhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f406400UL, 0xffc0fc00UL, DecodeOpSqshlu_ddi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f086400UL, 0xfff8fc00UL, DecodeOpSqshlu_bbi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee04c00UL, 0xffe0fc00UL, DecodeOpSqshl_v2dv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f407400UL, 0xffc0fc00UL, DecodeOpSqshl_v2d2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ea04c00UL, 0xffe0fc00UL, DecodeOpSqshl_sss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f207400UL, 0xffe0fc00UL, DecodeOpSqshl_ssi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f107400UL, 0xfff0fc00UL, DecodeOpSqshl_hhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e604c00UL, 0xffe0fc00UL, DecodeOpSqshl_hhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f407400UL, 0xffc0fc00UL, DecodeOpSqshl_ddi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee04c00UL, 0xffe0fc00UL, DecodeOpSqshl_ddd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f087400UL, 0xfff8fc00UL, DecodeOpSqshl_bbi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e204c00UL, 0xffe0fc00UL, DecodeOpSqshl_bbb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f088c00UL, 0xfff8fc00UL, DecodeOpSqrshrun_v8b8hi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f108c00UL, 0xfff0fc00UL, DecodeOpSqrshrun_v4h4si<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2f208c00UL, 0xffe0fc00UL, DecodeOpSqrshrun_v2s2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f208c00UL, 0xffe0fc00UL, DecodeOpSqrshrun_sdi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f108c00UL, 0xfff0fc00UL, DecodeOpSqrshrun_hsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7f088c00UL, 0xfff8fc00UL, DecodeOpSqrshrun_bhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f108c00UL, 0xfff0fc00UL, DecodeOpSqrshrun2_v8h4si<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f208c00UL, 0xffe0fc00UL, DecodeOpSqrshrun2_v4s2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6f088c00UL, 0xfff8fc00UL, DecodeOpSqrshrun2_v16b8hi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf089c00UL, 0xfff8fc00UL, DecodeOpSqrshrn_v8b8hi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf109c00UL, 0xfff0fc00UL, DecodeOpSqrshrn_v4h4si<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf209c00UL, 0xffe0fc00UL, DecodeOpSqrshrn_v2s2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f209c00UL, 0xffe0fc00UL, DecodeOpSqrshrn_sdi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f109c00UL, 0xfff0fc00UL, DecodeOpSqrshrn_hsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f089c00UL, 0xfff8fc00UL, DecodeOpSqrshrn_bhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f109c00UL, 0xfff0fc00UL, DecodeOpSqrshrn2_v8h4si<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f209c00UL, 0xffe0fc00UL, DecodeOpSqrshrn2_v4s2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f089c00UL, 0xfff8fc00UL, DecodeOpSqrshrn2_v16b8hi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee05c00UL, 0xffe0fc00UL, DecodeOpSqrshl_v2dv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ea05c00UL, 0xffe0fc00UL, DecodeOpSqrshl_sss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e605c00UL, 0xffe0fc00UL, DecodeOpSqrshl_hhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee05c00UL, 0xffe0fc00UL, DecodeOpSqrshl_ddd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e205c00UL, 0xffe0fc00UL, DecodeOpSqrshl_bbb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f80d000UL, 0xffc0f400UL, DecodeOpSqrdmulh_ssvsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ea0b400UL, 0xffe0fc00UL, DecodeOpSqrdmulh_sss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f40d000UL, 0xffc0f400UL, DecodeOpSqrdmulh_hhvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e60b400UL, 0xffe0fc00UL, DecodeOpSqrdmulh_hhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee07800UL, 0xfffffc00UL, DecodeOpSqneg_v2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ea07800UL, 0xfffffc00UL, DecodeOpSqneg_ss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e607800UL, 0xfffffc00UL, DecodeOpSqneg_hh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ee07800UL, 0xfffffc00UL, DecodeOpSqneg_dd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7e207800UL, 0xfffffc00UL, DecodeOpSqneg_bb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf40b000UL, 0xffc0f400UL, DecodeOpSqdmull_v4sv4hvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe60d000UL, 0xffe0fc00UL, DecodeOpSqdmull_v4sv4hv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf80b000UL, 0xffc0f400UL, DecodeOpSqdmull_v2dv2svsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea0d000UL, 0xffe0fc00UL, DecodeOpSqdmull_v2dv2sv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f40b000UL, 0xffc0f400UL, DecodeOpSqdmull_shvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e60d000UL, 0xffe0fc00UL, DecodeOpSqdmull_shh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f80b000UL, 0xffc0f400UL, DecodeOpSqdmull_dsvsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ea0d000UL, 0xffe0fc00UL, DecodeOpSqdmull_dss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f40b000UL, 0xffc0f400UL, DecodeOpSqdmull2_v4sv8hvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e60d000UL, 0xffe0fc00UL, DecodeOpSqdmull2_v4sv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f80b000UL, 0xffc0f400UL, DecodeOpSqdmull2_v2dv4svsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ea0d000UL, 0xffe0fc00UL, DecodeOpSqdmull2_v2dv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f80c000UL, 0xffc0f400UL, DecodeOpSqdmulh_ssvsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ea0b400UL, 0xffe0fc00UL, DecodeOpSqdmulh_sss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f40c000UL, 0xffc0f400UL, DecodeOpSqdmulh_hhvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e60b400UL, 0xffe0fc00UL, DecodeOpSqdmulh_hhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf407000UL, 0xffc0f400UL, DecodeOpSqdmlsl_v4sv4hvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe60b000UL, 0xffe0fc00UL, DecodeOpSqdmlsl_v4sv4hv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf807000UL, 0xffc0f400UL, DecodeOpSqdmlsl_v2dv2svsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea0b000UL, 0xffe0fc00UL, DecodeOpSqdmlsl_v2dv2sv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f407000UL, 0xffc0f400UL, DecodeOpSqdmlsl_shvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e60b000UL, 0xffe0fc00UL, DecodeOpSqdmlsl_shh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f807000UL, 0xffc0f400UL, DecodeOpSqdmlsl_dsvsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ea0b000UL, 0xffe0fc00UL, DecodeOpSqdmlsl_dss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f407000UL, 0xffc0f400UL, DecodeOpSqdmlsl2_v4sv8hvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e60b000UL, 0xffe0fc00UL, DecodeOpSqdmlsl2_v4sv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f807000UL, 0xffc0f400UL, DecodeOpSqdmlsl2_v2dv4svsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ea0b000UL, 0xffe0fc00UL, DecodeOpSqdmlsl2_v2dv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf403000UL, 0xffc0f400UL, DecodeOpSqdmlal_v4sv4hvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe609000UL, 0xffe0fc00UL, DecodeOpSqdmlal_v4sv4hv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf803000UL, 0xffc0f400UL, DecodeOpSqdmlal_v2dv2svsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea09000UL, 0xffe0fc00UL, DecodeOpSqdmlal_v2dv2sv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f403000UL, 0xffc0f400UL, DecodeOpSqdmlal_shvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e609000UL, 0xffe0fc00UL, DecodeOpSqdmlal_shh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5f803000UL, 0xffc0f400UL, DecodeOpSqdmlal_dsvsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ea09000UL, 0xffe0fc00UL, DecodeOpSqdmlal_dss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f403000UL, 0xffc0f400UL, DecodeOpSqdmlal2_v4sv8hvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e609000UL, 0xffe0fc00UL, DecodeOpSqdmlal2_v4sv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f803000UL, 0xffc0f400UL, DecodeOpSqdmlal2_v2dv4svsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ea09000UL, 0xffe0fc00UL, DecodeOpSqdmlal2_v2dv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee00c00UL, 0xffe0fc00UL, DecodeOpSqadd_v2dv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ea00c00UL, 0xffe0fc00UL, DecodeOpSqadd_sss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e600c00UL, 0xffe0fc00UL, DecodeOpSqadd_hhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee00c00UL, 0xffe0fc00UL, DecodeOpSqadd_ddd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e200c00UL, 0xffe0fc00UL, DecodeOpSqadd_bbb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee07800UL, 0xfffffc00UL, DecodeOpSqabs_v2d2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ea07800UL, 0xfffffc00UL, DecodeOpSqabs_ss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e607800UL, 0xfffffc00UL, DecodeOpSqabs_hh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee07800UL, 0xfffffc00UL, DecodeOpSqabs_dd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e207800UL, 0xfffffc00UL, DecodeOpSqabs_bb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe20c000UL, 0xffe0fc00UL, DecodeOpSmull_v8hv8bv8b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf40a000UL, 0xffc0f400UL, DecodeOpSmull_v4sv4hvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe60c000UL, 0xffe0fc00UL, DecodeOpSmull_v4sv4hv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf80a000UL, 0xffc0f400UL, DecodeOpSmull_v2dv2svsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea0c000UL, 0xffe0fc00UL, DecodeOpSmull_v2dv2sv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e20c000UL, 0xffe0fc00UL, DecodeOpSmull2_v8hv16bv16b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f40a000UL, 0xffc0f400UL, DecodeOpSmull2_v4sv8hvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e60c000UL, 0xffe0fc00UL, DecodeOpSmull2_v4sv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f80a000UL, 0xffc0f400UL, DecodeOpSmull2_v2dv4svsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ea0c000UL, 0xffe0fc00UL, DecodeOpSmull2_v2dv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e042c00UL, 0xffe7fc00UL, DecodeOpSmov_xvs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e022c00UL, 0xffe3fc00UL, DecodeOpSmov_xvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e012c00UL, 0xffe1fc00UL, DecodeOpSmov_xvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe022c00UL, 0xffe3fc00UL, DecodeOpSmov_wvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe012c00UL, 0xffe1fc00UL, DecodeOpSmov_wvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe20a000UL, 0xffe0fc00UL, DecodeOpSmlsl_v8hv8bv8b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf406000UL, 0xffc0f400UL, DecodeOpSmlsl_v4sv4hvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe60a000UL, 0xffe0fc00UL, DecodeOpSmlsl_v4sv4hv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf806000UL, 0xffc0f400UL, DecodeOpSmlsl_v2dv2svsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea0a000UL, 0xffe0fc00UL, DecodeOpSmlsl_v2dv2sv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e20a000UL, 0xffe0fc00UL, DecodeOpSmlsl2_v8hv16bv16b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f406000UL, 0xffc0f400UL, DecodeOpSmlsl2_v4sv8hvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e60a000UL, 0xffe0fc00UL, DecodeOpSmlsl2_v4sv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f806000UL, 0xffc0f400UL, DecodeOpSmlsl2_v2dv4svsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ea0a000UL, 0xffe0fc00UL, DecodeOpSmlsl2_v2dv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe208000UL, 0xffe0fc00UL, DecodeOpSmlal_v8hv8bv8b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf402000UL, 0xffc0f400UL, DecodeOpSmlal_v4sv4hvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe608000UL, 0xffe0fc00UL, DecodeOpSmlal_v4sv4hv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf802000UL, 0xffc0f400UL, DecodeOpSmlal_v2dv2svsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea08000UL, 0xffe0fc00UL, DecodeOpSmlal_v2dv2sv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e208000UL, 0xffe0fc00UL, DecodeOpSmlal2_v8hv16bv16b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f402000UL, 0xffc0f400UL, DecodeOpSmlal2_v4sv8hvhi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e608000UL, 0xffe0fc00UL, DecodeOpSmlal2_v4sv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f802000UL, 0xffc0f400UL, DecodeOpSmlal2_v2dv4svsi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ea08000UL, 0xffe0fc00UL, DecodeOpSmlal2_v2dv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6eb1a800UL, 0xfffffc00UL, DecodeOpUminv_sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e71a800UL, 0xbffffc00UL, DecodeOpUminv_hvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e31a800UL, 0xbffffc00UL, DecodeOpUminv_bvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6eb0a800UL, 0xfffffc00UL, DecodeOpUmaxv_sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e70a800UL, 0xbffffc00UL, DecodeOpUmaxv_hvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e30a800UL, 0xbffffc00UL, DecodeOpUmaxv_bvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4eb1a800UL, 0xfffffc00UL, DecodeOpSminv_sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe71a800UL, 0xbffffc00UL, DecodeOpSminv_hvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe31a800UL, 0xbffffc00UL, DecodeOpSminv_bvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4eb0a800UL, 0xfffffc00UL, DecodeOpSmaxv_sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe70a800UL, 0xbffffc00UL, DecodeOpSmaxv_hvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe30a800UL, 0xbffffc00UL, DecodeOpSmaxv_bvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf088400UL, 0xfff8fc00UL, DecodeOpShrn_v8b8hi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf108400UL, 0xfff0fc00UL, DecodeOpShrn_v4h4si<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf208400UL, 0xffe0fc00UL, DecodeOpShrn_v2s2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f108400UL, 0xfff0fc00UL, DecodeOpShrn2_v8h4si<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f208400UL, 0xffe0fc00UL, DecodeOpShrn2_v4s2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f088400UL, 0xfff8fc00UL, DecodeOpShrn2_v16b8hi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea13800UL, 0xbffffc00UL, DecodeOpShll_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e613800UL, 0xbffffc00UL, DecodeOpShll_v4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e213800UL, 0xbffffc00UL, DecodeOpShll_v8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e006000UL, 0xffe0fc00UL, DecodeOpSha256su1_v4sv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e282800UL, 0xfffffc00UL, DecodeOpSha256su0_v4s4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e005000UL, 0xffe0fc00UL, DecodeOpSha256h2<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e004000UL, 0xffe0fc00UL, DecodeOpSha256h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e281800UL, 0xfffffc00UL, DecodeOpSha1su1_v4s4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e003000UL, 0xffe0fc00UL, DecodeOpSha1su0_v4sv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e001000UL, 0xffe0fc00UL, DecodeOpSha1p<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e002000UL, 0xffe0fc00UL, DecodeOpSha1m<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e280800UL, 0xfffffc00UL, DecodeOpSha1h_ss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5e000000UL, 0xffe0fc00UL, DecodeOpSha1c<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe201000UL, 0xffe0fc00UL, DecodeOpSaddw_v8hv8hv8b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe601000UL, 0xffe0fc00UL, DecodeOpSaddw_v4sv4sv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea01000UL, 0xffe0fc00UL, DecodeOpSaddw_v2dv2dv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e201000UL, 0xffe0fc00UL, DecodeOpSaddw2_v8hv8hv16b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e601000UL, 0xffe0fc00UL, DecodeOpSaddw2_v4sv4sv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ea01000UL, 0xffe0fc00UL, DecodeOpSaddw2_v2dv2dv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4eb03800UL, 0xfffffc00UL, DecodeOpSaddlv_dv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe200000UL, 0xffe0fc00UL, DecodeOpSaddl_v8hv8bv8b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe600000UL, 0xffe0fc00UL, DecodeOpSaddl_v4sv4hv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea00000UL, 0xffe0fc00UL, DecodeOpSaddl_v2dv2sv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e200000UL, 0xffe0fc00UL, DecodeOpSaddl2_v8hv16bv16b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e600000UL, 0xffe0fc00UL, DecodeOpSaddl2_v4sv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ea00000UL, 0xffe0fc00UL, DecodeOpSaddl2_v2dv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe207000UL, 0xffe0fc00UL, DecodeOpSabdl_v8hv8bv8b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe607000UL, 0xffe0fc00UL, DecodeOpSabdl_v4sv4hv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea07000UL, 0xffe0fc00UL, DecodeOpSabdl_v2dv2sv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e207000UL, 0xffe0fc00UL, DecodeOpSabdl2_v8hv16bv16b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e607000UL, 0xffe0fc00UL, DecodeOpSabdl2_v4sv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ea07000UL, 0xffe0fc00UL, DecodeOpSabdl2_v2dv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe205000UL, 0xffe0fc00UL, DecodeOpSabal_v8hv8bv8b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe605000UL, 0xffe0fc00UL, DecodeOpSabal_v4sv4hv4h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea05000UL, 0xffe0fc00UL, DecodeOpSabal_v2dv2sv2s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e205000UL, 0xffe0fc00UL, DecodeOpSabal2_v8hv16bv16b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e605000UL, 0xffe0fc00UL, DecodeOpSabal2_v4sv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ea05000UL, 0xffe0fc00UL, DecodeOpSabal2_v2dv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e206000UL, 0xffe0fc00UL, DecodeOpRsubhn_v8bv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e606000UL, 0xffe0fc00UL, DecodeOpRsubhn_v4hv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea06000UL, 0xffe0fc00UL, DecodeOpRsubhn_v2sv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e606000UL, 0xffe0fc00UL, DecodeOpRsubhn2_v8hv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ea06000UL, 0xffe0fc00UL, DecodeOpRsubhn2_v4sv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e206000UL, 0xffe0fc00UL, DecodeOpRsubhn2_v16bv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf088c00UL, 0xfff8fc00UL, DecodeOpRshrn_v8b8hi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf108c00UL, 0xfff0fc00UL, DecodeOpRshrn_v4h4si<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf208c00UL, 0xffe0fc00UL, DecodeOpRshrn_v2s2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f108c00UL, 0xfff0fc00UL, DecodeOpRshrn2_v8h4si<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f208c00UL, 0xffe0fc00UL, DecodeOpRshrn2_v4s2di<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4f088c00UL, 0xfff8fc00UL, DecodeOpRshrn2_v16b8hi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e204000UL, 0xffe0fc00UL, DecodeOpRaddhn_v8bv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e604000UL, 0xffe0fc00UL, DecodeOpRaddhn_v4hv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea04000UL, 0xffe0fc00UL, DecodeOpRaddhn_v2sv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e604000UL, 0xffe0fc00UL, DecodeOpRaddhn2_v8hv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ea04000UL, 0xffe0fc00UL, DecodeOpRaddhn2_v4sv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e204000UL, 0xffe0fc00UL, DecodeOpRaddhn2_v16bv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe20e000UL, 0xffe0fc00UL, DecodeOpPmull_v8hv8bv8b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e20e000UL, 0xffe0fc00UL, DecodeOpPmull2_v8hv16bv16b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee0e000UL, 0xffe0fc00UL, DecodeOpPmull2<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xee0e000UL, 0xffe0fc00UL, DecodeOpPmull<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e081c00UL, 0xffeffc00UL, DecodeOpIns_vdx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e041c00UL, 0xffe7fc00UL, DecodeOpIns_vsw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e021c00UL, 0xffe3fc00UL, DecodeOpIns_vhw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e011c00UL, 0xffe1fc00UL, DecodeOpIns_vbw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e080400UL, 0xffef8400UL, DecodeOpMov_vdii<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e040400UL, 0xffe78400UL, DecodeOpMov_vsii<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e020400UL, 0xffe38400UL, DecodeOpMov_vhii<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6e010400UL, 0xffe18400UL, DecodeOpMov_vbii<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3ce0e800UL, 0xffe0ec00UL, DecodeOpLdr_qxxs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3ce0c800UL, 0xffe0ec00UL, DecodeOpLdr_qxws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3ce06800UL, 0xffe0ec00UL, DecodeOpLdr_qxxu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3ce04800UL, 0xffe0ec00UL, DecodeOpLdr_qxwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xfc60e800UL, 0xffe0ec00UL, DecodeOpLdr_dxxs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xfc60c800UL, 0xffe0ec00UL, DecodeOpLdr_dxws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xfc606800UL, 0xffe0ec00UL, DecodeOpLdr_dxxu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xfc604800UL, 0xffe0ec00UL, DecodeOpLdr_dxwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xbc60e800UL, 0xffe0ec00UL, DecodeOpLdr_sxxs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xbc60c800UL, 0xffe0ec00UL, DecodeOpLdr_sxws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xbc606800UL, 0xffe0ec00UL, DecodeOpLdr_sxxu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xbc604800UL, 0xffe0ec00UL, DecodeOpLdr_sxwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7c60e800UL, 0xffe0ec00UL, DecodeOpLdr_hxxs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7c60c800UL, 0xffe0ec00UL, DecodeOpLdr_hxws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7c606800UL, 0xffe0ec00UL, DecodeOpLdr_hxxu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7c604800UL, 0xffe0ec00UL, DecodeOpLdr_hxwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3c60e800UL, 0xffe0ec00UL, DecodeOpLdr_bxxs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3c60c800UL, 0xffe0ec00UL, DecodeOpLdr_bxws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3c606800UL, 0xffe0ec00UL, DecodeOpLdr_bxxu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3c604800UL, 0xffe0ec00UL, DecodeOpLdr_bxwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9c000000UL, 0xff000000UL, DecodeOpLdr_qlit<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5c000000UL, 0xff000000UL, DecodeOpLdr_dlit<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1c000000UL, 0xff000000UL, DecodeOpLdr_slit<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3dc00000UL, 0xffc00000UL, DecodeOpLdr_quo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3cc00000UL, 0xffe00000UL, DecodeOpLdr_qxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xfd400000UL, 0xffc00000UL, DecodeOpLdr_duo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xfc400000UL, 0xffe00000UL, DecodeOpLdr_dxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xbd400000UL, 0xffc00000UL, DecodeOpLdr_suo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xbc400000UL, 0xffe00000UL, DecodeOpLdr_sxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7d400000UL, 0xffc00000UL, DecodeOpLdr_huo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7c400000UL, 0xffe00000UL, DecodeOpLdr_hxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3d400000UL, 0xffc00000UL, DecodeOpLdr_buo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3c400000UL, 0xffe00000UL, DecodeOpLdr_bxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xac400000UL, 0xfe400000UL, DecodeOpLdp_qo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6c400000UL, 0xfe400000UL, DecodeOpLdp_do<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2c400000UL, 0xfe400000UL, DecodeOpLdp_so<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee08c00UL, 0xffe0fc00UL, DecodeOpCmtst_v2dv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee08c00UL, 0xffe0fc00UL, DecodeOpCmtst_ddd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee0a800UL, 0xfffffc00UL, DecodeOpCmlt_v2d_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea0a800UL, 0xbffffc00UL, DecodeOpCmlt_vs_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe60a800UL, 0xbffffc00UL, DecodeOpCmlt_vh_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe20a800UL, 0xbffffc00UL, DecodeOpCmlt_vb_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee0a800UL, 0xfffffc00UL, DecodeOpCmlt_d_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee09800UL, 0xfffffc00UL, DecodeOpCmle_v2d_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea09800UL, 0xbffffc00UL, DecodeOpCmle_vs_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e609800UL, 0xbffffc00UL, DecodeOpCmle_vh_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e209800UL, 0xbffffc00UL, DecodeOpCmle_vb_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ee09800UL, 0xfffffc00UL, DecodeOpCmle_d_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee03c00UL, 0xffe0fc00UL, DecodeOpCmhs_v2d_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea03c00UL, 0xbfe0fc00UL, DecodeOpCmhs_vs_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e603c00UL, 0xbfe0fc00UL, DecodeOpCmhs_vh_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e203c00UL, 0xbfe0fc00UL, DecodeOpCmhs_vb_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ee03c00UL, 0xffe0fc00UL, DecodeOpCmhs_d_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee03400UL, 0xffe0fc00UL, DecodeOpCmhi_v2d_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea03400UL, 0xbfe0fc00UL, DecodeOpCmhi_vs_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e603400UL, 0xbfe0fc00UL, DecodeOpCmhi_vh_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e203400UL, 0xbfe0fc00UL, DecodeOpCmhi_vb_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ee03400UL, 0xffe0fc00UL, DecodeOpCmhi_d_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee08800UL, 0xfffffc00UL, DecodeOpCmgt_v2d_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea08800UL, 0xbffffc00UL, DecodeOpCmgt_vs_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe608800UL, 0xbffffc00UL, DecodeOpCmgt_vh_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe208800UL, 0xbffffc00UL, DecodeOpCmgt_vb_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee08800UL, 0xfffffc00UL, DecodeOpCmgt_d_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee03400UL, 0xffe0fc00UL, DecodeOpCmgt_v2d_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea03400UL, 0xbfe0fc00UL, DecodeOpCmgt_vs_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe603400UL, 0xbfe0fc00UL, DecodeOpCmgt_vh_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe203400UL, 0xbfe0fc00UL, DecodeOpCmgt_vb_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee03400UL, 0xffe0fc00UL, DecodeOpCmgt_d_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee08800UL, 0xfffffc00UL, DecodeOpCmge_v2d_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea08800UL, 0xbffffc00UL, DecodeOpCmge_vs_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e608800UL, 0xbffffc00UL, DecodeOpCmge_vh_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e208800UL, 0xbffffc00UL, DecodeOpCmge_vb_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ee08800UL, 0xfffffc00UL, DecodeOpCmge_d_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee03c00UL, 0xffe0fc00UL, DecodeOpCmge_v2d_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea03c00UL, 0xbfe0fc00UL, DecodeOpCmge_vs_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe603c00UL, 0xbfe0fc00UL, DecodeOpCmge_vh_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe203c00UL, 0xbfe0fc00UL, DecodeOpCmge_vb_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee03c00UL, 0xffe0fc00UL, DecodeOpCmge_d_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee09800UL, 0xfffffc00UL, DecodeOpCmeq_v2d_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea09800UL, 0xbffffc00UL, DecodeOpCmeq_vs_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe609800UL, 0xbffffc00UL, DecodeOpCmeq_vh_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe209800UL, 0xbffffc00UL, DecodeOpCmeq_vb_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee09800UL, 0xfffffc00UL, DecodeOpCmeq_d_zero<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ee08c00UL, 0xffe0fc00UL, DecodeOpCmeq_v2d_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ea08c00UL, 0xbfe0fc00UL, DecodeOpCmeq_vs_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e608c00UL, 0xbfe0fc00UL, DecodeOpCmeq_vh_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2e208c00UL, 0xbfe0fc00UL, DecodeOpCmeq_vb_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7ee08c00UL, 0xffe0fc00UL, DecodeOpCmeq_d_reg<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e286800UL, 0xfffffc00UL, DecodeOpAesmc_v16b16b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e287800UL, 0xfffffc00UL, DecodeOpAesimc_v16b16b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e284800UL, 0xfffffc00UL, DecodeOpAese_v16b16b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e285800UL, 0xfffffc00UL, DecodeOpAesd_v16b16b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4eb1b800UL, 0xfffffc00UL, DecodeOpAddv_sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe71b800UL, 0xbffffc00UL, DecodeOpAddv_hvh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe31b800UL, 0xbffffc00UL, DecodeOpAddv_bvb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee0bc00UL, 0xffe0fc00UL, DecodeOpAddp_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea0bc00UL, 0xbfe0fc00UL, DecodeOpAddp_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe60bc00UL, 0xbfe0fc00UL, DecodeOpAddp_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe20bc00UL, 0xbfe0fc00UL, DecodeOpAddp_vb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ef1b800UL, 0xfffffc00UL, DecodeOpAddp_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe204000UL, 0xffe0fc00UL, DecodeOpAddhn_v8bv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe604000UL, 0xffe0fc00UL, DecodeOpAddhn_v4hv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea04000UL, 0xffe0fc00UL, DecodeOpAddhn_v2sv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e604000UL, 0xffe0fc00UL, DecodeOpAddhn2_v8hv4sv4s<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ea04000UL, 0xffe0fc00UL, DecodeOpAddhn2_v4sv2dv2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4e204000UL, 0xffe0fc00UL, DecodeOpAddhn2_v16bv8hv8h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee08400UL, 0xffe0fc00UL, DecodeOpAdd_v2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea08400UL, 0xbfe0fc00UL, DecodeOpAdd_vs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe608400UL, 0xbfe0fc00UL, DecodeOpAdd_vh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe208400UL, 0xbfe0fc00UL, DecodeOpAdd_vb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee08400UL, 0xffe0fc00UL, DecodeOpAdd_d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ee0b800UL, 0xfffffc00UL, DecodeOpAbs_v2d2d<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea0b800UL, 0xbffffc00UL, DecodeOpAbs_vss<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe60b800UL, 0xbffffc00UL, DecodeOpAbs_vhh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xe20b800UL, 0xbffffc00UL, DecodeOpAbs_vbb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ee0b800UL, 0xfffffc00UL, DecodeOpAbs_dd<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd503241fUL, 0xffffff3fUL, DecodeOpBti<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78207000UL, 0xff20fc00UL, DecodeOpLdstuminh_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38207000UL, 0xff20fc00UL, DecodeOpLdstuminb_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf8207000UL, 0xff20fc00UL, DecodeOpLdstumin_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb8207000UL, 0xff20fc00UL, DecodeOpLdstumin_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78206000UL, 0xff20fc00UL, DecodeOpLdstumaxh_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38206000UL, 0xff20fc00UL, DecodeOpLdstumaxb_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf8206000UL, 0xff20fc00UL, DecodeOpLdstumax_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb8206000UL, 0xff20fc00UL, DecodeOpLdstumax_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78205000UL, 0xff20fc00UL, DecodeOpLdstsminh_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38205000UL, 0xff20fc00UL, DecodeOpLdstsminb_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf8205000UL, 0xff20fc00UL, DecodeOpLdstsmin_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb8205000UL, 0xff20fc00UL, DecodeOpLdstsmin_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78204000UL, 0xff20fc00UL, DecodeOpLdstsmaxh_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38204000UL, 0xff20fc00UL, DecodeOpLdstsmaxb_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf8204000UL, 0xff20fc00UL, DecodeOpLdstsmax_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb8204000UL, 0xff20fc00UL, DecodeOpLdstsmax_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78203000UL, 0xff20fc00UL, DecodeOpLdstseth_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38203000UL, 0xff20fc00UL, DecodeOpLdstsetb_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf8203000UL, 0xff20fc00UL, DecodeOpLdstset_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb8203000UL, 0xff20fc00UL, DecodeOpLdstset_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78202000UL, 0xff20fc00UL, DecodeOpLdsteorh_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38202000UL, 0xff20fc00UL, DecodeOpLdsteorb_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf8202000UL, 0xff20fc00UL, DecodeOpLdsteor_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb8202000UL, 0xff20fc00UL, DecodeOpLdsteor_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78201000UL, 0xff20fc00UL, DecodeOpLdstclrh_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38201000UL, 0xff20fc00UL, DecodeOpLdstclrb_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf8201000UL, 0xff20fc00UL, DecodeOpLdstclr_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb8201000UL, 0xff20fc00UL, DecodeOpLdstclr_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78200000UL, 0xff20fc00UL, DecodeOpLdstaddh_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38200000UL, 0xff20fc00UL, DecodeOpLdstaddb_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf8200000UL, 0xff20fc00UL, DecodeOpLdstadd_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb8200000UL, 0xff20fc00UL, DecodeOpLdstadd_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78208000UL, 0xff20fc00UL, DecodeOpSwph_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38208000UL, 0xff20fc00UL, DecodeOpSwpb_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf8208000UL, 0xff20fc00UL, DecodeOpSwp_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb8208000UL, 0xff20fc00UL, DecodeOpSwp_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x48207c00UL, 0xffa17c01UL, DecodeOpCasp_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8207c00UL, 0xffa17c01UL, DecodeOpCasp_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x48a07c00UL, 0xffa07c00UL, DecodeOpCash_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8a07c00UL, 0xffa07c00UL, DecodeOpCasb_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc8a07c00UL, 0xffa07c00UL, DecodeOpCas_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x88a07c00UL, 0xffa07c00UL, DecodeOpCas_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ac05c00UL, 0xffe0fc00UL, DecodeOpCrc32cx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ac05800UL, 0xffe0fc00UL, DecodeOpCrc32cw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ac05400UL, 0xffe0fc00UL, DecodeOpCrc32ch<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ac05000UL, 0xffe0fc00UL, DecodeOpCrc32cb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ac04c00UL, 0xffe0fc00UL, DecodeOpCrc32x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ac04800UL, 0xffe0fc00UL, DecodeOpCrc32w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ac04400UL, 0xffe0fc00UL, DecodeOpCrc32h<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ac04000UL, 0xffe0fc00UL, DecodeOpCrc32b<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9bc00000UL, 0xffe08000UL, DecodeOpUmulh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ba08000UL, 0xffe08000UL, DecodeOpUmsubl_xw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ba00000UL, 0xffe08000UL, DecodeOpUmaddl_xw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ac00800UL, 0xffe0fc00UL, DecodeOpUdiv_xxx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ac00800UL, 0xffe0fc00UL, DecodeOpUdiv_www<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd3400000UL, 0xffc00000UL, DecodeOpUbfm_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x53000000UL, 0xffe08000UL, DecodeOpUbfm_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x36000000UL, 0x7e000000UL, DecodeOpTb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd4000001UL, 0xffe0001fUL, DecodeOpSvc<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xeb800000UL, 0xffe00000UL, DecodeOpSubs_xasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xeb400000UL, 0xffe00000UL, DecodeOpSubs_xlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xeb000000UL, 0xffe00000UL, DecodeOpSubs_xlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6b800000UL, 0xffe08000UL, DecodeOpSubs_wasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6b400000UL, 0xffe08000UL, DecodeOpSubs_wlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6b000000UL, 0xffe08000UL, DecodeOpSubs_wlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf1000000UL, 0xff800000UL, DecodeOpSubs_xi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x71000000UL, 0xff800000UL, DecodeOpSubs_wi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xeb20e000UL, 0xffe0e000UL, DecodeOpSubs_xsxtx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xeb20c000UL, 0xffe0e000UL, DecodeOpSubs_xsxtw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xeb20a000UL, 0xffe0e000UL, DecodeOpSubs_xsxth<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xeb208000UL, 0xffe0e000UL, DecodeOpSubs_xsxtb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xeb206000UL, 0xffe0e000UL, DecodeOpSubs_xuxtx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xeb204000UL, 0xffe0e000UL, DecodeOpSubs_xuxtw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xeb202000UL, 0xffe0e000UL, DecodeOpSubs_xuxth<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xeb200000UL, 0xffe0e000UL, DecodeOpSubs_xuxtb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6b20e000UL, 0xffe0e000UL, DecodeOpSubs_wsxtx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6b20c000UL, 0xffe0e000UL, DecodeOpSubs_wsxtw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6b20a000UL, 0xffe0e000UL, DecodeOpSubs_wsxth<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6b208000UL, 0xffe0e000UL, DecodeOpSubs_wsxtb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6b206000UL, 0xffe0e000UL, DecodeOpSubs_wuxtx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6b204000UL, 0xffe0e000UL, DecodeOpSubs_wuxtw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6b202000UL, 0xffe0e000UL, DecodeOpSubs_wuxth<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6b200000UL, 0xffe0e000UL, DecodeOpSubs_wuxtb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xcb800000UL, 0xffe00000UL, DecodeOpSub_xasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xcb400000UL, 0xffe00000UL, DecodeOpSub_xlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xcb000000UL, 0xffe00000UL, DecodeOpSub_xlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4b800000UL, 0xffe08000UL, DecodeOpSub_wasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4b400000UL, 0xffe08000UL, DecodeOpSub_wlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4b000000UL, 0xffe08000UL, DecodeOpSub_wlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd1000000UL, 0xff800000UL, DecodeOpSub_xi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x51000000UL, 0xff800000UL, DecodeOpSub_wi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xcb206000UL, 0xffe0e000UL, DecodeOpSub_xuxtx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xcb204000UL, 0xffe0e000UL, DecodeOpSub_xuxtw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xcb202000UL, 0xffe0e000UL, DecodeOpSub_xuxth<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xcb200000UL, 0xffe0e000UL, DecodeOpSub_xuxtb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xcb20e000UL, 0xffe0e000UL, DecodeOpSub_xsxtx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xcb20c000UL, 0xffe0e000UL, DecodeOpSub_xsxtw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xcb20a000UL, 0xffe0e000UL, DecodeOpSub_xsxth<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xcb208000UL, 0xffe0e000UL, DecodeOpSub_xsxtb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4b206000UL, 0xffe0e000UL, DecodeOpSub_wuxtx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4b204000UL, 0xffe0e000UL, DecodeOpSub_wuxtw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4b202000UL, 0xffe0e000UL, DecodeOpSub_wuxth<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4b200000UL, 0xffe0e000UL, DecodeOpSub_wuxtb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4b20e000UL, 0xffe0e000UL, DecodeOpSub_wsxtx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4b20c000UL, 0xffe0e000UL, DecodeOpSub_wsxtw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4b20a000UL, 0xffe0e000UL, DecodeOpSub_wsxth<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4b208000UL, 0xffe0e000UL, DecodeOpSub_wsxtb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x48000000UL, 0xffe08000UL, DecodeOpStxrh_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8000000UL, 0xffe08000UL, DecodeOpStxrb_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc8000000UL, 0xffe08000UL, DecodeOpStxr_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x88000000UL, 0xffe08000UL, DecodeOpStxr_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc8200000UL, 0xffe08000UL, DecodeOpStxp_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x88200000UL, 0xffe08000UL, DecodeOpStxp_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78000800UL, 0xffe00c00UL, DecodeOpSttrh_wbo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38000800UL, 0xffe00c00UL, DecodeOpSttrb_wbo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf8000800UL, 0xffe00c00UL, DecodeOpSttr_xbo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb8000800UL, 0xffe00c00UL, DecodeOpSttr_wbo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7820e800UL, 0xffe0ec00UL, DecodeOpStrh_wxxs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7820c800UL, 0xffe0ec00UL, DecodeOpStrh_wxws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78206800UL, 0xffe0ec00UL, DecodeOpStrh_wxxu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78204800UL, 0xffe0ec00UL, DecodeOpStrh_wxwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x79000000UL, 0xffc00000UL, DecodeOpStrh_wuo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78000000UL, 0xffe00000UL, DecodeOpStrh_wxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3820e800UL, 0xffe0ec00UL, DecodeOpStrb_wxxs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3820c800UL, 0xffe0ec00UL, DecodeOpStrb_wxws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38206800UL, 0xffe0ec00UL, DecodeOpStrb_wxxu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38204800UL, 0xffe0ec00UL, DecodeOpStrb_wxwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x39000000UL, 0xffc00000UL, DecodeOpStrb_wuo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38000000UL, 0xffe00000UL, DecodeOpStrb_wxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf820e800UL, 0xffe0ec00UL, DecodeOpStr_xxxs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf820c800UL, 0xffe0ec00UL, DecodeOpStr_xxws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf8206800UL, 0xffe0ec00UL, DecodeOpStr_xxxu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf8204800UL, 0xffe0ec00UL, DecodeOpStr_xxwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb820e800UL, 0xffe0ec00UL, DecodeOpStr_wxxs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb820c800UL, 0xffe0ec00UL, DecodeOpStr_wxws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb8206800UL, 0xffe0ec00UL, DecodeOpStr_wxxu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb8204800UL, 0xffe0ec00UL, DecodeOpStr_wxwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf9000000UL, 0xffc00000UL, DecodeOpStr_xuo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf8000000UL, 0xffe00000UL, DecodeOpStr_xxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb9000000UL, 0xffc00000UL, DecodeOpStr_wuo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb8000000UL, 0xffe00000UL, DecodeOpStr_wxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xa8000000UL, 0xfe400000UL, DecodeOpStp_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x28000000UL, 0xfe400000UL, DecodeOpStp_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x48008000UL, 0xffe08000UL, DecodeOpStlxrh_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8008000UL, 0xffe08000UL, DecodeOpStlxrb_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc8008000UL, 0xffe08000UL, DecodeOpStlxr_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x88008000UL, 0xffe08000UL, DecodeOpStlxr_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc8208000UL, 0xffe08000UL, DecodeOpStlxp_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x88208000UL, 0xffe08000UL, DecodeOpStlxp_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x48808000UL, 0xffe08000UL, DecodeOpStlrh_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8808000UL, 0xffe08000UL, DecodeOpStlrb_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc8808000UL, 0xffe08000UL, DecodeOpStlr_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x88808000UL, 0xffe08000UL, DecodeOpStlr_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9b400000UL, 0xffe08000UL, DecodeOpSmulh<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9b208000UL, 0xffe08000UL, DecodeOpSmsubl_xw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd4000003UL, 0xffe0001fUL, DecodeOpSmc<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9b200000UL, 0xffe08000UL, DecodeOpSmaddl_xw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ac00c00UL, 0xffe0fc00UL, DecodeOpSdiv_xxx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ac00c00UL, 0xffe0fc00UL, DecodeOpSdiv_www<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x93400000UL, 0xffc00000UL, DecodeOpSbfm_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x13000000UL, 0xffe08000UL, DecodeOpSbfm_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xfa000000UL, 0xffe0fc00UL, DecodeOpSbcs_xxx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7a000000UL, 0xffe0fc00UL, DecodeOpSbcs_www<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xda000000UL, 0xffe0fc00UL, DecodeOpSbc_xxx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5a000000UL, 0xffe0fc00UL, DecodeOpSbc_www<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ac02c00UL, 0xffe0fc00UL, DecodeOpRor_xxx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ac02c00UL, 0xffe0fc00UL, DecodeOpRor_www<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xdac00800UL, 0xfffffc00UL, DecodeOpRev32_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xdac00400UL, 0xfffffc00UL, DecodeOpRev16_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ac00400UL, 0xfffffc00UL, DecodeOpRev16_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xdac00c00UL, 0xfffffc00UL, DecodeOpRev_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ac00800UL, 0xfffffc00UL, DecodeOpRev_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd65f0000UL, 0xfffffc1fUL, DecodeOpRet<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xdac00000UL, 0xfffffc00UL, DecodeOpRbit_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ac00000UL, 0xfffffc00UL, DecodeOpRbit_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf8800000UL, 0xffe00c00UL, DecodeOpPrfum<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf8a06800UL, 0xffe06c00UL, DecodeOpPrfm_xx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf8a04800UL, 0xffe0ec00UL, DecodeOpPrfm_xwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf8a0c800UL, 0xffe0ec00UL, DecodeOpPrfm_xws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf9800000UL, 0xffc00000UL, DecodeOpPrfm_xi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd8000000UL, 0xff000000UL, DecodeOpPrfm_lit<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xaac00000UL, 0xffe00000UL, DecodeOpOrr_xror<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ac00000UL, 0xffe08000UL, DecodeOpOrr_wror<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xaa800000UL, 0xffe00000UL, DecodeOpOrr_xasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2a800000UL, 0xffe08000UL, DecodeOpOrr_wasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xaa400000UL, 0xffe00000UL, DecodeOpOrr_xlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2a400000UL, 0xffe08000UL, DecodeOpOrr_wlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xaa000000UL, 0xffe00000UL, DecodeOpOrr_xlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2a000000UL, 0xffe08000UL, DecodeOpOrr_wlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb2000000UL, 0xff800000UL, DecodeOpOrr_xi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x32000000UL, 0xffc00000UL, DecodeOpOrr_wi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xaae00000UL, 0xffe00000UL, DecodeOpOrn_xror<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xaaa00000UL, 0xffe00000UL, DecodeOpOrn_xasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xaa600000UL, 0xffe00000UL, DecodeOpOrn_xlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xaa200000UL, 0xffe00000UL, DecodeOpOrn_xlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2ae00000UL, 0xffe08000UL, DecodeOpOrn_wror<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2aa00000UL, 0xffe08000UL, DecodeOpOrn_wasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2a600000UL, 0xffe08000UL, DecodeOpOrn_wlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2a200000UL, 0xffe08000UL, DecodeOpOrn_wlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd503201fUL, 0xffffffffUL, DecodeOpNop<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9b008000UL, 0xffe08000UL, DecodeOpMsub_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1b008000UL, 0xffe08000UL, DecodeOpMsub_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd5200000UL, 0xffe00000UL, DecodeOpMrs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf2800000UL, 0xff800000UL, DecodeOpMovk_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x72800000UL, 0xffc00000UL, DecodeOpMovk_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x92800000UL, 0xbf800000UL, DecodeOpMov_xi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x12800000UL, 0xbfc00000UL, DecodeOpMov_wi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9b000000UL, 0xffe08000UL, DecodeOpMadd_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1b000000UL, 0xffe08000UL, DecodeOpMadd_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ac02400UL, 0xffe0fc00UL, DecodeOpLsr_xxx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ac02400UL, 0xffe0fc00UL, DecodeOpLsr_www<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ac02000UL, 0xffe0fc00UL, DecodeOpLsl_xxx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ac02000UL, 0xffe0fc00UL, DecodeOpLsl_www<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x48400000UL, 0xffe08000UL, DecodeOpLdxrh_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8400000UL, 0xffe08000UL, DecodeOpLdxrb_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc8400000UL, 0xffe08000UL, DecodeOpLdxr_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x88400000UL, 0xffe08000UL, DecodeOpLdxr_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc8600000UL, 0xffe08000UL, DecodeOpLdxp_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x88600000UL, 0xffe08000UL, DecodeOpLdxp_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb8800800UL, 0xffe00c00UL, DecodeOpLdtrsw_xbo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78800800UL, 0xffe00c00UL, DecodeOpLdtrsh_xbo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78c00800UL, 0xffe00c00UL, DecodeOpLdtrsh_wbo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38800800UL, 0xffe00c00UL, DecodeOpLdtrsb_xbo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38c00800UL, 0xffe00c00UL, DecodeOpLdtrsb_wbo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78400800UL, 0xffe00c00UL, DecodeOpLdtrh_wbo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38400800UL, 0xffe00c00UL, DecodeOpLdtrb_wbo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf8400800UL, 0xffe00c00UL, DecodeOpLdtr_xbo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb8400800UL, 0xffe00c00UL, DecodeOpLdtr_wbo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb8a0e800UL, 0xffe0ec00UL, DecodeOpLdrsw_xxxs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb8a0c800UL, 0xffe0ec00UL, DecodeOpLdrsw_xxws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb8a06800UL, 0xffe0ec00UL, DecodeOpLdrsw_xxxu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb8a04800UL, 0xffe0ec00UL, DecodeOpLdrsw_xxwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb9800000UL, 0xffc00000UL, DecodeOpLdrsw_xuo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb8800000UL, 0xffe00000UL, DecodeOpLdrsw_xxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x98000000UL, 0xff000000UL, DecodeOpLdrsw_xlit<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78a0e800UL, 0xffe0ec00UL, DecodeOpLdrsh_xxxs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78a0c800UL, 0xffe0ec00UL, DecodeOpLdrsh_xxws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78a06800UL, 0xffe0ec00UL, DecodeOpLdrsh_xxxu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78a04800UL, 0xffe0ec00UL, DecodeOpLdrsh_xxwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78e0e800UL, 0xffe0ec00UL, DecodeOpLdrsh_wxxs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78e0c800UL, 0xffe0ec00UL, DecodeOpLdrsh_wxws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78e06800UL, 0xffe0ec00UL, DecodeOpLdrsh_wxxu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78e04800UL, 0xffe0ec00UL, DecodeOpLdrsh_wxwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x79800000UL, 0xffc00000UL, DecodeOpLdrsh_xuo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78800000UL, 0xffe00000UL, DecodeOpLdrsh_xxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x79c00000UL, 0xffc00000UL, DecodeOpLdrsh_wuo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78c00000UL, 0xffe00000UL, DecodeOpLdrsh_wxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38a0e800UL, 0xffe0ec00UL, DecodeOpLdrsb_xxxs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38a0c800UL, 0xffe0ec00UL, DecodeOpLdrsb_xxws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38a06800UL, 0xffe0ec00UL, DecodeOpLdrsb_xxxu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38a04800UL, 0xffe0ec00UL, DecodeOpLdrsb_xxwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38e0e800UL, 0xffe0ec00UL, DecodeOpLdrsb_wxxs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38e0c800UL, 0xffe0ec00UL, DecodeOpLdrsb_wxws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38e06800UL, 0xffe0ec00UL, DecodeOpLdrsb_wxxu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38e04800UL, 0xffe0ec00UL, DecodeOpLdrsb_wxwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x39800000UL, 0xffc00000UL, DecodeOpLdrsb_xuo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38800000UL, 0xffe00000UL, DecodeOpLdrsb_xxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x39c00000UL, 0xffc00000UL, DecodeOpLdrsb_wuo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38c00000UL, 0xffe00000UL, DecodeOpLdrsb_wxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7860e800UL, 0xffe0ec00UL, DecodeOpLdrh_wxxs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7860c800UL, 0xffe0ec00UL, DecodeOpLdrh_wxws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78606800UL, 0xffe0ec00UL, DecodeOpLdrh_wxxu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78604800UL, 0xffe0ec00UL, DecodeOpLdrh_wxwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x79400000UL, 0xffc00000UL, DecodeOpLdrh_wuo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x78400000UL, 0xffe00000UL, DecodeOpLdrh_wxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3860e800UL, 0xffe0ec00UL, DecodeOpLdrb_wxxs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3860c800UL, 0xffe0ec00UL, DecodeOpLdrb_wxws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38606800UL, 0xffe0ec00UL, DecodeOpLdrb_wxxu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38604800UL, 0xffe0ec00UL, DecodeOpLdrb_wxwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x39400000UL, 0xffc00000UL, DecodeOpLdrb_wuo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x38400000UL, 0xffe00000UL, DecodeOpLdrb_wxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf860e800UL, 0xffe0ec00UL, DecodeOpLdr_xxxs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf860c800UL, 0xffe0ec00UL, DecodeOpLdr_xxws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf8606800UL, 0xffe0ec00UL, DecodeOpLdr_xxxu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf8604800UL, 0xffe0ec00UL, DecodeOpLdr_xxwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb860e800UL, 0xffe0ec00UL, DecodeOpLdr_wxxs<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb860c800UL, 0xffe0ec00UL, DecodeOpLdr_wxws<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb8606800UL, 0xffe0ec00UL, DecodeOpLdr_wxxu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb8604800UL, 0xffe0ec00UL, DecodeOpLdr_wxwu<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x58000000UL, 0xff000000UL, DecodeOpLdr_xlit<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x18000000UL, 0xff000000UL, DecodeOpLdr_wlit<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf9400000UL, 0xffc00000UL, DecodeOpLdr_xuo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf8400000UL, 0xffe00000UL, DecodeOpLdr_xxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb9400000UL, 0xffc00000UL, DecodeOpLdr_wuo<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb8400000UL, 0xffe00000UL, DecodeOpLdr_wxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x68400000UL, 0xfe400000UL, DecodeOpLdpsw_xxi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xa8400000UL, 0xfe400000UL, DecodeOpLdp_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x28400000UL, 0xfe400000UL, DecodeOpLdp_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x48408000UL, 0xffe08000UL, DecodeOpLdaxrh_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8408000UL, 0xffe08000UL, DecodeOpLdaxrb_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc8408000UL, 0xffe08000UL, DecodeOpLdaxr_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x88408000UL, 0xffe08000UL, DecodeOpLdaxr_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc8608000UL, 0xffe08000UL, DecodeOpLdaxp_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x88608000UL, 0xffe08000UL, DecodeOpLdaxp_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x48dffc00UL, 0xfffffc00UL, DecodeOpLdarh_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8dffc00UL, 0xfffffc00UL, DecodeOpLdarb_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc8dffc00UL, 0xfffffc00UL, DecodeOpLdar_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x88dffc00UL, 0xfffffc00UL, DecodeOpLdar_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd4000002UL, 0xffe0001fUL, DecodeOpHvc<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd4400000UL, 0xffe0001fUL, DecodeOpHlt<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x93c00000UL, 0xffe00000UL, DecodeOpExtr_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x13800000UL, 0xffe08000UL, DecodeOpExtr_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd69f03e0UL, 0xffffffffUL, DecodeOpEret<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xcac00000UL, 0xffe00000UL, DecodeOpEor_xror<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xca800000UL, 0xffe00000UL, DecodeOpEor_xasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xca400000UL, 0xffe00000UL, DecodeOpEor_xlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xca000000UL, 0xffe00000UL, DecodeOpEor_xlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ac00000UL, 0xffe08000UL, DecodeOpEor_wror<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4a800000UL, 0xffe08000UL, DecodeOpEor_wasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4a400000UL, 0xffe08000UL, DecodeOpEor_wlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4a000000UL, 0xffe08000UL, DecodeOpEor_wlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd2000000UL, 0xff800000UL, DecodeOpEor_xi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x52000000UL, 0xffc00000UL, DecodeOpEor_wi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xcae00000UL, 0xffe00000UL, DecodeOpEon_xror<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xcaa00000UL, 0xffe00000UL, DecodeOpEon_xasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xca600000UL, 0xffe00000UL, DecodeOpEon_xlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xca200000UL, 0xffe00000UL, DecodeOpEon_xlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4ae00000UL, 0xffe08000UL, DecodeOpEon_wror<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4aa00000UL, 0xffe08000UL, DecodeOpEon_wasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4a600000UL, 0xffe08000UL, DecodeOpEon_wlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x4a200000UL, 0xffe08000UL, DecodeOpEon_wlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd6bf03e0UL, 0xffffffffUL, DecodeOpDrps<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd4a00003UL, 0xffe0001fUL, DecodeOpDcps3<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd4a00002UL, 0xffe0001fUL, DecodeOpDcps2<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd4a00001UL, 0xffe0001fUL, DecodeOpDcps1<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xda800400UL, 0xffe00c00UL, DecodeOpCsneg_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5a800400UL, 0xffe00c00UL, DecodeOpCsneg_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xda800000UL, 0xffe00c00UL, DecodeOpCsinv_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5a800000UL, 0xffe00c00UL, DecodeOpCsinv_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9a800400UL, 0xffe00c00UL, DecodeOpCsinc_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1a800400UL, 0xffe00c00UL, DecodeOpCsinc_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9a800000UL, 0xffe00c00UL, DecodeOpCsel_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1a800000UL, 0xffe00c00UL, DecodeOpCsel_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xdac01000UL, 0xfffffc00UL, DecodeOpClz_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ac01000UL, 0xfffffc00UL, DecodeOpClz_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xdac01400UL, 0xfffffc00UL, DecodeOpCls_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x5ac01400UL, 0xfffffc00UL, DecodeOpCls_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd503305fUL, 0xfffff0ffUL, DecodeOpClrex<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xfa400000UL, 0xffe00c10UL, DecodeOpCcmp_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7a400000UL, 0xffe00c10UL, DecodeOpCcmp_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xfa400800UL, 0xffe00c10UL, DecodeOpCcmp_xi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x7a400800UL, 0xffe00c10UL, DecodeOpCcmp_wi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xba400000UL, 0xffe00c10UL, DecodeOpCcmn_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3a400000UL, 0xffe00c10UL, DecodeOpCcmn_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xba400800UL, 0xffe00c10UL, DecodeOpCcmn_xi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3a400800UL, 0xffe00c10UL, DecodeOpCcmn_wi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb4000000UL, 0xff000000UL, DecodeOpCbz_xlit<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x34000000UL, 0xff000000UL, DecodeOpCbz_wlit<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb5000000UL, 0xff000000UL, DecodeOpCbnz_xlit<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x35000000UL, 0xff000000UL, DecodeOpCbnz_wlit<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd4200000UL, 0xffe0001fUL, DecodeOpBrk<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd61f0000UL, 0xfffffc1fUL, DecodeOpBr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd63f0000UL, 0xfffffc1fUL, DecodeOpBlr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x94000000UL, 0xfc000000UL, DecodeOpBl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xeae00000UL, 0xffe00000UL, DecodeOpBics_xror<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xeaa00000UL, 0xffe00000UL, DecodeOpBics_xasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea600000UL, 0xffe00000UL, DecodeOpBics_xlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea200000UL, 0xffe00000UL, DecodeOpBics_xlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ae00000UL, 0xffe08000UL, DecodeOpBics_wror<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6aa00000UL, 0xffe08000UL, DecodeOpBics_wasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6a600000UL, 0xffe08000UL, DecodeOpBics_wlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6a200000UL, 0xffe08000UL, DecodeOpBics_wlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8ae00000UL, 0xffe00000UL, DecodeOpBic_xror<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8aa00000UL, 0xffe00000UL, DecodeOpBic_xasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8a600000UL, 0xffe00000UL, DecodeOpBic_xlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8a200000UL, 0xffe00000UL, DecodeOpBic_xlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xae00000UL, 0xffe08000UL, DecodeOpBic_wror<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xaa00000UL, 0xffe08000UL, DecodeOpBic_wasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xa600000UL, 0xffe08000UL, DecodeOpBic_wlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xa200000UL, 0xffe08000UL, DecodeOpBic_wlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb3400000UL, 0xffc00000UL, DecodeOpBfm_x<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x33000000UL, 0xffe08000UL, DecodeOpBfm_w<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x54000000UL, 0xff000010UL, DecodeOpB_cond<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x14000000UL, 0xfc000000UL, DecodeOpB<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9ac02800UL, 0xffe0fc00UL, DecodeOpAsr_xxx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1ac02800UL, 0xffe0fc00UL, DecodeOpAsr_www<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xeac00000UL, 0xffe00000UL, DecodeOpAnds_xror<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea800000UL, 0xffe00000UL, DecodeOpAnds_xasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea400000UL, 0xffe00000UL, DecodeOpAnds_xlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xea000000UL, 0xffe00000UL, DecodeOpAnds_xlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6ac00000UL, 0xffe08000UL, DecodeOpAnds_wror<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6a800000UL, 0xffe08000UL, DecodeOpAnds_wasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6a400000UL, 0xffe08000UL, DecodeOpAnds_wlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x6a000000UL, 0xffe08000UL, DecodeOpAnds_wlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xf2000000UL, 0xff800000UL, DecodeOpAnds_xi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x72000000UL, 0xffc00000UL, DecodeOpAnds_wi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8ac00000UL, 0xffe00000UL, DecodeOpAnd_xror<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8a800000UL, 0xffe00000UL, DecodeOpAnd_xasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8a400000UL, 0xffe00000UL, DecodeOpAnd_xlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8a000000UL, 0xffe00000UL, DecodeOpAnd_xlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xac00000UL, 0xffe08000UL, DecodeOpAnd_wror<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xa800000UL, 0xffe08000UL, DecodeOpAnd_wasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xa400000UL, 0xffe08000UL, DecodeOpAnd_wlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xa000000UL, 0xffe08000UL, DecodeOpAnd_wlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x92000000UL, 0xff800000UL, DecodeOpAnd_xi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x12000000UL, 0xffc00000UL, DecodeOpAnd_wi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x90000000UL, 0x9f000000UL, DecodeOpAdrp<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x10000000UL, 0x9f000000UL, DecodeOpAdr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xab800000UL, 0xffe00000UL, DecodeOpAdds_xasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xab400000UL, 0xffe00000UL, DecodeOpAdds_xlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xab000000UL, 0xffe00000UL, DecodeOpAdds_xlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2b800000UL, 0xffe08000UL, DecodeOpAdds_wasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2b400000UL, 0xffe08000UL, DecodeOpAdds_wlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2b000000UL, 0xffe08000UL, DecodeOpAdds_wlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb1000000UL, 0xff800000UL, DecodeOpAdds_xi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x31000000UL, 0xff800000UL, DecodeOpAdds_wi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xab206000UL, 0xffe0e000UL, DecodeOpAdds_xuxtx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xab204000UL, 0xffe0e000UL, DecodeOpAdds_xuxtw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xab202000UL, 0xffe0e000UL, DecodeOpAdds_xuxth<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xab200000UL, 0xffe0e000UL, DecodeOpAdds_xuxtb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xab20e000UL, 0xffe0e000UL, DecodeOpAdds_xsxtx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xab20c000UL, 0xffe0e000UL, DecodeOpAdds_xsxtw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xab20a000UL, 0xffe0e000UL, DecodeOpAdds_xsxth<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xab208000UL, 0xffe0e000UL, DecodeOpAdds_xsxtb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2b206000UL, 0xffe0e000UL, DecodeOpAdds_wuxtx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2b204000UL, 0xffe0e000UL, DecodeOpAdds_wuxtw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2b202000UL, 0xffe0e000UL, DecodeOpAdds_wuxth<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2b200000UL, 0xffe0e000UL, DecodeOpAdds_wuxtb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2b20e000UL, 0xffe0e000UL, DecodeOpAdds_wsxtx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2b20c000UL, 0xffe0e000UL, DecodeOpAdds_wsxtw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2b20a000UL, 0xffe0e000UL, DecodeOpAdds_wsxth<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x2b208000UL, 0xffe0e000UL, DecodeOpAdds_wsxtb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8b800000UL, 0xffe00000UL, DecodeOpAdd_xasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8b400000UL, 0xffe00000UL, DecodeOpAdd_xlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8b000000UL, 0xffe00000UL, DecodeOpAdd_xlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb800000UL, 0xffe08000UL, DecodeOpAdd_wasr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb400000UL, 0xffe08000UL, DecodeOpAdd_wlsr<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb000000UL, 0xffe08000UL, DecodeOpAdd_wlsl<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x91000000UL, 0xff800000UL, DecodeOpAdd_xi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x11000000UL, 0xff800000UL, DecodeOpAdd_wi<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8b206000UL, 0xffe0e000UL, DecodeOpAdd_xuxtx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8b204000UL, 0xffe0e000UL, DecodeOpAdd_xuxtw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8b202000UL, 0xffe0e000UL, DecodeOpAdd_xuxth<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8b200000UL, 0xffe0e000UL, DecodeOpAdd_xuxtb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8b20e000UL, 0xffe0e000UL, DecodeOpAdd_xsxtx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8b20c000UL, 0xffe0e000UL, DecodeOpAdd_xsxtw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8b20a000UL, 0xffe0e000UL, DecodeOpAdd_xsxth<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x8b208000UL, 0xffe0e000UL, DecodeOpAdd_xsxtb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb206000UL, 0xffe0e000UL, DecodeOpAdd_wuxtx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb204000UL, 0xffe0e000UL, DecodeOpAdd_wuxtw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb202000UL, 0xffe0e000UL, DecodeOpAdd_wuxth<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb200000UL, 0xffe0e000UL, DecodeOpAdd_wuxtb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb20e000UL, 0xffe0e000UL, DecodeOpAdd_wsxtx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb20c000UL, 0xffe0e000UL, DecodeOpAdd_wsxtw<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb20a000UL, 0xffe0e000UL, DecodeOpAdd_wsxth<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xb208000UL, 0xffe0e000UL, DecodeOpAdd_wsxtb<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xba000000UL, 0xffe0fc00UL, DecodeOpAdcs_xxx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x3a000000UL, 0xffe0fc00UL, DecodeOpAdcs_www<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x9a000000UL, 0xffe0fc00UL, DecodeOpAdc_xxx<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0x1a000000UL, 0xffe0fc00UL, DecodeOpAdc_www<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xdc0cc00UL, 0xbfc0dc00UL, DecodeOpLdvr_dro<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xdc0c800UL, 0xbfc0dc00UL, DecodeOpLdvr_sro<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xdc0c400UL, 0xbfc0dc00UL, DecodeOpLdvr_hro<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xdc0c000UL, 0xbfc0dc00UL, DecodeOpLdvr_bro<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xdc08400UL, 0xbfc0dc00UL, DecodeOpLdvsl_dro<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xdc08000UL, 0xbfc0cc00UL, DecodeOpLdvsl_sro<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xdc04000UL, 0xbfc0c400UL, DecodeOpLdvsl_hro<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xdc00000UL, 0xbfc0c000UL, DecodeOpLdvsl_bro<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd808400UL, 0xbfc0dc00UL, DecodeOpStvsl_dro<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd808000UL, 0xbfc0cc00UL, DecodeOpStvsl_sro<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd804000UL, 0xbfc0c400UL, DecodeOpStvsl_hro<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd800000UL, 0xbfc0c000UL, DecodeOpStvsl_bro<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xcc00c00UL, 0xbfe00c00UL, DecodeOpLdvms_dro<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xcc00800UL, 0xbfe00c00UL, DecodeOpLdvms_sro<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xcc00400UL, 0xbfe00c00UL, DecodeOpLdvms_hro<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xcc00000UL, 0xbfe00c00UL, DecodeOpLdvms_bro<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc800c00UL, 0xbfe00c00UL, DecodeOpStvms_dro<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc800800UL, 0xbfe00c00UL, DecodeOpStvms_sro<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc800400UL, 0xbfe00c00UL, DecodeOpStvms_hro<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xc800000UL, 0xbfe00c00UL, DecodeOpStvms_bro<	ARCH>));
	decode_table.push_back(DecodeTableEntry<	ARCH>(0xd5000000UL, 0xffe00000UL, DecodeOpMsr<	ARCH>));
}

template <	typename	ARCH>
Decoder<	ARCH>::~Decoder()
{
}

template <	typename	ARCH>
Operation<	ARCH> *Decoder<	ARCH>::NCDecode(uint64_t addr, CodeType code)
{
	Operation<	ARCH> *operation;
	unsigned int count = decode_table.size();
	unsigned int idx;
	for(idx = 0; idx < count; idx++)
	{
		if((code & decode_table[idx].opcode_mask) == decode_table[idx].opcode)
		{
			operation = decode_table[idx].decode(code, addr);
			return operation;
		}
	}
	operation = new Operation<	ARCH>(code, addr, "???");
	return operation;
}

} } } } } } }
