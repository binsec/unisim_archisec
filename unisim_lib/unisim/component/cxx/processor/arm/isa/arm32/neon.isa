/*
 *  Copyright (c) 2007-2021,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Yves Lhuillier (yves.lhuillier@cea.fr)
 */

/**********************************************

        ARM32 NEON INSTRUCTIONS

**********************************************/

op vaba_s8( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0111[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vaba_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vaba_s8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vaba_s8.disasm = {
  buffer << "vaba.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vaba_s16( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0111[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vaba_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vaba_s16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vaba_s16.disasm = {
  buffer << "vaba.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vaba_s32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0111[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vaba_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vaba_s32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vaba_s32.disasm = {
  buffer << "vaba.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vaba_u8( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0111[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vaba_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vaba_u8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vaba_u8.disasm = {
  buffer << "vaba.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vaba_u16( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0111[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vaba_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vaba_u16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vaba_u16.disasm = {
  buffer << "vaba.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vaba_u32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0111[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vaba_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vaba_u32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vaba_u32.disasm = {
  buffer << "vaba.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vabal_s8qd( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vabal_s8qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vabal_s8qd.var reject : {Reject} = {vd0 & 1};

vabal_s8qd.disasm = {
  buffer << "vabal.s8\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

op vabal_s16qd( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vabal_s16qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vabal_s16qd.var reject : {Reject} = {vd0 & 1};

vabal_s16qd.disasm = {
  buffer << "vabal.s16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

op vabal_s32qd( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vabal_s32qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vabal_s32qd.var reject : {Reject} = {vd0 & 1};

vabal_s32qd.disasm = {
  buffer << "vabal.s32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

op vabal_u8qd( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vabal_u8qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vabal_u8qd.var reject : {Reject} = {vd0 & 1};

vabal_u8qd.disasm = {
  buffer << "vabal.u8\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

op vabal_u16qd( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vabal_u16qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vabal_u16qd.var reject : {Reject} = {vd0 & 1};

vabal_u16qd.disasm = {
  buffer << "vabal.u16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

op vabal_u32qd( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vabal_u32qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vabal_u32qd.var reject : {Reject} = {vd0 & 1};

vabal_u32qd.disasm = {
  buffer << "vabal.u32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

op vabd_s8( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0111[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vabd_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vabd_s8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vabd_s8.disasm = {
  buffer << "vabd.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vabd_s16( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0111[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vabd_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vabd_s16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vabd_s16.disasm = {
  buffer << "vabd.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vabd_s32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0111[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vabd_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vabd_s32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vabd_s32.disasm = {
  buffer << "vabd.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vabd_u8( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0111[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vabd_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vabd_u8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vabd_u8.disasm = {
  buffer << "vabd.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vabd_u16( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0111[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vabd_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vabd_u16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vabd_u16.disasm = {
  buffer << "vabd.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vabd_u32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0111[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vabd_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vabd_u32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vabd_u32.disasm = {
  buffer << "vabd.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vabdl_s8qd( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0111[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vabdl_s8qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vabdl_s8qd.var reject : {Reject} = {vd0 & 1};

vabdl_s8qd.disasm = {
  buffer << "vabdl.s8\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

op vabdl_s16qd( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0111[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vabdl_s16qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vabdl_s16qd.var reject : {Reject} = {vd0 & 1};

vabdl_s16qd.disasm = {
  buffer << "vabdl.s16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

op vabdl_s32qd( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0111[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vabdl_s32qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vabdl_s32qd.var reject : {Reject} = {vd0 & 1};

vabdl_s32qd.disasm = {
  buffer << "vabdl.s32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

op vabdl_u8qd( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0111[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vabdl_u8qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vabdl_u8qd.var reject : {Reject} = {vd0 & 1};

vabdl_u8qd.disasm = {
  buffer << "vabdl.u8\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

op vabdl_u16qd( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0111[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vabdl_u16qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vabdl_u16qd.var reject : {Reject} = {vd0 & 1};

vabdl_u16qd.disasm = {
  buffer << "vabdl.u16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

op vabdl_u32qd( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0111[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vabdl_u32qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vabdl_u32qd.var reject : {Reject} = {vd0 & 1};

vabdl_u32qd.disasm = {
  buffer << "vabdl.u32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

op vabd_f32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1101[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vabd_f32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vabd_f32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vabd_f32.disasm = {
  buffer << "vabd.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vabs_s8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b00[2]: 0b01[2]: vd0[4]: 0b0011[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vabs_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vabs_s8.var reject : {Reject} = {(vd0 | vm0) & q};

vabs_s8.disasm = {
  buffer << "vabs.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vabs_s16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b01[2]: 0b01[2]: vd0[4]: 0b0011[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vabs_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vabs_s16.var reject : {Reject} = {(vd0 | vm0) & q};

vabs_s16.disasm = {
  buffer << "vabs.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vabs_s32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b10[2]: 0b01[2]: vd0[4]: 0b0011[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vabs_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vabs_s32.var reject : {Reject} = {(vd0 | vm0) & q};

vabs_s32.disasm = {
  buffer << "vabs.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vabs_f32v( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b10[2]: 0b01[2]: vd0[4]: 0b0111[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vabs_f32v.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vabs_f32v.var reject : {Reject} = {(vd0 | vm0) & q};

vabs_f32v.disasm = {
  buffer << "vabs.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vacge_f32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1110[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vacge_f32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vacge_f32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vacge_f32.disasm = {
  buffer << "vacge.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vacgt_f32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1110[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vacgt_f32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vacgt_f32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vacgt_f32.disasm = {
  buffer << "vacgt.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vadd_f32v( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1101[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vadd_f32v.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vadd_f32v.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vadd_f32v.disasm = {
  buffer << "vadd.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

group vadd_i begin;

op vadd_i8( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vadd_i8.var CFG : {typedef struct { enum { elements=8 }; }}, OP : {typedef typename ARCH::U8};

op vadd_i16( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vadd_i16.var CFG : {typedef struct { enum { elements=4 }; }}, OP : {typedef typename ARCH::U16};

op vadd_i32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vadd_i32.var CFG : {typedef struct { enum { elements=2 }; }}, OP : {typedef typename ARCH::U32};

op vadd_i64( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b11[2]: vn0[4]: vd0[4]: 0b1000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vadd_i64.var CFG : {typedef struct { enum { elements=1 }; }}, OP : {typedef typename ARCH::U64};

group vadd_i end;

vadd_i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vadd_i.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vadd_i.disasm = {
  buffer << "vadd.i" << (64/CFG::elements) << "\t" << DisasmV(vd>>q,3+q) << ", " << DisasmV(vn>>q,3+q) << ", " << DisasmV(vm>>q,3+q);
};

vadd_i.execute = {
  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < CFG::elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(cpu.GetVDE( vn+dd, idx, OP() ) + cpu.GetVDE( vm+dd, idx, OP() )) );
};

op vaddhn_i16dq( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vaddhn_i16dq.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vaddhn_i16dq.var reject : {Reject} = {(vm0 | vn0) & 1};

vaddhn_i16dq.disasm = {
  buffer << "vaddhn.i16\t" << DisasmV(vd, 3) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm>>1, 4);
};

op vaddhn_i32dq( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vaddhn_i32dq.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vaddhn_i32dq.var reject : {Reject} = {(vm0 | vn0) & 1};

vaddhn_i32dq.disasm = {
  buffer << "vaddhn.i32\t" << DisasmV(vd, 3) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm>>1, 4);
};

op vaddhn_i64dq( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vaddhn_i64dq.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vaddhn_i64dq.var reject : {Reject} = {(vm0 | vn0) & 1};

vaddhn_i64dq.disasm = {
  buffer << "vaddhn.i64\t" << DisasmV(vd, 3) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm>>1, 4);
};

op vaddl_s8( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0000[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vaddl_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vaddl_s8.var reject : {Reject} = {vd0 & 1};

vaddl_s8.disasm = {
  buffer << "vaddl.s8\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vaddl_s8.execute = {
  typedef typename ARCH::S8 OP;
  typedef typename ARCH::S16 WOP;
  unsigned const subs = 4;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = WOP( cpu.GetVDE( vn, subs*q+idx, OP() ) ) + WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vaddl_s16( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0000[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vaddl_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vaddl_s16.var reject : {Reject} = {vd0 & 1};

vaddl_s16.disasm = {
  buffer << "vaddl.s16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vaddl_s16.execute = {
  typedef typename ARCH::S16 OP;
  typedef typename ARCH::S32 WOP;
  unsigned const subs = 2;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = WOP( cpu.GetVDE( vn, subs*q+idx, OP() ) ) + WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vaddl_s32( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0000[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vaddl_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vaddl_s32.var reject : {Reject} = {vd0 & 1};

vaddl_s32.disasm = {
  buffer << "vaddl.s32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vaddl_s32.execute = {
  typedef typename ARCH::S32 OP;
  typedef typename ARCH::S64 WOP;
  unsigned const subs = 1;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = WOP( cpu.GetVDE( vn, subs*q+idx, OP() ) ) + WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vaddl_u8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0000[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vaddl_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vaddl_u8.var reject : {Reject} = {vd0 & 1};

vaddl_u8.disasm = {
  buffer << "vaddl.u8\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vaddl_u8.execute = {
  typedef typename ARCH::U8 OP;
  typedef typename ARCH::U16 WOP;
  unsigned const subs = 4;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = WOP( cpu.GetVDE( vn, subs*q+idx, OP() ) ) + WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vaddl_u16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0000[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vaddl_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vaddl_u16.var reject : {Reject} = {vd0 & 1};

vaddl_u16.disasm = {
  buffer << "vaddl.u16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vaddl_u16.execute = {
  typedef typename ARCH::U16 OP;
  typedef typename ARCH::U32 WOP;
  unsigned const subs = 2;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = WOP( cpu.GetVDE( vn, subs*q+idx, OP() ) ) + WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vaddl_u32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0000[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vaddl_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vaddl_u32.var reject : {Reject} = {vd0 & 1};

vaddl_u32.disasm = {
  buffer << "vaddl.u32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vaddl_u32.execute = {
  typedef typename ARCH::U32 OP;
  typedef typename ARCH::U64 WOP;
  unsigned const subs = 1;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = WOP( cpu.GetVDE( vn, subs*q+idx, OP() ) ) + WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vaddw_s8( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0001[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vaddw_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vaddw_s8.var reject : {Reject} = {(vd0|vn0) & 1};

vaddw_s8.disasm = {
  buffer << "vaddw.s8\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm, 3);
};

vaddw_s8.execute = {
  typedef typename ARCH::S8 OP;
  typedef typename ARCH::S16 WOP;
  unsigned const subs = 4;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = cpu.GetVDE( vn+q, idx, WOP() ) + WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vaddw_s16( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0001[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vaddw_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vaddw_s16.var reject : {Reject} = {(vd0|vn0) & 1};

vaddw_s16.disasm = {
  buffer << "vaddw.s16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm, 3);
};

vaddw_s16.execute = {
  typedef typename ARCH::S16 OP;
  typedef typename ARCH::S32 WOP;
  unsigned const subs = 2;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = cpu.GetVDE( vn+q, idx, WOP() ) + WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vaddw_s32( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0001[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vaddw_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vaddw_s32.var reject : {Reject} = {(vd0|vn0) & 1};

vaddw_s32.disasm = {
  buffer << "vaddw.s32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm, 3);
};

vaddw_s32.execute = {
  typedef typename ARCH::S32 OP;
  typedef typename ARCH::S64 WOP;
  unsigned const subs = 1;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = cpu.GetVDE( vn+q, idx, WOP() ) + WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vaddw_u8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0001[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vaddw_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vaddw_u8.var reject : {Reject} = {(vd0|vn0) & 1};

vaddw_u8.disasm = {
  buffer << "vaddw.u8\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm, 3);
};

vaddw_u8.execute = {
  typedef typename ARCH::U8 OP;
  typedef typename ARCH::U16 WOP;
  unsigned const subs = 4;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = cpu.GetVDE( vn+q, idx, WOP() ) + WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vaddw_u16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0001[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vaddw_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vaddw_u16.var reject : {Reject} = {(vd0|vn0) & 1};

vaddw_u16.disasm = {
  buffer << "vaddw.u16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm, 3);
};

vaddw_u16.execute = {
  typedef typename ARCH::U16 OP;
  typedef typename ARCH::U32 WOP;
  unsigned const subs = 2;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = cpu.GetVDE( vn+q, idx, WOP() ) + WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vaddw_u32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0001[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vaddw_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vaddw_u32.var reject : {Reject} = {(vd0|vn0) & 1};

vaddw_u32.disasm = {
  buffer << "vaddw.u32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm, 3);
};

vaddw_u32.execute = {
  typedef typename ARCH::U32 OP;
  typedef typename ARCH::U64 WOP;
  unsigned const subs = 1;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = cpu.GetVDE( vn+q, idx, WOP() ) + WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vand( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0001[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vand.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vand.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vand.disasm = {
  buffer << "vand\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vand.execute = {
  typedef typename ARCH::U64 U64;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    cpu.SetVDE( vd+dd, 0, U64(cpu.GetVDE( vn+dd, 0, U64() ) & cpu.GetVDE( vm+dd, 0, U64() )) );
};

op vbic( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0001[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vbic.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vbic.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vbic.disasm = {
  buffer << "vbic\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vbic.execute = {
  typedef typename ARCH::U64 U64;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    cpu.SetVDE( vd+dd, 0, U64(cpu.GetVDE( vn+dd, 0, U64() ) & ~cpu.GetVDE( vm+dd, 0, U64() )) );
};

op vbic_i16i( 0b1111[4]: 0b001[3]: shl<7> imm2[1]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b0[1]: shl<4> imm1[3]: vd0[4]: 0b10[2]: shl<3> shift[1]: 0b1[1]: 0b0[1]: q[1]: 0b11[2]: imm0[4] );
vbic_i16i.var vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {(imm2|imm1|imm0) << shift};
vbic_i16i.var reject : {Reject} = {vd0 & q};

vbic_i16i.disasm = {
  buffer << "vbic.i16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmI(imm);
};

op vbic_i32i( 0b1111[4]: 0b001[3]: shl<7> imm2[1]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b0[1]: shl<4> imm1[3]: vd0[4]: 0b0[1]: shl<3> shift[2]: 0b1[1]: 0b0[1]: q[1]: 0b11[2]: imm0[4] );
vbic_i32i.var vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {(imm2|imm1|imm0) << shift};
vbic_i32i.var reject : {Reject} = {vd0 & q};

vbic_i32i.disasm = {
  buffer << "vbic.i32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmI(imm);
};

op vbif( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b11[2]: vn0[4]: vd0[4]: 0b0001[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vbif.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vbif.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vbif.disasm = {
  buffer << "vbif\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vbif.execute = {
  typedef typename ARCH::U64 U64;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    {
      U64 sel = cpu.GetVDE( vm+dd, 0, U64() );
      cpu.SetVDE( vd+dd, 0, U64((cpu.GetVDE( vd+dd, 0, U64() ) & sel) | (cpu.GetVDE( vn+dd, 0, U64() ) & ~sel)) );
    }
};

op vbit( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0001[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vbit.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vbit.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vbit.disasm = {
  buffer << "vbit\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vbit.execute = {
  typedef typename ARCH::U64 U64;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    {
      U64 sel = cpu.GetVDE( vm+dd, 0, U64() );
      cpu.SetVDE( vd+dd, 0, U64((cpu.GetVDE( vn+dd, 0, U64() ) & sel) | (cpu.GetVDE( vd+dd, 0, U64() ) & ~sel)) );
    }
};

op vbsl( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0001[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vbsl.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vbsl.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vbsl.disasm = {
  buffer << "vbsl\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vbsl.execute = {
  typedef typename ARCH::U64 U64;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    {
      U64 sel = cpu.GetVDE( vd+dd, 0, U64() );
      cpu.SetVDE( vd+dd, 0, U64((cpu.GetVDE( vn+dd, 0, U64() ) & sel) | (cpu.GetVDE( vm+dd, 0, U64() ) & ~sel)) );
    }
};

op vceq_f32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1110[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vceq_f32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vceq_f32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vceq_f32.disasm = {
  buffer << "vceq.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vceq_f8z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0001[4]: vd0[4]: 0b0101[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vceq_f8z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vceq_f8z.var reject : {Reject} = {(vd0 | vm0) & q};

vceq_f8z.disasm = {
  buffer << "vceq.f8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

op vceq_f16z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0101[4]: vd0[4]: 0b0101[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vceq_f16z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vceq_f16z.var reject : {Reject} = {(vd0 | vm0) & q};

vceq_f16z.disasm = {
  buffer << "vceq.f16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

op vceq_f32z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1001[4]: vd0[4]: 0b0101[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vceq_f32z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vceq_f32z.var reject : {Reject} = {(vd0 | vm0) & q};

vceq_f32z.disasm = {
  buffer << "vceq.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

op vceq_i8z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0001[4]: vd0[4]: 0b0001[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vceq_i8z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vceq_i8z.var reject : {Reject} = {(vd0 | vm0) & q};

vceq_i8z.disasm = {
  buffer << "vceq.i8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

vceq_i8z.execute = {
  typedef typename ARCH::U8 OP;
  unsigned const elements = 8;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vm+dd, idx, OP()) ), op2( 0 ), res =  OP(not (op1 == op2)) - OP(1);
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vceq_i16z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0101[4]: vd0[4]: 0b0001[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vceq_i16z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vceq_i16z.var reject : {Reject} = {(vd0 | vm0) & q};

vceq_i16z.disasm = {
  buffer << "vceq.i16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

vceq_i16z.execute = {
  typedef typename ARCH::U16 OP;
  unsigned const elements = 4;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vm+dd, idx, OP()) ), op2( 0 ), res =  OP(not (op1 == op2)) - OP(1);
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vceq_i32z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1001[4]: vd0[4]: 0b0001[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vceq_i32z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vceq_i32z.var reject : {Reject} = {(vd0 | vm0) & q};

vceq_i32z.disasm = {
  buffer << "vceq.i32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

vceq_i32z.execute = {
  typedef typename ARCH::U32 OP;
  unsigned const elements = 2;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vm+dd, idx, OP()) ), op2( 0 ), res =  OP(not (op1 == op2)) - OP(1);
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vceq_i8( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vceq_i8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vceq_i8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vceq_i8.disasm = {
  buffer << "vceq.i8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vceq_i8.execute = {
  typedef typename ARCH::U8 OP;
  unsigned const elements = 8;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vn+dd, idx, OP()) ), op2( cpu.GetVDE(vm+dd, idx, OP()) ), res =  OP(not (op1 == op2)) - OP(1);
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vceq_i16( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vceq_i16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vceq_i16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vceq_i16.disasm = {
  buffer << "vceq.i16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vceq_i16.execute = {
  typedef typename ARCH::U16 OP;
  unsigned const elements = 4;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vn+dd, idx, OP()) ), op2( cpu.GetVDE(vm+dd, idx, OP()) ), res =  OP(not (op1 == op2)) - OP(1);
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vceq_i32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vceq_i32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vceq_i32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vceq_i32.disasm = {
  buffer << "vceq.i32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vceq_i32.execute = {
  typedef typename ARCH::U32 OP;
  unsigned const elements = 2;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vn+dd, idx, OP()) ), op2( cpu.GetVDE(vm+dd, idx, OP()) ), res =  OP(not (op1 == op2)) - OP(1);
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vcge_f8z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0001[4]: vd0[4]: 0b0100[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcge_f8z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcge_f8z.var reject : {Reject} = {(vd0 | vm0) & q};

vcge_f8z.disasm = {
  buffer << "vcge.f8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

op vcge_f16z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0101[4]: vd0[4]: 0b0100[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcge_f16z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcge_f16z.var reject : {Reject} = {(vd0 | vm0) & q};

vcge_f16z.disasm = {
  buffer << "vcge.f16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

op vcge_f32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1110[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcge_f32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vcge_f32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vcge_f32.disasm = {
  buffer << "vcge.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vcge_f32z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1001[4]: vd0[4]: 0b0100[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcge_f32z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcge_f32z.var reject : {Reject} = {(vd0 | vm0) & q};

vcge_f32z.disasm = {
  buffer << "vcge.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

op vcge_s8z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0001[4]: vd0[4]: 0b0000[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcge_s8z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcge_s8z.var reject : {Reject} = {(vd0 | vm0) & q};

vcge_s8z.disasm = {
  buffer << "vcge.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

vcge_s8z.execute = {
  typedef typename ARCH::S8 OP;
  unsigned const elements = 8;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vm+dd, idx, OP()) ), op2( 0 ), res( OP(not (op1 >= op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vcge_s16z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0101[4]: vd0[4]: 0b0000[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcge_s16z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcge_s16z.var reject : {Reject} = {(vd0 | vm0) & q};

vcge_s16z.disasm = {
  buffer << "vcge.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

vcge_s16z.execute = {
  typedef typename ARCH::S16 OP;
  unsigned const elements = 4;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vm+dd, idx, OP()) ), op2( 0 ), res( OP(not (op1 >= op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vcge_s32z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1001[4]: vd0[4]: 0b0000[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcge_s32z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcge_s32z.var reject : {Reject} = {(vd0 | vm0) & q};

vcge_s32z.disasm = {
  buffer << "vcge.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

vcge_s32z.execute = {
  typedef typename ARCH::S32 OP;
  unsigned const elements = 2;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vm+dd, idx, OP()) ), op2( 0 ), res( OP(not (op1 >= op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vcge_s8( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0011[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vcge_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vcge_s8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vcge_s8.disasm = {
  buffer << "vcge.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vcge_s8.execute = {
  typedef typename ARCH::S8 OP;
  unsigned const elements = 8;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vn+dd, idx, OP()) ), op2( cpu.GetVDE(vm+dd, idx, OP()) ), res( OP(not (op1 >= op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vcge_s16( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0011[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vcge_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vcge_s16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vcge_s16.disasm = {
  buffer << "vcge.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vcge_s16.execute = {
  typedef typename ARCH::S16 OP;
  unsigned const elements = 4;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vn+dd, idx, OP()) ), op2( cpu.GetVDE(vm+dd, idx, OP()) ), res( OP(not (op1 >= op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vcge_s32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0011[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vcge_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vcge_s32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vcge_s32.disasm = {
  buffer << "vcge.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vcge_s32.execute = {
  typedef typename ARCH::S32 OP;
  unsigned const elements = 2;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vn+dd, idx, OP()) ), op2( cpu.GetVDE(vm+dd, idx, OP()) ), res( OP(not (op1 >= op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vcge_u8( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0011[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vcge_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vcge_u8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vcge_u8.disasm = {
  buffer << "vcge.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vcge_u8.execute = {
  typedef typename ARCH::U8 OP;
  unsigned const elements = 8;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vn+dd, idx, OP()) ), op2( cpu.GetVDE(vm+dd, idx, OP()) ), res( OP(not (op1 >= op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vcge_u16( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0011[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vcge_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vcge_u16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vcge_u16.disasm = {
  buffer << "vcge.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vcge_u16.execute = {
  typedef typename ARCH::U16 OP;
  unsigned const elements = 4;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vn+dd, idx, OP()) ), op2( cpu.GetVDE(vm+dd, idx, OP()) ), res( OP(not (op1 >= op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vcge_u32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0011[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vcge_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vcge_u32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vcge_u32.disasm = {
  buffer << "vcge.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vcge_u32.execute = {
  typedef typename ARCH::U32 OP;
  unsigned const elements = 2;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vn+dd, idx, OP()) ), op2( cpu.GetVDE(vm+dd, idx, OP()) ), res( OP(not (op1 >= op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vcgt_f8z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0001[4]: vd0[4]: 0b0100[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcgt_f8z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcgt_f8z.var reject : {Reject} = {(vd0 | vm0) & q};

vcgt_f8z.disasm = {
  buffer << "vcgt.f8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

op vcgt_f16z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0101[4]: vd0[4]: 0b0100[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcgt_f16z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcgt_f16z.var reject : {Reject} = {(vd0 | vm0) & q};

vcgt_f16z.disasm = {
  buffer << "vcgt.f16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

op vcgt_f32z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1001[4]: vd0[4]: 0b0100[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcgt_f32z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcgt_f32z.var reject : {Reject} = {(vd0 | vm0) & q};

vcgt_f32z.disasm = {
  buffer << "vcgt.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

op vcgt_f32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1110[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcgt_f32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vcgt_f32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vcgt_f32.disasm = {
  buffer << "vcgt.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vcgt_s8z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0001[4]: vd0[4]: 0b0000[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcgt_s8z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcgt_s8z.var reject : {Reject} = {(vd0 | vm0) & q};

vcgt_s8z.disasm = {
  buffer << "vcgt.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

vcgt_s8z.execute = {
  typedef typename ARCH::S8 OP;
  unsigned const elements = 8;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vm+dd, idx, OP()) ), op2( 0 ), res( OP(not (op1 > op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vcgt_s16z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0101[4]: vd0[4]: 0b0000[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcgt_s16z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcgt_s16z.var reject : {Reject} = {(vd0 | vm0) & q};

vcgt_s16z.disasm = {
  buffer << "vcgt.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

vcgt_s16z.execute = {
  typedef typename ARCH::S16 OP;
  unsigned const elements = 4;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vm+dd, idx, OP()) ), op2( 0 ), res( OP(not (op1 > op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vcgt_s32z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1001[4]: vd0[4]: 0b0000[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcgt_s32z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcgt_s32z.var reject : {Reject} = {(vd0 | vm0) & q};

vcgt_s32z.disasm = {
  buffer << "vcgt.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

vcgt_s32z.execute = {
  typedef typename ARCH::S32 OP;
  unsigned const elements = 2;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vm+dd, idx, OP()) ), op2( 0 ), res( OP(not (op1 > op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vcgt_s8( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0011[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcgt_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vcgt_s8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vcgt_s8.disasm = {
  buffer << "vcgt.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vcgt_s8.execute = {
  typedef typename ARCH::S8 OP;
  unsigned const elements = 8;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vn+dd, idx, OP()) ), op2( cpu.GetVDE(vm+dd, idx, OP()) ), res( OP(not (op1 > op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vcgt_s16( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0011[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcgt_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vcgt_s16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vcgt_s16.disasm = {
  buffer << "vcgt.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vcgt_s16.execute = {
  typedef typename ARCH::S16 OP;
  unsigned const elements = 4;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vn+dd, idx, OP()) ), op2( cpu.GetVDE(vm+dd, idx, OP()) ), res( OP(not (op1 > op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vcgt_s32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0011[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcgt_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vcgt_s32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vcgt_s32.disasm = {
  buffer << "vcgt.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vcgt_s32.execute = {
  typedef typename ARCH::S32 OP;
  unsigned const elements = 2;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vn+dd, idx, OP()) ), op2( cpu.GetVDE(vm+dd, idx, OP()) ), res( OP(not (op1 > op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vcgt_u8( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0011[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcgt_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vcgt_u8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vcgt_u8.disasm = {
  buffer << "vcgt.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vcgt_u8.execute = {
  typedef typename ARCH::U8 OP;
  unsigned const elements = 8;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vn+dd, idx, OP()) ), op2( cpu.GetVDE(vm+dd, idx, OP()) ), res( OP(not (op1 > op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vcgt_u16( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0011[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcgt_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vcgt_u16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vcgt_u16.disasm = {
  buffer << "vcgt.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vcgt_u16.execute = {
  typedef typename ARCH::U16 OP;
  unsigned const elements = 4;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vn+dd, idx, OP()) ), op2( cpu.GetVDE(vm+dd, idx, OP()) ), res( OP(not (op1 > op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vcgt_u32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0011[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcgt_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vcgt_u32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vcgt_u32.disasm = {
  buffer << "vcgt.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vcgt_u32.execute = {
  typedef typename ARCH::U32 OP;
  unsigned const elements = 2;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vn+dd, idx, OP()) ), op2( cpu.GetVDE(vm+dd, idx, OP()) ), res( OP(not (op1 > op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vcle_f8z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0001[4]: vd0[4]: 0b0101[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcle_f8z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcle_f8z.var reject : {Reject} = {(vd0 | vm0) & q};

vcle_f8z.disasm = {
  buffer << "vcle.f8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

op vcle_f16z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0101[4]: vd0[4]: 0b0101[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcle_f16z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcle_f16z.var reject : {Reject} = {(vd0 | vm0) & q};

vcle_f16z.disasm = {
  buffer << "vcle.f16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

op vcle_f32z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1001[4]: vd0[4]: 0b0101[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcle_f32z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcle_f32z.var reject : {Reject} = {(vd0 | vm0) & q};

vcle_f32z.disasm = {
  buffer << "vcle.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

op vcle_s8z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0001[4]: vd0[4]: 0b0001[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcle_s8z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcle_s8z.var reject : {Reject} = {(vd0 | vm0) & q};

vcle_s8z.disasm = {
  buffer << "vcle.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

vcle_s8z.execute = {
  typedef typename ARCH::S8 OP;
  unsigned const elements = 8;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vm+dd, idx, OP()) ), op2( 0 ), res( OP(not (op1 <= op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vcle_s16z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0101[4]: vd0[4]: 0b0001[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcle_s16z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcle_s16z.var reject : {Reject} = {(vd0 | vm0) & q};

vcle_s16z.disasm = {
  buffer << "vcle.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

vcle_s16z.execute = {
  typedef typename ARCH::S16 OP;
  unsigned const elements = 4;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vm+dd, idx, OP()) ), op2( 0 ), res( OP(not (op1 <= op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vcle_s32z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1001[4]: vd0[4]: 0b0001[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcle_s32z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcle_s32z.var reject : {Reject} = {(vd0 | vm0) & q};

vcle_s32z.disasm = {
  buffer << "vcle.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

vcle_s32z.execute = {
  typedef typename ARCH::S32 OP;
  unsigned const elements = 2;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vm+dd, idx, OP()) ), op2( 0 ), res( OP(not (op1 <= op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vcls_s8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0000[4]: vd0[4]: 0b0100[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcls_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcls_s8.var reject : {Reject} = {(vd0 | vm0) & q};

vcls_s8.disasm = {
  buffer << "vcls.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vcls_s16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0100[4]: vd0[4]: 0b0100[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcls_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcls_s16.var reject : {Reject} = {(vd0 | vm0) & q};

vcls_s16.disasm = {
  buffer << "vcls.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vcls_s32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1000[4]: vd0[4]: 0b0100[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcls_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcls_s32.var reject : {Reject} = {(vd0 | vm0) & q};

vcls_s32.disasm = {
  buffer << "vcls.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vclt_f8z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0001[4]: vd0[4]: 0b0110[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vclt_f8z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vclt_f8z.var reject : {Reject} = {(vd0 | vm0) & q};

vclt_f8z.disasm = {
  buffer << "vclt.f8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

op vclt_f16z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0101[4]: vd0[4]: 0b0110[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vclt_f16z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vclt_f16z.var reject : {Reject} = {(vd0 | vm0) & q};

vclt_f16z.disasm = {
  buffer << "vclt.f16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

op vclt_f32z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1001[4]: vd0[4]: 0b0110[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vclt_f32z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vclt_f32z.var reject : {Reject} = {(vd0 | vm0) & q};

vclt_f32z.disasm = {
  buffer << "vclt.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

op vclt_s8z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0001[4]: vd0[4]: 0b0010[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vclt_s8z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vclt_s8z.var reject : {Reject} = {(vd0 | vm0) & q};

vclt_s8z.disasm = {
  buffer << "vclt.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

vclt_s8z.execute = {
  typedef typename ARCH::S8 OP;
  unsigned const elements = 8;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vm+dd, idx, OP()) ), op2( 0 ), res( OP(not (op1 < op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vclt_s16z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0101[4]: vd0[4]: 0b0010[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vclt_s16z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vclt_s16z.var reject : {Reject} = {(vd0 | vm0) & q};

vclt_s16z.disasm = {
  buffer << "vclt.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

vclt_s16z.execute = {
  typedef typename ARCH::S16 OP;
  unsigned const elements = 4;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vm+dd, idx, OP()) ), op2( 0 ), res( OP(not (op1 < op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vclt_s32z( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1001[4]: vd0[4]: 0b0010[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vclt_s32z.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vclt_s32z.var reject : {Reject} = {(vd0 | vm0) & q};

vclt_s32z.disasm = {
  buffer << "vclt.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", #0";
};

vclt_s32z.execute = {
  typedef typename ARCH::S32 OP;
  unsigned const elements = 2;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        OP op1( cpu.GetVDE(vm+dd, idx, OP()) ), op2( 0 ), res( OP(not (op1 < op2)) - OP(1) );
        cpu.SetVDE( vd+dd, idx, res );
      }
};

op vclz_i8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0000[4]: vd0[4]: 0b0100[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vclz_i8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vclz_i8.var reject : {Reject} = {(vd0 | vm0) & q};

vclz_i8.disasm = {
  buffer << "vclz.i8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vclz_i16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0100[4]: vd0[4]: 0b0100[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vclz_i16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vclz_i16.var reject : {Reject} = {(vd0 | vm0) & q};

vclz_i16.disasm = {
  buffer << "vclz.i16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vclz_i32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1000[4]: vd0[4]: 0b0100[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vclz_i32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vclz_i32.var reject : {Reject} = {(vd0 | vm0) & q};

vclz_i32.disasm = {
  buffer << "vclz.i32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vcnt_8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0000[4]: vd0[4]: 0b0101[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcnt_8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcnt_8.var reject : {Reject} = {(vd0 | vm0) & q};

vcnt_8.disasm = {
  buffer << "vcnt.8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vcvt_f16_f32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0110[4]: vd0[4]: 0b0110[4]: 0b00[2]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcvt_f16_f32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcvt_f16_f32.var reject : {Reject} = {vm0 & 1};

vcvt_f16_f32.disasm = {
  buffer << "vcvt.f16.f32\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4);
};

op vcvt_f32_f16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0110[4]: vd0[4]: 0b0111[4]: 0b00[2]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcvt_f32_f16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcvt_f32_f16.var reject : {Reject} = {vd0 & 1};

vcvt_f32_f16.disasm = {
  buffer << "vcvt.f32.f16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vm, 3);
};

op vcvt_f32_s32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1011[4]: vd0[4]: 0b0110[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcvt_f32_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcvt_f32_s32.var reject : {Reject} = {(vd0 | vm0) & q};

vcvt_f32_s32.disasm = {
  buffer << "vcvt.f32.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vcvt_f32s32vi( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm_[5]: vd0[4]: 0b1110[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vcvt_f32s32vi.var imm : {int32_t} = {32-imm_}, vd : {uint8_t} = {vd1|vd0}, vm : {uint8_t} = {vm1|vm0};
vcvt_f32s32vi.var reject : {Reject} = {(vd0 | vm0) & q};

vcvt_f32s32vi.disasm = {
  buffer << "vcvt.f32.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vcvt_f32u32v( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1011[4]: vd0[4]: 0b0110[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcvt_f32u32v.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcvt_f32u32v.var reject : {Reject} = {(vd0 | vm0) & q};

vcvt_f32u32v.disasm = {
  buffer << "vcvt.f32.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vcvt_f32u32vi( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm_[5]: vd0[4]: 0b1110[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vcvt_f32u32vi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {32-imm_};
vcvt_f32u32vi.var reject : {Reject} = {(vd0 | vm0) & q};

vcvt_f32u32vi.disasm = {
  buffer << "vcvt.f32.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vcvt_s32_f32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1011[4]: vd0[4]: 0b0111[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcvt_s32_f32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcvt_s32_f32.var reject : {Reject} = {(vd0 | vm0) & q};

vcvt_s32_f32.disasm = {
  buffer << "vcvt.s32.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vcvt_s32f32vi( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm_[5]: vd0[4]: 0b1111[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vcvt_s32f32vi.var imm : {int32_t} = {32-imm_}, vd : {uint8_t} = {vd1|vd0}, vm : {uint8_t} = {vm1|vm0};
vcvt_s32f32vi.var reject : {Reject} = {(vd0 | vm0) & q};

vcvt_s32f32vi.disasm = {
  buffer << "vcvt.s32.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vcvt_u32f32v( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1011[4]: vd0[4]: 0b0111[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vcvt_u32f32v.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vcvt_u32f32v.var reject : {Reject} = {(vd0 | vm0) & q};

vcvt_u32f32v.disasm = {
  buffer << "vcvt.u32.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vcvt_u32f32vi( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm_[5]: vd0[4]: 0b1111[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vcvt_u32f32vi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {32-imm_};
vcvt_u32f32vi.var reject : {Reject} = {(vd0 | vm0) & q};

vcvt_u32f32vi.disasm = {
  buffer << "vcvt.u32.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vdup_8dp( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: part[3]: 0b1[1]: vd0[4]: 0b1100[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vdup_8dp.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vdup_8dp.var reject : {Reject} = {vd0 & q};

vdup_8dp.disasm = {
  buffer << "vdup.8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

vdup_8dp.execute = {
  typedef typename ARCH::U8 OP;
  unsigned const elements = 8;

  // CheckAdvSIMDEnabled();
  OP element = cpu.GetVDE(vm, part, OP());
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned e=0; e < elements; ++e)
      cpu.SetVDE( vd+dd, e, element );
};

op vdup_16dp( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: part[2]: 0b10[2]: vd0[4]: 0b1100[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vdup_16dp.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vdup_16dp.var reject : {Reject} = {vd0 & q};

vdup_16dp.disasm = {
  buffer << "vdup.16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

vdup_16dp.execute = {
  typedef typename ARCH::U16 OP;
  unsigned const elements = 4;

  // CheckAdvSIMDEnabled();
  OP element = cpu.GetVDE(vm, part, OP());
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned e=0; e < elements; ++e)
      cpu.SetVDE( vd+dd, e, element );
};

op vdup_32dp( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: part[1]: 0b100[3]: vd0[4]: 0b1100[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vdup_32dp.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vdup_32dp.var reject : {Reject} = {vd0 & q};

vdup_32dp.disasm = {
  buffer << "vdup.32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

vdup_32dp.execute = {
  typedef typename ARCH::U32 OP;
  unsigned const elements = 2;

  // CheckAdvSIMDEnabled();
  OP element = cpu.GetVDE(vm, part, OP());
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned e=0; e < elements; ++e)
      cpu.SetVDE( vd+dd, e, element );
};

op vdup8_r( cond[4]: 0b1110[4]: 0b11[2]: q[1]: 0b0[1]: vd0[4]: rt[4]: 0b1011[4]: shl<4> vd1[1]: 0b001[3]: 0b0000[4] );
vdup8_r.var vd : {uint8_t} = {vd1|vd0};
vdup8_r.var reject : {Reject} = {vd0 & q or rt == 15};

vdup8_r.disasm = {
  buffer << "vdup" << DisasmCondition(cond) << ".8\t" << DisasmV(vd>>q,3+q) << ", " << DisasmRegister(rt);
};

vdup8_r.execute = {
  typedef typename ARCH::U8 OP;
  unsigned const elements = 8;

  // CheckAdvSIMDEnabled();
  OP element( cpu.GetGPR(rt) );
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned e=0; e < elements; ++e)
      cpu.SetVDE( vd+dd, e, element );
};

op vdup16_r( cond[4]: 0b1110[4]: 0b10[2]: q[1]: 0b0[1]: vd0[4]: rt[4]: 0b1011[4]: shl<4> vd1[1]: 0b011[3]: 0b0000[4] );
vdup16_r.var vd : {uint8_t} = {vd1|vd0};
vdup16_r.var reject : {Reject} = {vd0 & q or rt == 15};

vdup16_r.disasm = {
  buffer << "vdup" << DisasmCondition(cond) << ".16\t" << DisasmV(vd>>q,3+q) << ", " << DisasmRegister(rt);
};

vdup16_r.execute = {
  typedef typename ARCH::U16 OP;
  unsigned const elements = 4;

  // CheckAdvSIMDEnabled();
  OP element( cpu.GetGPR(rt) );
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned e=0; e < elements; ++e)
      cpu.SetVDE( vd+dd, e, element );
};

op vdup32_r( cond[4]: 0b1110[4]: 0b10[2]: q[1]: 0b0[1]: vd0[4]: rt[4]: 0b1011[4]: shl<4> vd1[1]: 0b001[3]: 0b0000[4] );
vdup32_r.var vd : {uint8_t} = {vd1|vd0};
vdup32_r.var reject : {Reject} = {vd0 & q or rt == 15};

vdup32_r.disasm = {
  buffer << "vdup" << DisasmCondition(cond) << ".32\t" << DisasmV(vd>>q,3+q) << ", " << DisasmRegister(rt);
};

vdup32_r.execute = {
  typedef typename ARCH::U32 OP;
  unsigned const elements = 2;

  // CheckAdvSIMDEnabled();
  OP element( cpu.GetGPR(rt) );
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned e=0; e < elements; ++e)
      cpu.SetVDE( vd+dd, e, element );
};

op veor( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0001[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
veor.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
veor.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

veor.disasm = {
  buffer << "veor\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

veor.execute = {
  typedef typename ARCH::U64 U64;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    cpu.SetVDE( vd+dd, 0, U64(cpu.GetVDE( vn+dd, 0, U64() ) ^ cpu.GetVDE( vm+dd, 0, U64() )) );
};

op vext_8i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: vn0[4]: vd0[4]: imm[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vext_8i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vext_8i.var reject : {Reject} = {(vd0 | vm0 | vn0) & q or imm>>3 & ~q};

vext_8i.disasm = {
  buffer << "vext.8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vfma_f32v( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1100[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vfma_f32v.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vfma_f32v.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vfma_f32v.disasm = {
  buffer << "vfma.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vfms_f32v( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1100[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vfms_f32v.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vfms_f32v.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vfms_f32v.disasm = {
  buffer << "vfms.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vhadd_s8( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vhadd_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vhadd_s8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vhadd_s8.disasm = {
  buffer << "vhadd.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vhadd_s16( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vhadd_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vhadd_s16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vhadd_s16.disasm = {
  buffer << "vhadd.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vhadd_s32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vhadd_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vhadd_s32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vhadd_s32.disasm = {
  buffer << "vhadd.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vhadd_u8( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vhadd_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vhadd_u8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vhadd_u8.disasm = {
  buffer << "vhadd.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vhadd_u16( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vhadd_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vhadd_u16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vhadd_u16.disasm = {
  buffer << "vhadd.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vhadd_u32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vhadd_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vhadd_u32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vhadd_u32.disasm = {
  buffer << "vhadd.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vhsub_s8( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vhsub_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vhsub_s8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vhsub_s8.disasm = {
  buffer << "vhsub.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vhsub_s16( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vhsub_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vhsub_s16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vhsub_s16.disasm = {
  buffer << "vhsub.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vhsub_s32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vhsub_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vhsub_s32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vhsub_s32.disasm = {
  buffer << "vhsub.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vhsub_u8( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vhsub_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vhsub_u8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vhsub_u8.disasm = {
  buffer << "vhsub.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vhsub_u16( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vhsub_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vhsub_u16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vhsub_u16.disasm = {
  buffer << "vhsub.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vhsub_u32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vhsub_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vhsub_u32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vhsub_u32.disasm = {
  buffer << "vhsub.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vldms_8( 0b11110100[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: rn[4]: vd0[4]: opcode[4]: 0b00[2]: align[2]: rm[4] );
vldms_8.var vms : {Vms} = {opcode}, vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {(align?4:0) << align};
vldms_8.var reject : {Reject} = {align > (__builtin_ctz(vms.regs)+1) or (vd+vms.regs) > 32};

vldms_8.disasm = {
  buffer << "vld" << (vms.ses ? 1 : int(vms.regs)) << ".8\t" << DisasmBunch(vd, vms.regs) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

vldms_8.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U8 U8;
  unsigned const elements = 8, size = 1;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, alignment);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32(vms.regs*8) : cpu.GetGPR(rm)) );

  if (vms.ses)
    for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
      cpu.SetVDE((vd+idx/elements)%32, idx%elements, U8(cpu.MemRead8(addr + U32(size*idx))));
  else
    for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
      cpu.SetVDE((vd+idx%vms.regs)%32, idx/vms.regs, U8(cpu.MemRead8(addr + U32(size*idx))));
};

op vldms_16( 0b11110100[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: rn[4]: vd0[4]: opcode[4]: 0b01[2]: align[2]: rm[4] );
vldms_16.var vms : {Vms} = {opcode}, vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {(align?4:0) << align};
vldms_16.var reject : {Reject} = {align > (__builtin_ctz(vms.regs)+1) or (vd+vms.regs) > 32};

vldms_16.disasm = {
  buffer << "vld" << (vms.ses ? 1 : int(vms.regs)) << ".16\t" << DisasmBunch(vd, vms.regs) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

vldms_16.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U16 U16;
  unsigned const elements = 4, size = 2;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, alignment);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32(vms.regs*8) : cpu.GetGPR(rm)) );

  if (vms.ses)
    for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
      cpu.SetVDE((vd+idx/elements)%32, idx%elements, U16(cpu.MemRead16(addr + U32(size*idx))));
  else
    for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
      cpu.SetVDE((vd+idx%vms.regs)%32, idx/vms.regs, U16(cpu.MemRead16(addr + U32(size*idx))));
};

op vldms_32( 0b11110100[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: rn[4]: vd0[4]: opcode[4]: 0b10[2]: align[2]: rm[4] );
vldms_32.var vms : {Vms} = {opcode}, vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {(align?4:0) << align};
vldms_32.var reject : {Reject} = {align > (__builtin_ctz(vms.regs)+1) or (vd+vms.regs) > 32};

vldms_32.disasm = {
  buffer << "vld" << (vms.ses ? 1 : int(vms.regs)) << ".32\t" << DisasmBunch(vd, vms.regs) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

vldms_32.execute = {
  typedef typename ARCH::U32 U32;
  unsigned const elements = 2, size = 4;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, alignment);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32(vms.regs*8) : cpu.GetGPR(rm)) );

  if (vms.ses)
    for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
      cpu.SetVDE((vd+idx/elements)%32, idx%elements, U32(cpu.MemRead32(addr + U32(size*idx))));
  else
    for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
      cpu.SetVDE((vd+idx%vms.regs)%32, idx/vms.regs, U32(cpu.MemRead32(addr + U32(size*idx))));
};

op vldms_64( 0b11110100[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: rn[4]: vd0[4]: opcode[4]: 0b11[2]: align[2]: rm[4] );
vldms_64.var vms : {Vms} = {opcode}, vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {(align?4:0) << align};
vldms_64.var reject : {Reject} = {not vms.ses or align > (__builtin_ctz(vms.regs)+1) or (vd+vms.regs) > 32};

vldms_64.disasm = {
  buffer << "vld" << (vms.ses ? 1 : int(vms.regs)) << ".64\t" << DisasmBunch(vd, vms.regs) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

vldms_64.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  unsigned const size = 8;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, alignment);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32(vms.regs*8) : cpu.GetGPR(rm)) );

  U32 endianness = cpu.CPSR().Get(E) * U32(4);

  for (unsigned idx = 0, end = vms.regs; idx < end; ++idx)
    {
      U64 data0( cpu.MemRead32(addr + (U32(size*idx + 0) ^ endianness)) ),
          data1( cpu.MemRead32(addr + (U32(size*idx + 4) ^ endianness)) );
      cpu.SetVDE((vd+idx)%32, 0, U64((data1 << 32) | (data0 << 0)));
    }
};

op vldms2s_8( 0b11110100[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: rn[4]: vd0[4]: rlist[2]: 0b01[2]: 0b00[2]: align[2]: rm[4] );
vldms2s_8.var regs : {unsigned} = {4-rlist}, vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {(align?4:0) << align};
vldms2s_8.var reject : {Reject} = {regs < 2 or align > (__builtin_ctz(regs)+1) or (vd+2*regs) > 33};

vldms2s_8.disasm = {
  buffer << "vld" << int(regs) << ".8\t" << DisasmBunch(vd, regs).dspc(true) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

vldms2s_8.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U8 U8;
  unsigned const elements = 8, size = 1;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, alignment);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32(regs*8) : cpu.GetGPR(rm)) );

  for (unsigned idx = 0, end = regs*elements; idx < end; ++idx)
    cpu.SetVDE((vd+2*(idx%regs))%32, idx/regs, U8(cpu.MemRead8(addr + U32(size*idx))));
};

op vldms2s_16( 0b11110100[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: rn[4]: vd0[4]: rlist[2]: 0b01[2]: 0b01[2]: align[2]: rm[4] );
vldms2s_16.var regs : {unsigned} = {4-rlist}, vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {(align?4:0) << align};
vldms2s_16.var reject : {Reject} = {regs < 2 or align > (__builtin_ctz(regs)+1) or (vd+2*regs) > 33};

vldms2s_16.disasm = {
  buffer << "vld" << int(regs) << ".16\t" << DisasmBunch(vd, regs).dspc(true) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

vldms2s_16.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U16 U16;
  unsigned const elements = 4, size = 2;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, alignment);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32(regs*8) : cpu.GetGPR(rm)) );

  for (unsigned idx = 0, end = regs*elements; idx < end; ++idx)
    cpu.SetVDE((vd+2*(idx%regs))%32, idx/regs, U16(cpu.MemRead16(addr + U32(size*idx))));
};

op vldms2s_32( 0b11110100[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: rn[4]: vd0[4]: rlist[2]: 0b01[2]: 0b10[2]: align[2]: rm[4] );
vldms2s_32.var regs : {unsigned} = {4-rlist}, vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {(align?4:0) << align};
vldms2s_32.var reject : {Reject} = {regs < 2 or align > (__builtin_ctz(regs)+1) or (vd+2*regs) > 33};

vldms2s_32.disasm = {
  buffer << "vld" << int(regs) << ".32\t" << DisasmBunch(vd, regs).dspc(true) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

vldms2s_32.execute = {
  typedef typename ARCH::U32 U32;
  unsigned const elements = 2, size = 4;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, alignment);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32(regs*8) : cpu.GetGPR(rm)) );

  for (unsigned idx = 0, end = regs*elements; idx < end; ++idx)
    cpu.SetVDE((vd+2*(idx%regs))%32, idx/regs, U32(cpu.MemRead32(addr + U32(size*idx))));
};

op vld2_8( 0b11110100[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: rn[4]: vd0[4]: 0b0011[4]: 0b00[2]: align[2]: rm[4] );
vld2_8.var vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {(align?4:0) << align};
vld2_8.var reject : {Reject} = {vd+4 > 32};

vld2_8.disasm = {
  buffer << "vld2.8\t" << DisasmBunch(vd, 4) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

vld2_8.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U8 U8;
  unsigned const elements = 8, size = 1;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, alignment);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32(32) : cpu.GetGPR(rm)) );

  for (unsigned q = 0; q < 2; ++q)
    for (unsigned idx = 0; idx < elements; ++idx)
      for (unsigned reg = 0; reg < 2; ++reg)
        {
          cpu.SetVDE(vd+q+2*reg, idx, U8(cpu.MemRead8(addr))) ;
          addr += U32(size);
        }
};

op vld2_16( 0b11110100[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: rn[4]: vd0[4]: 0b0011[4]: 0b01[2]: align[2]: rm[4] );
vld2_16.var vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {(align?4:0) << align};
vld2_16.var reject : {Reject} = {vd+4 > 32};

vld2_16.disasm = {
  buffer << "vld2.16\t" << DisasmBunch(vd, 4) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

vld2_16.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U16 U16;
  unsigned const elements = 4, size = 2;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, alignment);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32(32) : cpu.GetGPR(rm)) );

  for (unsigned q = 0; q < 2; ++q)
    for (unsigned idx = 0; idx < elements; ++idx)
      for (unsigned reg = 0; reg < 2; ++reg)
        {
          cpu.SetVDE(vd+q+2*reg, idx, U16(cpu.MemRead16(addr))) ;
          addr += U32(size);
        }
};

op vld2_32( 0b11110100[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: rn[4]: vd0[4]: 0b0011[4]: 0b10[2]: align[2]: rm[4] );
vld2_32.var vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {(align?4:0) << align};
vld2_32.var reject : {Reject} = {vd+4 > 32};

vld2_32.disasm = {
  buffer << "vld2.32\t" << DisasmBunch(vd, 4) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

vld2_32.execute = {
  typedef typename ARCH::U32 U32;
  unsigned const elements = 2, size = 4;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, alignment);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32(32) : cpu.GetGPR(rm)) );

  for (unsigned q = 0; q < 2; ++q)
    for (unsigned idx = 0; idx < elements; ++idx)
      for (unsigned reg = 0; reg < 2; ++reg)
        {
          cpu.SetVDE(vd+q+2*reg, idx, U32(cpu.MemRead32(addr))) ;
          addr += U32(size);
        }
};

op vldal_8( 0b11110100[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: rn[4]: vd0[4]: 0b11[2]: regs[2]: 0b00[2]: ds[1]: align[1]: rm[4] );
vldal_8.var vd : {uint8_t} = {vd1|vd0};

vldal_8.disasm = {
  buffer << "vld" << int(regs+1) << ".8\t" << DisasmBunch(vd,regs+1).dspc(ds).all_lanes() << ", " << DisasmNeonMemoryRR(rn, rm, align?8:0);
};

op vldal_16( 0b11110100[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: rn[4]: vd0[4]: 0b11[2]: regs[2]: 0b01[2]: ds[1]: align[1]: rm[4] );
vldal_16.var vd : {uint8_t} = {vd1|vd0};

vldal_16.disasm = {
  buffer << "vld" << int(regs+1) << ".16\t" << DisasmBunch(vd,regs+1).dspc(ds).all_lanes() << ", " << DisasmNeonMemoryRR(rn, rm, align?16:0);
};

op vldal_32( 0b11110100[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: rn[4]: vd0[4]: 0b11[2]: regs[2]: 0b10[2]: ds[1]: align[1]: rm[4] );
vldal_32.var vd : {uint8_t} = {vd1|vd0};

vldal_32.disasm = {
  buffer << "vld" << int(regs+1) << ".32\t" << DisasmBunch(vd,regs+1).dspc(ds).all_lanes() << ", " << DisasmNeonMemoryRR(rn, rm, align?32:0);
};

op vldqal_8( 0b11110100[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: rn[4]: vd0[4]: 0b1100[4]: 0b00[2]: 0b1[1]: align[1]: rm[4] );
vldqal_8.var vd : {uint8_t} = {vd1|vd0};
vldqal_8.var reject : {Reject} = {align or vd > 30};

vldqal_8.disasm = {
  buffer << "vld1.8\t" << DisasmBunch(vd,2).all_lanes() << ", " << DisasmNeonMemoryRR(rn, rm, align?8:0);
};

vldqal_8.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U8 U8;
  unsigned const elements = 8, size = 1;

  U32 addr( cpu.GetGPR(rn) );

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32(size) : cpu.GetGPR(rm)) );

  U8  data( cpu.MemRead8(addr) );
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0, end = elements; idx < end; ++idx)
      cpu.SetVDE(vd+q, idx, data);
};

op vldqal_16( 0b11110100[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: rn[4]: vd0[4]: 0b1100[4]: 0b01[2]: 0b1[1]: align[1]: rm[4] );
vldqal_16.var vd : {uint8_t} = {vd1|vd0};
vldqal_16.var reject : {Reject} = {vd > 30};

vldqal_16.disasm = {
  buffer << "vld1.16\t" << DisasmBunch(vd,2).all_lanes() << ", " << DisasmNeonMemoryRR(rn, rm, align?16:0);
};

vldqal_16.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U16 U16;
  unsigned const elements = 4, size = 2;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, align*size);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32(size) : cpu.GetGPR(rm)) );

  U16  data( cpu.MemRead16(addr) );
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0, end = elements; idx < end; ++idx)
      cpu.SetVDE(vd+q, idx, data);
};

op vldqal_32( 0b11110100[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: rn[4]: vd0[4]: 0b1100[4]: 0b10[2]: 0b1[1]: align[1]: rm[4] );
vldqal_32.var vd : {uint8_t} = {vd1|vd0};
vldqal_32.var reject : {Reject} = {vd > 30};

vldqal_32.disasm = {
  buffer << "vld1.32\t" << DisasmBunch(vd,2).all_lanes() << ", " << DisasmNeonMemoryRR(rn, rm, align?32:0);
};

vldqal_32.execute = {
  typedef typename ARCH::U32 U32;
  unsigned const elements = 2, size = 4;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, align*size);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32(size) : cpu.GetGPR(rm)) );

  U32  data( cpu.MemRead32(addr) );
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0, end = elements; idx < end; ++idx)
      cpu.SetVDE(vd+q, idx, data);
};

op vldsl_8( 0b11110100[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: rn[4]: vd0[4]: 0b00[2]: regs[2]: part[3]: align[1]: rm[4] );
vldsl_8.var vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {align*(regs+1)};
vldsl_8.var reject : {Reject} = {alignment & (alignment-1)};

vldsl_8.disasm = {
  buffer << "vld" << int(regs+1) << ".8\t" << DisasmBunch(vd, regs+1).lidx(part) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

op vldsl_16( 0b11110100[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: rn[4]: vd0[4]: 0b01[2]: regs[2]: part[2]: ds[1]: align[1]: rm[4] );
vldsl_16.var vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {align*2*(regs+1)};
vldsl_16.var reject : {Reject} = {(ds and regs == 0) or (alignment & (alignment-1))};

vldsl_16.disasm = {
  buffer << "vld" << int(regs+1) << ".16\t" << DisasmBunch(vd, regs+1).dspc(ds).lidx(part) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

op vldsl_32( 0b11110100[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: rn[4]: vd0[4]: 0b10[2]: regs[2]: part[1]: ds[1]: align[2]: rm[4] );
vldsl_32.var vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {align==3 ? 4 : align==2 ? 16 : align==1 ? 8 : 0};
vldsl_32.var reject : {Reject} = {(ds and regs == 0) or ((0x8ec6 >> 4*regs >> align) & 1)};

vldsl_32.disasm = {
  buffer << "vld" << int(regs+1) << ".32\t" << DisasmBunch(vd, regs+1).dspc(ds).lidx(part) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

op vmax_f32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1111[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmax_f32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmax_f32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vmax_f32.disasm = {
  buffer << "vmax.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vmax_s8( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0110[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmax_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmax_s8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vmax_s8.disasm = {
  buffer << "vmax.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vmax_s8.execute = {
  typedef typename ARCH::S8 OP;
  unsigned const elements = 8;

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(Maximum(cpu.GetVDE( vn+dd, idx, OP() ), cpu.GetVDE( vm+dd, idx, OP() ))) );
};

op vmax_s16( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0110[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmax_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmax_s16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vmax_s16.disasm = {
  buffer << "vmax.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vmax_s16.execute = {
  typedef typename ARCH::S16 OP;
  unsigned const elements = 4;

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(Maximum(cpu.GetVDE( vn+dd, idx, OP() ), cpu.GetVDE( vm+dd, idx, OP() ))) );
};

op vmax_s32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0110[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmax_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmax_s32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vmax_s32.disasm = {
  buffer << "vmax.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vmax_s32.execute = {
  typedef typename ARCH::S32 OP;
  unsigned const elements = 2;

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(Maximum(cpu.GetVDE( vn+dd, idx, OP() ), cpu.GetVDE( vm+dd, idx, OP() ))) );
};

op vmax_u8( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0110[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmax_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmax_u8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vmax_u8.disasm = {
  buffer << "vmax.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vmax_u8.execute = {
  typedef typename ARCH::U8 OP;
  unsigned const elements = 8;

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(Maximum(cpu.GetVDE( vn+dd, idx, OP() ), cpu.GetVDE( vm+dd, idx, OP() ))) );
};

op vmax_u16( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0110[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmax_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmax_u16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vmax_u16.disasm = {
  buffer << "vmax.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vmax_u16.execute = {
  typedef typename ARCH::U16 OP;
  unsigned const elements = 4;

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(Maximum(cpu.GetVDE( vn+dd, idx, OP() ), cpu.GetVDE( vm+dd, idx, OP() ))) );
};

op vmax_u32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0110[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmax_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmax_u32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vmax_u32.disasm = {
  buffer << "vmax.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vmax_u32.execute = {
  typedef typename ARCH::U32 OP;
  unsigned const elements = 2;

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(Maximum(cpu.GetVDE( vn+dd, idx, OP() ), cpu.GetVDE( vm+dd, idx, OP() ))) );
};

op vmin_f32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1111[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmin_f32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmin_f32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vmin_f32.disasm = {
  buffer << "vmin.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vmin_s8( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0110[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vmin_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmin_s8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vmin_s8.disasm = {
  buffer << "vmin.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vmin_s8.execute = {
  typedef typename ARCH::S8 OP;
  unsigned const elements = 8;

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(Minimum(cpu.GetVDE( vn+dd, idx, OP() ), cpu.GetVDE( vm+dd, idx, OP() ))) );
};

op vmin_s16( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0110[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vmin_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmin_s16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vmin_s16.disasm = {
  buffer << "vmin.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vmin_s16.execute = {
  typedef typename ARCH::S16 OP;
  unsigned const elements = 4;

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(Minimum(cpu.GetVDE( vn+dd, idx, OP() ), cpu.GetVDE( vm+dd, idx, OP() ))) );
};

op vmin_s32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0110[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vmin_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmin_s32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vmin_s32.disasm = {
  buffer << "vmin.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vmin_s32.execute = {
  typedef typename ARCH::S32 OP;
  unsigned const elements = 2;

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(Minimum(cpu.GetVDE( vn+dd, idx, OP() ), cpu.GetVDE( vm+dd, idx, OP() ))) );
};

op vmin_u8( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0110[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vmin_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmin_u8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vmin_u8.disasm = {
  buffer << "vmin.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vmin_u8.execute = {
  typedef typename ARCH::U8 OP;
  unsigned const elements = 8;

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(Minimum(cpu.GetVDE( vn+dd, idx, OP() ), cpu.GetVDE( vm+dd, idx, OP() ))) );
};

op vmin_u16( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0110[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vmin_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmin_u16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vmin_u16.disasm = {
  buffer << "vmin.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vmin_u16.execute = {
  typedef typename ARCH::U16 OP;
  unsigned const elements = 4;

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(Minimum(cpu.GetVDE( vn+dd, idx, OP() ), cpu.GetVDE( vm+dd, idx, OP() ))) );
};

op vmin_u32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0110[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vmin_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmin_u32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vmin_u32.disasm = {
  buffer << "vmin.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vmin_u32.execute = {
  typedef typename ARCH::U32 OP;
  unsigned const elements = 2;

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(Minimum(cpu.GetVDE( vn+dd, idx, OP() ), cpu.GetVDE( vm+dd, idx, OP() ))) );
};

op vmla_f32v( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1101[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vmla_f32v.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmla_f32v.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vmla_f32v.disasm = {
  buffer << "vmla.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vmla_f32dp( 0b1111001[7]: q[1]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0001[4]: shl<4> vn1[1]: 0b1[1]: part[1]: 0b0[1]: vm[4] );
vmla_f32dp.var vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmla_f32dp.var reject : {Reject} = {(vd0|vn0) & q};

vmla_f32dp.disasm = {
  buffer << "vmla.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vml_i8( 0b1111001[7]: sub[1]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1001[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vml_i8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vml_i8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vml_i8.disasm = {
  buffer << "vml" << (sub?"s":"a") << ".i8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vml_i8.execute = {
  typedef typename ARCH::U8 OP;
  unsigned const elements = 8;

  OP sign(sub?-1:+1);
  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(cpu.GetVDE(vd+dd, idx, OP()) + sign * cpu.GetVDE( vn+dd, idx, OP() ) * cpu.GetVDE( vm+dd, idx, OP() )) );
};

op vml_i16( 0b1111001[7]: sub[1]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1001[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vml_i16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vml_i16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vml_i16.disasm = {
  buffer << "vml" << (sub?"s":"a") << ".i16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vml_i16.execute = {
  typedef typename ARCH::U16 OP;
  unsigned const elements = 4;

  OP sign(sub?-1:+1);
  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(cpu.GetVDE(vd+dd, idx, OP()) + sign * cpu.GetVDE( vn+dd, idx, OP() ) * cpu.GetVDE( vm+dd, idx, OP() )) );
};

op vml_i32( 0b1111001[7]: sub[1]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1001[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vml_i32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vml_i32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vml_i32.disasm = {
  buffer << "vml" << (sub?"s":"a") << ".i32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vml_i32.execute = {
  typedef typename ARCH::U32 OP;
  unsigned const elements = 2;

  OP sign(sub?-1:+1);
  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(cpu.GetVDE(vd+dd, idx, OP()) + sign * cpu.GetVDE( vn+dd, idx, OP() ) * cpu.GetVDE( vm+dd, idx, OP() )) );
};

op vmla_i16dp( 0b1111001[7]: q[1]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0000[4]: shl<4> vn1[1]: 0b1[1]: shl<1> part1[1]: 0b0[1]: part0[1]: vm[3] );
vmla_i16dp.var part : {uint32_t} = {part1|part0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmla_i16dp.var reject : {Reject} = {(vd0|vn0) & q};

vmla_i16dp.disasm = {
  buffer << "vmla.i16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vmla_i32dp( 0b1111001[7]: q[1]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0000[4]: shl<4> vn1[1]: 0b1[1]: part[1]: 0b0[1]: vm[4] );
vmla_i32dp.var vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmla_i32dp.var reject : {Reject} = {(vd0|vn0) & q};

vmla_i32dp.disasm = {
  buffer << "vmla.i32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vmll_s8qd( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b10[2]: sub[1]: 0b0[1]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmll_s8qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmll_s8qd.var reject : {Reject} = {vd0 & 1};

vmll_s8qd.disasm = {
  buffer << "vml" << (sub?"s":"a") << "l.s8\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vmll_s8qd.execute = {
  typedef typename ARCH::S8 OP;
  typedef typename ARCH::S16 WOP;
  unsigned const subs = 4;

  WOP prods[2][subs], sign(sub?-1:+1);
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      prods[q][idx] = sign * WOP( cpu.GetVDE( vn, subs*q+idx, OP() ) ) * WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, WOP(cpu.GetVDE(vd+q, idx, WOP()) + prods[q][idx]) );
};

op vmll_s16qd( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b10[2]: sub[1]: 0b0[1]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmll_s16qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmll_s16qd.var reject : {Reject} = {vd0 & 1};

vmll_s16qd.disasm = {
  buffer << "vml" << (sub?"s":"a") << "l.s16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vmll_s16qd.execute = {
  typedef typename ARCH::S16 OP;
  typedef typename ARCH::S32 WOP;
  unsigned const subs = 2;

  WOP prods[2][subs], sign(sub?-1:+1);
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      prods[q][idx] = sign * WOP( cpu.GetVDE( vn, subs*q+idx, OP() ) ) * WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, WOP(cpu.GetVDE(vd+q, idx, WOP()) + prods[q][idx]) );
};

op vmll_s32qd( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b10[2]: sub[1]: 0b0[1]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmll_s32qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmll_s32qd.var reject : {Reject} = {vd0 & 1};

vmll_s32qd.disasm = {
  buffer << "vml" << (sub?"s":"a") << "l.s32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vmll_s32qd.execute = {
  typedef typename ARCH::S32 OP;
  typedef typename ARCH::S64 WOP;
  unsigned const subs = 1;

  WOP prods[2][subs], sign(sub?-1:+1);
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      prods[q][idx] = sign * WOP( cpu.GetVDE( vn, subs*q+idx, OP() ) ) * WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, WOP(cpu.GetVDE(vd+q, idx, WOP()) + prods[q][idx]) );
};

op vmll_u8qd( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b10[2]: sub[1]: 0b0[1]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmll_u8qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmll_u8qd.var reject : {Reject} = {vd0 & 1};

vmll_u8qd.disasm = {
  buffer << "vml" << (sub?"s":"a") << "l.u8\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vmll_u8qd.execute = {
  typedef typename ARCH::U8 OP;
  typedef typename ARCH::U16 WOP;
  unsigned const subs = 4;

  WOP prods[2][subs], sign(sub?-1:+1);
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      prods[q][idx] = sign * WOP( cpu.GetVDE( vn, subs*q+idx, OP() ) ) * WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, WOP(cpu.GetVDE(vd+q, idx, WOP()) + prods[q][idx]) );
};

op vmll_u16qd( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b10[2]: sub[1]: 0b0[1]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmll_u16qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmll_u16qd.var reject : {Reject} = {vd0 & 1};

vmll_u16qd.disasm = {
  buffer << "vml" << (sub?"s":"a") << "l.u16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vmll_u16qd.execute = {
  typedef typename ARCH::U16 OP;
  typedef typename ARCH::U32 WOP;
  unsigned const subs = 2;

  WOP prods[2][subs], sign(sub?-1:+1);
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      prods[q][idx] = sign * WOP( cpu.GetVDE( vn, subs*q+idx, OP() ) ) * WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, WOP(cpu.GetVDE(vd+q, idx, WOP()) + prods[q][idx]) );
};

op vmll_u32qd( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b10[2]: sub[1]: 0b0[1]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmll_u32qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmll_u32qd.var reject : {Reject} = {vd0 & 1};

vmll_u32qd.disasm = {
  buffer << "vml" << (sub?"s":"a") << "l.u32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vmll_u32qd.execute = {
  typedef typename ARCH::U32 OP;
  typedef typename ARCH::U64 WOP;
  unsigned const subs = 1;

  WOP prods[2][subs], sign(sub?-1:+1);
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      prods[q][idx] = sign * WOP( cpu.GetVDE( vn, subs*q+idx, OP() ) ) * WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, WOP(cpu.GetVDE(vd+q, idx, WOP()) + prods[q][idx]) );
};

op vmlal_s16qdp( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: 0b1[1]: shl<1> part1[1]: 0b0[1]: part0[1]: vm[3] );
vmlal_s16qdp.var part : {uint32_t} = {part1|part0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmlal_s16qdp.var reject : {Reject} = {vd0 & 1};

vmlal_s16qdp.disasm = {
  buffer << "vmlal.s16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vmlal_s32qdp( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: 0b1[1]: part[1]: 0b0[1]: vm[4] );
vmlal_s32qdp.var vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmlal_s32qdp.var reject : {Reject} = {vd0 & 1};

vmlal_s32qdp.disasm = {
  buffer << "vmlal.s32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vmlal_u16qdp( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: 0b1[1]: shl<1> part1[1]: 0b0[1]: part0[1]: vm[3] );
vmlal_u16qdp.var part : {uint32_t} = {part1|part0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmlal_u16qdp.var reject : {Reject} = {vd0 & 1};

vmlal_u16qdp.disasm = {
  buffer << "vmlal.u16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vmlal_u32qdp( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: 0b1[1]: part[1]: 0b0[1]: vm[4] );
vmlal_u32qdp.var vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmlal_u32qdp.var reject : {Reject} = {vd0 & 1};

vmlal_u32qdp.disasm = {
  buffer << "vmlal.u32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vmls_f16dp( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: 0b1[1]: shl<1> part1[1]: 0b0[1]: part0[1]: vm[3] );
vmls_f16dp.var part : {uint32_t} = {part1|part0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};

vmls_f16dp.disasm = {
  buffer << "vmls.f16\t" << DisasmV(vd, 3) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vmls_f32v( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1101[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vmls_f32v.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmls_f32v.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vmls_f32v.disasm = {
  buffer << "vmls.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vmls_f32dp( 0b1111001[7]: q[1]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: 0b1[1]: part[1]: 0b0[1]: vm[4] );
vmls_f32dp.var vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmls_f32dp.var reject : {Reject} = {(vd0|vn0) & q};

vmls_f32dp.disasm = {
  buffer << "vmls.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vmls_i16dp( 0b1111001[7]: q[1]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: 0b1[1]: shl<1> part1[1]: 0b0[1]: part0[1]: vm[3] );
vmls_i16dp.var part : {uint32_t} = {part1|part0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmls_i16dp.var reject : {Reject} = {(vd0|vn0) & q};

vmls_i16dp.disasm = {
  buffer << "vmls.i16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vmls_i32dp( 0b1111001[7]: q[1]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: 0b1[1]: part[1]: 0b0[1]: vm[4] );
vmls_i32dp.var vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmls_i32dp.var reject : {Reject} = {(vd0|vn0) & q};

vmls_i32dp.disasm = {
  buffer << "vmls.i32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vmlsl_s16qdp( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0110[4]: shl<4> vn1[1]: 0b1[1]: shl<1> part1[1]: 0b0[1]: part0[1]: vm[3] );
vmlsl_s16qdp.var part : {uint32_t} = {part1|part0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmlsl_s16qdp.var reject : {Reject} = {vd0 & 1};

vmlsl_s16qdp.disasm = {
  buffer << "vmlsl.s16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vmlsl_s32qdp( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0110[4]: shl<4> vn1[1]: 0b1[1]: part[1]: 0b0[1]: vm[4] );
vmlsl_s32qdp.var vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmlsl_s32qdp.var reject : {Reject} = {vd0 & 1};

vmlsl_s32qdp.disasm = {
  buffer << "vmlsl.s32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vmlsl_u16qdp( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0110[4]: shl<4> vn1[1]: 0b1[1]: shl<1> part1[1]: 0b0[1]: part0[1]: vm[3] );
vmlsl_u16qdp.var part : {uint32_t} = {part1|part0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmlsl_u16qdp.var reject : {Reject} = {vd0 & 1};

vmlsl_u16qdp.disasm = {
  buffer << "vmlsl.u16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vmlsl_u32qdp( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0110[4]: shl<4> vn1[1]: 0b1[1]: part[1]: 0b0[1]: vm[4] );
vmlsl_u32qdp.var vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmlsl_u32qdp.var reject : {Reject} = {vd0 & 1};

vmlsl_u32qdp.disasm = {
  buffer << "vmlsl.u32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vmov_f32vi( 0b1111[4]: 0b001[3]: n[1]: 0b1[1]: shl<4> vd1[1]: 0b000[3]: exp[3]: vd0[4]: 0b1111[4]: 0b0[1]: q[1]: 0b01[2]: man[4] );
vmov_f32vi.var vd : {uint8_t} = {vd1|vd0}, fpimm : {float} = {(n?-1:1)*(float((0x10+man)<<(exp^4))/128)};
vmov_f32vi.var reject : {Reject} = {vd0 & q};

vmov_f32vi.disasm = {
  buffer << "vmov.f32\t" << DisasmV(vd>>q, 3+q) << ", #" << std::setprecision(10) << fpimm;
};

op vmov_i8i( 0b1111[4]: 0b001[3]: shl<7> imm2[1]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b0[1]: shl<4> imm1[3]: vd0[4]: 0b11100[5]: q[1]: 0b01[2]: imm0[4] );
vmov_i8i.var vd : {unsigned} = {vd1|vd0}, imm : {uint8_t} = {imm2|imm1|imm0};
vmov_i8i.var reject : {Reject} = {vd0 & q};

vmov_i8i.disasm = {
  buffer << "vmov.i8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmI(imm);
};

vmov_i8i.execute = {
  typedef typename ARCH::U8 OP;
  unsigned const elements = 8;

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(imm) );
};

op vmov_i16i( 0b1111[4]: 0b001[3]: shl<7> imm2[1]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b0[1]: shl<4> imm1[3]: vd0[4]: 0b10[2]: shl<3> shift[1]: 0b0[1]: 0b0[1]: q[1]: 0b01[2]: imm0[4] );
vmov_i16i.var vd : {uint8_t} = {vd1|vd0}, imm : {uint16_t} = {(imm2|imm1|imm0) << shift};
vmov_i16i.var reject : {Reject} = {vd0 & q};

vmov_i16i.disasm = {
  buffer << "vmov.i16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmI(imm);
};

vmov_i16i.execute = {
  typedef typename ARCH::U16 OP;
  unsigned const elements = 4;

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(imm) );
};

op vmov_i32i( 0b1111[4]: 0b001[3]: shl<7> imm2[1]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b0[1]: shl<4> imm1[3]: vd0[4]: 0b0[1]: shl<3> shift[2]: 0b0[1]: 0b0[1]: q[1]: 0b01[2]: imm0[4] );
vmov_i32i.var vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {(imm2|imm1|imm0) << shift};
vmov_i32i.var reject : {Reject} = {vd0 & q};

vmov_i32i.disasm = {
  buffer << "vmov.i32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmI(imm);
};

vmov_i32i.execute = {
  typedef typename ARCH::U32 OP;
  unsigned const elements = 2;

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(imm) );
};

op vmov_i64i( 0b1111[4]: 0b001[3]: a[1]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b0[1]: b[1]: c[1]: d[1]: vd0[4]: 0b11100[5]: q[1]: 0b11[2]: e[1]: f[1]: g[1]: h[1] );
vmov_i64i.var vd : {uint8_t} = {vd1|vd0}, imm : {uint64_t} = {((uint64_t(a)<<56)|(uint64_t(b)<<48)|(uint64_t(c)<<40)|(uint64_t(d)<<32)|(uint64_t(e)<<24)|(uint64_t(f)<<16)|(uint64_t(g)<<8)|(uint64_t(h)<<0))*0xff};
vmov_i64i.var reject : {Reject} = {vd0 & q};

vmov_i64i.disasm = {
  buffer << "vmov.i64\t" << DisasmV(vd>>q, 3+q) << ", #0x" << std::hex << std::setfill('0') << std::setw(16) << imm;
};

vmov_i64i.execute = {
  typedef typename ARCH::U64 OP;
  unsigned const elements = 1;

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(imm) );
};

op vmov_i32in( 0b1111[4]: 0b001[3]: shl<7> imm2[1]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b0[1]: shl<4> imm1[3]: vd0[4]: 0b110[3]: shl<3> shift[1]: 0b0[1]: q[1]: 0b01[2]: imm0[4] );
vmov_i32in.var vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {(((imm2|imm1|imm0)+1) << (shift+8))-1};
vmov_i32in.var reject : {Reject} = {vd0 & q};

vmov_i32in.disasm = {
  buffer << "vmov.i32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmI(imm);
};

vmov_i32in.execute = {
  typedef typename ARCH::U32 OP;
  unsigned const elements = 2;

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(imm) );
};

op vmovl_s8( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1000[4]: vd0[4]: 0b1010[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vmovl_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vmovl_s8.var reject : {Reject} = {vd0 & 1};

vmovl_s8.disasm = {
  buffer << "vmovl.s8\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vm, 3);
};

vmovl_s8.execute = {
  typedef typename ARCH::S8 S8;
  typedef typename ARCH::S16 S16;
  unsigned const subs = 4;

  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, S16( cpu.GetVDE( vm, subs*q+idx, S8() ) ) );
};

op vmovl_s16( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: 0b0000[4]: vd0[4]: 0b1010[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vmovl_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vmovl_s16.var reject : {Reject} = {vd0 & 1};

vmovl_s16.disasm = {
  buffer << "vmovl.s16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vm, 3);
};

vmovl_s16.execute = {
  typedef typename ARCH::S16 S16;
  typedef typename ARCH::S32 S32;
  unsigned const subs = 2;

  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, S32( cpu.GetVDE( vm, subs*q+idx, S16() ) ) );
};

op vmovl_s32( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: 0b0000[4]: vd0[4]: 0b1010[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vmovl_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vmovl_s32.var reject : {Reject} = {vd0 & 1};

vmovl_s32.disasm = {
  buffer << "vmovl.s32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vm, 3);
};

vmovl_s32.execute = {
  typedef typename ARCH::S32 S32;
  typedef typename ARCH::S64 S64;
  unsigned const subs = 1;

  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, S64( cpu.GetVDE( vm, subs*q+idx, S32() ) ) );
};

op vmovl_u8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1000[4]: vd0[4]: 0b1010[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vmovl_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vmovl_u8.var reject : {Reject} = {vd0 & 1};

vmovl_u8.disasm = {
  buffer << "vmovl.u8\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vm, 3);
};

vmovl_u8.execute = {
  typedef typename ARCH::U8 U8;
  typedef typename ARCH::U16 U16;
  unsigned const subs = 4;

  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, U16( cpu.GetVDE( vm, subs*q+idx, U8() ) ) );
};

op vmovl_u16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: 0b0000[4]: vd0[4]: 0b1010[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vmovl_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vmovl_u16.var reject : {Reject} = {vd0 & 1};

vmovl_u16.disasm = {
  buffer << "vmovl.u16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vm, 3);
};

vmovl_u16.execute = {
  typedef typename ARCH::U16 U16;
  typedef typename ARCH::U32 U32;
  unsigned const subs = 2;

  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, U32( cpu.GetVDE( vm, subs*q+idx, U16() ) ) );
};

op vmovl_u32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: 0b0000[4]: vd0[4]: 0b1010[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vmovl_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vmovl_u32.var reject : {Reject} = {vd0 & 1};

vmovl_u32.disasm = {
  buffer << "vmovl.u32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vm, 3);
};

vmovl_u32.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  unsigned const subs = 1;

  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, U64( cpu.GetVDE( vm, subs*q+idx, U32() ) ) );
};

op vmovn_i16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0010[4]: vd0[4]: 0b0010[4]: 0b00[2]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmovn_i16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vmovn_i16.var reject : {Reject} = {vm0 & 1};

vmovn_i16.disasm = {
  buffer << "vmovn.i16\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4);
};

vmovn_i16.execute = {
  typedef typename ARCH::U8 UN;
  typedef typename ARCH::U16 UL;
  unsigned const subs = 4;

  // CheckAdvSIMDEnabled();
  UN res[2][subs];
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = UN(cpu.GetVDE( vm+q, idx, UL() ));

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd, subs*q+idx, res[q][idx] );
};

op vmovn_i32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0110[4]: vd0[4]: 0b0010[4]: 0b00[2]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmovn_i32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vmovn_i32.var reject : {Reject} = {vm0 & 1};

vmovn_i32.disasm = {
  buffer << "vmovn.i32\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4);
};

vmovn_i32.execute = {
  typedef typename ARCH::U16 UN;
  typedef typename ARCH::U32 UL;
  unsigned const subs = 2;

  // CheckAdvSIMDEnabled();
  UN res[2][subs];
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = UN(cpu.GetVDE( vm+q, idx, UL() ));

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd, subs*q+idx, res[q][idx] );
};

op vmovn_i64( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1010[4]: vd0[4]: 0b0010[4]: 0b00[2]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmovn_i64.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vmovn_i64.var reject : {Reject} = {vm0 & 1};

vmovn_i64.disasm = {
  buffer << "vmovn.i64\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4);
};

vmovn_i64.execute = {
  typedef typename ARCH::U32 UN;
  typedef typename ARCH::U64 UL;
  unsigned const subs = 1;

  // CheckAdvSIMDEnabled();
  UN res[2][subs];
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = UN(cpu.GetVDE( vm+q, idx, UL() ));

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd, subs*q+idx, res[q][idx] );
};

/* VMOV; move arm core to scalar register */

op vmov_8dr( cond[4]: 0b1110[4]: 0b01[2]: shl<2> index1[1]: 0b0[1]: vd0[4]: rt[4]: 0b1011[4]: shl<4> vd1[1]: index0[2]: 0b1[1]: 0b0000[4] );
vmov_8dr.var vd : {uint8_t} = {vd1|vd0}, index : {uint32_t} = {index1|index0};

vmov_8dr.disasm = {
  buffer << "vmov" << DisasmCondition(cond) << ".8\t" << DisasmV(vd, 3) << DisasmVIdx(index) << ", " << DisasmRegister(rt);
};

vmov_8dr.execute = {
  cpu.SetVDE( vd, index, typename ARCH::U8(cpu.GetGPR(rt)) );
};

op vmov_16dr( cond[4]: 0b1110[4]: 0b00[2]: shl<1> index1[1]: 0b0[1]: vd0[4]: rt[4]: 0b1011[4]: shl<4> vd1[1]: index0[1]: 0b11[2]: 0b0000[4] );
vmov_16dr.var vd : {uint8_t} = {vd1|vd0}, index : {uint32_t} = {index1|index0};

vmov_16dr.disasm = {
  buffer << "vmov" << DisasmCondition(cond) << ".16\t" << DisasmV(vd, 3) << DisasmVIdx(index) << ", " << DisasmRegister(rt);
};

vmov_16dr.execute = {
  cpu.SetVDE( vd, index, typename ARCH::U16(cpu.GetGPR(rt)) );
};

op vmov_32dr( cond[4]: 0b1110[4]: 0b00[2]: index[1]: 0b0[1]: vd0[4]: rt[4]: 0b1011[4]: shl<4> vd1[1]: 0b001[3]: 0b0000[4] );
vmov_32dr.var vd : {uint8_t} = {vd1|vd0};

vmov_32dr.disasm = {
  buffer << "vmov" << DisasmCondition(cond) << ".32\t" << DisasmV(vd, 3) << DisasmVIdx(index) << ", " << DisasmRegister(rt);
};

vmov_32dr.execute = {
  cpu.SetVDE( vd, index, typename ARCH::U32(cpu.GetGPR(rt)) );
};

/* VMOV; move scalar to arm core register */

op vmov_s8rd( cond[4]: 0b1110[4]: 0b01[2]: shl<2> index1[1]: 0b1[1]: vn0[4]: rt[4]: 0b1011[4]: shl<4> vn1[1]: index0[2]: 0b1[1]: 0b0000[4] );
vmov_s8rd.var vn : {uint8_t} = {vn1|vn0}, index : {uint32_t} = {index1|index0};

vmov_s8rd.disasm = {
  buffer << "vmov" << DisasmCondition(cond) << ".s8\t" << DisasmRegister(rt) << ", " << DisasmV(vn, 3) << DisasmVIdx(index);
};

vmov_s8rd.execute = {
  cpu.SetGPR( rt, typename ARCH::U32( cpu.GetVDE( vn, index, typename ARCH::S8() ) ) );
};

op vmov_u8rd( cond[4]: 0b1110[4]: 0b11[2]: shl<2> index1[1]: 0b1[1]: vn0[4]: rt[4]: 0b1011[4]: shl<4> vn1[1]: index0[2]: 0b1[1]: 0b0000[4] );
vmov_u8rd.var vn : {uint8_t} = {vn1|vn0}, index : {uint32_t} = {index1|index0};

vmov_u8rd.disasm = {
  buffer << "vmov" << DisasmCondition(cond) << ".u8\t" << DisasmRegister(rt) << ", " << DisasmV(vn, 3) << DisasmVIdx(index);
};

vmov_u8rd.execute = {
  cpu.SetGPR( rt, typename ARCH::U32( cpu.GetVDE( vn, index, typename ARCH::U8() ) ) );
};

op vmov_s16rd( cond[4]: 0b1110[4]: 0b00[2]: shl<1> index1[1]: 0b1[1]: vn0[4]: rt[4]: 0b1011[4]: shl<4> vn1[1]: index0[1]: 0b11[2]: 0b0000[4] );
vmov_s16rd.var vn : {uint8_t} = {vn1|vn0}, index : {uint32_t} = {index1|index0};

vmov_s16rd.disasm = {
  buffer << "vmov" << DisasmCondition(cond) << ".s16\t" << DisasmRegister(rt) << ", " << DisasmV(vn, 3) << DisasmVIdx(index);
};

vmov_s16rd.execute = {
  cpu.SetGPR( rt, typename ARCH::U32( cpu.GetVDE( vn, index, typename ARCH::S16() ) ) );
};

op vmov_u16rd( cond[4]: 0b1110[4]: 0b10[2]: shl<1> index1[1]: 0b1[1]: vn0[4]: rt[4]: 0b1011[4]: shl<4> vn1[1]: index0[1]: 0b11[2]: 0b0000[4] );
vmov_u16rd.var vn : {uint8_t} = {vn1|vn0}, index : {uint32_t} = {index1|index0};

vmov_u16rd.disasm = {
  buffer << "vmov" << DisasmCondition(cond) << ".u16\t" << DisasmRegister(rt) << ", " << DisasmV(vn, 3) << DisasmVIdx(index);
};

vmov_u16rd.execute = {
  cpu.SetGPR( rt, typename ARCH::U32( cpu.GetVDE( vn, index, typename ARCH::U16() ) ) );
};

op vmov_32rd( cond[4]: 0b1110[4]: 0b0[1]: 0b0[1]: index[1]: 0b1[1]: vn0[4]: rt[4]: 0b1011[4]: shl<4> vn1[1]: 0b001[3]: 0b0000[4] );
vmov_32rd.var vn : {uint8_t} = {vn1|vn0};

vmov_32rd.disasm = {
  buffer << "vmov" << DisasmCondition(cond) << ".32\t" << DisasmRegister(rt) << ", " << DisasmV(vn, 3) << DisasmVIdx(index);
};

vmov_32rd.execute = {
  cpu.SetGPR( rt, cpu.GetVDE( vn, index, typename ARCH::U32() ) );
};

op vmul_f32v( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1101[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vmul_f32v.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmul_f32v.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vmul_f32v.disasm = {
  buffer << "vmul.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vmul_f32dp( 0b1111001[7]: q[1]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1001[4]: shl<4> vn1[1]: 0b1[1]: part[1]: 0b0[1]: vm[4] );
vmul_f32dp.var vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmul_f32dp.var reject : {Reject} = {(vd0|vn0) & q};

vmul_f32dp.disasm = {
  buffer << "vmul.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vmul_i8( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1001[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vmul_i8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmul_i8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vmul_i8.disasm = {
  buffer << "vmul.i8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vmul_i8.execute = {
  typedef typename ARCH::U8 OP;
  unsigned const elements = 8;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(cpu.GetVDE( vn+dd, idx, OP() ) * cpu.GetVDE( vm+dd, idx, OP() )) );
};

op vmul_i16( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1001[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vmul_i16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmul_i16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vmul_i16.disasm = {
  buffer << "vmul.i16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vmul_i16.execute = {
  typedef typename ARCH::U16 OP;
  unsigned const elements = 4;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(cpu.GetVDE( vn+dd, idx, OP() ) * cpu.GetVDE( vm+dd, idx, OP() )) );
};

op vmul_i32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1001[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vmul_i32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmul_i32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vmul_i32.disasm = {
  buffer << "vmul.i32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vmul_i32.execute = {
  typedef typename ARCH::U32 OP;
  unsigned const elements = 2;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(cpu.GetVDE( vn+dd, idx, OP() ) * cpu.GetVDE( vm+dd, idx, OP() )) );
};

op vmul_i16dp( 0b1111001[7]: q[1]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1000[4]: shl<4> vn1[1]: 0b1[1]: shl<1> part1[1]: 0b0[1]: part0[1]: vm[3] );
vmul_i16dp.var part : {uint32_t} = {part1|part0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmul_i16dp.var reject : {Reject} = {(vd0|vn0) & q};

vmul_i16dp.disasm = {
  buffer << "vmul.i16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vmul_i32dp( 0b1111001[7]: q[1]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1000[4]: shl<4> vn1[1]: 0b1[1]: part[1]: 0b0[1]: vm[4] );
vmul_i32dp.var vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmul_i32dp.var reject : {Reject} = {(vd0|vn0) & q};

vmul_i32dp.disasm = {
  buffer << "vmul.i32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vmul_p8( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1001[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vmul_p8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmul_p8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vmul_p8.disasm = {
  buffer << "vmul.p8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vmul_p16( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1001[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vmul_p16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmul_p16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vmul_p16.disasm = {
  buffer << "vmul.p16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vmul_p32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1001[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vmul_p32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmul_p32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vmul_p32.disasm = {
  buffer << "vmul.p32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vmull_p8qd( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1110[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmull_p8qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmull_p8qd.var reject : {Reject} = {vd0 & 1};

vmull_p8qd.disasm = {
  buffer << "vmull.p8\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

// op vmull_p8qd2( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1110[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
// vmull_p8qd2.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
// vmull_p8qd2.var reject : {Reject} = {vd0 & 1};

// vmull_p8qd2.disasm = {
//   buffer << "vmull.p8\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
// };

op vmull_s8( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1100[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmull_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmull_s8.var reject : {Reject} = {vd0 & 1};

vmull_s8.disasm = {
  buffer << "vmull.s8\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vmull_s8.execute = {
  typedef typename ARCH::S8 S8;
  typedef typename ARCH::S16 S16;
  unsigned const subs = 4;

  S16 res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = S16( cpu.GetVDE( vn, subs*q+idx, S8() ) ) * S16( cpu.GetVDE( vm, subs*q+idx, S8() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vmull_s16( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1100[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmull_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmull_s16.var reject : {Reject} = {vd0 & 1};

vmull_s16.disasm = {
  buffer << "vmull.s16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vmull_s16.execute = {
  typedef typename ARCH::S16 S16;
  typedef typename ARCH::S32 S32;
  unsigned const subs = 2;

  S32 res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = S32( cpu.GetVDE( vn, subs*q+idx, S16() ) ) * S32( cpu.GetVDE( vm, subs*q+idx, S16() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vmull_s32( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1100[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmull_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmull_s32.var reject : {Reject} = {vd0 & 1};

vmull_s32.disasm = {
  buffer << "vmull.s32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vmull_s32.execute = {
  typedef typename ARCH::S32 S32;
  typedef typename ARCH::S64 S64;
  unsigned const subs = 1;

  S64 res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = S64( cpu.GetVDE( vn, subs*q+idx, S32() ) ) * S64( cpu.GetVDE( vm, subs*q+idx, S32() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vmull_u8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1100[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmull_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmull_u8.var reject : {Reject} = {vd0 & 1};

vmull_u8.disasm = {
  buffer << "vmull.u8\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vmull_u8.execute = {
  typedef typename ARCH::U8 U8;
  typedef typename ARCH::U16 U16;
  unsigned const subs = 4;

  U16 res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = U16( cpu.GetVDE( vn, subs*q+idx, U8() ) ) * U16( cpu.GetVDE( vm, subs*q+idx, U8() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vmull_u16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1100[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmull_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmull_u16.var reject : {Reject} = {vd0 & 1};

vmull_u16.disasm = {
  buffer << "vmull.u16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vmull_u16.execute = {
  typedef typename ARCH::U16 U16;
  typedef typename ARCH::U32 U32;
  unsigned const subs = 2;

  U32 res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = U32( cpu.GetVDE( vn, subs*q+idx, U16() ) ) * U32( cpu.GetVDE( vm, subs*q+idx, U16() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vmull_u32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1100[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmull_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmull_u32.var reject : {Reject} = {vd0 & 1};

vmull_u32.disasm = {
  buffer << "vmull.u32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vmull_u32.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  unsigned const subs = 1;

  U64 res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = U64( cpu.GetVDE( vn, subs*q+idx, U32() ) ) * U64( cpu.GetVDE( vm, subs*q+idx, U32() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vmull_s16qdp( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1010[4]: shl<4> vn1[1]: 0b1[1]: shl<1> part1[1]: 0b0[1]: part0[1]: vm[3] );
vmull_s16qdp.var part : {uint32_t} = {part1|part0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmull_s16qdp.var reject : {Reject} = {vd0 & 1};

vmull_s16qdp.disasm = {
  buffer << "vmull.s16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vmull_s32qdp( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1010[4]: shl<4> vn1[1]: 0b1[1]: part[1]: 0b0[1]: vm[4] );
vmull_s32qdp.var vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmull_s32qdp.var reject : {Reject} = {vd0 & 1};

vmull_s32qdp.disasm = {
  buffer << "vmull.s32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vmull_u16qdp( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1010[4]: shl<4> vn1[1]: 0b1[1]: shl<1> part1[1]: 0b0[1]: part0[1]: vm[3] );
vmull_u16qdp.var part : {uint32_t} = {part1|part0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmull_u16qdp.var reject : {Reject} = {vd0 & 1};

vmull_u16qdp.disasm = {
  buffer << "vmull.u16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vmull_u32qdp( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1010[4]: shl<4> vn1[1]: 0b1[1]: part[1]: 0b0[1]: vm[4] );
vmull_u32qdp.var vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vmull_u32qdp.var reject : {Reject} = {vd0 & 1};

vmull_u32qdp.disasm = {
  buffer << "vmull.u32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vmvn_i16i( 0b1111[4]: 0b001[3]: shl<7> imm2[1]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b0[1]: shl<4> imm1[3]: vd0[4]: 0b10[2]: shl<3> shift[1]: 0b0[1]: 0b0[1]: q[1]: 0b11[2]: imm0[4] );
vmvn_i16i.var vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {(imm2|imm1|imm0) << shift};
vmvn_i16i.var reject : {Reject} = {vd0 & q};

vmvn_i16i.disasm = {
  buffer << "vmvn.i16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmI(imm);
};

vmvn_i16i.execute = {
  typedef typename ARCH::U16 OP;
  unsigned const elements = 4;

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(~imm) );
};

op vmvn_i32i( 0b1111[4]: 0b001[3]: shl<7> imm2[1]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b0[1]: shl<4> imm1[3]: vd0[4]: 0b0[1]: shl<3> shift[2]: 0b0[1]: 0b0[1]: q[1]: 0b11[2]: imm0[4] );
vmvn_i32i.var vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {(imm2|imm1|imm0) << shift};
vmvn_i32i.var reject : {Reject} = {vd0 & q};

vmvn_i32i.disasm = {
  buffer << "vmvn.i32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmI(imm);
};

vmvn_i32i.execute = {
  typedef typename ARCH::U32 OP;
  unsigned const elements = 2;

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(~imm) );
};

op vmvn_i32in( 0b1111[4]: 0b001[3]: shl<7> imm2[1]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b0[1]: shl<4> imm1[3]: vd0[4]: 0b110[3]: shl<3> shift[1]: 0b0[1]: q[1]: 0b11[2]: imm0[4] );
vmvn_i32in.var vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {(((imm2|imm1|imm0)+1) << (shift+8))-1};
vmvn_i32in.var reject : {Reject} = {vd0 & q};

vmvn_i32in.disasm = {
  buffer << "vmvn.i32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmI(imm);
};

vmvn_i32in.execute = {
  typedef typename ARCH::U32 OP;
  unsigned const elements = 2;

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(~imm) );
};

op vmvn( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0000[4]: vd0[4]: 0b0101[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vmvn.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vmvn.var reject : {Reject} = {(vd0 | vm0) & q};

vmvn.disasm = {
  buffer << "vmvn\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vneg_f8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0001[4]: vd0[4]: 0b0111[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vneg_f8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vneg_f8.var reject : {Reject} = {(vd0 | vm0) & q};

vneg_f8.disasm = {
  buffer << "vneg.f8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vneg_f16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0101[4]: vd0[4]: 0b0111[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vneg_f16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vneg_f16.var reject : {Reject} = {(vd0 | vm0) & q};

vneg_f16.disasm = {
  buffer << "vneg.f16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vneg_f32v( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1001[4]: vd0[4]: 0b0111[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vneg_f32v.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vneg_f32v.var reject : {Reject} = {(vd0 | vm0) & q};

vneg_f32v.disasm = {
  buffer << "vneg.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vneg_s8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0001[4]: vd0[4]: 0b0011[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vneg_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vneg_s8.var reject : {Reject} = {(vd0 | vm0) & q};

vneg_s8.disasm = {
  buffer << "vneg.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vneg_s8.execute = {
  typedef typename ARCH::S8 OP;
  unsigned const elements = 8;

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(-cpu.GetVDE( vm+dd, idx, OP() )) );
};

op vneg_s16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0101[4]: vd0[4]: 0b0011[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vneg_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vneg_s16.var reject : {Reject} = {(vd0 | vm0) & q};

vneg_s16.disasm = {
  buffer << "vneg.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vneg_s16.execute = {
  typedef typename ARCH::S16 OP;
  unsigned const elements = 4;

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(-cpu.GetVDE( vm+dd, idx, OP() )) );
};

op vneg_s32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1001[4]: vd0[4]: 0b0011[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vneg_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vneg_s32.var reject : {Reject} = {(vd0 | vm0) & q};

vneg_s32.disasm = {
  buffer << "vneg.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vneg_s32.execute = {
  typedef typename ARCH::S32 OP;
  unsigned const elements = 2;

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(-cpu.GetVDE( vm+dd, idx, OP() )) );
};

op vorn( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b11[2]: vn0[4]: vd0[4]: 0b0001[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vorn.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vorn.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vorn.disasm = {
  buffer << "vorn\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vorn.execute = {
  typedef typename ARCH::U64 U64;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    cpu.SetVDE( vd+dd, 0, U64(cpu.GetVDE( vn+dd, 0, U64() ) | ~cpu.GetVDE( vm+dd, 0, U64() )) );
};

op vorr( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0001[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vorr.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vorr.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vorr.disasm = {
  buffer << "vorr\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vorr.execute = {
  typedef typename ARCH::U64 U64;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    cpu.SetVDE( vd+dd, 0, U64(cpu.GetVDE( vn+dd, 0, U64() ) | cpu.GetVDE( vm+dd, 0, U64() )) );
};

op vorr_i16i( 0b1111[4]: 0b001[3]: shl<7> imm2[1]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b0[1]: shl<4> imm1[3]: vd0[4]: 0b10[2]: shl<3> shift[1]: 0b1[1]: 0b0[1]: q[1]: 0b01[2]: imm0[4] );
vorr_i16i.var vd : {uint8_t} = {vd1|vd0}, imm : {uint16_t} = {(imm2|imm1|imm0) << shift};
vorr_i16i.var reject : {Reject} = {vd0 & q};

vorr_i16i.disasm = {
  buffer << "vorr.i16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmI(imm);
};

vorr_i16i.execute = {
  typedef typename ARCH::U16 OP;
  unsigned const elements = 4;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(cpu.GetVDE( vd+dd, idx, OP() ) | OP(imm)) );
};

op vorr_i32i( 0b1111[4]: 0b001[3]: shl<7> imm2[1]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b0[1]: shl<4> imm1[3]: vd0[4]: 0b0[1]: shl<3> shift[2]: 0b1[1]: 0b0[1]: q[1]: 0b01[2]: imm0[4] );
vorr_i32i.var vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {(imm2|imm1|imm0) << shift};
vorr_i32i.var reject : {Reject} = {vd0 & q};

vorr_i32i.disasm = {
  buffer << "vorr.i32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmI(imm);
};

vorr_i32i.execute = {
  typedef typename ARCH::U32 OP;
  unsigned const elements = 2;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(cpu.GetVDE( vd+dd, idx, OP() ) | OP(imm)) );
};

op vpadal_s8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0000[4]: vd0[4]: 0b0110[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vpadal_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vpadal_s8.var reject : {Reject} = {(vd0 | vm0) & q};

vpadal_s8.disasm = {
  buffer << "vpadal.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpadal_s16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0100[4]: vd0[4]: 0b0110[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vpadal_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vpadal_s16.var reject : {Reject} = {(vd0 | vm0) & q};

vpadal_s16.disasm = {
  buffer << "vpadal.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpadal_s32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1000[4]: vd0[4]: 0b0110[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vpadal_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vpadal_s32.var reject : {Reject} = {(vd0 | vm0) & q};

vpadal_s32.disasm = {
  buffer << "vpadal.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpadal_u8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0000[4]: vd0[4]: 0b0110[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vpadal_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vpadal_u8.var reject : {Reject} = {(vd0 | vm0) & q};

vpadal_u8.disasm = {
  buffer << "vpadal.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpadal_u16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0100[4]: vd0[4]: 0b0110[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vpadal_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vpadal_u16.var reject : {Reject} = {(vd0 | vm0) & q};

vpadal_u16.disasm = {
  buffer << "vpadal.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpadal_u32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1000[4]: vd0[4]: 0b0110[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vpadal_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vpadal_u32.var reject : {Reject} = {(vd0 | vm0) & q};

vpadal_u32.disasm = {
  buffer << "vpadal.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpadd_f32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1101[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vpadd_f32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vpadd_f32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vpadd_f32.disasm = {
  buffer << "vpadd.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpadd_i8( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1011[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vpadd_i8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vpadd_i8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q or q};

vpadd_i8.disasm = {
  buffer << "vpadd.i8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vpadd_i8.execute = {
  typedef typename ARCH::U8 U8;
  unsigned const elements = 8;

  U8 res[1<<q][elements];
  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0, end = elements/2; idx < end; ++idx)
      {
        res[dd][idx+  0] = cpu.GetVDE( vn+dd, 2*idx+0, U8() ) + cpu.GetVDE( vn+dd, 2*idx+1, U8() );
        res[dd][idx+end] = cpu.GetVDE( vm+dd, 2*idx+0, U8() ) + cpu.GetVDE( vm+dd, 2*idx+1, U8() );
      }

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, res[dd][idx] );
};

op vpadd_i16( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1011[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vpadd_i16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vpadd_i16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q or q};

vpadd_i16.disasm = {
  buffer << "vpadd.i16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vpadd_i16.execute = {
  typedef typename ARCH::U16 U16;
  unsigned const elements = 4;

  U16 res[1<<q][elements];
  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0, end = elements/2; idx < end; ++idx)
      {
        res[dd][idx+  0] = cpu.GetVDE( vn+dd, 2*idx+0, U16() ) + cpu.GetVDE( vn+dd, 2*idx+1, U16() );
        res[dd][idx+end] = cpu.GetVDE( vm+dd, 2*idx+0, U16() ) + cpu.GetVDE( vm+dd, 2*idx+1, U16() );
      }

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, res[dd][idx] );
};

op vpadd_i32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1011[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vpadd_i32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vpadd_i32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q or q};

vpadd_i32.disasm = {
  buffer << "vpadd.i32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vpadd_i32.execute = {
  typedef typename ARCH::U32 U32;
  unsigned const elements = 2;

  U32 res[1<<q][elements];
  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0, end = elements/2; idx < end; ++idx)
      {
        res[dd][idx+  0] = cpu.GetVDE( vn+dd, 2*idx+0, U32() ) + cpu.GetVDE( vn+dd, 2*idx+1, U32() );
        res[dd][idx+end] = cpu.GetVDE( vm+dd, 2*idx+0, U32() ) + cpu.GetVDE( vm+dd, 2*idx+1, U32() );
      }

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, res[dd][idx] );
};

op vpaddl_s8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0000[4]: vd0[4]: 0b0010[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vpaddl_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vpaddl_s8.var reject : {Reject} = {(vd0 | vm0) & q};

vpaddl_s8.disasm = {
  buffer << "vpaddl.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpaddl_s16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0100[4]: vd0[4]: 0b0010[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vpaddl_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vpaddl_s16.var reject : {Reject} = {(vd0 | vm0) & q};

vpaddl_s16.disasm = {
  buffer << "vpaddl.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpaddl_s32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1000[4]: vd0[4]: 0b0010[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vpaddl_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vpaddl_s32.var reject : {Reject} = {(vd0 | vm0) & q};

vpaddl_s32.disasm = {
  buffer << "vpaddl.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpaddl_u8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0000[4]: vd0[4]: 0b0010[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vpaddl_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vpaddl_u8.var reject : {Reject} = {(vd0 | vm0) & q};

vpaddl_u8.disasm = {
  buffer << "vpaddl.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpaddl_u16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0100[4]: vd0[4]: 0b0010[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vpaddl_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vpaddl_u16.var reject : {Reject} = {(vd0 | vm0) & q};

vpaddl_u16.disasm = {
  buffer << "vpaddl.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpaddl_u32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1000[4]: vd0[4]: 0b0010[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vpaddl_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vpaddl_u32.var reject : {Reject} = {(vd0 | vm0) & q};

vpaddl_u32.disasm = {
  buffer << "vpaddl.u32\t" << DisasmV(vd>>q,3+q) << ", " << DisasmV(vm>>q,3+q);
};

vpaddl_u32.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    cpu.SetVDU( vd+dd, U64(cpu.GetVDE( vm+dd, 0, U32() )) + U64(cpu.GetVDE( vm+dd, 1, U32() )) );
};

op vpmax_f32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1111[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vpmax_f32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vpmax_f32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vpmax_f32.disasm = {
  buffer << "vpmax.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpmax_s8( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vpmax_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vpmax_s8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vpmax_s8.disasm = {
  buffer << "vpmax.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpmax_s16( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vpmax_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vpmax_s16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vpmax_s16.disasm = {
  buffer << "vpmax.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpmax_s32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vpmax_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vpmax_s32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vpmax_s32.disasm = {
  buffer << "vpmax.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpmax_u8( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vpmax_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vpmax_u8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vpmax_u8.disasm = {
  buffer << "vpmax.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpmax_u16( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vpmax_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vpmax_u16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vpmax_u16.disasm = {
  buffer << "vpmax.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpmax_u32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vpmax_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vpmax_u32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vpmax_u32.disasm = {
  buffer << "vpmax.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpmin_f32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1111[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vpmin_f32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vpmin_f32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vpmin_f32.disasm = {
  buffer << "vpmin.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpmin_s8( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vpmin_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vpmin_s8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vpmin_s8.disasm = {
  buffer << "vpmin.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpmin_s16( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vpmin_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vpmin_s16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vpmin_s16.disasm = {
  buffer << "vpmin.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpmin_s32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vpmin_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vpmin_s32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vpmin_s32.disasm = {
  buffer << "vpmin.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpmin_u8( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vpmin_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vpmin_u8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vpmin_u8.disasm = {
  buffer << "vpmin.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpmin_u16( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vpmin_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vpmin_u16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vpmin_u16.disasm = {
  buffer << "vpmin.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vpmin_u32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vpmin_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vpmin_u32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vpmin_u32.disasm = {
  buffer << "vpmin.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqabs_s8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0000[4]: vd0[4]: 0b0111[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqabs_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqabs_s8.var reject : {Reject} = {(vd0 | vm0) & q};

vqabs_s8.disasm = {
  buffer << "vqabs.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqabs_s16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0100[4]: vd0[4]: 0b0111[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqabs_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqabs_s16.var reject : {Reject} = {(vd0 | vm0) & q};

vqabs_s16.disasm = {
  buffer << "vqabs.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqabs_s32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1000[4]: vd0[4]: 0b0111[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqabs_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqabs_s32.var reject : {Reject} = {(vd0 | vm0) & q};

vqabs_s32.disasm = {
  buffer << "vqabs.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqadd_s8( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqadd_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqadd_s8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqadd_s8.disasm = {
  buffer << "vqadd.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqadd_s16( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqadd_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqadd_s16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqadd_s16.disasm = {
  buffer << "vqadd.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqadd_s32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqadd_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqadd_s32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqadd_s32.disasm = {
  buffer << "vqadd.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqadd_s64( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b11[2]: vn0[4]: vd0[4]: 0b0000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqadd_s64.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqadd_s64.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqadd_s64.disasm = {
  buffer << "vqadd.s64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqadd_u8( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqadd_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqadd_u8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqadd_u8.disasm = {
  buffer << "vqadd.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqadd_u16( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqadd_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqadd_u16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqadd_u16.disasm = {
  buffer << "vqadd.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqadd_u32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqadd_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqadd_u32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqadd_u32.disasm = {
  buffer << "vqadd.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqadd_u64( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b11[2]: vn0[4]: vd0[4]: 0b0000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqadd_u64.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqadd_u64.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqadd_u64.disasm = {
  buffer << "vqadd.u64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqdmlal_s16qd( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1001[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqdmlal_s16qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqdmlal_s16qd.var reject : {Reject} = {vd0 & 1};

vqdmlal_s16qd.disasm = {
  buffer << "vqdmlal.s16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

op vqdmlal_s16qdp( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0011[4]: shl<4> vn1[1]: 0b1[1]: shl<1> part1[1]: 0b0[1]: part0[1]: vm[3] );
vqdmlal_s16qdp.var part : {uint32_t} = {part1|part0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqdmlal_s16qdp.var reject : {Reject} = {vd0 & 1};

vqdmlal_s16qdp.disasm = {
  buffer << "vqdmlal.s16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vqdmlal_s32qd( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1001[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqdmlal_s32qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqdmlal_s32qd.var reject : {Reject} = {vd0 & 1};

vqdmlal_s32qd.disasm = {
  buffer << "vqdmlal.s32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

op vqdmlal_s32qdp( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0011[4]: shl<4> vn1[1]: 0b1[1]: part[1]: 0b0[1]: vm[4] );
vqdmlal_s32qdp.var vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqdmlal_s32qdp.var reject : {Reject} = {vd0 & 1};

vqdmlal_s32qdp.disasm = {
  buffer << "vqdmlal.s32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vqdmlsl_s16qd( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1011[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqdmlsl_s16qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqdmlsl_s16qd.var reject : {Reject} = {vd0 & 1};

vqdmlsl_s16qd.disasm = {
  buffer << "vqdmlsl.s16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

op vqdmlsl_s16qdp( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0111[4]: shl<4> vn1[1]: 0b1[1]: shl<1> part1[1]: 0b0[1]: part0[1]: vm[3] );
vqdmlsl_s16qdp.var part : {uint32_t} = {part1|part0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqdmlsl_s16qdp.var reject : {Reject} = {vd0 & 1};

vqdmlsl_s16qdp.disasm = {
  buffer << "vqdmlsl.s16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vqdmlsl_s32qd( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1011[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqdmlsl_s32qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqdmlsl_s32qd.var reject : {Reject} = {vd0 & 1};

vqdmlsl_s32qd.disasm = {
  buffer << "vqdmlsl.s32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

op vqdmlsl_s32qdp( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0111[4]: shl<4> vn1[1]: 0b1[1]: part[1]: 0b0[1]: vm[4] );
vqdmlsl_s32qdp.var vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqdmlsl_s32qdp.var reject : {Reject} = {vd0 & 1};

vqdmlsl_s32qdp.disasm = {
  buffer << "vqdmlsl.s32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vqdmulh_s16( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1011[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqdmulh_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqdmulh_s16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqdmulh_s16.disasm = {
  buffer << "vqdmulh.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqdmulh_s16dp( 0b1111001[7]: q[1]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1100[4]: shl<4> vn1[1]: 0b1[1]: shl<1> part1[1]: 0b0[1]: part0[1]: vm[3] );
vqdmulh_s16dp.var part : {uint32_t} = {part1|part0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqdmulh_s16dp.var reject : {Reject} = {(vd0|vn0) & q};

vqdmulh_s16dp.disasm = {
  buffer << "vqdmulh.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vqdmulh_s32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1011[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqdmulh_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqdmulh_s32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqdmulh_s32.disasm = {
  buffer << "vqdmulh.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqdmulh_s32dp( 0b1111001[7]: q[1]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1100[4]: shl<4> vn1[1]: 0b1[1]: part[1]: 0b0[1]: vm[4] );
vqdmulh_s32dp.var vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqdmulh_s32dp.var reject : {Reject} = {(vd0|vn0) & q};

vqdmulh_s32dp.disasm = {
  buffer << "vqdmulh.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vqdmull_s16qd( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1101[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqdmull_s16qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqdmull_s16qd.var reject : {Reject} = {vd0 & 1};

vqdmull_s16qd.disasm = {
  buffer << "vqdmull.s16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

op vqdmull_s16qdp( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1011[4]: shl<4> vn1[1]: 0b1[1]: shl<1> part1[1]: 0b0[1]: part0[1]: vm[3] );
vqdmull_s16qdp.var part : {uint32_t} = {part1|part0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqdmull_s16qdp.var reject : {Reject} = {vd0 & 1};

vqdmull_s16qdp.disasm = {
  buffer << "vqdmull.s16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vqdmull_s32qd( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1101[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqdmull_s32qd.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqdmull_s32qd.var reject : {Reject} = {vd0 & 1};

vqdmull_s32qd.disasm = {
  buffer << "vqdmull.s32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

op vqdmull_s32qdp( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1011[4]: shl<4> vn1[1]: 0b1[1]: part[1]: 0b0[1]: vm[4] );
vqdmull_s32qdp.var vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqdmull_s32qdp.var reject : {Reject} = {vd0 & 1};

vqdmull_s32qdp.disasm = {
  buffer << "vqdmull.s32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vqmovn_s16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0010[4]: vd0[4]: 0b0010[4]: 0b10[2]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqmovn_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqmovn_s16.var reject : {Reject} = {vm0 & 1};

vqmovn_s16.disasm = {
  buffer << "vqmovn.s16\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4);
};

op vqmovn_s32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0110[4]: vd0[4]: 0b0010[4]: 0b10[2]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqmovn_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqmovn_s32.var reject : {Reject} = {vm0 & 1};

vqmovn_s32.disasm = {
  buffer << "vqmovn.s32\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4);
};

op vqmovn_s64( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1010[4]: vd0[4]: 0b0010[4]: 0b10[2]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqmovn_s64.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqmovn_s64.var reject : {Reject} = {vm0 & 1};

vqmovn_s64.disasm = {
  buffer << "vqmovn.s64\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4);
};

op vqmovn_u16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0010[4]: vd0[4]: 0b0010[4]: 0b11[2]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqmovn_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqmovn_u16.var reject : {Reject} = {vm0 & 1};

vqmovn_u16.disasm = {
  buffer << "vqmovn.u16\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4);
};

op vqmovn_u32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0110[4]: vd0[4]: 0b0010[4]: 0b11[2]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqmovn_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqmovn_u32.var reject : {Reject} = {vm0 & 1};

vqmovn_u32.disasm = {
  buffer << "vqmovn.u32\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4);
};

op vqmovn_u64( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1010[4]: vd0[4]: 0b0010[4]: 0b11[2]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqmovn_u64.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqmovn_u64.var reject : {Reject} = {vm0 & 1};

vqmovn_u64.disasm = {
  buffer << "vqmovn.u64\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4);
};

op vqmovun_s16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0010[4]: vd0[4]: 0b0010[4]: 0b01[2]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqmovun_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqmovun_s16.var reject : {Reject} = {vm0 & 1};

vqmovun_s16.disasm = {
  buffer << "vqmovun.s16\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4);
};

op vqmovun_s32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0110[4]: vd0[4]: 0b0010[4]: 0b01[2]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqmovun_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqmovun_s32.var reject : {Reject} = {vm0 & 1};

vqmovun_s32.disasm = {
  buffer << "vqmovun.s32\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4);
};

op vqmovun_s64( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1010[4]: vd0[4]: 0b0010[4]: 0b01[2]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqmovun_s64.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqmovun_s64.var reject : {Reject} = {vm0 & 1};

vqmovun_s64.disasm = {
  buffer << "vqmovun.s64\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4);
};

op vqneg_s8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0000[4]: vd0[4]: 0b0111[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqneg_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqneg_s8.var reject : {Reject} = {(vd0 | vm0) & q};

vqneg_s8.disasm = {
  buffer << "vqneg.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqneg_s16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0100[4]: vd0[4]: 0b0111[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqneg_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqneg_s16.var reject : {Reject} = {(vd0 | vm0) & q};

vqneg_s16.disasm = {
  buffer << "vqneg.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqneg_s32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1000[4]: vd0[4]: 0b0111[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqneg_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqneg_s32.var reject : {Reject} = {(vd0 | vm0) & q};

vqneg_s32.disasm = {
  buffer << "vqneg.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqrdmulh_s16( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1011[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqrdmulh_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqrdmulh_s16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqrdmulh_s16.disasm = {
  buffer << "vqrdmulh.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqrdmulh_s16dp( 0b1111001[7]: q[1]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1101[4]: shl<4> vn1[1]: 0b1[1]: shl<1> part1[1]: 0b0[1]: part0[1]: vm[3] );
vqrdmulh_s16dp.var part : {uint32_t} = {part1|part0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqrdmulh_s16dp.var reject : {Reject} = {(vd0|vn0) & q};

vqrdmulh_s16dp.disasm = {
  buffer << "vqrdmulh.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vqrdmulh_s32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1011[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vqrdmulh_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqrdmulh_s32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqrdmulh_s32.disasm = {
  buffer << "vqrdmulh.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqrdmulh_s32dp( 0b1111001[7]: q[1]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1101[4]: shl<4> vn1[1]: 0b1[1]: part[1]: 0b0[1]: vm[4] );
vqrdmulh_s32dp.var vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqrdmulh_s32dp.var reject : {Reject} = {(vd0|vn0) & q};

vqrdmulh_s32dp.disasm = {
  buffer << "vqrdmulh.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm, 3) << DisasmVIdx(part);
};

op vqrshl_s8( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqrshl_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqrshl_s8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqrshl_s8.disasm = {
  buffer << "vqrshl.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vqrshl_s16( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqrshl_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqrshl_s16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqrshl_s16.disasm = {
  buffer << "vqrshl.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vqrshl_s32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqrshl_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqrshl_s32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqrshl_s32.disasm = {
  buffer << "vqrshl.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vqrshl_s64( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b11[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqrshl_s64.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqrshl_s64.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqrshl_s64.disasm = {
  buffer << "vqrshl.s64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vqrshl_u8( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqrshl_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqrshl_u8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqrshl_u8.disasm = {
  buffer << "vqrshl.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vqrshl_u16( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqrshl_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqrshl_u16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqrshl_u16.disasm = {
  buffer << "vqrshl.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vqrshl_u32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqrshl_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqrshl_u32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqrshl_u32.disasm = {
  buffer << "vqrshl.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vqrshl_u64( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b11[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqrshl_u64.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqrshl_u64.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqrshl_u64.disasm = {
  buffer << "vqrshl.u64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vqrshrn_s16dqi( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm_[3]: vd0[4]: 0b1001[4]: 0b01[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqrshrn_s16dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {8-imm_};
vqrshrn_s16dqi.var reject : {Reject} = {vm0 & 1};

vqrshrn_s16dqi.disasm = {
  buffer << "vqrshrn.s16\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vqrshrn_s32dqi( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm_[4]: vd0[4]: 0b1001[4]: 0b01[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqrshrn_s32dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {16-imm_};
vqrshrn_s32dqi.var reject : {Reject} = {vm0 & 1};

vqrshrn_s32dqi.disasm = {
  buffer << "vqrshrn.s32\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vqrshrn_s64dqi( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm_[5]: vd0[4]: 0b1001[4]: 0b01[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqrshrn_s64dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {32-imm_};
vqrshrn_s64dqi.var reject : {Reject} = {vm0 & 1};

vqrshrn_s64dqi.disasm = {
  buffer << "vqrshrn.s64\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vqrshrn_u16dqi( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm_[3]: vd0[4]: 0b1001[4]: 0b01[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqrshrn_u16dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {8-imm_};
vqrshrn_u16dqi.var reject : {Reject} = {vm0 & 1};

vqrshrn_u16dqi.disasm = {
  buffer << "vqrshrn.u16\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vqrshrn_u32dqi( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm_[4]: vd0[4]: 0b1001[4]: 0b01[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqrshrn_u32dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {16-imm_};
vqrshrn_u32dqi.var reject : {Reject} = {vm0 & 1};

vqrshrn_u32dqi.disasm = {
  buffer << "vqrshrn.u32\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vqrshrn_u64dqi( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm_[5]: vd0[4]: 0b1001[4]: 0b01[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqrshrn_u64dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {32-imm_};
vqrshrn_u64dqi.var reject : {Reject} = {vm0 & 1};

vqrshrn_u64dqi.disasm = {
  buffer << "vqrshrn.u64\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vqrshrun_s16dqi( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm_[3]: vd0[4]: 0b1000[4]: 0b01[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqrshrun_s16dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {8-imm_};
vqrshrun_s16dqi.var reject : {Reject} = {vm0 & 1};

vqrshrun_s16dqi.disasm = {
  buffer << "vqrshrun.s16\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vqrshrun_s32dqi( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm_[4]: vd0[4]: 0b1000[4]: 0b01[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqrshrun_s32dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {16-imm_};
vqrshrun_s32dqi.var reject : {Reject} = {vm0 & 1};

vqrshrun_s32dqi.disasm = {
  buffer << "vqrshrun.s32\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vqrshrun_s64dqi( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm_[5]: vd0[4]: 0b1000[4]: 0b01[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqrshrun_s64dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {32-imm_};
vqrshrun_s64dqi.var reject : {Reject} = {vm0 & 1};

vqrshrun_s64dqi.disasm = {
  buffer << "vqrshrun.s64\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vqshl_s8( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshl_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqshl_s8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqshl_s8.disasm = {
  buffer << "vqshl.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vqshl_s8i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm[3]: vd0[4]: 0b0111[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshl_s8i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqshl_s8i.var reject : {Reject} = {(vd0|vm0) & q};

vqshl_s8i.disasm = {
  buffer << "vqshl.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vqshl_s16( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshl_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqshl_s16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqshl_s16.disasm = {
  buffer << "vqshl.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vqshl_s16i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm[4]: vd0[4]: 0b0111[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshl_s16i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqshl_s16i.var reject : {Reject} = {(vd0|vm0) & q};

vqshl_s16i.disasm = {
  buffer << "vqshl.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vqshl_s32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshl_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqshl_s32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqshl_s32.disasm = {
  buffer << "vqshl.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vqshl_s32i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm[5]: vd0[4]: 0b0111[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshl_s32i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqshl_s32i.var reject : {Reject} = {(vd0|vm0) & q};

vqshl_s32i.disasm = {
  buffer << "vqshl.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vqshl_s64( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b11[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshl_s64.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqshl_s64.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqshl_s64.disasm = {
  buffer << "vqshl.s64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vqshl_s64i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: imm[6]: vd0[4]: 0b0111[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshl_s64i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqshl_s64i.var reject : {Reject} = {(vd0|vm0) & q};

vqshl_s64i.disasm = {
  buffer << "vqshl.s64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vqshl_u8( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshl_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqshl_u8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqshl_u8.disasm = {
  buffer << "vqshl.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vqshl_u8i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm[3]: vd0[4]: 0b0111[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshl_u8i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqshl_u8i.var reject : {Reject} = {(vd0|vm0) & q};

vqshl_u8i.disasm = {
  buffer << "vqshl.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vqshl_u16( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshl_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqshl_u16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqshl_u16.disasm = {
  buffer << "vqshl.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vqshl_u16i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm[4]: vd0[4]: 0b0111[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshl_u16i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqshl_u16i.var reject : {Reject} = {(vd0|vm0) & q};

vqshl_u16i.disasm = {
  buffer << "vqshl.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vqshl_u32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshl_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqshl_u32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqshl_u32.disasm = {
  buffer << "vqshl.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vqshl_u32i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm[5]: vd0[4]: 0b0111[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshl_u32i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqshl_u32i.var reject : {Reject} = {(vd0|vm0) & q};

vqshl_u32i.disasm = {
  buffer << "vqshl.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vqshl_u64( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b11[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshl_u64.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqshl_u64.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqshl_u64.disasm = {
  buffer << "vqshl.u64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vqshl_u64i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: imm[6]: vd0[4]: 0b0111[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshl_u64i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqshl_u64i.var reject : {Reject} = {(vd0|vm0) & q};

vqshl_u64i.disasm = {
  buffer << "vqshl.u64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vqshlu_s8i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm[3]: vd0[4]: 0b0110[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshlu_s8i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqshlu_s8i.var reject : {Reject} = {(vd0|vm0) & q};

vqshlu_s8i.disasm = {
  buffer << "vqshlu.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vqshlu_s16i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm[4]: vd0[4]: 0b0110[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshlu_s16i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqshlu_s16i.var reject : {Reject} = {(vd0|vm0) & q};

vqshlu_s16i.disasm = {
  buffer << "vqshlu.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vqshlu_s32i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm[5]: vd0[4]: 0b0110[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshlu_s32i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqshlu_s32i.var reject : {Reject} = {(vd0|vm0) & q};

vqshlu_s32i.disasm = {
  buffer << "vqshlu.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vqshlu_s64i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: imm[6]: vd0[4]: 0b0110[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshlu_s64i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vqshlu_s64i.var reject : {Reject} = {(vd0|vm0) & q};

vqshlu_s64i.disasm = {
  buffer << "vqshlu.s64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vqshrn_s16dqi( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm_[3]: vd0[4]: 0b1001[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshrn_s16dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {8-imm_};
vqshrn_s16dqi.var reject : {Reject} = {vm0 & 1};

vqshrn_s16dqi.disasm = {
  buffer << "vqshrn.s16\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vqshrn_s32dqi( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm_[4]: vd0[4]: 0b1001[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshrn_s32dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {16-imm_};
vqshrn_s32dqi.var reject : {Reject} = {vm0 & 1};

vqshrn_s32dqi.disasm = {
  buffer << "vqshrn.s32\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vqshrn_s64dqi( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm_[5]: vd0[4]: 0b1001[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshrn_s64dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {32-imm_};
vqshrn_s64dqi.var reject : {Reject} = {vm0 & 1};

vqshrn_s64dqi.disasm = {
  buffer << "vqshrn.s64\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vqshrn_u16dqi( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm_[3]: vd0[4]: 0b1001[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshrn_u16dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {8-imm_};
vqshrn_u16dqi.var reject : {Reject} = {vm0 & 1};

vqshrn_u16dqi.disasm = {
  buffer << "vqshrn.u16\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vqshrn_u32dqi( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm_[4]: vd0[4]: 0b1001[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshrn_u32dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {16-imm_};
vqshrn_u32dqi.var reject : {Reject} = {vm0 & 1};

vqshrn_u32dqi.disasm = {
  buffer << "vqshrn.u32\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vqshrn_u64dqi( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm_[5]: vd0[4]: 0b1001[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshrn_u64dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {32-imm_};
vqshrn_u64dqi.var reject : {Reject} = {vm0 & 1};

vqshrn_u64dqi.disasm = {
  buffer << "vqshrn.u64\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vqshrun_s16dqi( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm_[3]: vd0[4]: 0b1000[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshrun_s16dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {8-imm_};
vqshrun_s16dqi.var reject : {Reject} = {vm0 & 1};

vqshrun_s16dqi.disasm = {
  buffer << "vqshrun.s16\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vqshrun_s32dqi( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm_[4]: vd0[4]: 0b1000[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshrun_s32dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {16-imm_};
vqshrun_s32dqi.var reject : {Reject} = {vm0 & 1};

vqshrun_s32dqi.disasm = {
  buffer << "vqshrun.s32\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vqshrun_s64dqi( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm_[5]: vd0[4]: 0b1000[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqshrun_s64dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {32-imm_};
vqshrun_s64dqi.var reject : {Reject} = {vm0 & 1};

vqshrun_s64dqi.disasm = {
  buffer << "vqshrun.s64\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vqsub_s8( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqsub_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqsub_s8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqsub_s8.disasm = {
  buffer << "vqsub.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqsub_s16( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqsub_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqsub_s16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqsub_s16.disasm = {
  buffer << "vqsub.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqsub_s32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqsub_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqsub_s32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqsub_s32.disasm = {
  buffer << "vqsub.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqsub_s64( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b11[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqsub_s64.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqsub_s64.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqsub_s64.disasm = {
  buffer << "vqsub.s64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqsub_u8( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqsub_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqsub_u8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqsub_u8.disasm = {
  buffer << "vqsub.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqsub_u16( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqsub_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqsub_u16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqsub_u16.disasm = {
  buffer << "vqsub.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqsub_u32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqsub_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqsub_u32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqsub_u32.disasm = {
  buffer << "vqsub.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vqsub_u64( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b11[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vqsub_u64.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vqsub_u64.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vqsub_u64.disasm = {
  buffer << "vqsub.u64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vraddhn_i16dq( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vraddhn_i16dq.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vraddhn_i16dq.var reject : {Reject} = {(vn0|vm0) & 1};

vraddhn_i16dq.disasm = {
  buffer << "vraddhn.i16\t" << DisasmV(vd, 3) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm>>1, 4);
};

op vraddhn_i32dq( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vraddhn_i32dq.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vraddhn_i32dq.var reject : {Reject} = {(vn0|vm0) & 1};

vraddhn_i32dq.disasm = {
  buffer << "vraddhn.i32\t" << DisasmV(vd, 3) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm>>1, 4);
};

op vraddhn_i64dq( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vraddhn_i64dq.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vraddhn_i64dq.var reject : {Reject} = {(vn0|vm0) & 1};

vraddhn_i64dq.disasm = {
  buffer << "vraddhn.i64\t" << DisasmV(vd, 3) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm>>1, 4);
};

op vrecpe_f32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1011[4]: vd0[4]: 0b0101[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrecpe_f32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vrecpe_f32.var reject : {Reject} = {(vd0 | vm0) & q};

vrecpe_f32.disasm = {
  buffer << "vrecpe.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vrecpe_u32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1011[4]: vd0[4]: 0b0100[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrecpe_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vrecpe_u32.var reject : {Reject} = {(vd0 | vm0) & q};

vrecpe_u32.disasm = {
  buffer << "vrecpe.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vrecps_f32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1111[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vrecps_f32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vrecps_f32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vrecps_f32.disasm = {
  buffer << "vrecps.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vrev_8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b00[2]: 0b00[2]: vd0[4]: 0b000[3]: op[2]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrev_8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vrev_8.var reject : {Reject} = {(vd0 | vm0) & q or op > 2};

vrev_8.disasm = {
  buffer << "vrev" << (64 >> op) << ".8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vrev_8.execute = {
  typedef typename ARCH::U8 U8;
  unsigned const elements = 8, reverse_mask = (elements-1) >> op;

  U8 res[1<<q][elements];
  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      res[dd][idx] = cpu.GetVDE( vm+dd, idx ^ reverse_mask, U8() );

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, res[dd][idx] );
};

op vrev_16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b01[2]: 0b00[2]: vd0[4]: 0b000[3]: op[2]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrev_16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vrev_16.var reject : {Reject} = {(vd0 | vm0) & q or op > 1};

vrev_16.disasm = {
  buffer << "vrev" << (64 >> op) << ".16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vrev_16.execute = {
  typedef typename ARCH::U16 U16;
  unsigned const elements = 4, reverse_mask = (elements-1) >> op;

  U16 res[1<<q][elements];
  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      res[dd][idx] = cpu.GetVDE( vm+dd, idx ^ reverse_mask, U16() );

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, res[dd][idx] );
};

op vrev_32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b10[2]: 0b00[2]: vd0[4]: 0b000[3]: op[2]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrev_32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vrev_32.var reject : {Reject} = {(vd0 | vm0) & q or op > 0};

vrev_32.disasm = {
  buffer << "vrev" << (64 >> op) << ".32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vrev_32.execute = {
  typedef typename ARCH::U32 U32;
  unsigned const elements = 2, reverse_mask = (elements-1) >> op;

  U32 res[1<<q][elements];
  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      res[dd][idx] = cpu.GetVDE( vm+dd, idx ^ reverse_mask, U32() );

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, res[dd][idx] );
};

op vrhadd_s8( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0001[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrhadd_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vrhadd_s8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vrhadd_s8.disasm = {
  buffer << "vrhadd.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vrhadd_s16( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0001[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrhadd_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vrhadd_s16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vrhadd_s16.disasm = {
  buffer << "vrhadd.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vrhadd_s32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0001[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrhadd_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vrhadd_s32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vrhadd_s32.disasm = {
  buffer << "vrhadd.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vrhadd_u8( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0001[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrhadd_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vrhadd_u8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vrhadd_u8.disasm = {
  buffer << "vrhadd.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vrhadd_u16( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0001[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrhadd_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vrhadd_u16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vrhadd_u16.disasm = {
  buffer << "vrhadd.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vrhadd_u32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0001[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrhadd_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vrhadd_u32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vrhadd_u32.disasm = {
  buffer << "vrhadd.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vrshl_s8( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrshl_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vrshl_s8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vrshl_s8.disasm = {
  buffer << "vrshl.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vrshl_s16( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrshl_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vrshl_s16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vrshl_s16.disasm = {
  buffer << "vrshl.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vrshl_s32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrshl_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vrshl_s32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vrshl_s32.disasm = {
  buffer << "vrshl.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vrshl_s64( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b11[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrshl_s64.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vrshl_s64.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vrshl_s64.disasm = {
  buffer << "vrshl.s64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vrshl_u8( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrshl_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vrshl_u8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vrshl_u8.disasm = {
  buffer << "vrshl.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vrshl_u16( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrshl_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vrshl_u16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vrshl_u16.disasm = {
  buffer << "vrshl.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vrshl_u32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrshl_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vrshl_u32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vrshl_u32.disasm = {
  buffer << "vrshl.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vrshl_u64( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b11[2]: vn0[4]: vd0[4]: 0b0101[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrshl_u64.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vrshl_u64.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vrshl_u64.disasm = {
  buffer << "vrshl.u64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

op vrshr_s8i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm_[3]: vd0[4]: 0b0010[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vrshr_s8i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {8-imm_};
vrshr_s8i.var reject : {Reject} = {(vd0|vm0) & q};

vrshr_s8i.disasm = {
  buffer << "vrshr.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vrshr_s16i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm_[4]: vd0[4]: 0b0010[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vrshr_s16i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {16-imm_};
vrshr_s16i.var reject : {Reject} = {(vd0|vm0) & q};

vrshr_s16i.disasm = {
  buffer << "vrshr.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vrshr_s32i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm_[5]: vd0[4]: 0b0010[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vrshr_s32i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {32-imm_};
vrshr_s32i.var reject : {Reject} = {(vd0 | vm0) & q};

vrshr_s32i.disasm = {
  buffer << "vrshr.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vrshr_s64i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: imm_[6]: vd0[4]: 0b0010[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vrshr_s64i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {64-imm_};
vrshr_s64i.var reject : {Reject} = {(vd0|vm0) & q};

vrshr_s64i.disasm = {
  buffer << "vrshr.s64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vrshr_u8i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm_[3]: vd0[4]: 0b0010[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vrshr_u8i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {8-imm_};
vrshr_u8i.var reject : {Reject} = {(vd0|vm0) & q};

vrshr_u8i.disasm = {
  buffer << "vrshr.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vrshr_u16i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm_[4]: vd0[4]: 0b0010[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vrshr_u16i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {16-imm_};
vrshr_u16i.var reject : {Reject} = {(vd0|vm0) & q};

vrshr_u16i.disasm = {
  buffer << "vrshr.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vrshr_u32i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm_[5]: vd0[4]: 0b0010[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vrshr_u32i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {32-imm_};
vrshr_u32i.var reject : {Reject} = {(vd0 | vm0) & q};

vrshr_u32i.disasm = {
  buffer << "vrshr.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vrshr_u64i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: imm_[6]: vd0[4]: 0b0010[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vrshr_u64i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {64-imm_};
vrshr_u64i.var reject : {Reject} = {(vd0|vm0) & q};

vrshr_u64i.disasm = {
  buffer << "vrshr.u64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vrshrn_i16dqi( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm_[3]: vd0[4]: 0b1000[4]: 0b01[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vrshrn_i16dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {8-imm_};
vrshrn_i16dqi.var reject : {Reject} = {vm0 & 1};

vrshrn_i16dqi.disasm = {
  buffer << "vrshrn.i16\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vrshrn_i32dqi( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm_[4]: vd0[4]: 0b1000[4]: 0b01[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vrshrn_i32dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {16-imm_};
vrshrn_i32dqi.var reject : {Reject} = {vm0 & 1};

vrshrn_i32dqi.disasm = {
  buffer << "vrshrn.i32\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vrshrn_i64dqi( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm_[5]: vd0[4]: 0b1000[4]: 0b01[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vrshrn_i64dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {32-imm_};
vrshrn_i64dqi.var reject : {Reject} = {vm0 & 1};

vrshrn_i64dqi.disasm = {
  buffer << "vrshrn.i64\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vrsqrte_f32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1011[4]: vd0[4]: 0b0101[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrsqrte_f32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vrsqrte_f32.var reject : {Reject} = {(vd0 | vm0) & q};

vrsqrte_f32.disasm = {
  buffer << "vrsqrte.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vrsqrte_u32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1011[4]: vd0[4]: 0b0100[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrsqrte_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vrsqrte_u32.var reject : {Reject} = {(vd0 | vm0) & q};

vrsqrte_u32.disasm = {
  buffer << "vrsqrte.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vrsqrts_f32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1111[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vrsqrts_f32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vrsqrts_f32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vrsqrts_f32.disasm = {
  buffer << "vrsqrts.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vrsra_s8i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm_[3]: vd0[4]: 0b0011[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vrsra_s8i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {8-imm_};
vrsra_s8i.var reject : {Reject} = {(vd0|vm0) & q};

vrsra_s8i.disasm = {
  buffer << "vrsra.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vrsra_s16i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm_[4]: vd0[4]: 0b0011[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vrsra_s16i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {16-imm_};
vrsra_s16i.var reject : {Reject} = {(vd0|vm0) & q};

vrsra_s16i.disasm = {
  buffer << "vrsra.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vrsra_s32i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm_[5]: vd0[4]: 0b0011[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vrsra_s32i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {32-imm_};
vrsra_s32i.var reject : {Reject} = {(vd0 | vm0) & q};

vrsra_s32i.disasm = {
  buffer << "vrsra.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vrsra_s64i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: imm_[6]: vd0[4]: 0b0011[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vrsra_s64i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {64-imm_};
vrsra_s64i.var reject : {Reject} = {(vd0|vm0) & q};

vrsra_s64i.disasm = {
  buffer << "vrsra.s64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vrsra_u8i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm_[3]: vd0[4]: 0b0011[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vrsra_u8i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {8-imm_};
vrsra_u8i.var reject : {Reject} = {(vd0|vm0) & q};

vrsra_u8i.disasm = {
  buffer << "vrsra.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vrsra_u16i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm_[4]: vd0[4]: 0b0011[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vrsra_u16i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {16-imm_};
vrsra_u16i.var reject : {Reject} = {(vd0|vm0) & q};

vrsra_u16i.disasm = {
  buffer << "vrsra.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vrsra_u32i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm_[5]: vd0[4]: 0b0011[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vrsra_u32i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {32-imm_};
vrsra_u32i.var reject : {Reject} = {(vd0 | vm0) & q};

vrsra_u32i.disasm = {
  buffer << "vrsra.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vrsra_u64i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: imm_[6]: vd0[4]: 0b0011[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vrsra_u64i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {64-imm_};
vrsra_u64i.var reject : {Reject} = {(vd0|vm0) & q};

vrsra_u64i.disasm = {
  buffer << "vrsra.u64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vrsubhn_i16dq( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0110[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrsubhn_i16dq.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vrsubhn_i16dq.var reject : {Reject} = {(vn0|vm0) & 1};

vrsubhn_i16dq.disasm = {
  buffer << "vrsubhn.i16\t" << DisasmV(vd, 3) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm>>1, 4);
};

op vrsubhn_i32dq( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0110[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrsubhn_i32dq.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vrsubhn_i32dq.var reject : {Reject} = {(vn0|vm0) & 1};

vrsubhn_i32dq.disasm = {
  buffer << "vrsubhn.i32\t" << DisasmV(vd, 3) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm>>1, 4);
};

op vrsubhn_i64dq( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0110[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vrsubhn_i64dq.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vrsubhn_i64dq.var reject : {Reject} = {(vn0|vm0) & 1};

vrsubhn_i64dq.disasm = {
  buffer << "vrsubhn.i64\t" << DisasmV(vd, 3) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm>>1, 4);
};

op vshl_s8i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm[3]: vd0[4]: 0b0101[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vshl_s8i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vshl_s8i.var reject : {Reject} = {(vd0|vm0) & q};

vshl_s8i.disasm = {
  buffer << "vshl.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

vshl_s8i.execute = {
  typedef typename ARCH::U8 U8;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < 8; ++idx)
      cpu.SetVDE( vd+dd, idx, U8(cpu.GetVDE( vm+dd, idx, U8() ) << imm) );
};

op vshl_s16i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm[4]: vd0[4]: 0b0101[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vshl_s16i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vshl_s16i.var reject : {Reject} = {(vd0|vm0) & q};

vshl_s16i.disasm = {
  buffer << "vshl.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

vshl_s16i.execute = {
  typedef typename ARCH::U16 U16;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < 4; ++idx)
      cpu.SetVDE( vd+dd, idx, U16(cpu.GetVDE( vm+dd, idx, U16() ) << imm) );
};

op vshl_s32i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm[5]: vd0[4]: 0b0101[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vshl_s32i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vshl_s32i.var reject : {Reject} = {(vd0|vm0) & q};

vshl_s32i.disasm = {
  buffer << "vshl.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

vshl_s32i.execute = {
  typedef typename ARCH::U32 U32;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < 2; ++idx)
      cpu.SetVDE( vd+dd, idx, U32(cpu.GetVDE( vm+dd, idx, U32() ) << imm) );
};

op vshl_s64i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: imm[6]: vd0[4]: 0b0101[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vshl_s64i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vshl_s64i.var reject : {Reject} = {(vd0|vm0) & q};

vshl_s64i.disasm = {
  buffer << "vshl.s64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

vshl_s64i.execute = {
  typedef typename ARCH::U64 U64;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < 1; ++idx)
      cpu.SetVDE( vd+dd, idx, U64(cpu.GetVDE( vm+dd, idx, U64() ) << imm) );
};

op vshl_s8( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vshl_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vshl_s8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vshl_s8.disasm = {
  buffer << "vshl.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

vshl_s8.execute = {
  typedef typename ARCH::S8 OP;
  unsigned const elements = 8;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, NeonSHL(cpu, cpu.GetVDE( vm+dd, idx, OP() ), typename ARCH::S8(cpu.GetVDE( vn+dd, idx, OP() ))) );
};

op vshl_s16( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vshl_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vshl_s16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vshl_s16.disasm = {
  buffer << "vshl.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

vshl_s16.execute = {
  typedef typename ARCH::S16 OP;
  unsigned const elements = 4;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, NeonSHL(cpu, cpu.GetVDE( vm+dd, idx, OP() ), typename ARCH::S8(cpu.GetVDE( vn+dd, idx, OP() ))) );
};

op vshl_s32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vshl_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vshl_s32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vshl_s32.disasm = {
  buffer << "vshl.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

vshl_s32.execute = {
  typedef typename ARCH::S32 OP;
  unsigned const elements = 2;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, NeonSHL(cpu, cpu.GetVDE( vm+dd, idx, OP() ), typename ARCH::S8(cpu.GetVDE( vn+dd, idx, OP() ))) );
};

op vshl_s64( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b11[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vshl_s64.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vshl_s64.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vshl_s64.disasm = {
  buffer << "vshl.s64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

vshl_s64.execute = {
  typedef typename ARCH::S64 OP;
  unsigned const elements = 1;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, NeonSHL(cpu, cpu.GetVDE( vm+dd, idx, OP() ), typename ARCH::S8(cpu.GetVDE( vn+dd, idx, OP() ))) );
};

op vshl_u8( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vshl_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vshl_u8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vshl_u8.disasm = {
  buffer << "vshl.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

vshl_u8.execute = {
  typedef typename ARCH::U8 OP;
  unsigned const elements = 8;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, NeonSHL(cpu, cpu.GetVDE( vm+dd, idx, OP() ), typename ARCH::S8(cpu.GetVDE( vn+dd, idx, OP() ))) );
};

op vshl_u16( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vshl_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vshl_u16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vshl_u16.disasm = {
  buffer << "vshl.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

vshl_u16.execute = {
  typedef typename ARCH::U16 OP;
  unsigned const elements = 4;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, NeonSHL(cpu, cpu.GetVDE( vm+dd, idx, OP() ), typename ARCH::S8(cpu.GetVDE( vn+dd, idx, OP() ))) );
};

op vshl_u32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vshl_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vshl_u32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vshl_u32.disasm = {
  buffer << "vshl.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

vshl_u32.execute = {
  typedef typename ARCH::U32 OP;
  unsigned const elements = 2;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, NeonSHL(cpu, cpu.GetVDE( vm+dd, idx, OP() ), typename ARCH::S8(cpu.GetVDE( vn+dd, idx, OP() ))) );
};

op vshl_u64( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b11[2]: vn0[4]: vd0[4]: 0b0100[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vshl_u64.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vshl_u64.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vshl_u64.disasm = {
  buffer << "vshl.u64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q);
};

vshl_u64.execute = {
  typedef typename ARCH::U64 OP;
  unsigned const elements = 1;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, NeonSHL(cpu, cpu.GetVDE( vm+dd, idx, OP() ), typename ARCH::S8(cpu.GetVDE( vn+dd, idx, OP() ))) );
};

op vshll_i8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0010[4]: vd0[4]: 0b0011[4]: 0b00[2]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vshll_i8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vshll_i8.var reject : {Reject} = {vd0 & 1};

vshll_i8.disasm = {
  buffer << "vshll.i8\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vm, 3) << ", #8";
};

vshll_i8.execute = {
  typedef typename ARCH::U8 OP;
  typedef typename ARCH::U16 WOP;
  unsigned const subs = 4;

  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, WOP( WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) ) << 8 ) );
};

op vshll_i16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0110[4]: vd0[4]: 0b0011[4]: 0b00[2]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vshll_i16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vshll_i16.var reject : {Reject} = {vd0 & 1};

vshll_i16.disasm = {
  buffer << "vshll.i16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vm, 3) << ", #16";
};

vshll_i16.execute = {
  typedef typename ARCH::U16 OP;
  typedef typename ARCH::U32 WOP;
  unsigned const subs = 2;

  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, WOP( WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) ) << 16 ) );
};

op vshll_i32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1010[4]: vd0[4]: 0b0011[4]: 0b00[2]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vshll_i32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vshll_i32.var reject : {Reject} = {vd0 & 1};

vshll_i32.disasm = {
  buffer << "vshll.i32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vm, 3) << ", #32";
};

vshll_i32.execute = {
  typedef typename ARCH::U32 OP;
  typedef typename ARCH::U64 WOP;
  unsigned const subs = 1;

  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, WOP( WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) ) << 32 ) );
};

op vshll_s8( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm[3]: vd0[4]: 0b1010[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vshll_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vshll_s8.var reject : {Reject} = {vd0 & 1};

vshll_s8.disasm = {
  buffer << "vshll.s8\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vm, 3) << ", " << DisasmI(imm);
};

vshll_s8.execute = {
  typedef typename ARCH::S8 OP;
  typedef typename ARCH::S16 WOP;
  unsigned const subs = 4;

  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, WOP( WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) ) << imm ) );
};

op vshll_s16( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm[4]: vd0[4]: 0b1010[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vshll_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vshll_s16.var reject : {Reject} = {vd0 & 1};

vshll_s16.disasm = {
  buffer << "vshll.s16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vm, 3) << ", " << DisasmI(imm);
};

vshll_s16.execute = {
  typedef typename ARCH::S16 OP;
  typedef typename ARCH::S32 WOP;
  unsigned const subs = 2;

  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, WOP( WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) ) << imm ) );
};

op vshll_s32( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm[5]: vd0[4]: 0b1010[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vshll_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vshll_s32.var reject : {Reject} = {vd0 & 1};

vshll_s32.disasm = {
  buffer << "vshll.s32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vm, 3) << ", " << DisasmI(imm);
};

vshll_s32.execute = {
  typedef typename ARCH::S32 OP;
  typedef typename ARCH::S64 WOP;
  unsigned const subs = 1;

  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, WOP( WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) ) << imm ) );
};

op vshll_u8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm[3]: vd0[4]: 0b1010[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vshll_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vshll_u8.var reject : {Reject} = {vd0 & 1};

vshll_u8.disasm = {
  buffer << "vshll.u8\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vm, 3) << ", " << DisasmI(imm);
};

vshll_u8.execute = {
  typedef typename ARCH::U8 OP;
  typedef typename ARCH::U16 WOP;
  unsigned const subs = 4;

  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, WOP( WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) ) << imm ) );
};

op vshll_u16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm[4]: vd0[4]: 0b1010[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vshll_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vshll_u16.var reject : {Reject} = {vd0 & 1};

vshll_u16.disasm = {
  buffer << "vshll.u16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vm, 3) << ", " << DisasmI(imm);
};

vshll_u16.execute = {
  typedef typename ARCH::U16 OP;
  typedef typename ARCH::U32 WOP;
  unsigned const subs = 2;

  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, WOP( WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) ) << imm ) );
};

op vshll_u32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm[5]: vd0[4]: 0b1010[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vshll_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vshll_u32.var reject : {Reject} = {vd0 & 1};

vshll_u32.disasm = {
  buffer << "vshll.u32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vm, 3) << ", " << DisasmI(imm);
};

vshll_u32.execute = {
  typedef typename ARCH::U32 OP;
  typedef typename ARCH::U64 WOP;
  unsigned const subs = 1;

  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, WOP( WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) ) << imm ) );
};

op vshr_s8i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm_[3]: vd0[4]: 0b0000[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vshr_s8i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {8-imm_};
vshr_s8i.var reject : {Reject} = {(vd0|vm0) & q};

vshr_s8i.disasm = {
  buffer << "vshr.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

vshr_s8i.execute = {
  typedef typename ARCH::S8 S8;
  unsigned const shift = imm > 7 ? 7 : imm;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < 8; ++idx)
      cpu.SetVDE( vd+dd, idx, S8(cpu.GetVDE( vm+dd, idx, S8() ) >> shift) );
};

op vshr_s16i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm_[4]: vd0[4]: 0b0000[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vshr_s16i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {16-imm_};
vshr_s16i.var reject : {Reject} = {(vd0|vm0) & q};

vshr_s16i.disasm = {
  buffer << "vshr.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

vshr_s16i.execute = {
  typedef typename ARCH::S16 S16;
  unsigned const shift = imm > 15 ? 15 : imm;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < 4; ++idx)
      cpu.SetVDE( vd+dd, idx, S16(cpu.GetVDE( vm+dd, idx, S16() ) >> shift) );
};

op vshr_s32i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm_[5]: vd0[4]: 0b0000[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vshr_s32i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {32-imm_};
vshr_s32i.var reject : {Reject} = {(vd0 | vm0) & q};

vshr_s32i.disasm = {
  buffer << "vshr.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

vshr_s32i.execute = {
  typedef typename ARCH::S32 S32;
  unsigned const shift = imm > 31 ? 31 : imm;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < 2; ++idx)
      cpu.SetVDE( vd+dd, idx, S32(cpu.GetVDE( vm+dd, idx, S32() ) >> shift) );
};

op vshr_s64i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: imm_[6]: vd0[4]: 0b0000[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vshr_s64i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {64-imm_};
vshr_s64i.var reject : {Reject} = {(vd0|vm0) & q};

vshr_s64i.disasm = {
  buffer << "vshr.s64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

vshr_s64i.execute = {
  typedef typename ARCH::S64 S64;
  unsigned const shift = imm > 63 ? 63 : imm;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < 1; ++idx)
      cpu.SetVDE( vd+dd, idx, S64(cpu.GetVDE( vm+dd, idx, S64() ) >> shift) );
};

op vshr_u8i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm_[3]: vd0[4]: 0b0000[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vshr_u8i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {8-imm_};
vshr_u8i.var reject : {Reject} = {(vd0|vm0) & q};

vshr_u8i.disasm = {
  buffer << "vshr.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

vshr_u8i.execute = {
  typedef typename ARCH::U8 U8;
  U8 mask(~(uint8_t(-1) << imm_));

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < 8; ++idx)
      cpu.SetVDE( vd+dd, idx, U8(cpu.GetVDE( vm+dd, idx, U8() ) >> imm & mask) );
};

op vshr_u16i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm_[4]: vd0[4]: 0b0000[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vshr_u16i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {16-imm_};
vshr_u16i.var reject : {Reject} = {(vd0|vm0) & q};

vshr_u16i.disasm = {
  buffer << "vshr.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

vshr_u16i.execute = {
  typedef typename ARCH::U16 U16;
  U16 mask(~(uint16_t(-1) << imm_));

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < 4; ++idx)
      cpu.SetVDE( vd+dd, idx, U16(cpu.GetVDE( vm+dd, idx, U16() ) >> imm & mask) );
};

op vshr_u32i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm_[5]: vd0[4]: 0b0000[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vshr_u32i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {32-imm_};
vshr_u32i.var reject : {Reject} = {(vd0 | vm0) & q};

vshr_u32i.disasm = {
  buffer << "vshr.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

vshr_u32i.execute = {
  typedef typename ARCH::U32 U32;
  U32 mask(~(uint32_t(-1) << imm_));

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < 2; ++idx)
      cpu.SetVDE( vd+dd, idx, U32(cpu.GetVDE( vm+dd, idx, U32() ) >> imm & mask) );
};

op vshr_u64i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: imm_[6]: vd0[4]: 0b0000[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vshr_u64i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {64-imm_};
vshr_u64i.var reject : {Reject} = {(vd0|vm0) & q};

vshr_u64i.disasm = {
  buffer << "vshr.u64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

vshr_u64i.execute = {
  typedef typename ARCH::U64 U64;
  U64 mask(~(uint64_t(-1) << imm_));

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < 1; ++idx)
      cpu.SetVDE( vd+dd, idx, U64(cpu.GetVDE( vm+dd, idx, U64() ) >> imm & mask) );
};

op vshrn_i16dqi( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm_[3]: vd0[4]: 0b1000[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vshrn_i16dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {8-imm_};
vshrn_i16dqi.var reject : {Reject} = {vm0 & 1};

vshrn_i16dqi.disasm = {
  buffer << "vshrn.i16\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vshrn_i32dqi( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm_[4]: vd0[4]: 0b1000[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vshrn_i32dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {16-imm_};
vshrn_i32dqi.var reject : {Reject} = {vm0 & 1};

vshrn_i32dqi.disasm = {
  buffer << "vshrn.i32\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vshrn_i64dqi( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm_[5]: vd0[4]: 0b1000[4]: 0b00[2]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vshrn_i64dqi.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {32-imm_};
vshrn_i64dqi.var reject : {Reject} = {vm0 & 1};

vshrn_i64dqi.disasm = {
  buffer << "vshrn.i64\t" << DisasmV(vd, 3) << ", " << DisasmV(vm>>1, 4) << ", " << DisasmI(imm);
};

op vsli_8i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm[3]: vd0[4]: 0b0101[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vsli_8i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vsli_8i.var reject : {Reject} = {(vd0|vm0) & q};

vsli_8i.disasm = {
  buffer << "vsli.8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vsli_16i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm[4]: vd0[4]: 0b0101[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vsli_16i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vsli_16i.var reject : {Reject} = {(vd0|vm0) & q};

vsli_16i.disasm = {
  buffer << "vsli.16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vsli_32i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm[5]: vd0[4]: 0b0101[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vsli_32i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vsli_32i.var reject : {Reject} = {(vd0|vm0) & q};

vsli_32i.disasm = {
  buffer << "vsli.32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vsli_64i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: imm[6]: vd0[4]: 0b0101[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vsli_64i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vsli_64i.var reject : {Reject} = {(vd0|vm0) & q};

vsli_64i.disasm = {
  buffer << "vsli.64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vsra_s8i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm_[3]: vd0[4]: 0b0001[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vsra_s8i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {8-imm_};
vsra_s8i.var reject : {Reject} = {(vd0|vm0) & q};

vsra_s8i.disasm = {
  buffer << "vsra.s8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vsra_s16i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm_[4]: vd0[4]: 0b0001[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vsra_s16i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {16-imm_};
vsra_s16i.var reject : {Reject} = {(vd0|vm0) & q};

vsra_s16i.disasm = {
  buffer << "vsra.s16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vsra_s32i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm_[5]: vd0[4]: 0b0001[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vsra_s32i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {32-imm_};
vsra_s32i.var reject : {Reject} = {(vd0 | vm0) & q};

vsra_s32i.disasm = {
  buffer << "vsra.s32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vsra_s64i( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: imm_[6]: vd0[4]: 0b0001[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vsra_s64i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {64-imm_};
vsra_s64i.var reject : {Reject} = {(vd0|vm0) & q};

vsra_s64i.disasm = {
  buffer << "vsra.s64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vsra_u8i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm_[3]: vd0[4]: 0b0001[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vsra_u8i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {8-imm_};
vsra_u8i.var reject : {Reject} = {(vd0|vm0) & q};

vsra_u8i.disasm = {
  buffer << "vsra.u8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vsra_u16i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm_[4]: vd0[4]: 0b0001[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vsra_u16i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {16-imm_};
vsra_u16i.var reject : {Reject} = {(vd0|vm0) & q};

vsra_u16i.disasm = {
  buffer << "vsra.u16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vsra_u32i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm_[5]: vd0[4]: 0b0001[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vsra_u32i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {32-imm_};
vsra_u32i.var reject : {Reject} = {(vd0 | vm0) & q};

vsra_u32i.disasm = {
  buffer << "vsra.u32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vsra_u64i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: imm_[6]: vd0[4]: 0b0001[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vsra_u64i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {64-imm_};
vsra_u64i.var reject : {Reject} = {(vd0|vm0) & q};

vsra_u64i.disasm = {
  buffer << "vsra.u64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vsri_8i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: 0b1[1]: imm_[3]: vd0[4]: 0b0100[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vsri_8i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {8-imm_};
vsri_8i.var reject : {Reject} = {(vd0|vm0) & q};

vsri_8i.disasm = {
  buffer << "vsri.8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vsri_16i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: imm_[4]: vd0[4]: 0b0100[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vsri_16i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {16-imm_};
vsri_16i.var reject : {Reject} = {(vd0|vm0) & q};

vsri_16i.disasm = {
  buffer << "vsri.16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vsri_32i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b1[1]: imm_[5]: vd0[4]: 0b0100[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vsri_32i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {32-imm_};
vsri_32i.var reject : {Reject} = {(vd0 | vm0) & q};

vsri_32i.disasm = {
  buffer << "vsri.32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vsri_64i( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: imm_[6]: vd0[4]: 0b0100[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vsri_64i.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, imm : {uint32_t} = {64-imm_};
vsri_64i.var reject : {Reject} = {(vd0|vm0) & q};

vsri_64i.disasm = {
  buffer << "vsri.64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q) << ", " << DisasmI(imm);
};

op vstms_8( 0b11110100[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: rn[4]: vd0[4]: opcode[4]: 0b00[2]: align[2]: rm[4] );
vstms_8.var vms : {Vms} = {opcode}, vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {(align?4:0) << align};
vstms_8.var reject : {Reject} = {align > (__builtin_ctz(vms.regs)+1) or (vd+vms.regs) > 32};

vstms_8.disasm = {
  buffer << "vst" << (vms.ses ? 1 : int(vms.regs)) << ".8\t" << DisasmBunch(vd, vms.regs) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

vstms_8.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U8 U8;
  unsigned const elements = 8, size = 1;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, alignment);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32(vms.regs*8) : cpu.GetGPR(rm)) );

  if (vms.ses)
    for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
      cpu.MemWrite8(addr + U32(size*idx), cpu.GetVDE((vd+idx/elements)%32, idx%elements, U8()));
  else
    for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
      cpu.MemWrite8(addr + U32(size*idx), cpu.GetVDE((vd+idx%vms.regs)%32, idx/vms.regs, U8()));
};

op vstms_16( 0b11110100[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: rn[4]: vd0[4]: opcode[4]: 0b01[2]: align[2]: rm[4] );
vstms_16.var vms : {Vms} = {opcode}, vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {(align?4:0) << align};
vstms_16.var reject : {Reject} = {align > (__builtin_ctz(vms.regs)+1) or (vd+vms.regs) > 32};

vstms_16.disasm = {
  buffer << "vst" << (vms.ses ? 1 : int(vms.regs)) << ".16\t" << DisasmBunch(vd, vms.regs) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

vstms_16.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U16 U16;
  unsigned const elements = 4, size = 2;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, alignment);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32(vms.regs*8) : cpu.GetGPR(rm)) );

  if (vms.ses)
    for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
      cpu.MemWrite16(addr + U32(size*idx), cpu.GetVDE((vd+idx/elements)%32, idx%elements, U16()));
  else
    for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
      cpu.MemWrite16(addr + U32(size*idx), cpu.GetVDE((vd+idx%vms.regs)%32, idx/vms.regs, U16()));
};

op vstms_32( 0b11110100[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: rn[4]: vd0[4]: opcode[4]: 0b10[2]: align[2]: rm[4] );
vstms_32.var vms : {Vms} = {opcode}, vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {(align?4:0) << align};
vstms_32.var reject : {Reject} = {align > (__builtin_ctz(vms.regs)+1) or (vd+vms.regs) > 32};

vstms_32.disasm = {
  buffer << "vst" << (vms.ses ? 1 : int(vms.regs)) << ".32\t" << DisasmBunch(vd, vms.regs) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

vstms_32.execute = {
  typedef typename ARCH::U32 U32;
  unsigned const elements = 2, size = 4;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, alignment);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32(vms.regs*8) : cpu.GetGPR(rm)) );

  if (vms.ses)
    for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
      cpu.MemWrite32(addr + U32(size*idx), cpu.GetVDE((vd+idx/elements)%32, idx%elements, U32()));
  else
    for (unsigned idx = 0, end = vms.regs*elements; idx < end; ++idx)
      cpu.MemWrite32(addr + U32(size*idx), cpu.GetVDE((vd+idx%vms.regs)%32, idx/vms.regs, U32()));
};

op vstms_64( 0b11110100[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: rn[4]: vd0[4]: opcode[4]: 0b11[2]: align[2]: rm[4] );
vstms_64.var vms : {Vms} = {opcode}, vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {(align?4:0) << align};
vstms_64.var reject : {Reject} = {not vms.ses or align > (__builtin_ctz(vms.regs)+1) or (vd+vms.regs) > 32};

vstms_64.disasm = {
  buffer << "vst" << (vms.ses ? 1 : int(vms.regs)) << ".64\t" << DisasmBunch(vd, vms.regs) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

vstms_64.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U64 U64;
  unsigned const size = 8;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, alignment);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32(vms.regs*8) : cpu.GetGPR(rm)) );

  U32 endianness = cpu.CPSR().Get(E) * U32(4);

  for (unsigned idx = 0, end = vms.regs; idx < end; ++idx)
    {
      U64 data = cpu.GetVDE((vd+idx)%32, 0, U64());
      for (unsigned part = 0; part < 2; ++part)
        cpu.MemWrite32(addr + (U32(size*idx + 4*part) ^ endianness), U32(data >> 32*part));
    }
};

op vstms2s_8( 0b11110100[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: rn[4]: vd0[4]: rlist[2]: 0b01[2]: 0b00[2]: align[2]: rm[4] );
vstms2s_8.var regs : {unsigned} = {4-rlist}, vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {(align?4:0) << align};
vstms2s_8.var reject : {Reject} = {regs < 2 or align > (__builtin_ctz(regs)+1) or (vd+2*regs) > 33};

vstms2s_8.disasm = {
  buffer << "vst" << int(regs) << ".8\t" << DisasmBunch(vd, regs).dspc(true) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

vstms2s_8.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U8 U8;
  unsigned const elements = 8, size = 1;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, alignment);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32(regs*8) : cpu.GetGPR(rm)) );

  for (unsigned idx = 0, end = regs*elements; idx < end; ++idx)
    cpu.MemWrite8(addr + U32(size*idx), cpu.GetVDE((vd+2*(idx%regs))%32, idx/regs, U8()));
};

op vstms2s_16( 0b11110100[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: rn[4]: vd0[4]: rlist[2]: 0b01[2]: 0b01[2]: align[2]: rm[4] );
vstms2s_16.var regs : {unsigned} = {4-rlist}, vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {(align?4:0) << align};
vstms2s_16.var reject : {Reject} = {regs < 2 or align > (__builtin_ctz(regs)+1) or (vd+2*regs) > 33};

vstms2s_16.disasm = {
  buffer << "vst" << int(regs) << ".16\t" << DisasmBunch(vd, regs).dspc(true) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

vstms2s_16.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U16 U16;
  unsigned const elements = 4, size = 2;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, alignment);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32(regs*8) : cpu.GetGPR(rm)) );

  for (unsigned idx = 0, end = regs*elements; idx < end; ++idx)
    cpu.MemWrite16(addr + U32(size*idx), cpu.GetVDE((vd+2*(idx%regs))%32, idx/regs, U16()));
};

op vstms2s_32( 0b11110100[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: rn[4]: vd0[4]: rlist[2]: 0b01[2]: 0b10[2]: align[2]: rm[4] );
vstms2s_32.var regs : {unsigned} = {4-rlist}, vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {(align?4:0) << align};
vstms2s_32.var reject : {Reject} = {regs < 2 or align > (__builtin_ctz(regs)+1) or (vd+2*regs) > 33};

vstms2s_32.disasm = {
  buffer << "vst" << int(regs) << ".32\t" << DisasmBunch(vd, regs).dspc(true) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

vstms2s_32.execute = {
  typedef typename ARCH::U32 U32;
  unsigned const elements = 2, size = 4;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, alignment);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32(regs*8) : cpu.GetGPR(rm)) );

  for (unsigned idx = 0, end = regs*elements; idx < end; ++idx)
    cpu.MemWrite32(addr + U32(size*idx), cpu.GetVDE((vd+2*(idx%regs))%32, idx/regs, U32()));
};

op vst2_8( 0b11110100[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: rn[4]: vd0[4]: 0b0011[4]: 0b00[2]: align[2]: rm[4] );
vst2_8.var vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {(align?4:0) << align};
vst2_8.var reject : {Reject} = {vd+4 > 32};

vst2_8.disasm = {
  buffer << "vst2.8\t" << DisasmBunch(vd, 4) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

vst2_8.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U8 U8;
  unsigned const elements = 8, size = 1;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, alignment);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32(32) : cpu.GetGPR(rm)) );

  for (unsigned q = 0; q < 2; ++q)
    for (unsigned idx = 0; idx < elements; ++idx)
      for (unsigned reg = 0; reg < 2; ++reg)
        {
          cpu.MemWrite8(addr, cpu.GetVDE(vd+q+2*reg, idx, U8()));
          addr += U32(size);
        }
};

op vst2_16( 0b11110100[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: rn[4]: vd0[4]: 0b0011[4]: 0b01[2]: align[2]: rm[4] );
vst2_16.var vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {(align?4:0) << align};
vst2_16.var reject : {Reject} = {vd+4 > 32};

vst2_16.disasm = {
  buffer << "vst2.16\t" << DisasmBunch(vd, 4) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

vst2_16.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U16 U16;
  unsigned const elements = 4, size = 2;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, alignment);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32(32) : cpu.GetGPR(rm)) );

  for (unsigned q = 0; q < 2; ++q)
    for (unsigned idx = 0; idx < elements; ++idx)
      for (unsigned reg = 0; reg < 2; ++reg)
        {
          cpu.MemWrite16(addr, cpu.GetVDE(vd+q+2*reg, idx, U16()));
          addr += U32(size);
        }
};

op vst2_32( 0b11110100[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: rn[4]: vd0[4]: 0b0011[4]: 0b10[2]: align[2]: rm[4] );
vst2_32.var vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {(align?4:0) << align};
vst2_32.var reject : {Reject} = {vd+4 > 32};

vst2_32.disasm = {
  buffer << "vst2.32\t" << DisasmBunch(vd, 4) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

vst2_32.execute = {
  typedef typename ARCH::U32 U32;
  unsigned const elements = 2, size = 4;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, alignment);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32(32) : cpu.GetGPR(rm)) );

  for (unsigned q = 0; q < 2; ++q)
    for (unsigned idx = 0; idx < elements; ++idx)
      for (unsigned reg = 0; reg < 2; ++reg)
        {
          cpu.MemWrite32(addr, cpu.GetVDE(vd+q+2*reg, idx, U32()));
          addr += U32(size);
        }
};

op vstsl_8( 0b11110100[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: rn[4]: vd0[4]: 0b00[2]: regs[2]: part[3]: align[1]: rm[4] );
vstsl_8.var vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {align*(regs+1)};
vstsl_8.var reject : {Reject} = {alignment & (alignment-1) or alignment == 1 or (vd+regs) >= 32};

vstsl_8.disasm = {
  buffer << "vst" << int(regs+1) << ".8\t" << DisasmBunch(vd, regs+1).lidx(part) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

vstsl_8.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U8 U8;
  unsigned const size = 1;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, alignment);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32((regs+1)*size) : cpu.GetGPR(rm)) );

  for (unsigned idx = 0; idx <= regs; ++idx)
    cpu.MemWrite8(addr + U32(size*idx), cpu.GetVDE((vd+idx)%32, part, U8()));
};

op vstsl_16( 0b11110100[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: rn[4]: vd0[4]: 0b01[2]: regs[2]: part[2]: ds[1]: align[1]: rm[4] );
vstsl_16.var vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {align*2*(regs+1)};
vstsl_16.var reject : {Reject} = {(ds and regs == 0) or (alignment & (alignment-1)) or (vd+(regs<<ds)) >= 32};

vstsl_16.disasm = {
  buffer << "vst" << int(regs+1) << ".16\t" << DisasmBunch(vd, regs+1).dspc(ds).lidx(part) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

vstsl_16.execute = {
  typedef typename ARCH::U32 U32;
  typedef typename ARCH::U16 U16;
  unsigned const size = 2;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, alignment);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32((regs+1)*size) : cpu.GetGPR(rm)) );

  for (unsigned idx = 0; idx <= regs; ++idx)
    cpu.MemWrite16(addr + U32(size*idx), cpu.GetVDE((vd+(idx<<ds))%32, part, U16()));
};

op vstsl_32( 0b11110100[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: rn[4]: vd0[4]: 0b10[2]: regs[2]: part[1]: ds[1]: align[2]: rm[4] );
vstsl_32.var vd : {uint8_t} = {vd1|vd0}, alignment : {unsigned} = {align==3 ? 4 : align==2 ? 16 : align==1 ? 8 : 0};
vstsl_32.var reject : {Reject} = {(ds and regs == 0) or ((0x8ec6 >> 4*regs >> align) & 1) or (vd+(regs<<ds)) >= 32};

vstsl_32.disasm = {
  buffer << "vst" << int(regs+1) << ".32\t" << DisasmBunch(vd, regs+1).dspc(ds).lidx(part) << ", " << DisasmNeonMemoryRR(rn, rm, 8*alignment);
};

vstsl_32.execute = {
  typedef typename ARCH::U32 U32;
  unsigned const size = 4;

  U32 addr( cpu.GetGPR(rn) );
  cpu.CheckAlignment(addr, alignment);

  if (rm != 15)
    cpu.SetGPR( rn, addr + (rm == 13 ? U32((regs+1)*size) : cpu.GetGPR(rm)) );

  for (unsigned idx = 0; idx <= regs; ++idx)
    cpu.MemWrite32(addr + U32(size*idx), cpu.GetVDE((vd+(idx<<ds))%32, part, U32()));
};

op vsub_f32v( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1101[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vsub_f32v.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vsub_f32v.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vsub_f32v.disasm = {
  buffer << "vsub.f32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vsub_i8( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vsub_i8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vsub_i8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vsub_i8.disasm = {
  buffer << "vsub.i8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vsub_i8.execute = {
  typedef typename ARCH::U8 OP;
  unsigned const elements = 8;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(cpu.GetVDE( vn+dd, idx, OP() ) - cpu.GetVDE( vm+dd, idx, OP() )) );
};

op vsub_i16( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vsub_i16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vsub_i16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vsub_i16.disasm = {
  buffer << "vsub.i16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vsub_i16.execute = {
  typedef typename ARCH::U16 OP;
  unsigned const elements = 4;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(cpu.GetVDE( vn+dd, idx, OP() ) - cpu.GetVDE( vm+dd, idx, OP() )) );
};

op vsub_i32( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vsub_i32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vsub_i32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vsub_i32.disasm = {
  buffer << "vsub.i32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vsub_i32.execute = {
  typedef typename ARCH::U32 OP;
  unsigned const elements = 2;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(cpu.GetVDE( vn+dd, idx, OP() ) - cpu.GetVDE( vm+dd, idx, OP() )) );
};

op vsub_i64( 0b11110011[8]: 0b0[1]: shl<4> vd1[1]: 0b11[2]: vn0[4]: vd0[4]: 0b1000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vsub_i64.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vsub_i64.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vsub_i64.disasm = {
  buffer << "vsub.i64\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vsub_i64.execute = {
  typedef typename ARCH::U64 OP;
  unsigned const elements = 1;

  // CheckAdvSIMDEnabled();
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      cpu.SetVDE( vd+dd, idx, OP(cpu.GetVDE( vn+dd, idx, OP() ) - cpu.GetVDE( vm+dd, idx, OP() )) );
};

op vsubhn_i16dq( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0110[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vsubhn_i16dq.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vsubhn_i16dq.var reject : {Reject} = {(vn0|vm0) & 1};

vsubhn_i16dq.disasm = {
  buffer << "vsubhn.i16\t" << DisasmV(vd, 3) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm>>1, 4);
};

op vsubhn_i32dq( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0110[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vsubhn_i32dq.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vsubhn_i32dq.var reject : {Reject} = {(vn0|vm0) & 1};

vsubhn_i32dq.disasm = {
  buffer << "vsubhn.i32\t" << DisasmV(vd, 3) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm>>1, 4);
};

op vsubhn_i64dq( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0110[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vsubhn_i64dq.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vsubhn_i64dq.var reject : {Reject} = {(vn0|vm0) & 1};

vsubhn_i64dq.disasm = {
  buffer << "vsubhn.i64\t" << DisasmV(vd, 3) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm>>1, 4);
};

op vsubl_s8( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vsubl_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vsubl_s8.var reject : {Reject} = {vd0 & 1};

vsubl_s8.disasm = {
  buffer << "vsubl.s8\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vsubl_s8.execute = {
  typedef typename ARCH::S8 OP;
  typedef typename ARCH::S16 WOP;
  unsigned const subs = 4;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = WOP( cpu.GetVDE( vn, subs*q+idx, OP() ) ) - WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vsubl_s16( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vsubl_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vsubl_s16.var reject : {Reject} = {vd0 & 1};

vsubl_s16.disasm = {
  buffer << "vsubl.s16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vsubl_s16.execute = {
  typedef typename ARCH::S16 OP;
  typedef typename ARCH::S32 WOP;
  unsigned const subs = 2;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = WOP( cpu.GetVDE( vn, subs*q+idx, OP() ) ) - WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vsubl_s32( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vsubl_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vsubl_s32.var reject : {Reject} = {vd0 & 1};

vsubl_s32.disasm = {
  buffer << "vsubl.s32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vsubl_s32.execute = {
  typedef typename ARCH::S32 OP;
  typedef typename ARCH::S64 WOP;
  unsigned const subs = 1;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = WOP( cpu.GetVDE( vn, subs*q+idx, OP() ) ) - WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vsubl_u8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vsubl_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vsubl_u8.var reject : {Reject} = {vd0 & 1};

vsubl_u8.disasm = {
  buffer << "vsubl.u8\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vsubl_u8.execute = {
  typedef typename ARCH::U8 OP;
  typedef typename ARCH::U16 WOP;
  unsigned const subs = 4;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = WOP( cpu.GetVDE( vn, subs*q+idx, OP() ) ) - WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vsubl_u16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vsubl_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vsubl_u16.var reject : {Reject} = {vd0 & 1};

vsubl_u16.disasm = {
  buffer << "vsubl.u16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vsubl_u16.execute = {
  typedef typename ARCH::U16 OP;
  typedef typename ARCH::U32 WOP;
  unsigned const subs = 2;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = WOP( cpu.GetVDE( vn, subs*q+idx, OP() ) ) - WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vsubl_u32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0010[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vsubl_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vsubl_u32.var reject : {Reject} = {vd0 & 1};

vsubl_u32.disasm = {
  buffer << "vsubl.u32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn, 3) << ", " << DisasmV(vm, 3);
};

vsubl_u32.execute = {
  typedef typename ARCH::U32 OP;
  typedef typename ARCH::U64 WOP;
  unsigned const subs = 1;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = WOP( cpu.GetVDE( vn, subs*q+idx, OP() ) ) - WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vsubw_s8( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0011[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vsubw_s8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vsubw_s8.var reject : {Reject} = {(vd0|vn0) & 1};

vsubw_s8.disasm = {
  buffer << "vsubw.s8\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm, 3);
};

vsubw_s8.execute = {
  typedef typename ARCH::S8 OP;
  typedef typename ARCH::S16 WOP;
  unsigned const subs = 4;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = cpu.GetVDE( vn+q, idx, WOP() ) - WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vsubw_s16( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0011[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vsubw_s16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vsubw_s16.var reject : {Reject} = {(vd0|vn0) & 1};

vsubw_s16.disasm = {
  buffer << "vsubw.s16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm, 3);
};

vsubw_s16.execute = {
  typedef typename ARCH::S16 OP;
  typedef typename ARCH::S32 WOP;
  unsigned const subs = 2;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = cpu.GetVDE( vn+q, idx, WOP() ) - WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vsubw_s32( 0b11110010[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0011[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vsubw_s32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vsubw_s32.var reject : {Reject} = {(vd0|vn0) & 1};

vsubw_s32.disasm = {
  buffer << "vsubw.s32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm, 3);
};

vsubw_s32.execute = {
  typedef typename ARCH::S32 OP;
  typedef typename ARCH::S64 WOP;
  unsigned const subs = 1;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = cpu.GetVDE( vn+q, idx, WOP() ) - WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vsubw_u8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b0011[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vsubw_u8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vsubw_u8.var reject : {Reject} = {(vd0|vn0) & 1};

vsubw_u8.disasm = {
  buffer << "vsubw.u8\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm, 3);
};

vsubw_u8.execute = {
  typedef typename ARCH::U8 OP;
  typedef typename ARCH::U16 WOP;
  unsigned const subs = 4;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = cpu.GetVDE( vn+q, idx, WOP() ) - WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vsubw_u16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b0011[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vsubw_u16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vsubw_u16.var reject : {Reject} = {(vd0|vn0) & 1};

vsubw_u16.disasm = {
  buffer << "vsubw.u16\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm, 3);
};

vsubw_u16.execute = {
  typedef typename ARCH::U16 OP;
  typedef typename ARCH::U32 WOP;
  unsigned const subs = 2;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = cpu.GetVDE( vn+q, idx, WOP() ) - WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vsubw_u32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b0011[4]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vsubw_u32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vsubw_u32.var reject : {Reject} = {(vd0|vn0) & 1};

vsubw_u32.disasm = {
  buffer << "vsubw.u32\t" << DisasmV(vd>>1, 4) << ", " << DisasmV(vn>>1, 4) << ", " << DisasmV(vm, 3);
};

vsubw_u32.execute = {
  typedef typename ARCH::U32 OP;
  typedef typename ARCH::U64 WOP;
  unsigned const subs = 1;

  WOP res[2][subs];
  // CheckAdvSIMDEnabled();
  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      res[q][idx] = cpu.GetVDE( vn+q, idx, WOP() ) - WOP( cpu.GetVDE( vm, subs*q+idx, OP() ) );

  for (unsigned q = 0, qe = 2; q < qe; ++q)
    for (unsigned idx = 0; idx < subs; ++idx)
      cpu.SetVDE( vd+q, idx, res[q][idx] );
};

op vswp( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0010[4]: vd0[4]: 0b0000[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vswp.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vswp.var reject : {Reject} = {(vd0 | vm0) & q};

vswp.disasm = {
  buffer << "vswp\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vtbl_8d( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: vn0[4]: vd0[4]: 0b10[2]: regs[2]: shl<4> vn1[1]: 0b0[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vtbl_8d.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vtbl_8d.var reject : {Reject} = {vn+regs >= 32};

vtbl_8d.disasm = {
  buffer << "vtbl.8\t" << DisasmV(vd, 3) << ", {" << DisasmBunch(vn, regs+1) << "}, " << DisasmV(vm, 3);
};

vtbl_8d.execute = {
  typedef typename ARCH::U8 U8;
  for (unsigned e=0; e < 8; e += 1)
    cpu.SetVDE(vd, e, cpu.GetTVU8(vn, 8, regs+1, cpu.GetVDE(vm, e, U8()), U8(0)));
};

op vtbx_8d( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: vn0[4]: vd0[4]: 0b10[2]: regs[2]: shl<4> vn1[1]: 0b1[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vtbx_8d.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vtbx_8d.var reject : {Reject} = {vn+regs >= 32};

vtbx_8d.disasm = {
  buffer << "vtbx.8\t" << DisasmV(vd, 3) << ", {" << DisasmBunch(vn, regs+1) << "}, " << DisasmV(vm, 3);
};

vtbx_8d.execute = {
  typedef typename ARCH::U8 U8;
  for (unsigned e=0; e < 8; e += 1)
    cpu.SetVDE(vd, e, cpu.GetTVU8(vn, 8, regs+1, cpu.GetVDE(vm, e, U8()), cpu.GetVDE(vd, e, U8())));
};

op vtrn_8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0010[4]: vd0[4]: 0b0000[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vtrn_8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vtrn_8.var reject : {Reject} = {(vd0 | vm0) & q};

vtrn_8.disasm = {
  buffer << "vtrn.8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vtrn_16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0110[4]: vd0[4]: 0b0000[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vtrn_16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vtrn_16.var reject : {Reject} = {(vd0 | vm0) & q};

vtrn_16.disasm = {
  buffer << "vtrn.16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vtrn_32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1010[4]: vd0[4]: 0b0000[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vtrn_32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vtrn_32.var reject : {Reject} = {(vd0 | vm0) & q};

vtrn_32.disasm = {
  buffer << "vtrn.32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vtst_i8( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b00[2]: vn0[4]: vd0[4]: 0b1000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vtst_i8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vtst_i8.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vtst_i8.disasm = {
  buffer << "vtst.8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vtst_16( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b01[2]: vn0[4]: vd0[4]: 0b1000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vtst_16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vtst_16.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vtst_16.disasm = {
  buffer << "vtst.16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vtst_32( 0b11110010[8]: 0b0[1]: shl<4> vd1[1]: 0b10[2]: vn0[4]: vd0[4]: 0b1000[4]: shl<4> vn1[1]: q[1]: shl<4> vm1[1]: 0b1[1]: vm0[4] );
vtst_32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0}, vn : {uint8_t} = {vn1|vn0};
vtst_32.var reject : {Reject} = {(vd0 | vm0 | vn0) & q};

vtst_32.disasm = {
  buffer << "vtst.32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vn>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

op vuzp_8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0010[4]: vd0[4]: 0b0001[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vuzp_8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vuzp_8.var reject : {Reject} = {(vd0 | vm0) & q or vd == vm};

vuzp_8.disasm = {
  buffer << "vuzp.8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vuzp_8.execute = {
  typedef typename ARCH::U8 OP;
  unsigned const elements = 8;

  // CheckAdvSIMDEnabled();
  unsigned const pack = elements<<q;
  OP zipped[2*pack];
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        zipped[0*pack+(dd*elements+idx)] = cpu.GetVDE( vd+dd, idx, OP() );
        zipped[1*pack+(dd*elements+idx)] = cpu.GetVDE( vm+dd, idx, OP() );
      }

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        cpu.SetVDE( vd+dd, idx, zipped[2*(dd*elements+idx)+0] );
        cpu.SetVDE( vm+dd, idx, zipped[2*(dd*elements+idx)+1] );
      }
};

op vuzp_16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0110[4]: vd0[4]: 0b0001[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vuzp_16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vuzp_16.var reject : {Reject} = {(vd0 | vm0) & q or vd == vm};

vuzp_16.disasm = {
  buffer << "vuzp.16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vuzp_16.execute = {
  typedef typename ARCH::U16 OP;
  unsigned const elements = 4;

  // CheckAdvSIMDEnabled();
  unsigned const pack = elements<<q;
  OP zipped[2*pack];
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        zipped[0*pack+(dd*elements+idx)] = cpu.GetVDE( vd+dd, idx, OP() );
        zipped[1*pack+(dd*elements+idx)] = cpu.GetVDE( vm+dd, idx, OP() );
      }

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        cpu.SetVDE( vd+dd, idx, zipped[2*(dd*elements+idx)+0] );
        cpu.SetVDE( vm+dd, idx, zipped[2*(dd*elements+idx)+1] );
      }
};

op vuzp_32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1010[4]: vd0[4]: 0b0001[4]: 0b0[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vuzp_32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vuzp_32.var reject : {Reject} = {not q or (vd0 | vm0) & q or vd == vm};

vuzp_32.disasm = {
  buffer << "vuzp.32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vuzp_32.execute = {
  typedef typename ARCH::U32 OP;
  unsigned const elements = 2;

  // CheckAdvSIMDEnabled();
  unsigned const pack = elements<<q;
  OP zipped[2*pack];
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        zipped[0*pack+(dd*elements+idx)] = cpu.GetVDE( vd+dd, idx, OP() );
        zipped[1*pack+(dd*elements+idx)] = cpu.GetVDE( vm+dd, idx, OP() );
      }

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        cpu.SetVDE( vd+dd, idx, zipped[2*(dd*elements+idx)+0] );
        cpu.SetVDE( vm+dd, idx, zipped[2*(dd*elements+idx)+1] );
      }
};

op vzip_8( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0010[4]: vd0[4]: 0b0001[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vzip_8.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vzip_8.var reject : {Reject} = {(vd0 | vm0) & q or vd == vm};

vzip_8.disasm = {
  buffer << "vzip.8\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vzip_8.execute = {
  typedef typename ARCH::U8 OP;
  unsigned const elements = 8;

  // CheckAdvSIMDEnabled();
  unsigned const pack = elements<<q;
  OP zipped[2*pack];
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        zipped[2*(dd*elements+idx)+0] = cpu.GetVDE( vd+dd, idx, OP() );
        zipped[2*(dd*elements+idx)+1] = cpu.GetVDE( vm+dd, idx, OP() );
      }

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        cpu.SetVDE( vd+dd, idx, zipped[0*pack+(dd*elements+idx)] );
        cpu.SetVDE( vm+dd, idx, zipped[1*pack+(dd*elements+idx)] );
      }
};

op vzip_16( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b0110[4]: vd0[4]: 0b0001[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vzip_16.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vzip_16.var reject : {Reject} = {(vd0 | vm0) & q or vd == vm};

vzip_16.disasm = {
  buffer << "vzip.16\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vzip_16.execute = {
  typedef typename ARCH::U16 OP;
  unsigned const elements = 4;

  // CheckAdvSIMDEnabled();
  unsigned const pack = elements<<q;
  OP zipped[2*pack];
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        zipped[2*(dd*elements+idx)+0] = cpu.GetVDE( vd+dd, idx, OP() );
        zipped[2*(dd*elements+idx)+1] = cpu.GetVDE( vm+dd, idx, OP() );
      }

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        cpu.SetVDE( vd+dd, idx, zipped[0*pack+(dd*elements+idx)] );
        cpu.SetVDE( vm+dd, idx, zipped[1*pack+(dd*elements+idx)] );
      }
};

op vzip_32( 0b11110011[8]: 0b1[1]: shl<4> vd1[1]: 0b11[2]: 0b1010[4]: vd0[4]: 0b0001[4]: 0b1[1]: q[1]: shl<4> vm1[1]: 0b0[1]: vm0[4] );
vzip_32.var vm : {uint8_t} = {vm1|vm0}, vd : {uint8_t} = {vd1|vd0};
vzip_32.var reject : {Reject} = {not q or (vd0 | vm0) & q or vd == vm};

vzip_32.disasm = {
  buffer << "vzip.32\t" << DisasmV(vd>>q, 3+q) << ", " << DisasmV(vm>>q, 3+q);
};

vzip_32.execute = {
  typedef typename ARCH::U32 OP;
  unsigned const elements = 2;

  // CheckAdvSIMDEnabled();
  unsigned const pack = elements<<q;
  OP zipped[2*pack];
  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        zipped[2*(dd*elements+idx)+0] = cpu.GetVDE( vd+dd, idx, OP() );
        zipped[2*(dd*elements+idx)+1] = cpu.GetVDE( vm+dd, idx, OP() );
      }

  for (unsigned dd = 0, dde = 1<<q; dd < dde; ++dd)
    for (unsigned idx = 0; idx < elements; ++idx)
      {
        cpu.SetVDE( vd+dd, idx, zipped[0*pack+(dd*elements+idx)] );
        cpu.SetVDE( vm+dd, idx, zipped[1*pack+(dd*elements+idx)] );
      }
};

group neon_cond(vdup8_r,vdup16_r,vdup32_r,vmov_8dr,vmov_16dr,vmov_32dr,vmov_s8rd,vmov_u8rd,vmov_s16rd,vmov_u16rd,vmov_32rd);
unconditional.specialize(neon_cond);

